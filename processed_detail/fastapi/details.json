[
  {
    "id": "fastapi:pdm_build.py:function:pdm_build_initialize:chunk1",
    "text": "def pdm_build_initialize(context: Context) -> None:\n    metadata = context.config.metadata\n    # Get custom config for the current package, from the env var\n    config: Dict[str, Any] = context.config.data[\"tool\"][\"tiangolo\"][\n        \"_internal-slim-build\"\n    ][\"packages\"].get(TIANGOLO_BUILD_PACKAGE)\n    if not config:\n        return\n    project_config: Dict[str, Any] = config[\"project\"]\n    # Override main [project] configs with custom configs for this package\n    for key, value in project_config.items():\n        metadata[key] = value",
    "repo": "fastapi",
    "path": "pdm_build.py",
    "type": "function",
    "name": "pdm_build_initialize",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\additional_responses\\tutorial001.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    id: str\n    value: str",
    "repo": "fastapi",
    "path": "docs_src\\additional_responses\\tutorial001.py",
    "type": "class",
    "name": "Item",
    "loc": 6,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\additional_responses\\tutorial001.py:class:Message:chunk1",
    "text": "class Message(BaseModel):\n    message: str",
    "repo": "fastapi",
    "path": "docs_src\\additional_responses\\tutorial001.py",
    "type": "class",
    "name": "Message",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\additional_responses\\tutorial002.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    id: str\n    value: str",
    "repo": "fastapi",
    "path": "docs_src\\additional_responses\\tutorial002.py",
    "type": "class",
    "name": "Item",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\additional_responses\\tutorial003.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    id: str\n    value: str",
    "repo": "fastapi",
    "path": "docs_src\\additional_responses\\tutorial003.py",
    "type": "class",
    "name": "Item",
    "loc": 6,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\additional_responses\\tutorial003.py:class:Message:chunk1",
    "text": "class Message(BaseModel):\n    message: str",
    "repo": "fastapi",
    "path": "docs_src\\additional_responses\\tutorial003.py",
    "type": "class",
    "name": "Message",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\additional_responses\\tutorial004.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    id: str\n    value: str",
    "repo": "fastapi",
    "path": "docs_src\\additional_responses\\tutorial004.py",
    "type": "class",
    "name": "Item",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\test_main.py:function:test_read_main:chunk1",
    "text": "def test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\test_main.py",
    "type": "function",
    "name": "test_read_main",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\tutorial001.py:function:test_read_main:chunk1",
    "text": "def test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\tutorial001.py",
    "type": "function",
    "name": "test_read_main",
    "loc": 15,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\tutorial002.py:function:test_read_main:chunk1",
    "text": "def test_read_main():\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\tutorial002.py",
    "type": "function",
    "name": "test_read_main",
    "loc": 20,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\tutorial002.py:function:test_websocket:chunk1",
    "text": "def test_websocket():\n    client = TestClient(app)\n    with client.websocket_connect(\"/ws\") as websocket:\n        data = websocket.receive_json()\n        assert data == {\"msg\": \"Hello WebSocket\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\tutorial002.py",
    "type": "function",
    "name": "test_websocket",
    "loc": 27,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\tutorial003.py:function:test_read_items:chunk1",
    "text": "def test_read_items():\n    with TestClient(app) as client:\n        response = client.get(\"/items/foo\")\n        assert response.status_code == 200\n        assert response.json() == {\"name\": \"Fighters\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\tutorial003.py",
    "type": "function",
    "name": "test_read_items",
    "loc": 20,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b\\main.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    id: str\n    title: str\n    description: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b\\main.py",
    "type": "class",
    "name": "Item",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b\\test_main.py:function:test_read_item:chunk1",
    "text": "def test_read_item():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foo\",\n        \"title\": \"Foo\",\n        \"description\": \"There goes my hero\",\n    }",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b\\test_main.py",
    "type": "function",
    "name": "test_read_item",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b\\test_main.py:function:test_read_item_bad_token:chunk1",
    "text": "def test_read_item_bad_token():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"hailhydra\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b\\test_main.py",
    "type": "function",
    "name": "test_read_item_bad_token",
    "loc": 18,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b\\test_main.py:function:test_read_nonexistent_item:chunk1",
    "text": "def test_read_nonexistent_item():\n    response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b\\test_main.py",
    "type": "function",
    "name": "test_read_nonexistent_item",
    "loc": 24,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b\\test_main.py:function:test_create_item:chunk1",
    "text": "def test_create_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\"id\": \"foobar\", \"title\": \"Foo Bar\", \"description\": \"The Foo Barters\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foobar\",\n        \"title\": \"Foo Bar\",\n        \"description\": \"The Foo Barters\",\n    }",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b\\test_main.py",
    "type": "function",
    "name": "test_create_item",
    "loc": 30,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b\\test_main.py:function:test_create_item_bad_token:chunk1",
    "text": "def test_create_item_bad_token():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"hailhydra\"},\n        json={\"id\": \"bazz\", \"title\": \"Bazz\", \"description\": \"Drop the bazz\"},\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b\\test_main.py",
    "type": "function",
    "name": "test_create_item_bad_token",
    "loc": 44,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b\\test_main.py:function:test_create_existing_item:chunk1",
    "text": "def test_create_existing_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\n            \"id\": \"foo\",\n            \"title\": \"The Foo ID Stealers\",\n            \"description\": \"There goes my stealer\",\n        },\n    )\n    assert response.status_code == 409\n    assert response.json() == {\"detail\": \"Item already exists\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b\\test_main.py",
    "type": "function",
    "name": "test_create_existing_item",
    "loc": 54,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_an\\main.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    id: str\n    title: str\n    description: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_an\\main.py",
    "type": "class",
    "name": "Item",
    "loc": 17,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_an\\test_main.py:function:test_read_item:chunk1",
    "text": "def test_read_item():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foo\",\n        \"title\": \"Foo\",\n        \"description\": \"There goes my hero\",\n    }",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_an\\test_main.py",
    "type": "function",
    "name": "test_read_item",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_an\\test_main.py:function:test_read_item_bad_token:chunk1",
    "text": "def test_read_item_bad_token():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"hailhydra\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_an\\test_main.py",
    "type": "function",
    "name": "test_read_item_bad_token",
    "loc": 18,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_an\\test_main.py:function:test_read_nonexistent_item:chunk1",
    "text": "def test_read_nonexistent_item():\n    response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_an\\test_main.py",
    "type": "function",
    "name": "test_read_nonexistent_item",
    "loc": 24,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_an\\test_main.py:function:test_create_item:chunk1",
    "text": "def test_create_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\"id\": \"foobar\", \"title\": \"Foo Bar\", \"description\": \"The Foo Barters\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foobar\",\n        \"title\": \"Foo Bar\",\n        \"description\": \"The Foo Barters\",\n    }",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_an\\test_main.py",
    "type": "function",
    "name": "test_create_item",
    "loc": 30,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_an\\test_main.py:function:test_create_item_bad_token:chunk1",
    "text": "def test_create_item_bad_token():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"hailhydra\"},\n        json={\"id\": \"bazz\", \"title\": \"Bazz\", \"description\": \"Drop the bazz\"},\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_an\\test_main.py",
    "type": "function",
    "name": "test_create_item_bad_token",
    "loc": 44,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_an\\test_main.py:function:test_create_existing_item:chunk1",
    "text": "def test_create_existing_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\n            \"id\": \"foo\",\n            \"title\": \"The Foo ID Stealers\",\n            \"description\": \"There goes my stealer\",\n        },\n    )\n    assert response.status_code == 409\n    assert response.json() == {\"detail\": \"Item already exists\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_an\\test_main.py",
    "type": "function",
    "name": "test_create_existing_item",
    "loc": 54,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_an_py310\\main.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    id: str\n    title: str\n    description: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_an_py310\\main.py",
    "type": "class",
    "name": "Item",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_an_py310\\test_main.py:function:test_read_item:chunk1",
    "text": "def test_read_item():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foo\",\n        \"title\": \"Foo\",\n        \"description\": \"There goes my hero\",\n    }",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_an_py310\\test_main.py",
    "type": "function",
    "name": "test_read_item",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_an_py310\\test_main.py:function:test_read_item_bad_token:chunk1",
    "text": "def test_read_item_bad_token():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"hailhydra\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_an_py310\\test_main.py",
    "type": "function",
    "name": "test_read_item_bad_token",
    "loc": 18,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_an_py310\\test_main.py:function:test_read_nonexistent_item:chunk1",
    "text": "def test_read_nonexistent_item():\n    response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_an_py310\\test_main.py",
    "type": "function",
    "name": "test_read_nonexistent_item",
    "loc": 24,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_an_py310\\test_main.py:function:test_create_item:chunk1",
    "text": "def test_create_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\"id\": \"foobar\", \"title\": \"Foo Bar\", \"description\": \"The Foo Barters\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foobar\",\n        \"title\": \"Foo Bar\",\n        \"description\": \"The Foo Barters\",\n    }",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_an_py310\\test_main.py",
    "type": "function",
    "name": "test_create_item",
    "loc": 30,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_an_py310\\test_main.py:function:test_create_item_bad_token:chunk1",
    "text": "def test_create_item_bad_token():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"hailhydra\"},\n        json={\"id\": \"bazz\", \"title\": \"Bazz\", \"description\": \"Drop the bazz\"},\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_an_py310\\test_main.py",
    "type": "function",
    "name": "test_create_item_bad_token",
    "loc": 44,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_an_py310\\test_main.py:function:test_create_existing_item:chunk1",
    "text": "def test_create_existing_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\n            \"id\": \"foo\",\n            \"title\": \"The Foo ID Stealers\",\n            \"description\": \"There goes my stealer\",\n        },\n    )\n    assert response.status_code == 409\n    assert response.json() == {\"detail\": \"Item already exists\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_an_py310\\test_main.py",
    "type": "function",
    "name": "test_create_existing_item",
    "loc": 54,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_an_py39\\main.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    id: str\n    title: str\n    description: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_an_py39\\main.py",
    "type": "class",
    "name": "Item",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_an_py39\\test_main.py:function:test_read_item:chunk1",
    "text": "def test_read_item():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foo\",\n        \"title\": \"Foo\",\n        \"description\": \"There goes my hero\",\n    }",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_an_py39\\test_main.py",
    "type": "function",
    "name": "test_read_item",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_an_py39\\test_main.py:function:test_read_item_bad_token:chunk1",
    "text": "def test_read_item_bad_token():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"hailhydra\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_an_py39\\test_main.py",
    "type": "function",
    "name": "test_read_item_bad_token",
    "loc": 18,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_an_py39\\test_main.py:function:test_read_nonexistent_item:chunk1",
    "text": "def test_read_nonexistent_item():\n    response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_an_py39\\test_main.py",
    "type": "function",
    "name": "test_read_nonexistent_item",
    "loc": 24,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_an_py39\\test_main.py:function:test_create_item:chunk1",
    "text": "def test_create_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\"id\": \"foobar\", \"title\": \"Foo Bar\", \"description\": \"The Foo Barters\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foobar\",\n        \"title\": \"Foo Bar\",\n        \"description\": \"The Foo Barters\",\n    }",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_an_py39\\test_main.py",
    "type": "function",
    "name": "test_create_item",
    "loc": 30,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_an_py39\\test_main.py:function:test_create_item_bad_token:chunk1",
    "text": "def test_create_item_bad_token():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"hailhydra\"},\n        json={\"id\": \"bazz\", \"title\": \"Bazz\", \"description\": \"Drop the bazz\"},\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_an_py39\\test_main.py",
    "type": "function",
    "name": "test_create_item_bad_token",
    "loc": 44,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_an_py39\\test_main.py:function:test_create_existing_item:chunk1",
    "text": "def test_create_existing_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\n            \"id\": \"foo\",\n            \"title\": \"The Foo ID Stealers\",\n            \"description\": \"There goes my stealer\",\n        },\n    )\n    assert response.status_code == 409\n    assert response.json() == {\"detail\": \"Item already exists\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_an_py39\\test_main.py",
    "type": "function",
    "name": "test_create_existing_item",
    "loc": 54,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_py310\\main.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    id: str\n    title: str\n    description: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_py310\\main.py",
    "type": "class",
    "name": "Item",
    "loc": 14,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_py310\\test_main.py:function:test_read_item:chunk1",
    "text": "def test_read_item():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foo\",\n        \"title\": \"Foo\",\n        \"description\": \"There goes my hero\",\n    }",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_py310\\test_main.py",
    "type": "function",
    "name": "test_read_item",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_py310\\test_main.py:function:test_read_item_bad_token:chunk1",
    "text": "def test_read_item_bad_token():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"hailhydra\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_py310\\test_main.py",
    "type": "function",
    "name": "test_read_item_bad_token",
    "loc": 18,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_py310\\test_main.py:function:test_read_nonexistent_item:chunk1",
    "text": "def test_read_nonexistent_item():\n    response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_py310\\test_main.py",
    "type": "function",
    "name": "test_read_nonexistent_item",
    "loc": 24,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_py310\\test_main.py:function:test_create_item:chunk1",
    "text": "def test_create_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\"id\": \"foobar\", \"title\": \"Foo Bar\", \"description\": \"The Foo Barters\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foobar\",\n        \"title\": \"Foo Bar\",\n        \"description\": \"The Foo Barters\",\n    }",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_py310\\test_main.py",
    "type": "function",
    "name": "test_create_item",
    "loc": 30,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_py310\\test_main.py:function:test_create_item_bad_token:chunk1",
    "text": "def test_create_item_bad_token():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"hailhydra\"},\n        json={\"id\": \"bazz\", \"title\": \"Bazz\", \"description\": \"Drop the bazz\"},\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_py310\\test_main.py",
    "type": "function",
    "name": "test_create_item_bad_token",
    "loc": 44,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\app_testing\\app_b_py310\\test_main.py:function:test_create_existing_item:chunk1",
    "text": "def test_create_existing_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\n            \"id\": \"foo\",\n            \"title\": \"The Foo ID Stealers\",\n            \"description\": \"There goes my stealer\",\n        },\n    )\n    assert response.status_code == 409\n    assert response.json() == {\"detail\": \"Item already exists\"}",
    "repo": "fastapi",
    "path": "docs_src\\app_testing\\app_b_py310\\test_main.py",
    "type": "function",
    "name": "test_create_existing_item",
    "loc": 54,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\background_tasks\\tutorial001.py:function:write_notification:chunk1",
    "text": "def write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)",
    "repo": "fastapi",
    "path": "docs_src\\background_tasks\\tutorial001.py",
    "type": "function",
    "name": "write_notification",
    "loc": 6,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\background_tasks\\tutorial002.py:function:write_log:chunk1",
    "text": "def write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)",
    "repo": "fastapi",
    "path": "docs_src\\background_tasks\\tutorial002.py",
    "type": "function",
    "name": "write_log",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\background_tasks\\tutorial002.py:function:get_query:chunk1",
    "text": "def get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q",
    "repo": "fastapi",
    "path": "docs_src\\background_tasks\\tutorial002.py",
    "type": "function",
    "name": "get_query",
    "loc": 13,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\background_tasks\\tutorial002_an.py:function:write_log:chunk1",
    "text": "def write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)",
    "repo": "fastapi",
    "path": "docs_src\\background_tasks\\tutorial002_an.py",
    "type": "function",
    "name": "write_log",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\background_tasks\\tutorial002_an.py:function:get_query:chunk1",
    "text": "def get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q",
    "repo": "fastapi",
    "path": "docs_src\\background_tasks\\tutorial002_an.py",
    "type": "function",
    "name": "get_query",
    "loc": 14,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\background_tasks\\tutorial002_an_py310.py:function:write_log:chunk1",
    "text": "def write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)",
    "repo": "fastapi",
    "path": "docs_src\\background_tasks\\tutorial002_an_py310.py",
    "type": "function",
    "name": "write_log",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\background_tasks\\tutorial002_an_py310.py:function:get_query:chunk1",
    "text": "def get_query(background_tasks: BackgroundTasks, q: str | None = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q",
    "repo": "fastapi",
    "path": "docs_src\\background_tasks\\tutorial002_an_py310.py",
    "type": "function",
    "name": "get_query",
    "loc": 13,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\background_tasks\\tutorial002_an_py39.py:function:write_log:chunk1",
    "text": "def write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)",
    "repo": "fastapi",
    "path": "docs_src\\background_tasks\\tutorial002_an_py39.py",
    "type": "function",
    "name": "write_log",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\background_tasks\\tutorial002_an_py39.py:function:get_query:chunk1",
    "text": "def get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q",
    "repo": "fastapi",
    "path": "docs_src\\background_tasks\\tutorial002_an_py39.py",
    "type": "function",
    "name": "get_query",
    "loc": 13,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\background_tasks\\tutorial002_py310.py:function:write_log:chunk1",
    "text": "def write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)",
    "repo": "fastapi",
    "path": "docs_src\\background_tasks\\tutorial002_py310.py",
    "type": "function",
    "name": "write_log",
    "loc": 6,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\background_tasks\\tutorial002_py310.py:function:get_query:chunk1",
    "text": "def get_query(background_tasks: BackgroundTasks, q: str | None = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q",
    "repo": "fastapi",
    "path": "docs_src\\background_tasks\\tutorial002_py310.py",
    "type": "function",
    "name": "get_query",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\behind_a_proxy\\tutorial001.py:function:read_main:chunk1",
    "text": "def read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}",
    "repo": "fastapi",
    "path": "docs_src\\behind_a_proxy\\tutorial001.py",
    "type": "function",
    "name": "read_main",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\behind_a_proxy\\tutorial002.py:function:read_main:chunk1",
    "text": "def read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}",
    "repo": "fastapi",
    "path": "docs_src\\behind_a_proxy\\tutorial002.py",
    "type": "function",
    "name": "read_main",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\behind_a_proxy\\tutorial003.py:function:read_main:chunk1",
    "text": "def read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}",
    "repo": "fastapi",
    "path": "docs_src\\behind_a_proxy\\tutorial003.py",
    "type": "function",
    "name": "read_main",
    "loc": 13,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\behind_a_proxy\\tutorial004.py:function:read_main:chunk1",
    "text": "def read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}",
    "repo": "fastapi",
    "path": "docs_src\\behind_a_proxy\\tutorial004.py",
    "type": "function",
    "name": "read_main",
    "loc": 14,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body\\tutorial001.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body\\tutorial001.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body\\tutorial001_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body\\tutorial001_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 5,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body\\tutorial002.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body\\tutorial002.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body\\tutorial002_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body\\tutorial002_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 5,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body\\tutorial003.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body\\tutorial003.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body\\tutorial003_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body\\tutorial003_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 5,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body\\tutorial004.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body\\tutorial004.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body\\tutorial004_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body\\tutorial004_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 5,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_fields\\tutorial001.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_fields\\tutorial001.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_fields\\tutorial001_an.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_fields\\tutorial001_an.py",
    "type": "class",
    "name": "Item",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_fields\\tutorial001_an_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body_fields\\tutorial001_an_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_fields\\tutorial001_an_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_fields\\tutorial001_an_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_fields\\tutorial001_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body_fields\\tutorial001_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial001.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial001.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial001_an.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial001_an.py",
    "type": "class",
    "name": "Item",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial001_an_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial001_an_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial001_an_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial001_an_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial001_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial001_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial002.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial002.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial002.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial002.py",
    "type": "class",
    "name": "User",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial002_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial002_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial002_py310.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    full_name: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial002_py310.py",
    "type": "class",
    "name": "User",
    "loc": 14,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial003.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial003.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial003.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial003.py",
    "type": "class",
    "name": "User",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial003_an.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial003_an.py",
    "type": "class",
    "name": "Item",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial003_an.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial003_an.py",
    "type": "class",
    "name": "User",
    "loc": 17,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial003_an_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial003_an_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial003_an_py310.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    full_name: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial003_an_py310.py",
    "type": "class",
    "name": "User",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial003_an_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial003_an_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial003_an_py39.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial003_an_py39.py",
    "type": "class",
    "name": "User",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial003_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial003_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial003_py310.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    full_name: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial003_py310.py",
    "type": "class",
    "name": "User",
    "loc": 14,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial004.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial004.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial004.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial004.py",
    "type": "class",
    "name": "User",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial004_an.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial004_an.py",
    "type": "class",
    "name": "Item",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial004_an.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial004_an.py",
    "type": "class",
    "name": "User",
    "loc": 17,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial004_an_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial004_an_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial004_an_py310.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    full_name: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial004_an_py310.py",
    "type": "class",
    "name": "User",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial004_an_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial004_an_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial004_an_py39.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial004_an_py39.py",
    "type": "class",
    "name": "User",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial004_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial004_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial004_py310.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    full_name: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial004_py310.py",
    "type": "class",
    "name": "User",
    "loc": 14,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial005.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial005.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial005_an.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial005_an.py",
    "type": "class",
    "name": "Item",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial005_an_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial005_an_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial005_an_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial005_an_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_multiple_params\\tutorial005_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body_multiple_params\\tutorial005_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial001.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list = []",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial001.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial001_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list = []",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial001_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial002.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial002.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial002_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial002_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial002_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial002_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial003.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial003.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial003_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial003_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial003_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial003_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial004.py:class:Image:chunk1",
    "text": "class Image(BaseModel):\n    url: str\n    name: str",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial004.py",
    "type": "class",
    "name": "Image",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial004.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    image: Union[Image, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial004.py",
    "type": "class",
    "name": "Item",
    "loc": 14,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial004_py310.py:class:Image:chunk1",
    "text": "class Image(BaseModel):\n    url: str\n    name: str",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial004_py310.py",
    "type": "class",
    "name": "Image",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial004_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    image: Image | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial004_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial004_py39.py:class:Image:chunk1",
    "text": "class Image(BaseModel):\n    url: str\n    name: str",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial004_py39.py",
    "type": "class",
    "name": "Image",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial004_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    image: Union[Image, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial004_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 14,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial005.py:class:Image:chunk1",
    "text": "class Image(BaseModel):\n    url: HttpUrl\n    name: str",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial005.py",
    "type": "class",
    "name": "Image",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial005.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    image: Union[Image, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial005.py",
    "type": "class",
    "name": "Item",
    "loc": 14,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial005_py310.py:class:Image:chunk1",
    "text": "class Image(BaseModel):\n    url: HttpUrl\n    name: str",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial005_py310.py",
    "type": "class",
    "name": "Image",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial005_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    image: Image | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial005_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial005_py39.py:class:Image:chunk1",
    "text": "class Image(BaseModel):\n    url: HttpUrl\n    name: str",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial005_py39.py",
    "type": "class",
    "name": "Image",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial005_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    image: Union[Image, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial005_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 14,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial006.py:class:Image:chunk1",
    "text": "class Image(BaseModel):\n    url: HttpUrl\n    name: str",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial006.py",
    "type": "class",
    "name": "Image",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial006.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    images: Union[List[Image], None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial006.py",
    "type": "class",
    "name": "Item",
    "loc": 14,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial006_py310.py:class:Image:chunk1",
    "text": "class Image(BaseModel):\n    url: HttpUrl\n    name: str",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial006_py310.py",
    "type": "class",
    "name": "Image",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial006_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    images: list[Image] | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial006_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial006_py39.py:class:Image:chunk1",
    "text": "class Image(BaseModel):\n    url: HttpUrl\n    name: str",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial006_py39.py",
    "type": "class",
    "name": "Image",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial006_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    images: Union[list[Image], None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial006_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 14,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial007.py:class:Image:chunk1",
    "text": "class Image(BaseModel):\n    url: HttpUrl\n    name: str",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial007.py",
    "type": "class",
    "name": "Image",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial007.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    images: Union[List[Image], None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial007.py",
    "type": "class",
    "name": "Item",
    "loc": 14,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial007.py:class:Offer:chunk1",
    "text": "class Offer(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    items: List[Item]",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial007.py",
    "type": "class",
    "name": "Offer",
    "loc": 23,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial007_py310.py:class:Image:chunk1",
    "text": "class Image(BaseModel):\n    url: HttpUrl\n    name: str",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial007_py310.py",
    "type": "class",
    "name": "Image",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial007_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    images: list[Image] | None = None",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial007_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial007_py310.py:class:Offer:chunk1",
    "text": "class Offer(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    items: list[Item]",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial007_py310.py",
    "type": "class",
    "name": "Offer",
    "loc": 21,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial007_py39.py:class:Image:chunk1",
    "text": "class Image(BaseModel):\n    url: HttpUrl\n    name: str",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial007_py39.py",
    "type": "class",
    "name": "Image",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial007_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    images: Union[list[Image], None] = None",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial007_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 14,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial007_py39.py:class:Offer:chunk1",
    "text": "class Offer(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    items: list[Item]",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial007_py39.py",
    "type": "class",
    "name": "Offer",
    "loc": 23,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial008.py:class:Image:chunk1",
    "text": "class Image(BaseModel):\n    url: HttpUrl\n    name: str",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial008.py",
    "type": "class",
    "name": "Image",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_nested_models\\tutorial008_py39.py:class:Image:chunk1",
    "text": "class Image(BaseModel):\n    url: HttpUrl\n    name: str",
    "repo": "fastapi",
    "path": "docs_src\\body_nested_models\\tutorial008_py39.py",
    "type": "class",
    "name": "Image",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_updates\\tutorial001.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\body_updates\\tutorial001.py",
    "type": "class",
    "name": "Item",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_updates\\tutorial001_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\body_updates\\tutorial001_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_updates\\tutorial001_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\body_updates\\tutorial001_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_updates\\tutorial002.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\body_updates\\tutorial002.py",
    "type": "class",
    "name": "Item",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_updates\\tutorial002_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\body_updates\\tutorial002_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\body_updates\\tutorial002_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\body_updates\\tutorial002_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\conditional_openapi\\tutorial001.py:function:root:chunk1",
    "text": "def root():\n    return {\"message\": \"Hello World\"}",
    "repo": "fastapi",
    "path": "docs_src\\conditional_openapi\\tutorial001.py",
    "type": "function",
    "name": "root",
    "loc": 15,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\conditional_openapi\\tutorial001.py:class:Settings:chunk1",
    "text": "class Settings(BaseSettings):\n    openapi_url: str = \"/openapi.json\"",
    "repo": "fastapi",
    "path": "docs_src\\conditional_openapi\\tutorial001.py",
    "type": "class",
    "name": "Settings",
    "loc": 5,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\cookie_param_models\\tutorial001.py:class:Cookies:chunk1",
    "text": "class Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\cookie_param_models\\tutorial001.py",
    "type": "class",
    "name": "Cookies",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\cookie_param_models\\tutorial001_an.py:class:Cookies:chunk1",
    "text": "class Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\cookie_param_models\\tutorial001_an.py",
    "type": "class",
    "name": "Cookies",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\cookie_param_models\\tutorial001_an_py310.py:class:Cookies:chunk1",
    "text": "class Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\cookie_param_models\\tutorial001_an_py310.py",
    "type": "class",
    "name": "Cookies",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\cookie_param_models\\tutorial001_an_py39.py:class:Cookies:chunk1",
    "text": "class Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\cookie_param_models\\tutorial001_an_py39.py",
    "type": "class",
    "name": "Cookies",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\cookie_param_models\\tutorial001_py310.py:class:Cookies:chunk1",
    "text": "class Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\cookie_param_models\\tutorial001_py310.py",
    "type": "class",
    "name": "Cookies",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\cookie_param_models\\tutorial002.py:class:Cookies:chunk1",
    "text": "class Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\cookie_param_models\\tutorial002.py",
    "type": "class",
    "name": "Cookies",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\cookie_param_models\\tutorial002_an.py:class:Cookies:chunk1",
    "text": "class Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\cookie_param_models\\tutorial002_an.py",
    "type": "class",
    "name": "Cookies",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\cookie_param_models\\tutorial002_an_py310.py:class:Cookies:chunk1",
    "text": "class Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\cookie_param_models\\tutorial002_an_py310.py",
    "type": "class",
    "name": "Cookies",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\cookie_param_models\\tutorial002_an_py39.py:class:Cookies:chunk1",
    "text": "class Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\cookie_param_models\\tutorial002_an_py39.py",
    "type": "class",
    "name": "Cookies",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\cookie_param_models\\tutorial002_pv1.py:class:Config:chunk1",
    "text": "class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\cookie_param_models\\tutorial002_pv1.py",
    "type": "class",
    "name": "Config",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\cookie_param_models\\tutorial002_pv1.py:class:Cookies:chunk1",
    "text": "class Cookies(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\cookie_param_models\\tutorial002_pv1.py",
    "type": "class",
    "name": "Cookies",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\cookie_param_models\\tutorial002_pv1_an.py:class:Config:chunk1",
    "text": "class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\cookie_param_models\\tutorial002_pv1_an.py",
    "type": "class",
    "name": "Config",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\cookie_param_models\\tutorial002_pv1_an.py:class:Cookies:chunk1",
    "text": "class Cookies(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\cookie_param_models\\tutorial002_pv1_an.py",
    "type": "class",
    "name": "Cookies",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\cookie_param_models\\tutorial002_pv1_an_py310.py:class:Config:chunk1",
    "text": "class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\cookie_param_models\\tutorial002_pv1_an_py310.py",
    "type": "class",
    "name": "Config",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\cookie_param_models\\tutorial002_pv1_an_py310.py:class:Cookies:chunk1",
    "text": "class Cookies(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\cookie_param_models\\tutorial002_pv1_an_py310.py",
    "type": "class",
    "name": "Cookies",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\cookie_param_models\\tutorial002_pv1_an_py39.py:class:Config:chunk1",
    "text": "class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\cookie_param_models\\tutorial002_pv1_an_py39.py",
    "type": "class",
    "name": "Config",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\cookie_param_models\\tutorial002_pv1_an_py39.py:class:Cookies:chunk1",
    "text": "class Cookies(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\cookie_param_models\\tutorial002_pv1_an_py39.py",
    "type": "class",
    "name": "Cookies",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\cookie_param_models\\tutorial002_pv1_py310.py:class:Config:chunk1",
    "text": "class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\cookie_param_models\\tutorial002_pv1_py310.py",
    "type": "class",
    "name": "Config",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\cookie_param_models\\tutorial002_pv1_py310.py:class:Cookies:chunk1",
    "text": "class Cookies(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\cookie_param_models\\tutorial002_pv1_py310.py",
    "type": "class",
    "name": "Cookies",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\cookie_param_models\\tutorial002_py310.py:class:Cookies:chunk1",
    "text": "class Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\cookie_param_models\\tutorial002_py310.py",
    "type": "class",
    "name": "Cookies",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\custom_request_and_route\\tutorial001.py:class:GzipRequest:chunk1",
    "text": "class GzipRequest(Request):\n    async def body(self) -> bytes:\n        if not hasattr(self, \"_body\"):\n            body = await super().body()\n            if \"gzip\" in self.headers.getlist(\"Content-Encoding\"):\n                body = gzip.decompress(body)\n            self._body = body\n        return self._body",
    "repo": "fastapi",
    "path": "docs_src\\custom_request_and_route\\tutorial001.py",
    "type": "class",
    "name": "GzipRequest",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\custom_request_and_route\\tutorial001.py:class:GzipRoute:chunk1",
    "text": "class GzipRoute(APIRoute):\n    def get_route_handler(self) -> Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -> Response:\n            request = GzipRequest(request.scope, request.receive)\n            return await original_route_handler(request)\n\n        return custom_route_handler",
    "repo": "fastapi",
    "path": "docs_src\\custom_request_and_route\\tutorial001.py",
    "type": "class",
    "name": "GzipRoute",
    "loc": 18,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\custom_request_and_route\\tutorial002.py:class:ValidationErrorLoggingRoute:chunk1",
    "text": "class ValidationErrorLoggingRoute(APIRoute):\n    def get_route_handler(self) -> Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -> Response:\n            try:\n                return await original_route_handler(request)\n            except RequestValidationError as exc:\n                body = await request.body()\n                detail = {\"errors\": exc.errors(), \"body\": body.decode()}\n                raise HTTPException(status_code=422, detail=detail)\n\n        return custom_route_handler",
    "repo": "fastapi",
    "path": "docs_src\\custom_request_and_route\\tutorial002.py",
    "type": "class",
    "name": "ValidationErrorLoggingRoute",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\custom_request_and_route\\tutorial003.py:class:TimedRoute:chunk1",
    "text": "class TimedRoute(APIRoute):\n    def get_route_handler(self) -> Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -> Response:\n            before = time.time()\n            response: Response = await original_route_handler(request)\n            duration = time.time() - before\n            response.headers[\"X-Response-Time\"] = str(duration)\n            print(f\"route duration: {duration}\")\n            print(f\"route response: {response}\")\n            print(f\"route response headers: {response.headers}\")\n            return response\n\n        return custom_route_handler",
    "repo": "fastapi",
    "path": "docs_src\\custom_request_and_route\\tutorial003.py",
    "type": "class",
    "name": "TimedRoute",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\custom_response\\tutorial004.py:function:generate_html_response:chunk1",
    "text": "def generate_html_response():\n    html_content = \"\"\"\n    <html>\n        <head>\n            <title>Some HTML in here</title>\n        </head>\n        <body>\n            <h1>Look ma! HTML!</h1>\n        </body>\n    </html>\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)",
    "repo": "fastapi",
    "path": "docs_src\\custom_response\\tutorial004.py",
    "type": "function",
    "name": "generate_html_response",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\custom_response\\tutorial008.py:function:main:chunk1",
    "text": "def main():\n    def iterfile():  # (1)\n        with open(some_file_path, mode=\"rb\") as file_like:  # (2)\n            yield from file_like  # (3)\n\n    return StreamingResponse(iterfile(), media_type=\"video/mp4\")",
    "repo": "fastapi",
    "path": "docs_src\\custom_response\\tutorial008.py",
    "type": "function",
    "name": "main",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\custom_response\\tutorial008.py:function:iterfile:chunk1",
    "text": "def iterfile():  # (1)\n        with open(some_file_path, mode=\"rb\") as file_like:  # (2)\n            yield from file_like  # (3)",
    "repo": "fastapi",
    "path": "docs_src\\custom_response\\tutorial008.py",
    "type": "function",
    "name": "iterfile",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\custom_response\\tutorial009c.py:class:CustomORJSONResponse:chunk1",
    "text": "class CustomORJSONResponse(Response):\n    media_type = \"application/json\"\n\n    def render(self, content: Any) -> bytes:\n        assert orjson is not None, \"orjson must be installed\"\n        return orjson.dumps(content, option=orjson.OPT_INDENT_2)",
    "repo": "fastapi",
    "path": "docs_src\\custom_response\\tutorial009c.py",
    "type": "class",
    "name": "CustomORJSONResponse",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dataclasses\\tutorial001.py:class:Item:chunk1",
    "text": "class Item:\n    name: str\n    price: float\n    description: Union[str, None] = None\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\dataclasses\\tutorial001.py",
    "type": "class",
    "name": "Item",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dataclasses\\tutorial002.py:class:Item:chunk1",
    "text": "class Item:\n    name: str\n    price: float\n    tags: List[str] = field(default_factory=list)\n    description: Union[str, None] = None\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\dataclasses\\tutorial002.py",
    "type": "class",
    "name": "Item",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dataclasses\\tutorial003.py:function:get_authors:chunk1",
    "text": "def get_authors():  # (8)\n    return [  # (9)\n        {\n            \"name\": \"Breaters\",\n            \"items\": [\n                {\n                    \"name\": \"Island In The Moon\",\n                    \"description\": \"A place to be playin' and havin' fun\",\n                },\n                {\"name\": \"Holy Buddies\"},\n            ],\n        },\n        {\n            \"name\": \"System of an Up\",\n            \"items\": [\n                {\n                    \"name\": \"Salt\",\n                    \"description\": \"The kombucha mushroom people's favorite\",\n                },\n                {\"name\": \"Pad Thai\"},\n                {\n                    \"name\": \"Lonely Night\",\n                    \"description\": \"The mostests lonliest nightiest of allest\",\n                },\n            ],\n        },\n    ]",
    "repo": "fastapi",
    "path": "docs_src\\dataclasses\\tutorial003.py",
    "type": "function",
    "name": "get_authors",
    "loc": 29,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dataclasses\\tutorial003.py:class:Item:chunk1",
    "text": "class Item:\n    name: str\n    description: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\dataclasses\\tutorial003.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dataclasses\\tutorial003.py:class:Author:chunk1",
    "text": "class Author:\n    name: str\n    items: List[Item] = field(default_factory=list)  # (3)",
    "repo": "fastapi",
    "path": "docs_src\\dataclasses\\tutorial003.py",
    "type": "class",
    "name": "Author",
    "loc": 15,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\debugging\\tutorial001.py:function:root:chunk1",
    "text": "def root():\n    a = \"a\"\n    b = \"b\" + a\n    return {\"hello world\": b}",
    "repo": "fastapi",
    "path": "docs_src\\debugging\\tutorial001.py",
    "type": "function",
    "name": "root",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial002.py:class:CommonQueryParams:chunk1",
    "text": "class CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial002.py",
    "type": "class",
    "name": "CommonQueryParams",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial002_an.py:class:CommonQueryParams:chunk1",
    "text": "class CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial002_an.py",
    "type": "class",
    "name": "CommonQueryParams",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial002_an_py310.py:class:CommonQueryParams:chunk1",
    "text": "class CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial002_an_py310.py",
    "type": "class",
    "name": "CommonQueryParams",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial002_an_py39.py:class:CommonQueryParams:chunk1",
    "text": "class CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial002_an_py39.py",
    "type": "class",
    "name": "CommonQueryParams",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial002_py310.py:class:CommonQueryParams:chunk1",
    "text": "class CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial002_py310.py",
    "type": "class",
    "name": "CommonQueryParams",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial003.py:class:CommonQueryParams:chunk1",
    "text": "class CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial003.py",
    "type": "class",
    "name": "CommonQueryParams",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial003_an.py:class:CommonQueryParams:chunk1",
    "text": "class CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial003_an.py",
    "type": "class",
    "name": "CommonQueryParams",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial003_an_py310.py:class:CommonQueryParams:chunk1",
    "text": "class CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial003_an_py310.py",
    "type": "class",
    "name": "CommonQueryParams",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial003_an_py39.py:class:CommonQueryParams:chunk1",
    "text": "class CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial003_an_py39.py",
    "type": "class",
    "name": "CommonQueryParams",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial003_py310.py:class:CommonQueryParams:chunk1",
    "text": "class CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial003_py310.py",
    "type": "class",
    "name": "CommonQueryParams",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial004.py:class:CommonQueryParams:chunk1",
    "text": "class CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial004.py",
    "type": "class",
    "name": "CommonQueryParams",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial004_an.py:class:CommonQueryParams:chunk1",
    "text": "class CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial004_an.py",
    "type": "class",
    "name": "CommonQueryParams",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial004_an_py310.py:class:CommonQueryParams:chunk1",
    "text": "class CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial004_an_py310.py",
    "type": "class",
    "name": "CommonQueryParams",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial004_an_py39.py:class:CommonQueryParams:chunk1",
    "text": "class CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial004_an_py39.py",
    "type": "class",
    "name": "CommonQueryParams",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial004_py310.py:class:CommonQueryParams:chunk1",
    "text": "class CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial004_py310.py",
    "type": "class",
    "name": "CommonQueryParams",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial005.py:function:query_extractor:chunk1",
    "text": "def query_extractor(q: Union[str, None] = None):\n    return q",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial005.py",
    "type": "function",
    "name": "query_extractor",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial005.py:function:query_or_cookie_extractor:chunk1",
    "text": "def query_or_cookie_extractor(\n    q: str = Depends(query_extractor),\n    last_query: Union[str, None] = Cookie(default=None),\n):\n    if not q:\n        return last_query\n    return q",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial005.py",
    "type": "function",
    "name": "query_or_cookie_extractor",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial005_an.py:function:query_extractor:chunk1",
    "text": "def query_extractor(q: Union[str, None] = None):\n    return q",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial005_an.py",
    "type": "function",
    "name": "query_extractor",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial005_an.py:function:query_or_cookie_extractor:chunk1",
    "text": "def query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial005_an.py",
    "type": "function",
    "name": "query_or_cookie_extractor",
    "loc": 13,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial005_an_py310.py:function:query_extractor:chunk1",
    "text": "def query_extractor(q: str | None = None):\n    return q",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial005_an_py310.py",
    "type": "function",
    "name": "query_extractor",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial005_an_py310.py:function:query_or_cookie_extractor:chunk1",
    "text": "def query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[str | None, Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial005_an_py310.py",
    "type": "function",
    "name": "query_or_cookie_extractor",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial005_an_py39.py:function:query_extractor:chunk1",
    "text": "def query_extractor(q: Union[str, None] = None):\n    return q",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial005_an_py39.py",
    "type": "function",
    "name": "query_extractor",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial005_an_py39.py:function:query_or_cookie_extractor:chunk1",
    "text": "def query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial005_an_py39.py",
    "type": "function",
    "name": "query_or_cookie_extractor",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial005_py310.py:function:query_extractor:chunk1",
    "text": "def query_extractor(q: str | None = None):\n    return q",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial005_py310.py",
    "type": "function",
    "name": "query_extractor",
    "loc": 6,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial005_py310.py:function:query_or_cookie_extractor:chunk1",
    "text": "def query_or_cookie_extractor(\n    q: str = Depends(query_extractor), last_query: str | None = Cookie(default=None)\n):\n    if not q:\n        return last_query\n    return q",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial005_py310.py",
    "type": "function",
    "name": "query_or_cookie_extractor",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008b.py:function:get_username:chunk1",
    "text": "def get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008b.py",
    "type": "function",
    "name": "get_username",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008b.py:function:get_item:chunk1",
    "text": "def get_item(item_id: str, username: str = Depends(get_username)):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008b.py",
    "type": "function",
    "name": "get_item",
    "loc": 24,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008b.py:class:OwnerError:chunk1",
    "text": "class OwnerError(Exception):\n    pass",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008b.py",
    "type": "class",
    "name": "OwnerError",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008b_an.py:function:get_username:chunk1",
    "text": "def get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008b_an.py",
    "type": "function",
    "name": "get_username",
    "loc": 17,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008b_an.py:function:get_item:chunk1",
    "text": "def get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008b_an.py",
    "type": "function",
    "name": "get_item",
    "loc": 25,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008b_an.py:class:OwnerError:chunk1",
    "text": "class OwnerError(Exception):\n    pass",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008b_an.py",
    "type": "class",
    "name": "OwnerError",
    "loc": 13,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008b_an_py39.py:function:get_username:chunk1",
    "text": "def get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008b_an_py39.py",
    "type": "function",
    "name": "get_username",
    "loc": 18,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008b_an_py39.py:function:get_item:chunk1",
    "text": "def get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008b_an_py39.py",
    "type": "function",
    "name": "get_item",
    "loc": 26,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008b_an_py39.py:class:OwnerError:chunk1",
    "text": "class OwnerError(Exception):\n    pass",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008b_an_py39.py",
    "type": "class",
    "name": "OwnerError",
    "loc": 14,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008c.py:function:get_username:chunk1",
    "text": "def get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"Oops, we didn't raise again, Britney 😱\")",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008c.py",
    "type": "function",
    "name": "get_username",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008c.py:function:get_item:chunk1",
    "text": "def get_item(item_id: str, username: str = Depends(get_username)):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008c.py",
    "type": "function",
    "name": "get_item",
    "loc": 18,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008c.py:class:InternalError:chunk1",
    "text": "class InternalError(Exception):\n    pass",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008c.py",
    "type": "class",
    "name": "InternalError",
    "loc": 6,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008c_an.py:function:get_username:chunk1",
    "text": "def get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"Oops, we didn't raise again, Britney 😱\")",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008c_an.py",
    "type": "function",
    "name": "get_username",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008c_an.py:function:get_item:chunk1",
    "text": "def get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008c_an.py",
    "type": "function",
    "name": "get_item",
    "loc": 19,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008c_an.py:class:InternalError:chunk1",
    "text": "class InternalError(Exception):\n    pass",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008c_an.py",
    "type": "class",
    "name": "InternalError",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008c_an_py39.py:function:get_username:chunk1",
    "text": "def get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"Oops, we didn't raise again, Britney 😱\")",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008c_an_py39.py",
    "type": "function",
    "name": "get_username",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008c_an_py39.py:function:get_item:chunk1",
    "text": "def get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008c_an_py39.py",
    "type": "function",
    "name": "get_item",
    "loc": 20,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008c_an_py39.py:class:InternalError:chunk1",
    "text": "class InternalError(Exception):\n    pass",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008c_an_py39.py",
    "type": "class",
    "name": "InternalError",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008d.py:function:get_username:chunk1",
    "text": "def get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"We don't swallow the internal error here, we raise again 😎\")\n        raise",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008d.py",
    "type": "function",
    "name": "get_username",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008d.py:function:get_item:chunk1",
    "text": "def get_item(item_id: str, username: str = Depends(get_username)):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008d.py",
    "type": "function",
    "name": "get_item",
    "loc": 19,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008d.py:class:InternalError:chunk1",
    "text": "class InternalError(Exception):\n    pass",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008d.py",
    "type": "class",
    "name": "InternalError",
    "loc": 6,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008d_an.py:function:get_username:chunk1",
    "text": "def get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"We don't swallow the internal error here, we raise again 😎\")\n        raise",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008d_an.py",
    "type": "function",
    "name": "get_username",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008d_an.py:function:get_item:chunk1",
    "text": "def get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008d_an.py",
    "type": "function",
    "name": "get_item",
    "loc": 20,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008d_an.py:class:InternalError:chunk1",
    "text": "class InternalError(Exception):\n    pass",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008d_an.py",
    "type": "class",
    "name": "InternalError",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008d_an_py39.py:function:get_username:chunk1",
    "text": "def get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"We don't swallow the internal error here, we raise again 😎\")\n        raise",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008d_an_py39.py",
    "type": "function",
    "name": "get_username",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008d_an_py39.py:function:get_item:chunk1",
    "text": "def get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008d_an_py39.py",
    "type": "function",
    "name": "get_item",
    "loc": 21,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial008d_an_py39.py:class:InternalError:chunk1",
    "text": "class InternalError(Exception):\n    pass",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial008d_an_py39.py",
    "type": "class",
    "name": "InternalError",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial010.py:class:MySuperContextManager:chunk1",
    "text": "class MySuperContextManager:\n    def __init__(self):\n        self.db = DBSession()\n\n    def __enter__(self):\n        return self.db\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.db.close()",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial010.py",
    "type": "class",
    "name": "MySuperContextManager",
    "loc": 1,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial011.py:class:FixedContentQueryChecker:chunk1",
    "text": "class FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial011.py",
    "type": "class",
    "name": "FixedContentQueryChecker",
    "loc": 6,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial011_an.py:class:FixedContentQueryChecker:chunk1",
    "text": "class FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial011_an.py",
    "type": "class",
    "name": "FixedContentQueryChecker",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependencies\\tutorial011_an_py39.py:class:FixedContentQueryChecker:chunk1",
    "text": "class FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False",
    "repo": "fastapi",
    "path": "docs_src\\dependencies\\tutorial011_an_py39.py",
    "type": "class",
    "name": "FixedContentQueryChecker",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependency_testing\\tutorial001.py:function:test_override_in_items:chunk1",
    "text": "def test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }",
    "repo": "fastapi",
    "path": "docs_src\\dependency_testing\\tutorial001.py",
    "type": "function",
    "name": "test_override_in_items",
    "loc": 35,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependency_testing\\tutorial001.py:function:test_override_in_items_with_q:chunk1",
    "text": "def test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }",
    "repo": "fastapi",
    "path": "docs_src\\dependency_testing\\tutorial001.py",
    "type": "function",
    "name": "test_override_in_items_with_q",
    "loc": 44,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependency_testing\\tutorial001.py:function:test_override_in_items_with_params:chunk1",
    "text": "def test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }",
    "repo": "fastapi",
    "path": "docs_src\\dependency_testing\\tutorial001.py",
    "type": "function",
    "name": "test_override_in_items_with_params",
    "loc": 53,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependency_testing\\tutorial001_an.py:function:test_override_in_items:chunk1",
    "text": "def test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }",
    "repo": "fastapi",
    "path": "docs_src\\dependency_testing\\tutorial001_an.py",
    "type": "function",
    "name": "test_override_in_items",
    "loc": 36,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependency_testing\\tutorial001_an.py:function:test_override_in_items_with_q:chunk1",
    "text": "def test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }",
    "repo": "fastapi",
    "path": "docs_src\\dependency_testing\\tutorial001_an.py",
    "type": "function",
    "name": "test_override_in_items_with_q",
    "loc": 45,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependency_testing\\tutorial001_an.py:function:test_override_in_items_with_params:chunk1",
    "text": "def test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }",
    "repo": "fastapi",
    "path": "docs_src\\dependency_testing\\tutorial001_an.py",
    "type": "function",
    "name": "test_override_in_items_with_params",
    "loc": 54,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependency_testing\\tutorial001_an_py310.py:function:test_override_in_items:chunk1",
    "text": "def test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }",
    "repo": "fastapi",
    "path": "docs_src\\dependency_testing\\tutorial001_an_py310.py",
    "type": "function",
    "name": "test_override_in_items",
    "loc": 33,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependency_testing\\tutorial001_an_py310.py:function:test_override_in_items_with_q:chunk1",
    "text": "def test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }",
    "repo": "fastapi",
    "path": "docs_src\\dependency_testing\\tutorial001_an_py310.py",
    "type": "function",
    "name": "test_override_in_items_with_q",
    "loc": 42,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependency_testing\\tutorial001_an_py310.py:function:test_override_in_items_with_params:chunk1",
    "text": "def test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }",
    "repo": "fastapi",
    "path": "docs_src\\dependency_testing\\tutorial001_an_py310.py",
    "type": "function",
    "name": "test_override_in_items_with_params",
    "loc": 51,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependency_testing\\tutorial001_an_py39.py:function:test_override_in_items:chunk1",
    "text": "def test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }",
    "repo": "fastapi",
    "path": "docs_src\\dependency_testing\\tutorial001_an_py39.py",
    "type": "function",
    "name": "test_override_in_items",
    "loc": 35,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependency_testing\\tutorial001_an_py39.py:function:test_override_in_items_with_q:chunk1",
    "text": "def test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }",
    "repo": "fastapi",
    "path": "docs_src\\dependency_testing\\tutorial001_an_py39.py",
    "type": "function",
    "name": "test_override_in_items_with_q",
    "loc": 44,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependency_testing\\tutorial001_an_py39.py:function:test_override_in_items_with_params:chunk1",
    "text": "def test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }",
    "repo": "fastapi",
    "path": "docs_src\\dependency_testing\\tutorial001_an_py39.py",
    "type": "function",
    "name": "test_override_in_items_with_params",
    "loc": 53,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependency_testing\\tutorial001_py310.py:function:test_override_in_items:chunk1",
    "text": "def test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }",
    "repo": "fastapi",
    "path": "docs_src\\dependency_testing\\tutorial001_py310.py",
    "type": "function",
    "name": "test_override_in_items",
    "loc": 31,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependency_testing\\tutorial001_py310.py:function:test_override_in_items_with_q:chunk1",
    "text": "def test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }",
    "repo": "fastapi",
    "path": "docs_src\\dependency_testing\\tutorial001_py310.py",
    "type": "function",
    "name": "test_override_in_items_with_q",
    "loc": 40,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\dependency_testing\\tutorial001_py310.py:function:test_override_in_items_with_params:chunk1",
    "text": "def test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }",
    "repo": "fastapi",
    "path": "docs_src\\dependency_testing\\tutorial001_py310.py",
    "type": "function",
    "name": "test_override_in_items_with_params",
    "loc": 49,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\encoder\\tutorial001.py:function:update_item:chunk1",
    "text": "def update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    fake_db[id] = json_compatible_item_data",
    "repo": "fastapi",
    "path": "docs_src\\encoder\\tutorial001.py",
    "type": "function",
    "name": "update_item",
    "loc": 21,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\encoder\\tutorial001.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    title: str\n    timestamp: datetime\n    description: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\encoder\\tutorial001.py",
    "type": "class",
    "name": "Item",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\encoder\\tutorial001_py310.py:function:update_item:chunk1",
    "text": "def update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    fake_db[id] = json_compatible_item_data",
    "repo": "fastapi",
    "path": "docs_src\\encoder\\tutorial001_py310.py",
    "type": "function",
    "name": "update_item",
    "loc": 20,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\encoder\\tutorial001_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    title: str\n    timestamp: datetime\n    description: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\encoder\\tutorial001_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\events\\tutorial002.py:function:shutdown_event:chunk1",
    "text": "def shutdown_event():\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(\"Application shutdown\")",
    "repo": "fastapi",
    "path": "docs_src\\events\\tutorial002.py",
    "type": "function",
    "name": "shutdown_event",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\events\\tutorial003.py:function:fake_answer_to_everything_ml_model:chunk1",
    "text": "def fake_answer_to_everything_ml_model(x: float):\n    return x * 42",
    "repo": "fastapi",
    "path": "docs_src\\events\\tutorial003.py",
    "type": "function",
    "name": "fake_answer_to_everything_ml_model",
    "loc": 6,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extending_openapi\\tutorial001.py:function:custom_openapi:chunk1",
    "text": "def custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema",
    "repo": "fastapi",
    "path": "docs_src\\extending_openapi\\tutorial001.py",
    "type": "function",
    "name": "custom_openapi",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial001.py:function:fake_password_hasher:chunk1",
    "text": "def fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial001.py",
    "type": "function",
    "name": "fake_password_hasher",
    "loc": 29,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial001.py:function:fake_save_user:chunk1",
    "text": "def fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial001.py",
    "type": "function",
    "name": "fake_save_user",
    "loc": 33,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial001.py:class:UserIn:chunk1",
    "text": "class UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial001.py",
    "type": "class",
    "name": "UserIn",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial001.py:class:UserOut:chunk1",
    "text": "class UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial001.py",
    "type": "class",
    "name": "UserOut",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial001.py:class:UserInDB:chunk1",
    "text": "class UserInDB(BaseModel):\n    username: str\n    hashed_password: str\n    email: EmailStr\n    full_name: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial001.py",
    "type": "class",
    "name": "UserInDB",
    "loc": 22,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial001_py310.py:function:fake_password_hasher:chunk1",
    "text": "def fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial001_py310.py",
    "type": "function",
    "name": "fake_password_hasher",
    "loc": 27,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial001_py310.py:function:fake_save_user:chunk1",
    "text": "def fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial001_py310.py",
    "type": "function",
    "name": "fake_save_user",
    "loc": 31,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial001_py310.py:class:UserIn:chunk1",
    "text": "class UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial001_py310.py",
    "type": "class",
    "name": "UserIn",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial001_py310.py:class:UserOut:chunk1",
    "text": "class UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial001_py310.py",
    "type": "class",
    "name": "UserOut",
    "loc": 14,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial001_py310.py:class:UserInDB:chunk1",
    "text": "class UserInDB(BaseModel):\n    username: str\n    hashed_password: str\n    email: EmailStr\n    full_name: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial001_py310.py",
    "type": "class",
    "name": "UserInDB",
    "loc": 20,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial002.py:function:fake_password_hasher:chunk1",
    "text": "def fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial002.py",
    "type": "function",
    "name": "fake_password_hasher",
    "loc": 27,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial002.py:function:fake_save_user:chunk1",
    "text": "def fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial002.py",
    "type": "function",
    "name": "fake_save_user",
    "loc": 31,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial002.py:class:UserBase:chunk1",
    "text": "class UserBase(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial002.py",
    "type": "class",
    "name": "UserBase",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial002.py:class:UserIn:chunk1",
    "text": "class UserIn(UserBase):\n    password: str",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial002.py",
    "type": "class",
    "name": "UserIn",
    "loc": 15,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial002.py:class:UserOut:chunk1",
    "text": "class UserOut(UserBase):\n    pass",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial002.py",
    "type": "class",
    "name": "UserOut",
    "loc": 19,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial002.py:class:UserInDB:chunk1",
    "text": "class UserInDB(UserBase):\n    hashed_password: str",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial002.py",
    "type": "class",
    "name": "UserInDB",
    "loc": 23,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial002_py310.py:function:fake_password_hasher:chunk1",
    "text": "def fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial002_py310.py",
    "type": "function",
    "name": "fake_password_hasher",
    "loc": 25,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial002_py310.py:function:fake_save_user:chunk1",
    "text": "def fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial002_py310.py",
    "type": "function",
    "name": "fake_save_user",
    "loc": 29,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial002_py310.py:class:UserBase:chunk1",
    "text": "class UserBase(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial002_py310.py",
    "type": "class",
    "name": "UserBase",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial002_py310.py:class:UserIn:chunk1",
    "text": "class UserIn(UserBase):\n    password: str",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial002_py310.py",
    "type": "class",
    "name": "UserIn",
    "loc": 13,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial002_py310.py:class:UserOut:chunk1",
    "text": "class UserOut(UserBase):\n    pass",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial002_py310.py",
    "type": "class",
    "name": "UserOut",
    "loc": 17,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial002_py310.py:class:UserInDB:chunk1",
    "text": "class UserInDB(UserBase):\n    hashed_password: str",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial002_py310.py",
    "type": "class",
    "name": "UserInDB",
    "loc": 21,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial003.py:class:BaseItem:chunk1",
    "text": "class BaseItem(BaseModel):\n    description: str\n    type: str",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial003.py",
    "type": "class",
    "name": "BaseItem",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial003.py:class:CarItem:chunk1",
    "text": "class CarItem(BaseItem):\n    type: str = \"car\"",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial003.py",
    "type": "class",
    "name": "CarItem",
    "loc": 14,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial003.py:class:PlaneItem:chunk1",
    "text": "class PlaneItem(BaseItem):\n    type: str = \"plane\"\n    size: int",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial003.py",
    "type": "class",
    "name": "PlaneItem",
    "loc": 18,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial003_py310.py:class:BaseItem:chunk1",
    "text": "class BaseItem(BaseModel):\n    description: str\n    type: str",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial003_py310.py",
    "type": "class",
    "name": "BaseItem",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial003_py310.py:class:CarItem:chunk1",
    "text": "class CarItem(BaseItem):\n    type: str = \"car\"",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial003_py310.py",
    "type": "class",
    "name": "CarItem",
    "loc": 14,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial003_py310.py:class:PlaneItem:chunk1",
    "text": "class PlaneItem(BaseItem):\n    type: str = \"plane\"\n    size: int",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial003_py310.py",
    "type": "class",
    "name": "PlaneItem",
    "loc": 18,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial004.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial004.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\extra_models\\tutorial004_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str",
    "repo": "fastapi",
    "path": "docs_src\\extra_models\\tutorial004_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\first_steps\\tutorial003.py:function:root:chunk1",
    "text": "def root():\n    return {\"message\": \"Hello World\"}",
    "repo": "fastapi",
    "path": "docs_src\\first_steps\\tutorial003.py",
    "type": "function",
    "name": "root",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\generate_clients\\tutorial001.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    price: float",
    "repo": "fastapi",
    "path": "docs_src\\generate_clients\\tutorial001.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\generate_clients\\tutorial001.py:class:ResponseMessage:chunk1",
    "text": "class ResponseMessage(BaseModel):\n    message: str",
    "repo": "fastapi",
    "path": "docs_src\\generate_clients\\tutorial001.py",
    "type": "class",
    "name": "ResponseMessage",
    "loc": 14,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\generate_clients\\tutorial001_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    price: float",
    "repo": "fastapi",
    "path": "docs_src\\generate_clients\\tutorial001_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\generate_clients\\tutorial001_py39.py:class:ResponseMessage:chunk1",
    "text": "class ResponseMessage(BaseModel):\n    message: str",
    "repo": "fastapi",
    "path": "docs_src\\generate_clients\\tutorial001_py39.py",
    "type": "class",
    "name": "ResponseMessage",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\generate_clients\\tutorial002.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    price: float",
    "repo": "fastapi",
    "path": "docs_src\\generate_clients\\tutorial002.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\generate_clients\\tutorial002.py:class:ResponseMessage:chunk1",
    "text": "class ResponseMessage(BaseModel):\n    message: str",
    "repo": "fastapi",
    "path": "docs_src\\generate_clients\\tutorial002.py",
    "type": "class",
    "name": "ResponseMessage",
    "loc": 14,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\generate_clients\\tutorial002.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: str",
    "repo": "fastapi",
    "path": "docs_src\\generate_clients\\tutorial002.py",
    "type": "class",
    "name": "User",
    "loc": 18,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\generate_clients\\tutorial002_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    price: float",
    "repo": "fastapi",
    "path": "docs_src\\generate_clients\\tutorial002_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\generate_clients\\tutorial002_py39.py:class:ResponseMessage:chunk1",
    "text": "class ResponseMessage(BaseModel):\n    message: str",
    "repo": "fastapi",
    "path": "docs_src\\generate_clients\\tutorial002_py39.py",
    "type": "class",
    "name": "ResponseMessage",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\generate_clients\\tutorial002_py39.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: str",
    "repo": "fastapi",
    "path": "docs_src\\generate_clients\\tutorial002_py39.py",
    "type": "class",
    "name": "User",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\generate_clients\\tutorial003.py:function:custom_generate_unique_id:chunk1",
    "text": "def custom_generate_unique_id(route: APIRoute):\n    return f\"{route.tags[0]}-{route.name}\"",
    "repo": "fastapi",
    "path": "docs_src\\generate_clients\\tutorial003.py",
    "type": "function",
    "name": "custom_generate_unique_id",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\generate_clients\\tutorial003.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    price: float",
    "repo": "fastapi",
    "path": "docs_src\\generate_clients\\tutorial003.py",
    "type": "class",
    "name": "Item",
    "loc": 15,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\generate_clients\\tutorial003.py:class:ResponseMessage:chunk1",
    "text": "class ResponseMessage(BaseModel):\n    message: str",
    "repo": "fastapi",
    "path": "docs_src\\generate_clients\\tutorial003.py",
    "type": "class",
    "name": "ResponseMessage",
    "loc": 20,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\generate_clients\\tutorial003.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: str",
    "repo": "fastapi",
    "path": "docs_src\\generate_clients\\tutorial003.py",
    "type": "class",
    "name": "User",
    "loc": 24,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\generate_clients\\tutorial003_py39.py:function:custom_generate_unique_id:chunk1",
    "text": "def custom_generate_unique_id(route: APIRoute):\n    return f\"{route.tags[0]}-{route.name}\"",
    "repo": "fastapi",
    "path": "docs_src\\generate_clients\\tutorial003_py39.py",
    "type": "function",
    "name": "custom_generate_unique_id",
    "loc": 6,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\generate_clients\\tutorial003_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    price: float",
    "repo": "fastapi",
    "path": "docs_src\\generate_clients\\tutorial003_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 13,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\generate_clients\\tutorial003_py39.py:class:ResponseMessage:chunk1",
    "text": "class ResponseMessage(BaseModel):\n    message: str",
    "repo": "fastapi",
    "path": "docs_src\\generate_clients\\tutorial003_py39.py",
    "type": "class",
    "name": "ResponseMessage",
    "loc": 18,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\generate_clients\\tutorial003_py39.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: str",
    "repo": "fastapi",
    "path": "docs_src\\generate_clients\\tutorial003_py39.py",
    "type": "class",
    "name": "User",
    "loc": 22,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\graphql\\tutorial001.py:class:User:chunk1",
    "text": "class User:\n    name: str\n    age: int",
    "repo": "fastapi",
    "path": "docs_src\\graphql\\tutorial001.py",
    "type": "class",
    "name": "User",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\graphql\\tutorial001.py:class:Query:chunk1",
    "text": "class Query:\n    @strawberry.field\n    def user(self) -> User:\n        return User(name=\"Patrick\", age=100)",
    "repo": "fastapi",
    "path": "docs_src\\graphql\\tutorial001.py",
    "type": "class",
    "name": "Query",
    "loc": 13,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\handling_errors\\tutorial003.py:class:UnicornException:chunk1",
    "text": "class UnicornException(Exception):\n    def __init__(self, name: str):\n        self.name = name",
    "repo": "fastapi",
    "path": "docs_src\\handling_errors\\tutorial003.py",
    "type": "class",
    "name": "UnicornException",
    "loc": 5,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\handling_errors\\tutorial005.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    title: str\n    size: int",
    "repo": "fastapi",
    "path": "docs_src\\handling_errors\\tutorial005.py",
    "type": "class",
    "name": "Item",
    "loc": 18,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial001.py:class:CommonHeaders:chunk1",
    "text": "class CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial001.py",
    "type": "class",
    "name": "CommonHeaders",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial001_an.py:class:CommonHeaders:chunk1",
    "text": "class CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial001_an.py",
    "type": "class",
    "name": "CommonHeaders",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial001_an_py310.py:class:CommonHeaders:chunk1",
    "text": "class CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial001_an_py310.py",
    "type": "class",
    "name": "CommonHeaders",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial001_an_py39.py:class:CommonHeaders:chunk1",
    "text": "class CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial001_an_py39.py",
    "type": "class",
    "name": "CommonHeaders",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial001_py310.py:class:CommonHeaders:chunk1",
    "text": "class CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial001_py310.py",
    "type": "class",
    "name": "CommonHeaders",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial001_py39.py:class:CommonHeaders:chunk1",
    "text": "class CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial001_py39.py",
    "type": "class",
    "name": "CommonHeaders",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial002.py:class:CommonHeaders:chunk1",
    "text": "class CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial002.py",
    "type": "class",
    "name": "CommonHeaders",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial002_an.py:class:CommonHeaders:chunk1",
    "text": "class CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial002_an.py",
    "type": "class",
    "name": "CommonHeaders",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial002_an_py310.py:class:CommonHeaders:chunk1",
    "text": "class CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial002_an_py310.py",
    "type": "class",
    "name": "CommonHeaders",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial002_an_py39.py:class:CommonHeaders:chunk1",
    "text": "class CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial002_an_py39.py",
    "type": "class",
    "name": "CommonHeaders",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial002_pv1.py:class:Config:chunk1",
    "text": "class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial002_pv1.py",
    "type": "class",
    "name": "Config",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial002_pv1.py:class:CommonHeaders:chunk1",
    "text": "class CommonHeaders(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial002_pv1.py",
    "type": "class",
    "name": "CommonHeaders",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial002_pv1_an.py:class:Config:chunk1",
    "text": "class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial002_pv1_an.py",
    "type": "class",
    "name": "Config",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial002_pv1_an.py:class:CommonHeaders:chunk1",
    "text": "class CommonHeaders(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial002_pv1_an.py",
    "type": "class",
    "name": "CommonHeaders",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial002_pv1_an_py310.py:class:Config:chunk1",
    "text": "class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial002_pv1_an_py310.py",
    "type": "class",
    "name": "Config",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial002_pv1_an_py310.py:class:CommonHeaders:chunk1",
    "text": "class CommonHeaders(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial002_pv1_an_py310.py",
    "type": "class",
    "name": "CommonHeaders",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial002_pv1_an_py39.py:class:Config:chunk1",
    "text": "class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial002_pv1_an_py39.py",
    "type": "class",
    "name": "Config",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial002_pv1_an_py39.py:class:CommonHeaders:chunk1",
    "text": "class CommonHeaders(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial002_pv1_an_py39.py",
    "type": "class",
    "name": "CommonHeaders",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial002_pv1_py310.py:class:Config:chunk1",
    "text": "class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial002_pv1_py310.py",
    "type": "class",
    "name": "Config",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial002_pv1_py310.py:class:CommonHeaders:chunk1",
    "text": "class CommonHeaders(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial002_pv1_py310.py",
    "type": "class",
    "name": "CommonHeaders",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial002_pv1_py39.py:class:Config:chunk1",
    "text": "class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial002_pv1_py39.py",
    "type": "class",
    "name": "Config",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial002_pv1_py39.py:class:CommonHeaders:chunk1",
    "text": "class CommonHeaders(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial002_pv1_py39.py",
    "type": "class",
    "name": "CommonHeaders",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial002_py310.py:class:CommonHeaders:chunk1",
    "text": "class CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial002_py310.py",
    "type": "class",
    "name": "CommonHeaders",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\header_param_models\\tutorial002_py39.py:class:CommonHeaders:chunk1",
    "text": "class CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\header_param_models\\tutorial002_py39.py",
    "type": "class",
    "name": "CommonHeaders",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\openapi_callbacks\\tutorial001.py:function:invoice_notification:chunk1",
    "text": "def invoice_notification(body: InvoiceEvent):\n    pass",
    "repo": "fastapi",
    "path": "docs_src\\openapi_callbacks\\tutorial001.py",
    "type": "function",
    "name": "invoice_notification",
    "loc": 31,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\openapi_callbacks\\tutorial001.py:function:create_invoice:chunk1",
    "text": "def create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}",
    "repo": "fastapi",
    "path": "docs_src\\openapi_callbacks\\tutorial001.py",
    "type": "function",
    "name": "create_invoice",
    "loc": 36,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\openapi_callbacks\\tutorial001.py:class:Invoice:chunk1",
    "text": "class Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float",
    "repo": "fastapi",
    "path": "docs_src\\openapi_callbacks\\tutorial001.py",
    "type": "class",
    "name": "Invoice",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\openapi_callbacks\\tutorial001.py:class:InvoiceEvent:chunk1",
    "text": "class InvoiceEvent(BaseModel):\n    description: str\n    paid: bool",
    "repo": "fastapi",
    "path": "docs_src\\openapi_callbacks\\tutorial001.py",
    "type": "class",
    "name": "InvoiceEvent",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\openapi_callbacks\\tutorial001.py:class:InvoiceEventReceived:chunk1",
    "text": "class InvoiceEventReceived(BaseModel):\n    ok: bool",
    "repo": "fastapi",
    "path": "docs_src\\openapi_callbacks\\tutorial001.py",
    "type": "class",
    "name": "InvoiceEventReceived",
    "loc": 21,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\openapi_webhooks\\tutorial001.py:function:new_subscription:chunk1",
    "text": "def new_subscription(body: Subscription):\n    \"\"\"\n    When a new user subscribes to your service we'll send you a POST request with this\n    data to the URL that you register for the event `new-subscription` in the dashboard.\n    \"\"\"",
    "repo": "fastapi",
    "path": "docs_src\\openapi_webhooks\\tutorial001.py",
    "type": "function",
    "name": "new_subscription",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\openapi_webhooks\\tutorial001.py:function:read_users:chunk1",
    "text": "def read_users():\n    return [\"Rick\", \"Morty\"]",
    "repo": "fastapi",
    "path": "docs_src\\openapi_webhooks\\tutorial001.py",
    "type": "function",
    "name": "read_users",
    "loc": 24,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\openapi_webhooks\\tutorial001.py:class:Subscription:chunk1",
    "text": "class Subscription(BaseModel):\n    username: str\n    monthly_fee: float\n    start_date: datetime",
    "repo": "fastapi",
    "path": "docs_src\\openapi_webhooks\\tutorial001.py",
    "type": "class",
    "name": "Subscription",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\path_operation_advanced_configuration\\tutorial002.py:function:use_route_names_as_operation_ids:chunk1",
    "text": "def use_route_names_as_operation_ids(app: FastAPI) -> None:\n    \"\"\"\n    Simplify operation IDs so that generated API clients have simpler function\n    names.\n\n    Should be called only after all routes have been added.\n    \"\"\"\n    for route in app.routes:\n        if isinstance(route, APIRoute):\n            route.operation_id = route.name  # in this case, 'read_items'",
    "repo": "fastapi",
    "path": "docs_src\\path_operation_advanced_configuration\\tutorial002.py",
    "type": "function",
    "name": "use_route_names_as_operation_ids",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\path_operation_advanced_configuration\\tutorial004.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()",
    "repo": "fastapi",
    "path": "docs_src\\path_operation_advanced_configuration\\tutorial004.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\path_operation_advanced_configuration\\tutorial006.py:function:magic_data_reader:chunk1",
    "text": "def magic_data_reader(raw_body: bytes):\n    return {\n        \"size\": len(raw_body),\n        \"content\": {\n            \"name\": \"Maaaagic\",\n            \"price\": 42,\n            \"description\": \"Just kiddin', no magic here. ✨\",\n        },\n    }",
    "repo": "fastapi",
    "path": "docs_src\\path_operation_advanced_configuration\\tutorial006.py",
    "type": "function",
    "name": "magic_data_reader",
    "loc": 6,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\path_operation_advanced_configuration\\tutorial007.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    tags: List[str]",
    "repo": "fastapi",
    "path": "docs_src\\path_operation_advanced_configuration\\tutorial007.py",
    "type": "class",
    "name": "Item",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\path_operation_advanced_configuration\\tutorial007_pv1.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    tags: List[str]",
    "repo": "fastapi",
    "path": "docs_src\\path_operation_advanced_configuration\\tutorial007_pv1.py",
    "type": "class",
    "name": "Item",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\path_operation_configuration\\tutorial001.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()",
    "repo": "fastapi",
    "path": "docs_src\\path_operation_configuration\\tutorial001.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\path_operation_configuration\\tutorial001_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()",
    "repo": "fastapi",
    "path": "docs_src\\path_operation_configuration\\tutorial001_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\path_operation_configuration\\tutorial001_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()",
    "repo": "fastapi",
    "path": "docs_src\\path_operation_configuration\\tutorial001_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\path_operation_configuration\\tutorial002.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()",
    "repo": "fastapi",
    "path": "docs_src\\path_operation_configuration\\tutorial002.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\path_operation_configuration\\tutorial002b.py:class:Tags:chunk1",
    "text": "class Tags(Enum):\n    items = \"items\"\n    users = \"users\"",
    "repo": "fastapi",
    "path": "docs_src\\path_operation_configuration\\tutorial002b.py",
    "type": "class",
    "name": "Tags",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\path_operation_configuration\\tutorial002_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()",
    "repo": "fastapi",
    "path": "docs_src\\path_operation_configuration\\tutorial002_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\path_operation_configuration\\tutorial002_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()",
    "repo": "fastapi",
    "path": "docs_src\\path_operation_configuration\\tutorial002_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\path_operation_configuration\\tutorial003.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()",
    "repo": "fastapi",
    "path": "docs_src\\path_operation_configuration\\tutorial003.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\path_operation_configuration\\tutorial003_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()",
    "repo": "fastapi",
    "path": "docs_src\\path_operation_configuration\\tutorial003_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\path_operation_configuration\\tutorial003_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()",
    "repo": "fastapi",
    "path": "docs_src\\path_operation_configuration\\tutorial003_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\path_operation_configuration\\tutorial004.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()",
    "repo": "fastapi",
    "path": "docs_src\\path_operation_configuration\\tutorial004.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\path_operation_configuration\\tutorial004_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()",
    "repo": "fastapi",
    "path": "docs_src\\path_operation_configuration\\tutorial004_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\path_operation_configuration\\tutorial004_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()",
    "repo": "fastapi",
    "path": "docs_src\\path_operation_configuration\\tutorial004_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\path_operation_configuration\\tutorial005.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()",
    "repo": "fastapi",
    "path": "docs_src\\path_operation_configuration\\tutorial005.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\path_operation_configuration\\tutorial005_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()",
    "repo": "fastapi",
    "path": "docs_src\\path_operation_configuration\\tutorial005_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\path_operation_configuration\\tutorial005_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()",
    "repo": "fastapi",
    "path": "docs_src\\path_operation_configuration\\tutorial005_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\path_params\\tutorial005.py:class:ModelName:chunk1",
    "text": "class ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"",
    "repo": "fastapi",
    "path": "docs_src\\path_params\\tutorial005.py",
    "type": "class",
    "name": "ModelName",
    "loc": 6,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial001.py:function:get_full_name:chunk1",
    "text": "def get_full_name(first_name, last_name):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial001.py",
    "type": "function",
    "name": "get_full_name",
    "loc": 1,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial002.py:function:get_full_name:chunk1",
    "text": "def get_full_name(first_name: str, last_name: str):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial002.py",
    "type": "function",
    "name": "get_full_name",
    "loc": 1,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial003.py:function:get_name_with_age:chunk1",
    "text": "def get_name_with_age(name: str, age: int):\n    name_with_age = name + \" is this old: \" + age\n    return name_with_age",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial003.py",
    "type": "function",
    "name": "get_name_with_age",
    "loc": 1,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial004.py:function:get_name_with_age:chunk1",
    "text": "def get_name_with_age(name: str, age: int):\n    name_with_age = name + \" is this old: \" + str(age)\n    return name_with_age",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial004.py",
    "type": "function",
    "name": "get_name_with_age",
    "loc": 1,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial005.py:function:get_items:chunk1",
    "text": "def get_items(item_a: str, item_b: int, item_c: float, item_d: bool, item_e: bytes):\n    return item_a, item_b, item_c, item_d, item_d, item_e",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial005.py",
    "type": "function",
    "name": "get_items",
    "loc": 1,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial006.py:function:process_items:chunk1",
    "text": "def process_items(items: List[str]):\n    for item in items:\n        print(item)",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial006.py",
    "type": "function",
    "name": "process_items",
    "loc": 4,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial006_py39.py:function:process_items:chunk1",
    "text": "def process_items(items: list[str]):\n    for item in items:\n        print(item)",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial006_py39.py",
    "type": "function",
    "name": "process_items",
    "loc": 1,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial007.py:function:process_items:chunk1",
    "text": "def process_items(items_t: Tuple[int, int, str], items_s: Set[bytes]):\n    return items_t, items_s",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial007.py",
    "type": "function",
    "name": "process_items",
    "loc": 4,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial007_py39.py:function:process_items:chunk1",
    "text": "def process_items(items_t: tuple[int, int, str], items_s: set[bytes]):\n    return items_t, items_s",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial007_py39.py",
    "type": "function",
    "name": "process_items",
    "loc": 1,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial008.py:function:process_items:chunk1",
    "text": "def process_items(prices: Dict[str, float]):\n    for item_name, item_price in prices.items():\n        print(item_name)\n        print(item_price)",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial008.py",
    "type": "function",
    "name": "process_items",
    "loc": 4,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial008b.py:function:process_item:chunk1",
    "text": "def process_item(item: Union[int, str]):\n    print(item)",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial008b.py",
    "type": "function",
    "name": "process_item",
    "loc": 4,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial008b_py310.py:function:process_item:chunk1",
    "text": "def process_item(item: int | str):\n    print(item)",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial008b_py310.py",
    "type": "function",
    "name": "process_item",
    "loc": 1,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial008_py39.py:function:process_items:chunk1",
    "text": "def process_items(prices: dict[str, float]):\n    for item_name, item_price in prices.items():\n        print(item_name)\n        print(item_price)",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial008_py39.py",
    "type": "function",
    "name": "process_items",
    "loc": 1,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial009.py:function:say_hi:chunk1",
    "text": "def say_hi(name: Optional[str] = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial009.py",
    "type": "function",
    "name": "say_hi",
    "loc": 4,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial009b.py:function:say_hi:chunk1",
    "text": "def say_hi(name: Union[str, None] = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial009b.py",
    "type": "function",
    "name": "say_hi",
    "loc": 4,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial009c.py:function:say_hi:chunk1",
    "text": "def say_hi(name: Optional[str]):\n    print(f\"Hey {name}!\")",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial009c.py",
    "type": "function",
    "name": "say_hi",
    "loc": 4,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial009c_py310.py:function:say_hi:chunk1",
    "text": "def say_hi(name: str | None):\n    print(f\"Hey {name}!\")",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial009c_py310.py",
    "type": "function",
    "name": "say_hi",
    "loc": 1,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial009_py310.py:function:say_hi:chunk1",
    "text": "def say_hi(name: str | None = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial009_py310.py",
    "type": "function",
    "name": "say_hi",
    "loc": 1,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial010.py:function:get_person_name:chunk1",
    "text": "def get_person_name(one_person: Person):\n    return one_person.name",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial010.py",
    "type": "function",
    "name": "get_person_name",
    "loc": 6,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial010.py:class:Person:chunk1",
    "text": "class Person:\n    def __init__(self, name: str):\n        self.name = name",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial010.py",
    "type": "class",
    "name": "Person",
    "loc": 1,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial011.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: Union[datetime, None] = None\n    friends: List[int] = []",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial011.py",
    "type": "class",
    "name": "User",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial011_py310.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: datetime | None = None\n    friends: list[int] = []",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial011_py310.py",
    "type": "class",
    "name": "User",
    "loc": 6,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial011_py39.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: Union[datetime, None] = None\n    friends: list[int] = []",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial011_py39.py",
    "type": "class",
    "name": "User",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial012.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    name: str\n    age: Optional[int]",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial012.py",
    "type": "class",
    "name": "User",
    "loc": 6,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial013.py:function:say_hello:chunk1",
    "text": "def say_hello(name: Annotated[str, \"this is just metadata\"]) -> str:\n    return f\"Hello {name}\"",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial013.py",
    "type": "function",
    "name": "say_hello",
    "loc": 4,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\python_types\\tutorial013_py39.py:function:say_hello:chunk1",
    "text": "def say_hello(name: Annotated[str, \"this is just metadata\"]) -> str:\n    return f\"Hello {name}\"",
    "repo": "fastapi",
    "path": "docs_src\\python_types\\tutorial013_py39.py",
    "type": "function",
    "name": "say_hello",
    "loc": 4,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial001.py:class:FilterParams:chunk1",
    "text": "class FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial001.py",
    "type": "class",
    "name": "FilterParams",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial001_an.py:class:FilterParams:chunk1",
    "text": "class FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial001_an.py",
    "type": "class",
    "name": "FilterParams",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial001_an_py310.py:class:FilterParams:chunk1",
    "text": "class FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial001_an_py310.py",
    "type": "class",
    "name": "FilterParams",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial001_an_py39.py:class:FilterParams:chunk1",
    "text": "class FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial001_an_py39.py",
    "type": "class",
    "name": "FilterParams",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial001_py310.py:class:FilterParams:chunk1",
    "text": "class FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial001_py310.py",
    "type": "class",
    "name": "FilterParams",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial001_py39.py:class:FilterParams:chunk1",
    "text": "class FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial001_py39.py",
    "type": "class",
    "name": "FilterParams",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial002.py:class:FilterParams:chunk1",
    "text": "class FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial002.py",
    "type": "class",
    "name": "FilterParams",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial002_an.py:class:FilterParams:chunk1",
    "text": "class FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial002_an.py",
    "type": "class",
    "name": "FilterParams",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial002_an_py310.py:class:FilterParams:chunk1",
    "text": "class FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial002_an_py310.py",
    "type": "class",
    "name": "FilterParams",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial002_an_py39.py:class:FilterParams:chunk1",
    "text": "class FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial002_an_py39.py",
    "type": "class",
    "name": "FilterParams",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial002_pv1.py:class:Config:chunk1",
    "text": "class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial002_pv1.py",
    "type": "class",
    "name": "Config",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial002_pv1.py:class:FilterParams:chunk1",
    "text": "class FilterParams(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial002_pv1.py",
    "type": "class",
    "name": "FilterParams",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial002_pv1_an.py:class:Config:chunk1",
    "text": "class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial002_pv1_an.py",
    "type": "class",
    "name": "Config",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial002_pv1_an.py:class:FilterParams:chunk1",
    "text": "class FilterParams(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial002_pv1_an.py",
    "type": "class",
    "name": "FilterParams",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial002_pv1_an_py310.py:class:Config:chunk1",
    "text": "class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial002_pv1_an_py310.py",
    "type": "class",
    "name": "Config",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial002_pv1_an_py310.py:class:FilterParams:chunk1",
    "text": "class FilterParams(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial002_pv1_an_py310.py",
    "type": "class",
    "name": "FilterParams",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial002_pv1_an_py39.py:class:Config:chunk1",
    "text": "class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial002_pv1_an_py39.py",
    "type": "class",
    "name": "Config",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial002_pv1_an_py39.py:class:FilterParams:chunk1",
    "text": "class FilterParams(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial002_pv1_an_py39.py",
    "type": "class",
    "name": "FilterParams",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial002_pv1_py310.py:class:Config:chunk1",
    "text": "class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial002_pv1_py310.py",
    "type": "class",
    "name": "Config",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial002_pv1_py310.py:class:FilterParams:chunk1",
    "text": "class FilterParams(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial002_pv1_py310.py",
    "type": "class",
    "name": "FilterParams",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial002_pv1_py39.py:class:Config:chunk1",
    "text": "class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial002_pv1_py39.py",
    "type": "class",
    "name": "Config",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial002_pv1_py39.py:class:FilterParams:chunk1",
    "text": "class FilterParams(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial002_pv1_py39.py",
    "type": "class",
    "name": "FilterParams",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial002_py310.py:class:FilterParams:chunk1",
    "text": "class FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial002_py310.py",
    "type": "class",
    "name": "FilterParams",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\query_param_models\\tutorial002_py39.py:class:FilterParams:chunk1",
    "text": "class FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\query_param_models\\tutorial002_py39.py",
    "type": "class",
    "name": "FilterParams",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\request_form_models\\tutorial001.py:class:FormData:chunk1",
    "text": "class FormData(BaseModel):\n    username: str\n    password: str",
    "repo": "fastapi",
    "path": "docs_src\\request_form_models\\tutorial001.py",
    "type": "class",
    "name": "FormData",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\request_form_models\\tutorial001_an.py:class:FormData:chunk1",
    "text": "class FormData(BaseModel):\n    username: str\n    password: str",
    "repo": "fastapi",
    "path": "docs_src\\request_form_models\\tutorial001_an.py",
    "type": "class",
    "name": "FormData",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\request_form_models\\tutorial001_an_py39.py:class:FormData:chunk1",
    "text": "class FormData(BaseModel):\n    username: str\n    password: str",
    "repo": "fastapi",
    "path": "docs_src\\request_form_models\\tutorial001_an_py39.py",
    "type": "class",
    "name": "FormData",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\request_form_models\\tutorial002.py:class:FormData:chunk1",
    "text": "class FormData(BaseModel):\n    username: str\n    password: str\n    model_config = {\"extra\": \"forbid\"}",
    "repo": "fastapi",
    "path": "docs_src\\request_form_models\\tutorial002.py",
    "type": "class",
    "name": "FormData",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\request_form_models\\tutorial002_an.py:class:FormData:chunk1",
    "text": "class FormData(BaseModel):\n    username: str\n    password: str\n    model_config = {\"extra\": \"forbid\"}",
    "repo": "fastapi",
    "path": "docs_src\\request_form_models\\tutorial002_an.py",
    "type": "class",
    "name": "FormData",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\request_form_models\\tutorial002_an_py39.py:class:FormData:chunk1",
    "text": "class FormData(BaseModel):\n    username: str\n    password: str\n    model_config = {\"extra\": \"forbid\"}",
    "repo": "fastapi",
    "path": "docs_src\\request_form_models\\tutorial002_an_py39.py",
    "type": "class",
    "name": "FormData",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\request_form_models\\tutorial002_pv1.py:class:Config:chunk1",
    "text": "class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\request_form_models\\tutorial002_pv1.py",
    "type": "class",
    "name": "Config",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\request_form_models\\tutorial002_pv1.py:class:FormData:chunk1",
    "text": "class FormData(BaseModel):\n    username: str\n    password: str\n\n    class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\request_form_models\\tutorial002_pv1.py",
    "type": "class",
    "name": "FormData",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\request_form_models\\tutorial002_pv1_an.py:class:Config:chunk1",
    "text": "class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\request_form_models\\tutorial002_pv1_an.py",
    "type": "class",
    "name": "Config",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\request_form_models\\tutorial002_pv1_an.py:class:FormData:chunk1",
    "text": "class FormData(BaseModel):\n    username: str\n    password: str\n\n    class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\request_form_models\\tutorial002_pv1_an.py",
    "type": "class",
    "name": "FormData",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\request_form_models\\tutorial002_pv1_an_py39.py:class:Config:chunk1",
    "text": "class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\request_form_models\\tutorial002_pv1_an_py39.py",
    "type": "class",
    "name": "Config",
    "loc": 13,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\request_form_models\\tutorial002_pv1_an_py39.py:class:FormData:chunk1",
    "text": "class FormData(BaseModel):\n    username: str\n    password: str\n\n    class Config:\n        extra = \"forbid\"",
    "repo": "fastapi",
    "path": "docs_src\\request_form_models\\tutorial002_pv1_an_py39.py",
    "type": "class",
    "name": "FormData",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_change_status_code\\tutorial001.py:function:get_or_create_task:chunk1",
    "text": "def get_or_create_task(task_id: str, response: Response):\n    if task_id not in tasks:\n        tasks[task_id] = \"This didn't exist before\"\n        response.status_code = status.HTTP_201_CREATED\n    return tasks[task_id]",
    "repo": "fastapi",
    "path": "docs_src\\response_change_status_code\\tutorial001.py",
    "type": "function",
    "name": "get_or_create_task",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_cookies\\tutorial001.py:function:create_cookie:chunk1",
    "text": "def create_cookie():\n    content = {\"message\": \"Come to the dark side, we have cookies\"}\n    response = JSONResponse(content=content)\n    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")\n    return response",
    "repo": "fastapi",
    "path": "docs_src\\response_cookies\\tutorial001.py",
    "type": "function",
    "name": "create_cookie",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_cookies\\tutorial002.py:function:create_cookie:chunk1",
    "text": "def create_cookie(response: Response):\n    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")\n    return {\"message\": \"Come to the dark side, we have cookies\"}",
    "repo": "fastapi",
    "path": "docs_src\\response_cookies\\tutorial002.py",
    "type": "function",
    "name": "create_cookie",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_directly\\tutorial001.py:function:update_item:chunk1",
    "text": "def update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    return JSONResponse(content=json_compatible_item_data)",
    "repo": "fastapi",
    "path": "docs_src\\response_directly\\tutorial001.py",
    "type": "function",
    "name": "update_item",
    "loc": 20,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_directly\\tutorial001.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    title: str\n    timestamp: datetime\n    description: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\response_directly\\tutorial001.py",
    "type": "class",
    "name": "Item",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_directly\\tutorial002.py:function:get_legacy_data:chunk1",
    "text": "def get_legacy_data():\n    data = \"\"\"<?xml version=\"1.0\"?>\n    <shampoo>\n    <Header>\n        Apply shampoo here.\n    </Header>\n    <Body>\n        You'll have to use soap here.\n    </Body>\n    </shampoo>\n    \"\"\"\n    return Response(content=data, media_type=\"application/xml\")",
    "repo": "fastapi",
    "path": "docs_src\\response_directly\\tutorial002.py",
    "type": "function",
    "name": "get_legacy_data",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_headers\\tutorial001.py:function:get_headers:chunk1",
    "text": "def get_headers():\n    content = {\"message\": \"Hello World\"}\n    headers = {\"X-Cat-Dog\": \"alone in the world\", \"Content-Language\": \"en-US\"}\n    return JSONResponse(content=content, headers=headers)",
    "repo": "fastapi",
    "path": "docs_src\\response_headers\\tutorial001.py",
    "type": "function",
    "name": "get_headers",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_headers\\tutorial002.py:function:get_headers:chunk1",
    "text": "def get_headers(response: Response):\n    response.headers[\"X-Cat-Dog\"] = \"alone in the world\"\n    return {\"message\": \"Hello World\"}",
    "repo": "fastapi",
    "path": "docs_src\\response_headers\\tutorial002.py",
    "type": "function",
    "name": "get_headers",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial001.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial001.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial001_01.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial001_01.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial001_01_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial001_01_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial001_01_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial001_01_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial001_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial001_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial001_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial001_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial002.py:class:UserIn:chunk1",
    "text": "class UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial002.py",
    "type": "class",
    "name": "UserIn",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial002_py310.py:class:UserIn:chunk1",
    "text": "class UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial002_py310.py",
    "type": "class",
    "name": "UserIn",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial003.py:class:UserIn:chunk1",
    "text": "class UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial003.py",
    "type": "class",
    "name": "UserIn",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial003.py:class:UserOut:chunk1",
    "text": "class UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial003.py",
    "type": "class",
    "name": "UserOut",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial003_01.py:class:BaseUser:chunk1",
    "text": "class BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial003_01.py",
    "type": "class",
    "name": "BaseUser",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial003_01.py:class:UserIn:chunk1",
    "text": "class UserIn(BaseUser):\n    password: str",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial003_01.py",
    "type": "class",
    "name": "UserIn",
    "loc": 15,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial003_01_py310.py:class:BaseUser:chunk1",
    "text": "class BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial003_01_py310.py",
    "type": "class",
    "name": "BaseUser",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial003_01_py310.py:class:UserIn:chunk1",
    "text": "class UserIn(BaseUser):\n    password: str",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial003_01_py310.py",
    "type": "class",
    "name": "UserIn",
    "loc": 13,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial003_py310.py:class:UserIn:chunk1",
    "text": "class UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial003_py310.py",
    "type": "class",
    "name": "UserIn",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial003_py310.py:class:UserOut:chunk1",
    "text": "class UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial003_py310.py",
    "type": "class",
    "name": "UserOut",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial004.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial004.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial004_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial004_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial004_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial004_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial005.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial005.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial005_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial005_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial006.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial006.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\response_model\\tutorial006_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5",
    "repo": "fastapi",
    "path": "docs_src\\response_model\\tutorial006_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial001.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }\n    }",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial001.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial001_pv1.py:class:Config:chunk1",
    "text": "class Config:\n        schema_extra = {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial001_pv1.py",
    "type": "class",
    "name": "Config",
    "loc": 15,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial001_pv1.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n    class Config:\n        schema_extra = {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial001_pv1.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial001_pv1_py310.py:class:Config:chunk1",
    "text": "class Config:\n        schema_extra = {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial001_pv1_py310.py",
    "type": "class",
    "name": "Config",
    "loc": 13,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial001_pv1_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n    class Config:\n        schema_extra = {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial001_pv1_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial001_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }\n    }",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial001_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial002.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str = Field(examples=[\"Foo\"])\n    description: Union[str, None] = Field(default=None, examples=[\"A very nice Item\"])\n    price: float = Field(examples=[35.4])\n    tax: Union[float, None] = Field(default=None, examples=[3.2])",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial002.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial002_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str = Field(examples=[\"Foo\"])\n    description: str | None = Field(default=None, examples=[\"A very nice Item\"])\n    price: float = Field(examples=[35.4])\n    tax: float | None = Field(default=None, examples=[3.2])",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial002_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial003.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial003.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial003_an.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial003_an.py",
    "type": "class",
    "name": "Item",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial003_an_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial003_an_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial003_an_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial003_an_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial003_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial003_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial004.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial004.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial004_an.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial004_an.py",
    "type": "class",
    "name": "Item",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial004_an_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial004_an_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial004_an_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial004_an_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial004_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial004_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial005.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial005.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial005_an.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial005_an.py",
    "type": "class",
    "name": "Item",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial005_an_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial005_an_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial005_an_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial005_an_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\schema_extra_example\\tutorial005_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None",
    "repo": "fastapi",
    "path": "docs_src\\schema_extra_example\\tutorial005_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial002.py:function:fake_decode_token:chunk1",
    "text": "def fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial002.py",
    "type": "function",
    "name": "fake_decode_token",
    "loc": 19,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial002.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial002.py",
    "type": "class",
    "name": "User",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial002_an.py:function:fake_decode_token:chunk1",
    "text": "def fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial002_an.py",
    "type": "function",
    "name": "fake_decode_token",
    "loc": 20,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial002_an.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial002_an.py",
    "type": "class",
    "name": "User",
    "loc": 13,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial002_an_py310.py:function:fake_decode_token:chunk1",
    "text": "def fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial002_an_py310.py",
    "type": "function",
    "name": "fake_decode_token",
    "loc": 19,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial002_an_py310.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial002_an_py310.py",
    "type": "class",
    "name": "User",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial002_an_py39.py:function:fake_decode_token:chunk1",
    "text": "def fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial002_an_py39.py",
    "type": "function",
    "name": "fake_decode_token",
    "loc": 19,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial002_an_py39.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial002_an_py39.py",
    "type": "class",
    "name": "User",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial002_py310.py:function:fake_decode_token:chunk1",
    "text": "def fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial002_py310.py",
    "type": "function",
    "name": "fake_decode_token",
    "loc": 17,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial002_py310.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial002_py310.py",
    "type": "class",
    "name": "User",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003.py:function:fake_hash_password:chunk1",
    "text": "def fake_hash_password(password: str):\n    return \"fakehashed\" + password",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003.py",
    "type": "function",
    "name": "fake_hash_password",
    "loc": 27,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003.py:function:get_user:chunk1",
    "text": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003.py",
    "type": "function",
    "name": "get_user",
    "loc": 45,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003.py:function:fake_decode_token:chunk1",
    "text": "def fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003.py",
    "type": "function",
    "name": "fake_decode_token",
    "loc": 51,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003.py",
    "type": "class",
    "name": "User",
    "loc": 34,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003.py:class:UserInDB:chunk1",
    "text": "class UserInDB(User):\n    hashed_password: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003.py",
    "type": "class",
    "name": "UserInDB",
    "loc": 41,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003_an.py:function:fake_hash_password:chunk1",
    "text": "def fake_hash_password(password: str):\n    return \"fakehashed\" + password",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003_an.py",
    "type": "function",
    "name": "fake_hash_password",
    "loc": 28,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003_an.py:function:get_user:chunk1",
    "text": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003_an.py",
    "type": "function",
    "name": "get_user",
    "loc": 46,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003_an.py:function:fake_decode_token:chunk1",
    "text": "def fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003_an.py",
    "type": "function",
    "name": "fake_decode_token",
    "loc": 52,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003_an.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003_an.py",
    "type": "class",
    "name": "User",
    "loc": 35,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003_an.py:class:UserInDB:chunk1",
    "text": "class UserInDB(User):\n    hashed_password: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003_an.py",
    "type": "class",
    "name": "UserInDB",
    "loc": 42,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003_an_py310.py:function:fake_hash_password:chunk1",
    "text": "def fake_hash_password(password: str):\n    return \"fakehashed\" + password",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003_an_py310.py",
    "type": "function",
    "name": "fake_hash_password",
    "loc": 27,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003_an_py310.py:function:get_user:chunk1",
    "text": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003_an_py310.py",
    "type": "function",
    "name": "get_user",
    "loc": 45,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003_an_py310.py:function:fake_decode_token:chunk1",
    "text": "def fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003_an_py310.py",
    "type": "function",
    "name": "fake_decode_token",
    "loc": 51,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003_an_py310.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003_an_py310.py",
    "type": "class",
    "name": "User",
    "loc": 34,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003_an_py310.py:class:UserInDB:chunk1",
    "text": "class UserInDB(User):\n    hashed_password: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003_an_py310.py",
    "type": "class",
    "name": "UserInDB",
    "loc": 41,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003_an_py39.py:function:fake_hash_password:chunk1",
    "text": "def fake_hash_password(password: str):\n    return \"fakehashed\" + password",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003_an_py39.py",
    "type": "function",
    "name": "fake_hash_password",
    "loc": 27,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003_an_py39.py:function:get_user:chunk1",
    "text": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003_an_py39.py",
    "type": "function",
    "name": "get_user",
    "loc": 45,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003_an_py39.py:function:fake_decode_token:chunk1",
    "text": "def fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003_an_py39.py",
    "type": "function",
    "name": "fake_decode_token",
    "loc": 51,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003_an_py39.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003_an_py39.py",
    "type": "class",
    "name": "User",
    "loc": 34,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003_an_py39.py:class:UserInDB:chunk1",
    "text": "class UserInDB(User):\n    hashed_password: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003_an_py39.py",
    "type": "class",
    "name": "UserInDB",
    "loc": 41,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003_py310.py:function:fake_hash_password:chunk1",
    "text": "def fake_hash_password(password: str):\n    return \"fakehashed\" + password",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003_py310.py",
    "type": "function",
    "name": "fake_hash_password",
    "loc": 25,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003_py310.py:function:get_user:chunk1",
    "text": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003_py310.py",
    "type": "function",
    "name": "get_user",
    "loc": 43,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003_py310.py:function:fake_decode_token:chunk1",
    "text": "def fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003_py310.py",
    "type": "function",
    "name": "fake_decode_token",
    "loc": 49,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003_py310.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003_py310.py",
    "type": "class",
    "name": "User",
    "loc": 32,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial003_py310.py:class:UserInDB:chunk1",
    "text": "class UserInDB(User):\n    hashed_password: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial003_py310.py",
    "type": "class",
    "name": "UserInDB",
    "loc": 39,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004.py:function:verify_password:chunk1",
    "text": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004.py",
    "type": "function",
    "name": "verify_password",
    "loc": 56,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004.py:function:get_password_hash:chunk1",
    "text": "def get_password_hash(password):\n    return pwd_context.hash(password)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004.py",
    "type": "function",
    "name": "get_password_hash",
    "loc": 60,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004.py:function:get_user:chunk1",
    "text": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004.py",
    "type": "function",
    "name": "get_user",
    "loc": 64,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004.py:function:authenticate_user:chunk1",
    "text": "def authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004.py",
    "type": "function",
    "name": "authenticate_user",
    "loc": 70,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004.py:function:create_access_token:chunk1",
    "text": "def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004.py",
    "type": "function",
    "name": "create_access_token",
    "loc": 79,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004.py:class:Token:chunk1",
    "text": "class Token(BaseModel):\n    access_token: str\n    token_type: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004.py",
    "type": "class",
    "name": "Token",
    "loc": 29,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004.py:class:TokenData:chunk1",
    "text": "class TokenData(BaseModel):\n    username: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004.py",
    "type": "class",
    "name": "TokenData",
    "loc": 34,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004.py",
    "type": "class",
    "name": "User",
    "loc": 38,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004.py:class:UserInDB:chunk1",
    "text": "class UserInDB(User):\n    hashed_password: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004.py",
    "type": "class",
    "name": "UserInDB",
    "loc": 45,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an.py:function:verify_password:chunk1",
    "text": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an.py",
    "type": "function",
    "name": "verify_password",
    "loc": 57,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an.py:function:get_password_hash:chunk1",
    "text": "def get_password_hash(password):\n    return pwd_context.hash(password)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an.py",
    "type": "function",
    "name": "get_password_hash",
    "loc": 61,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an.py:function:get_user:chunk1",
    "text": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an.py",
    "type": "function",
    "name": "get_user",
    "loc": 65,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an.py:function:authenticate_user:chunk1",
    "text": "def authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an.py",
    "type": "function",
    "name": "authenticate_user",
    "loc": 71,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an.py:function:create_access_token:chunk1",
    "text": "def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an.py",
    "type": "function",
    "name": "create_access_token",
    "loc": 80,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an.py:class:Token:chunk1",
    "text": "class Token(BaseModel):\n    access_token: str\n    token_type: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an.py",
    "type": "class",
    "name": "Token",
    "loc": 30,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an.py:class:TokenData:chunk1",
    "text": "class TokenData(BaseModel):\n    username: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an.py",
    "type": "class",
    "name": "TokenData",
    "loc": 35,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an.py",
    "type": "class",
    "name": "User",
    "loc": 39,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an.py:class:UserInDB:chunk1",
    "text": "class UserInDB(User):\n    hashed_password: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an.py",
    "type": "class",
    "name": "UserInDB",
    "loc": 46,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an_py310.py:function:verify_password:chunk1",
    "text": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an_py310.py",
    "type": "function",
    "name": "verify_password",
    "loc": 56,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an_py310.py:function:get_password_hash:chunk1",
    "text": "def get_password_hash(password):\n    return pwd_context.hash(password)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an_py310.py",
    "type": "function",
    "name": "get_password_hash",
    "loc": 60,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an_py310.py:function:get_user:chunk1",
    "text": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an_py310.py",
    "type": "function",
    "name": "get_user",
    "loc": 64,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an_py310.py:function:authenticate_user:chunk1",
    "text": "def authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an_py310.py",
    "type": "function",
    "name": "authenticate_user",
    "loc": 70,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an_py310.py:function:create_access_token:chunk1",
    "text": "def create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an_py310.py",
    "type": "function",
    "name": "create_access_token",
    "loc": 79,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an_py310.py:class:Token:chunk1",
    "text": "class Token(BaseModel):\n    access_token: str\n    token_type: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an_py310.py",
    "type": "class",
    "name": "Token",
    "loc": 29,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an_py310.py:class:TokenData:chunk1",
    "text": "class TokenData(BaseModel):\n    username: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an_py310.py",
    "type": "class",
    "name": "TokenData",
    "loc": 34,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an_py310.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an_py310.py",
    "type": "class",
    "name": "User",
    "loc": 38,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an_py310.py:class:UserInDB:chunk1",
    "text": "class UserInDB(User):\n    hashed_password: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an_py310.py",
    "type": "class",
    "name": "UserInDB",
    "loc": 45,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an_py39.py:function:verify_password:chunk1",
    "text": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an_py39.py",
    "type": "function",
    "name": "verify_password",
    "loc": 56,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an_py39.py:function:get_password_hash:chunk1",
    "text": "def get_password_hash(password):\n    return pwd_context.hash(password)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an_py39.py",
    "type": "function",
    "name": "get_password_hash",
    "loc": 60,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an_py39.py:function:get_user:chunk1",
    "text": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an_py39.py",
    "type": "function",
    "name": "get_user",
    "loc": 64,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an_py39.py:function:authenticate_user:chunk1",
    "text": "def authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an_py39.py",
    "type": "function",
    "name": "authenticate_user",
    "loc": 70,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an_py39.py:function:create_access_token:chunk1",
    "text": "def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an_py39.py",
    "type": "function",
    "name": "create_access_token",
    "loc": 79,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an_py39.py:class:Token:chunk1",
    "text": "class Token(BaseModel):\n    access_token: str\n    token_type: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an_py39.py",
    "type": "class",
    "name": "Token",
    "loc": 29,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an_py39.py:class:TokenData:chunk1",
    "text": "class TokenData(BaseModel):\n    username: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an_py39.py",
    "type": "class",
    "name": "TokenData",
    "loc": 34,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an_py39.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an_py39.py",
    "type": "class",
    "name": "User",
    "loc": 38,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_an_py39.py:class:UserInDB:chunk1",
    "text": "class UserInDB(User):\n    hashed_password: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_an_py39.py",
    "type": "class",
    "name": "UserInDB",
    "loc": 45,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_py310.py:function:verify_password:chunk1",
    "text": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_py310.py",
    "type": "function",
    "name": "verify_password",
    "loc": 55,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_py310.py:function:get_password_hash:chunk1",
    "text": "def get_password_hash(password):\n    return pwd_context.hash(password)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_py310.py",
    "type": "function",
    "name": "get_password_hash",
    "loc": 59,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_py310.py:function:get_user:chunk1",
    "text": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_py310.py",
    "type": "function",
    "name": "get_user",
    "loc": 63,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_py310.py:function:authenticate_user:chunk1",
    "text": "def authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_py310.py",
    "type": "function",
    "name": "authenticate_user",
    "loc": 69,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_py310.py:function:create_access_token:chunk1",
    "text": "def create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_py310.py",
    "type": "function",
    "name": "create_access_token",
    "loc": 78,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_py310.py:class:Token:chunk1",
    "text": "class Token(BaseModel):\n    access_token: str\n    token_type: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_py310.py",
    "type": "class",
    "name": "Token",
    "loc": 28,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_py310.py:class:TokenData:chunk1",
    "text": "class TokenData(BaseModel):\n    username: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_py310.py",
    "type": "class",
    "name": "TokenData",
    "loc": 33,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_py310.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_py310.py",
    "type": "class",
    "name": "User",
    "loc": 37,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial004_py310.py:class:UserInDB:chunk1",
    "text": "class UserInDB(User):\n    hashed_password: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial004_py310.py",
    "type": "class",
    "name": "UserInDB",
    "loc": 44,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005.py:function:verify_password:chunk1",
    "text": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005.py",
    "type": "function",
    "name": "verify_password",
    "loc": 71,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005.py:function:get_password_hash:chunk1",
    "text": "def get_password_hash(password):\n    return pwd_context.hash(password)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005.py",
    "type": "function",
    "name": "get_password_hash",
    "loc": 75,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005.py:function:get_user:chunk1",
    "text": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005.py",
    "type": "function",
    "name": "get_user",
    "loc": 79,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005.py:function:authenticate_user:chunk1",
    "text": "def authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005.py",
    "type": "function",
    "name": "authenticate_user",
    "loc": 85,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005.py:function:create_access_token:chunk1",
    "text": "def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005.py",
    "type": "function",
    "name": "create_access_token",
    "loc": 94,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005.py:class:Token:chunk1",
    "text": "class Token(BaseModel):\n    access_token: str\n    token_type: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005.py",
    "type": "class",
    "name": "Token",
    "loc": 40,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005.py:class:TokenData:chunk1",
    "text": "class TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005.py",
    "type": "class",
    "name": "TokenData",
    "loc": 45,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005.py",
    "type": "class",
    "name": "User",
    "loc": 50,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005.py:class:UserInDB:chunk1",
    "text": "class UserInDB(User):\n    hashed_password: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005.py",
    "type": "class",
    "name": "UserInDB",
    "loc": 57,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an.py:function:verify_password:chunk1",
    "text": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an.py",
    "type": "function",
    "name": "verify_password",
    "loc": 72,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an.py:function:get_password_hash:chunk1",
    "text": "def get_password_hash(password):\n    return pwd_context.hash(password)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an.py",
    "type": "function",
    "name": "get_password_hash",
    "loc": 76,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an.py:function:get_user:chunk1",
    "text": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an.py",
    "type": "function",
    "name": "get_user",
    "loc": 80,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an.py:function:authenticate_user:chunk1",
    "text": "def authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an.py",
    "type": "function",
    "name": "authenticate_user",
    "loc": 86,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an.py:function:create_access_token:chunk1",
    "text": "def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an.py",
    "type": "function",
    "name": "create_access_token",
    "loc": 95,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an.py:class:Token:chunk1",
    "text": "class Token(BaseModel):\n    access_token: str\n    token_type: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an.py",
    "type": "class",
    "name": "Token",
    "loc": 41,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an.py:class:TokenData:chunk1",
    "text": "class TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an.py",
    "type": "class",
    "name": "TokenData",
    "loc": 46,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an.py",
    "type": "class",
    "name": "User",
    "loc": 51,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an.py:class:UserInDB:chunk1",
    "text": "class UserInDB(User):\n    hashed_password: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an.py",
    "type": "class",
    "name": "UserInDB",
    "loc": 58,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an_py310.py:function:verify_password:chunk1",
    "text": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an_py310.py",
    "type": "function",
    "name": "verify_password",
    "loc": 71,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an_py310.py:function:get_password_hash:chunk1",
    "text": "def get_password_hash(password):\n    return pwd_context.hash(password)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an_py310.py",
    "type": "function",
    "name": "get_password_hash",
    "loc": 75,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an_py310.py:function:get_user:chunk1",
    "text": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an_py310.py",
    "type": "function",
    "name": "get_user",
    "loc": 79,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an_py310.py:function:authenticate_user:chunk1",
    "text": "def authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an_py310.py",
    "type": "function",
    "name": "authenticate_user",
    "loc": 85,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an_py310.py:function:create_access_token:chunk1",
    "text": "def create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an_py310.py",
    "type": "function",
    "name": "create_access_token",
    "loc": 94,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an_py310.py:class:Token:chunk1",
    "text": "class Token(BaseModel):\n    access_token: str\n    token_type: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an_py310.py",
    "type": "class",
    "name": "Token",
    "loc": 40,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an_py310.py:class:TokenData:chunk1",
    "text": "class TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an_py310.py",
    "type": "class",
    "name": "TokenData",
    "loc": 45,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an_py310.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an_py310.py",
    "type": "class",
    "name": "User",
    "loc": 50,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an_py310.py:class:UserInDB:chunk1",
    "text": "class UserInDB(User):\n    hashed_password: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an_py310.py",
    "type": "class",
    "name": "UserInDB",
    "loc": 57,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an_py39.py:function:verify_password:chunk1",
    "text": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an_py39.py",
    "type": "function",
    "name": "verify_password",
    "loc": 71,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an_py39.py:function:get_password_hash:chunk1",
    "text": "def get_password_hash(password):\n    return pwd_context.hash(password)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an_py39.py",
    "type": "function",
    "name": "get_password_hash",
    "loc": 75,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an_py39.py:function:get_user:chunk1",
    "text": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an_py39.py",
    "type": "function",
    "name": "get_user",
    "loc": 79,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an_py39.py:function:authenticate_user:chunk1",
    "text": "def authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an_py39.py",
    "type": "function",
    "name": "authenticate_user",
    "loc": 85,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an_py39.py:function:create_access_token:chunk1",
    "text": "def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an_py39.py",
    "type": "function",
    "name": "create_access_token",
    "loc": 94,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an_py39.py:class:Token:chunk1",
    "text": "class Token(BaseModel):\n    access_token: str\n    token_type: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an_py39.py",
    "type": "class",
    "name": "Token",
    "loc": 40,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an_py39.py:class:TokenData:chunk1",
    "text": "class TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an_py39.py",
    "type": "class",
    "name": "TokenData",
    "loc": 45,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an_py39.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an_py39.py",
    "type": "class",
    "name": "User",
    "loc": 50,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_an_py39.py:class:UserInDB:chunk1",
    "text": "class UserInDB(User):\n    hashed_password: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_an_py39.py",
    "type": "class",
    "name": "UserInDB",
    "loc": 57,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_py310.py:function:verify_password:chunk1",
    "text": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_py310.py",
    "type": "function",
    "name": "verify_password",
    "loc": 70,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_py310.py:function:get_password_hash:chunk1",
    "text": "def get_password_hash(password):\n    return pwd_context.hash(password)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_py310.py",
    "type": "function",
    "name": "get_password_hash",
    "loc": 74,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_py310.py:function:get_user:chunk1",
    "text": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_py310.py",
    "type": "function",
    "name": "get_user",
    "loc": 78,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_py310.py:function:authenticate_user:chunk1",
    "text": "def authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_py310.py",
    "type": "function",
    "name": "authenticate_user",
    "loc": 84,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_py310.py:function:create_access_token:chunk1",
    "text": "def create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_py310.py",
    "type": "function",
    "name": "create_access_token",
    "loc": 93,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_py310.py:class:Token:chunk1",
    "text": "class Token(BaseModel):\n    access_token: str\n    token_type: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_py310.py",
    "type": "class",
    "name": "Token",
    "loc": 39,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_py310.py:class:TokenData:chunk1",
    "text": "class TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_py310.py",
    "type": "class",
    "name": "TokenData",
    "loc": 44,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_py310.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_py310.py",
    "type": "class",
    "name": "User",
    "loc": 49,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_py310.py:class:UserInDB:chunk1",
    "text": "class UserInDB(User):\n    hashed_password: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_py310.py",
    "type": "class",
    "name": "UserInDB",
    "loc": 56,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_py39.py:function:verify_password:chunk1",
    "text": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_py39.py",
    "type": "function",
    "name": "verify_password",
    "loc": 71,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_py39.py:function:get_password_hash:chunk1",
    "text": "def get_password_hash(password):\n    return pwd_context.hash(password)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_py39.py",
    "type": "function",
    "name": "get_password_hash",
    "loc": 75,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_py39.py:function:get_user:chunk1",
    "text": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_py39.py",
    "type": "function",
    "name": "get_user",
    "loc": 79,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_py39.py:function:authenticate_user:chunk1",
    "text": "def authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_py39.py",
    "type": "function",
    "name": "authenticate_user",
    "loc": 85,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_py39.py:function:create_access_token:chunk1",
    "text": "def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_py39.py",
    "type": "function",
    "name": "create_access_token",
    "loc": 94,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_py39.py:class:Token:chunk1",
    "text": "class Token(BaseModel):\n    access_token: str\n    token_type: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_py39.py",
    "type": "class",
    "name": "Token",
    "loc": 40,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_py39.py:class:TokenData:chunk1",
    "text": "class TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_py39.py",
    "type": "class",
    "name": "TokenData",
    "loc": 45,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_py39.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_py39.py",
    "type": "class",
    "name": "User",
    "loc": 50,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial005_py39.py:class:UserInDB:chunk1",
    "text": "class UserInDB(User):\n    hashed_password: str",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial005_py39.py",
    "type": "class",
    "name": "UserInDB",
    "loc": 57,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial006.py:function:read_current_user:chunk1",
    "text": "def read_current_user(credentials: HTTPBasicCredentials = Depends(security)):\n    return {\"username\": credentials.username, \"password\": credentials.password}",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial006.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial006_an.py:function:read_current_user:chunk1",
    "text": "def read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n    return {\"username\": credentials.username, \"password\": credentials.password}",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial006_an.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial006_an_py39.py:function:read_current_user:chunk1",
    "text": "def read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n    return {\"username\": credentials.username, \"password\": credentials.password}",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial006_an_py39.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial007.py:function:get_current_username:chunk1",
    "text": "def get_current_username(credentials: HTTPBasicCredentials = Depends(security)):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial007.py",
    "type": "function",
    "name": "get_current_username",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial007.py:function:read_current_user:chunk1",
    "text": "def read_current_user(username: str = Depends(get_current_username)):\n    return {\"username\": username}",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial007.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 32,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial007_an.py:function:get_current_username:chunk1",
    "text": "def get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial007_an.py",
    "type": "function",
    "name": "get_current_username",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial007_an.py:function:read_current_user:chunk1",
    "text": "def read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial007_an.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 35,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial007_an_py39.py:function:get_current_username:chunk1",
    "text": "def get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial007_an_py39.py",
    "type": "function",
    "name": "get_current_username",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\security\\tutorial007_an_py39.py:function:read_current_user:chunk1",
    "text": "def read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}",
    "repo": "fastapi",
    "path": "docs_src\\security\\tutorial007_an_py39.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 35,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\separate_openapi_schemas\\tutorial001.py:function:create_item:chunk1",
    "text": "def create_item(item: Item):\n    return item",
    "repo": "fastapi",
    "path": "docs_src\\separate_openapi_schemas\\tutorial001.py",
    "type": "function",
    "name": "create_item",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\separate_openapi_schemas\\tutorial001.py:function:read_items:chunk1",
    "text": "def read_items() -> List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]",
    "repo": "fastapi",
    "path": "docs_src\\separate_openapi_schemas\\tutorial001.py",
    "type": "function",
    "name": "read_items",
    "loc": 21,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\separate_openapi_schemas\\tutorial001.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\separate_openapi_schemas\\tutorial001.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\separate_openapi_schemas\\tutorial001_py310.py:function:create_item:chunk1",
    "text": "def create_item(item: Item):\n    return item",
    "repo": "fastapi",
    "path": "docs_src\\separate_openapi_schemas\\tutorial001_py310.py",
    "type": "function",
    "name": "create_item",
    "loc": 14,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\separate_openapi_schemas\\tutorial001_py310.py:function:read_items:chunk1",
    "text": "def read_items() -> list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]",
    "repo": "fastapi",
    "path": "docs_src\\separate_openapi_schemas\\tutorial001_py310.py",
    "type": "function",
    "name": "read_items",
    "loc": 19,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\separate_openapi_schemas\\tutorial001_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\separate_openapi_schemas\\tutorial001_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 5,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\separate_openapi_schemas\\tutorial001_py39.py:function:create_item:chunk1",
    "text": "def create_item(item: Item):\n    return item",
    "repo": "fastapi",
    "path": "docs_src\\separate_openapi_schemas\\tutorial001_py39.py",
    "type": "function",
    "name": "create_item",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\separate_openapi_schemas\\tutorial001_py39.py:function:read_items:chunk1",
    "text": "def read_items() -> list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]",
    "repo": "fastapi",
    "path": "docs_src\\separate_openapi_schemas\\tutorial001_py39.py",
    "type": "function",
    "name": "read_items",
    "loc": 21,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\separate_openapi_schemas\\tutorial001_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Optional[str] = None",
    "repo": "fastapi",
    "path": "docs_src\\separate_openapi_schemas\\tutorial001_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\separate_openapi_schemas\\tutorial002.py:function:create_item:chunk1",
    "text": "def create_item(item: Item):\n    return item",
    "repo": "fastapi",
    "path": "docs_src\\separate_openapi_schemas\\tutorial002.py",
    "type": "function",
    "name": "create_item",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\separate_openapi_schemas\\tutorial002.py:function:read_items:chunk1",
    "text": "def read_items() -> List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]",
    "repo": "fastapi",
    "path": "docs_src\\separate_openapi_schemas\\tutorial002.py",
    "type": "function",
    "name": "read_items",
    "loc": 21,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\separate_openapi_schemas\\tutorial002.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\separate_openapi_schemas\\tutorial002.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\separate_openapi_schemas\\tutorial002_py310.py:function:create_item:chunk1",
    "text": "def create_item(item: Item):\n    return item",
    "repo": "fastapi",
    "path": "docs_src\\separate_openapi_schemas\\tutorial002_py310.py",
    "type": "function",
    "name": "create_item",
    "loc": 14,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\separate_openapi_schemas\\tutorial002_py310.py:function:read_items:chunk1",
    "text": "def read_items() -> list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]",
    "repo": "fastapi",
    "path": "docs_src\\separate_openapi_schemas\\tutorial002_py310.py",
    "type": "function",
    "name": "read_items",
    "loc": 19,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\separate_openapi_schemas\\tutorial002_py310.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\separate_openapi_schemas\\tutorial002_py310.py",
    "type": "class",
    "name": "Item",
    "loc": 5,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\separate_openapi_schemas\\tutorial002_py39.py:function:create_item:chunk1",
    "text": "def create_item(item: Item):\n    return item",
    "repo": "fastapi",
    "path": "docs_src\\separate_openapi_schemas\\tutorial002_py39.py",
    "type": "function",
    "name": "create_item",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\separate_openapi_schemas\\tutorial002_py39.py:function:read_items:chunk1",
    "text": "def read_items() -> list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]",
    "repo": "fastapi",
    "path": "docs_src\\separate_openapi_schemas\\tutorial002_py39.py",
    "type": "function",
    "name": "read_items",
    "loc": 21,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\separate_openapi_schemas\\tutorial002_py39.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Optional[str] = None",
    "repo": "fastapi",
    "path": "docs_src\\separate_openapi_schemas\\tutorial002_py39.py",
    "type": "class",
    "name": "Item",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\tutorial001.py:class:Settings:chunk1",
    "text": "class Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50",
    "repo": "fastapi",
    "path": "docs_src\\settings\\tutorial001.py",
    "type": "class",
    "name": "Settings",
    "loc": 5,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\tutorial001_pv1.py:class:Settings:chunk1",
    "text": "class Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50",
    "repo": "fastapi",
    "path": "docs_src\\settings\\tutorial001_pv1.py",
    "type": "class",
    "name": "Settings",
    "loc": 5,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app01\\config.py:class:Settings:chunk1",
    "text": "class Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app01\\config.py",
    "type": "class",
    "name": "Settings",
    "loc": 4,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app02\\config.py:class:Settings:chunk1",
    "text": "class Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app02\\config.py",
    "type": "class",
    "name": "Settings",
    "loc": 4,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app02\\main.py:function:get_settings:chunk1",
    "text": "def get_settings():\n    return Settings()",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app02\\main.py",
    "type": "function",
    "name": "get_settings",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app02\\test_main.py:function:get_settings_override:chunk1",
    "text": "def get_settings_override():\n    return Settings(admin_email=\"testing_admin@example.com\")",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app02\\test_main.py",
    "type": "function",
    "name": "get_settings_override",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app02\\test_main.py:function:test_app:chunk1",
    "text": "def test_app():\n    response = client.get(\"/info\")\n    data = response.json()\n    assert data == {\n        \"app_name\": \"Awesome API\",\n        \"admin_email\": \"testing_admin@example.com\",\n        \"items_per_user\": 50,\n    }",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app02\\test_main.py",
    "type": "function",
    "name": "test_app",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app02_an\\config.py:class:Settings:chunk1",
    "text": "class Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app02_an\\config.py",
    "type": "class",
    "name": "Settings",
    "loc": 4,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app02_an\\main.py:function:get_settings:chunk1",
    "text": "def get_settings():\n    return Settings()",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app02_an\\main.py",
    "type": "function",
    "name": "get_settings",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app02_an\\test_main.py:function:get_settings_override:chunk1",
    "text": "def get_settings_override():\n    return Settings(admin_email=\"testing_admin@example.com\")",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app02_an\\test_main.py",
    "type": "function",
    "name": "get_settings_override",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app02_an\\test_main.py:function:test_app:chunk1",
    "text": "def test_app():\n    response = client.get(\"/info\")\n    data = response.json()\n    assert data == {\n        \"app_name\": \"Awesome API\",\n        \"admin_email\": \"testing_admin@example.com\",\n        \"items_per_user\": 50,\n    }",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app02_an\\test_main.py",
    "type": "function",
    "name": "test_app",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app02_an_py39\\config.py:class:Settings:chunk1",
    "text": "class Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app02_an_py39\\config.py",
    "type": "class",
    "name": "Settings",
    "loc": 4,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app02_an_py39\\main.py:function:get_settings:chunk1",
    "text": "def get_settings():\n    return Settings()",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app02_an_py39\\main.py",
    "type": "function",
    "name": "get_settings",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app02_an_py39\\test_main.py:function:get_settings_override:chunk1",
    "text": "def get_settings_override():\n    return Settings(admin_email=\"testing_admin@example.com\")",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app02_an_py39\\test_main.py",
    "type": "function",
    "name": "get_settings_override",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app02_an_py39\\test_main.py:function:test_app:chunk1",
    "text": "def test_app():\n    response = client.get(\"/info\")\n    data = response.json()\n    assert data == {\n        \"app_name\": \"Awesome API\",\n        \"admin_email\": \"testing_admin@example.com\",\n        \"items_per_user\": 50,\n    }",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app02_an_py39\\test_main.py",
    "type": "function",
    "name": "test_app",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app03\\config.py:class:Config:chunk1",
    "text": "class Config:\n        env_file = \".env\"",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app03\\config.py",
    "type": "class",
    "name": "Config",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app03\\config.py:class:Settings:chunk1",
    "text": "class Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n    class Config:\n        env_file = \".env\"",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app03\\config.py",
    "type": "class",
    "name": "Settings",
    "loc": 4,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app03\\main.py:function:get_settings:chunk1",
    "text": "def get_settings():\n    return config.Settings()",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app03\\main.py",
    "type": "function",
    "name": "get_settings",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app03_an\\config.py:class:Settings:chunk1",
    "text": "class Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n    model_config = SettingsConfigDict(env_file=\".env\")",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app03_an\\config.py",
    "type": "class",
    "name": "Settings",
    "loc": 4,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app03_an\\config_pv1.py:class:Config:chunk1",
    "text": "class Config:\n        env_file = \".env\"",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app03_an\\config_pv1.py",
    "type": "class",
    "name": "Config",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app03_an\\config_pv1.py:class:Settings:chunk1",
    "text": "class Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n    class Config:\n        env_file = \".env\"",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app03_an\\config_pv1.py",
    "type": "class",
    "name": "Settings",
    "loc": 4,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app03_an\\main.py:function:get_settings:chunk1",
    "text": "def get_settings():\n    return config.Settings()",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app03_an\\main.py",
    "type": "function",
    "name": "get_settings",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app03_an_py39\\config.py:class:Config:chunk1",
    "text": "class Config:\n        env_file = \".env\"",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app03_an_py39\\config.py",
    "type": "class",
    "name": "Config",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app03_an_py39\\config.py:class:Settings:chunk1",
    "text": "class Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n    class Config:\n        env_file = \".env\"",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app03_an_py39\\config.py",
    "type": "class",
    "name": "Settings",
    "loc": 4,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\settings\\app03_an_py39\\main.py:function:get_settings:chunk1",
    "text": "def get_settings():\n    return config.Settings()",
    "repo": "fastapi",
    "path": "docs_src\\settings\\app03_an_py39\\main.py",
    "type": "function",
    "name": "get_settings",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001.py:function:create_db_and_tables:chunk1",
    "text": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001.py",
    "type": "function",
    "name": "create_db_and_tables",
    "loc": 21,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001.py:function:get_session:chunk1",
    "text": "def get_session():\n    with Session(engine) as session:\n        yield session",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001.py",
    "type": "function",
    "name": "get_session",
    "loc": 25,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001.py:function:on_startup:chunk1",
    "text": "def on_startup():\n    create_db_and_tables()",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001.py",
    "type": "function",
    "name": "on_startup",
    "loc": 34,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001.py:function:create_hero:chunk1",
    "text": "def create_hero(hero: Hero, session: Session = Depends(get_session)) -> Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001.py",
    "type": "function",
    "name": "create_hero",
    "loc": 39,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001.py:function:read_heroes:chunk1",
    "text": "def read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -> List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001.py",
    "type": "function",
    "name": "read_heroes",
    "loc": 47,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001.py:function:read_hero:chunk1",
    "text": "def read_hero(hero_id: int, session: Session = Depends(get_session)) -> Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001.py",
    "type": "function",
    "name": "read_hero",
    "loc": 57,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001.py:function:delete_hero:chunk1",
    "text": "def delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001.py",
    "type": "function",
    "name": "delete_hero",
    "loc": 65,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001.py:class:Hero:chunk1",
    "text": "class Hero(SQLModel, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001.py",
    "type": "class",
    "name": "Hero",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an.py:function:create_db_and_tables:chunk1",
    "text": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an.py",
    "type": "function",
    "name": "create_db_and_tables",
    "loc": 22,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an.py:function:get_session:chunk1",
    "text": "def get_session():\n    with Session(engine) as session:\n        yield session",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an.py",
    "type": "function",
    "name": "get_session",
    "loc": 26,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an.py:function:on_startup:chunk1",
    "text": "def on_startup():\n    create_db_and_tables()",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an.py",
    "type": "function",
    "name": "on_startup",
    "loc": 37,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an.py:function:create_hero:chunk1",
    "text": "def create_hero(hero: Hero, session: SessionDep) -> Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an.py",
    "type": "function",
    "name": "create_hero",
    "loc": 42,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an.py:function:read_heroes:chunk1",
    "text": "def read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -> List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an.py",
    "type": "function",
    "name": "read_heroes",
    "loc": 50,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an.py:function:read_hero:chunk1",
    "text": "def read_hero(hero_id: int, session: SessionDep) -> Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an.py",
    "type": "function",
    "name": "read_hero",
    "loc": 60,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an.py:function:delete_hero:chunk1",
    "text": "def delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an.py",
    "type": "function",
    "name": "delete_hero",
    "loc": 68,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an.py:class:Hero:chunk1",
    "text": "class Hero(SQLModel, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an.py",
    "type": "class",
    "name": "Hero",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an_py310.py:function:create_db_and_tables:chunk1",
    "text": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an_py310.py",
    "type": "function",
    "name": "create_db_and_tables",
    "loc": 21,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an_py310.py:function:get_session:chunk1",
    "text": "def get_session():\n    with Session(engine) as session:\n        yield session",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an_py310.py",
    "type": "function",
    "name": "get_session",
    "loc": 25,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an_py310.py:function:on_startup:chunk1",
    "text": "def on_startup():\n    create_db_and_tables()",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an_py310.py",
    "type": "function",
    "name": "on_startup",
    "loc": 36,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an_py310.py:function:create_hero:chunk1",
    "text": "def create_hero(hero: Hero, session: SessionDep) -> Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an_py310.py",
    "type": "function",
    "name": "create_hero",
    "loc": 41,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an_py310.py:function:read_heroes:chunk1",
    "text": "def read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -> list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an_py310.py",
    "type": "function",
    "name": "read_heroes",
    "loc": 49,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an_py310.py:function:read_hero:chunk1",
    "text": "def read_hero(hero_id: int, session: SessionDep) -> Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an_py310.py",
    "type": "function",
    "name": "read_hero",
    "loc": 59,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an_py310.py:function:delete_hero:chunk1",
    "text": "def delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an_py310.py",
    "type": "function",
    "name": "delete_hero",
    "loc": 67,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an_py310.py:class:Hero:chunk1",
    "text": "class Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an_py310.py",
    "type": "class",
    "name": "Hero",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an_py39.py:function:create_db_and_tables:chunk1",
    "text": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an_py39.py",
    "type": "function",
    "name": "create_db_and_tables",
    "loc": 21,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an_py39.py:function:get_session:chunk1",
    "text": "def get_session():\n    with Session(engine) as session:\n        yield session",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an_py39.py",
    "type": "function",
    "name": "get_session",
    "loc": 25,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an_py39.py:function:on_startup:chunk1",
    "text": "def on_startup():\n    create_db_and_tables()",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an_py39.py",
    "type": "function",
    "name": "on_startup",
    "loc": 36,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an_py39.py:function:create_hero:chunk1",
    "text": "def create_hero(hero: Hero, session: SessionDep) -> Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an_py39.py",
    "type": "function",
    "name": "create_hero",
    "loc": 41,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an_py39.py:function:read_heroes:chunk1",
    "text": "def read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -> list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an_py39.py",
    "type": "function",
    "name": "read_heroes",
    "loc": 49,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an_py39.py:function:read_hero:chunk1",
    "text": "def read_hero(hero_id: int, session: SessionDep) -> Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an_py39.py",
    "type": "function",
    "name": "read_hero",
    "loc": 59,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an_py39.py:function:delete_hero:chunk1",
    "text": "def delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an_py39.py",
    "type": "function",
    "name": "delete_hero",
    "loc": 67,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_an_py39.py:class:Hero:chunk1",
    "text": "class Hero(SQLModel, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_an_py39.py",
    "type": "class",
    "name": "Hero",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_py310.py:function:create_db_and_tables:chunk1",
    "text": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_py310.py",
    "type": "function",
    "name": "create_db_and_tables",
    "loc": 19,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_py310.py:function:get_session:chunk1",
    "text": "def get_session():\n    with Session(engine) as session:\n        yield session",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_py310.py",
    "type": "function",
    "name": "get_session",
    "loc": 23,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_py310.py:function:on_startup:chunk1",
    "text": "def on_startup():\n    create_db_and_tables()",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_py310.py",
    "type": "function",
    "name": "on_startup",
    "loc": 32,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_py310.py:function:create_hero:chunk1",
    "text": "def create_hero(hero: Hero, session: Session = Depends(get_session)) -> Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_py310.py",
    "type": "function",
    "name": "create_hero",
    "loc": 37,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_py310.py:function:read_heroes:chunk1",
    "text": "def read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -> list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_py310.py",
    "type": "function",
    "name": "read_heroes",
    "loc": 45,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_py310.py:function:read_hero:chunk1",
    "text": "def read_hero(hero_id: int, session: Session = Depends(get_session)) -> Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_py310.py",
    "type": "function",
    "name": "read_hero",
    "loc": 55,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_py310.py:function:delete_hero:chunk1",
    "text": "def delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_py310.py",
    "type": "function",
    "name": "delete_hero",
    "loc": 63,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_py310.py:class:Hero:chunk1",
    "text": "class Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_py310.py",
    "type": "class",
    "name": "Hero",
    "loc": 5,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_py39.py:function:create_db_and_tables:chunk1",
    "text": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_py39.py",
    "type": "function",
    "name": "create_db_and_tables",
    "loc": 21,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_py39.py:function:get_session:chunk1",
    "text": "def get_session():\n    with Session(engine) as session:\n        yield session",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_py39.py",
    "type": "function",
    "name": "get_session",
    "loc": 25,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_py39.py:function:on_startup:chunk1",
    "text": "def on_startup():\n    create_db_and_tables()",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_py39.py",
    "type": "function",
    "name": "on_startup",
    "loc": 34,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_py39.py:function:create_hero:chunk1",
    "text": "def create_hero(hero: Hero, session: Session = Depends(get_session)) -> Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_py39.py",
    "type": "function",
    "name": "create_hero",
    "loc": 39,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_py39.py:function:read_heroes:chunk1",
    "text": "def read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -> list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_py39.py",
    "type": "function",
    "name": "read_heroes",
    "loc": 47,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_py39.py:function:read_hero:chunk1",
    "text": "def read_hero(hero_id: int, session: Session = Depends(get_session)) -> Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_py39.py",
    "type": "function",
    "name": "read_hero",
    "loc": 57,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_py39.py:function:delete_hero:chunk1",
    "text": "def delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_py39.py",
    "type": "function",
    "name": "delete_hero",
    "loc": 65,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial001_py39.py:class:Hero:chunk1",
    "text": "class Hero(SQLModel, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial001_py39.py",
    "type": "class",
    "name": "Hero",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002.py:function:create_db_and_tables:chunk1",
    "text": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002.py",
    "type": "function",
    "name": "create_db_and_tables",
    "loc": 38,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002.py:function:get_session:chunk1",
    "text": "def get_session():\n    with Session(engine) as session:\n        yield session",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002.py",
    "type": "function",
    "name": "get_session",
    "loc": 42,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002.py:function:on_startup:chunk1",
    "text": "def on_startup():\n    create_db_and_tables()",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002.py",
    "type": "function",
    "name": "on_startup",
    "loc": 51,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002.py:function:create_hero:chunk1",
    "text": "def create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002.py",
    "type": "function",
    "name": "create_hero",
    "loc": 56,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002.py:function:read_heroes:chunk1",
    "text": "def read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002.py",
    "type": "function",
    "name": "read_heroes",
    "loc": 65,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002.py:function:read_hero:chunk1",
    "text": "def read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002.py",
    "type": "function",
    "name": "read_hero",
    "loc": 75,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002.py:function:update_hero:chunk1",
    "text": "def update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqlmodel_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002.py",
    "type": "function",
    "name": "update_hero",
    "loc": 83,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002.py:function:delete_hero:chunk1",
    "text": "def delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002.py",
    "type": "function",
    "name": "delete_hero",
    "loc": 98,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002.py:class:HeroBase:chunk1",
    "text": "class HeroBase(SQLModel):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002.py",
    "type": "class",
    "name": "HeroBase",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002.py:class:Hero:chunk1",
    "text": "class Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002.py",
    "type": "class",
    "name": "Hero",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002.py:class:HeroPublic:chunk1",
    "text": "class HeroPublic(HeroBase):\n    id: int",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002.py",
    "type": "class",
    "name": "HeroPublic",
    "loc": 17,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002.py:class:HeroCreate:chunk1",
    "text": "class HeroCreate(HeroBase):\n    secret_name: str",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002.py",
    "type": "class",
    "name": "HeroCreate",
    "loc": 21,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002.py:class:HeroUpdate:chunk1",
    "text": "class HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002.py",
    "type": "class",
    "name": "HeroUpdate",
    "loc": 25,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an.py:function:create_db_and_tables:chunk1",
    "text": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an.py",
    "type": "function",
    "name": "create_db_and_tables",
    "loc": 39,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an.py:function:get_session:chunk1",
    "text": "def get_session():\n    with Session(engine) as session:\n        yield session",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an.py",
    "type": "function",
    "name": "get_session",
    "loc": 43,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an.py:function:on_startup:chunk1",
    "text": "def on_startup():\n    create_db_and_tables()",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an.py",
    "type": "function",
    "name": "on_startup",
    "loc": 53,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an.py:function:create_hero:chunk1",
    "text": "def create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an.py",
    "type": "function",
    "name": "create_hero",
    "loc": 58,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an.py:function:read_heroes:chunk1",
    "text": "def read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an.py",
    "type": "function",
    "name": "read_heroes",
    "loc": 67,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an.py:function:read_hero:chunk1",
    "text": "def read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an.py",
    "type": "function",
    "name": "read_hero",
    "loc": 77,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an.py:function:update_hero:chunk1",
    "text": "def update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqlmodel_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an.py",
    "type": "function",
    "name": "update_hero",
    "loc": 85,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an.py:function:delete_hero:chunk1",
    "text": "def delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an.py",
    "type": "function",
    "name": "delete_hero",
    "loc": 98,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an.py:class:HeroBase:chunk1",
    "text": "class HeroBase(SQLModel):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an.py",
    "type": "class",
    "name": "HeroBase",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an.py:class:Hero:chunk1",
    "text": "class Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an.py",
    "type": "class",
    "name": "Hero",
    "loc": 13,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an.py:class:HeroPublic:chunk1",
    "text": "class HeroPublic(HeroBase):\n    id: int",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an.py",
    "type": "class",
    "name": "HeroPublic",
    "loc": 18,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an.py:class:HeroCreate:chunk1",
    "text": "class HeroCreate(HeroBase):\n    secret_name: str",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an.py",
    "type": "class",
    "name": "HeroCreate",
    "loc": 22,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an.py:class:HeroUpdate:chunk1",
    "text": "class HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an.py",
    "type": "class",
    "name": "HeroUpdate",
    "loc": 26,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py310.py:function:create_db_and_tables:chunk1",
    "text": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py310.py",
    "type": "function",
    "name": "create_db_and_tables",
    "loc": 38,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py310.py:function:get_session:chunk1",
    "text": "def get_session():\n    with Session(engine) as session:\n        yield session",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py310.py",
    "type": "function",
    "name": "get_session",
    "loc": 42,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py310.py:function:on_startup:chunk1",
    "text": "def on_startup():\n    create_db_and_tables()",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py310.py",
    "type": "function",
    "name": "on_startup",
    "loc": 52,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py310.py:function:create_hero:chunk1",
    "text": "def create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py310.py",
    "type": "function",
    "name": "create_hero",
    "loc": 57,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py310.py:function:read_heroes:chunk1",
    "text": "def read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py310.py",
    "type": "function",
    "name": "read_heroes",
    "loc": 66,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py310.py:function:read_hero:chunk1",
    "text": "def read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py310.py",
    "type": "function",
    "name": "read_hero",
    "loc": 76,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py310.py:function:update_hero:chunk1",
    "text": "def update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqlmodel_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py310.py",
    "type": "function",
    "name": "update_hero",
    "loc": 84,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py310.py:function:delete_hero:chunk1",
    "text": "def delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py310.py",
    "type": "function",
    "name": "delete_hero",
    "loc": 97,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py310.py:class:HeroBase:chunk1",
    "text": "class HeroBase(SQLModel):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py310.py",
    "type": "class",
    "name": "HeroBase",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py310.py:class:Hero:chunk1",
    "text": "class Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py310.py",
    "type": "class",
    "name": "Hero",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py310.py:class:HeroPublic:chunk1",
    "text": "class HeroPublic(HeroBase):\n    id: int",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py310.py",
    "type": "class",
    "name": "HeroPublic",
    "loc": 17,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py310.py:class:HeroCreate:chunk1",
    "text": "class HeroCreate(HeroBase):\n    secret_name: str",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py310.py",
    "type": "class",
    "name": "HeroCreate",
    "loc": 21,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py310.py:class:HeroUpdate:chunk1",
    "text": "class HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py310.py",
    "type": "class",
    "name": "HeroUpdate",
    "loc": 25,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py39.py:function:create_db_and_tables:chunk1",
    "text": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py39.py",
    "type": "function",
    "name": "create_db_and_tables",
    "loc": 38,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py39.py:function:get_session:chunk1",
    "text": "def get_session():\n    with Session(engine) as session:\n        yield session",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py39.py",
    "type": "function",
    "name": "get_session",
    "loc": 42,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py39.py:function:on_startup:chunk1",
    "text": "def on_startup():\n    create_db_and_tables()",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py39.py",
    "type": "function",
    "name": "on_startup",
    "loc": 52,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py39.py:function:create_hero:chunk1",
    "text": "def create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py39.py",
    "type": "function",
    "name": "create_hero",
    "loc": 57,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py39.py:function:read_heroes:chunk1",
    "text": "def read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py39.py",
    "type": "function",
    "name": "read_heroes",
    "loc": 66,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py39.py:function:read_hero:chunk1",
    "text": "def read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py39.py",
    "type": "function",
    "name": "read_hero",
    "loc": 76,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py39.py:function:update_hero:chunk1",
    "text": "def update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqlmodel_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py39.py",
    "type": "function",
    "name": "update_hero",
    "loc": 84,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py39.py:function:delete_hero:chunk1",
    "text": "def delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py39.py",
    "type": "function",
    "name": "delete_hero",
    "loc": 97,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py39.py:class:HeroBase:chunk1",
    "text": "class HeroBase(SQLModel):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py39.py",
    "type": "class",
    "name": "HeroBase",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py39.py:class:Hero:chunk1",
    "text": "class Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py39.py",
    "type": "class",
    "name": "Hero",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py39.py:class:HeroPublic:chunk1",
    "text": "class HeroPublic(HeroBase):\n    id: int",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py39.py",
    "type": "class",
    "name": "HeroPublic",
    "loc": 17,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py39.py:class:HeroCreate:chunk1",
    "text": "class HeroCreate(HeroBase):\n    secret_name: str",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py39.py",
    "type": "class",
    "name": "HeroCreate",
    "loc": 21,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_an_py39.py:class:HeroUpdate:chunk1",
    "text": "class HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_an_py39.py",
    "type": "class",
    "name": "HeroUpdate",
    "loc": 25,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py310.py:function:create_db_and_tables:chunk1",
    "text": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py310.py",
    "type": "function",
    "name": "create_db_and_tables",
    "loc": 36,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py310.py:function:get_session:chunk1",
    "text": "def get_session():\n    with Session(engine) as session:\n        yield session",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py310.py",
    "type": "function",
    "name": "get_session",
    "loc": 40,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py310.py:function:on_startup:chunk1",
    "text": "def on_startup():\n    create_db_and_tables()",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py310.py",
    "type": "function",
    "name": "on_startup",
    "loc": 49,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py310.py:function:create_hero:chunk1",
    "text": "def create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py310.py",
    "type": "function",
    "name": "create_hero",
    "loc": 54,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py310.py:function:read_heroes:chunk1",
    "text": "def read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py310.py",
    "type": "function",
    "name": "read_heroes",
    "loc": 63,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py310.py:function:read_hero:chunk1",
    "text": "def read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py310.py",
    "type": "function",
    "name": "read_hero",
    "loc": 73,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py310.py:function:update_hero:chunk1",
    "text": "def update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqlmodel_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py310.py",
    "type": "function",
    "name": "update_hero",
    "loc": 81,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py310.py:function:delete_hero:chunk1",
    "text": "def delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py310.py",
    "type": "function",
    "name": "delete_hero",
    "loc": 96,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py310.py:class:HeroBase:chunk1",
    "text": "class HeroBase(SQLModel):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py310.py",
    "type": "class",
    "name": "HeroBase",
    "loc": 5,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py310.py:class:Hero:chunk1",
    "text": "class Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py310.py",
    "type": "class",
    "name": "Hero",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py310.py:class:HeroPublic:chunk1",
    "text": "class HeroPublic(HeroBase):\n    id: int",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py310.py",
    "type": "class",
    "name": "HeroPublic",
    "loc": 15,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py310.py:class:HeroCreate:chunk1",
    "text": "class HeroCreate(HeroBase):\n    secret_name: str",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py310.py",
    "type": "class",
    "name": "HeroCreate",
    "loc": 19,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py310.py:class:HeroUpdate:chunk1",
    "text": "class HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py310.py",
    "type": "class",
    "name": "HeroUpdate",
    "loc": 23,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py39.py:function:create_db_and_tables:chunk1",
    "text": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py39.py",
    "type": "function",
    "name": "create_db_and_tables",
    "loc": 38,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py39.py:function:get_session:chunk1",
    "text": "def get_session():\n    with Session(engine) as session:\n        yield session",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py39.py",
    "type": "function",
    "name": "get_session",
    "loc": 42,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py39.py:function:on_startup:chunk1",
    "text": "def on_startup():\n    create_db_and_tables()",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py39.py",
    "type": "function",
    "name": "on_startup",
    "loc": 51,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py39.py:function:create_hero:chunk1",
    "text": "def create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py39.py",
    "type": "function",
    "name": "create_hero",
    "loc": 56,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py39.py:function:read_heroes:chunk1",
    "text": "def read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py39.py",
    "type": "function",
    "name": "read_heroes",
    "loc": 65,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py39.py:function:read_hero:chunk1",
    "text": "def read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py39.py",
    "type": "function",
    "name": "read_hero",
    "loc": 75,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py39.py:function:update_hero:chunk1",
    "text": "def update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqlmodel_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py39.py",
    "type": "function",
    "name": "update_hero",
    "loc": 83,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py39.py:function:delete_hero:chunk1",
    "text": "def delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py39.py",
    "type": "function",
    "name": "delete_hero",
    "loc": 98,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py39.py:class:HeroBase:chunk1",
    "text": "class HeroBase(SQLModel):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py39.py",
    "type": "class",
    "name": "HeroBase",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py39.py:class:Hero:chunk1",
    "text": "class Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py39.py",
    "type": "class",
    "name": "Hero",
    "loc": 12,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py39.py:class:HeroPublic:chunk1",
    "text": "class HeroPublic(HeroBase):\n    id: int",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py39.py",
    "type": "class",
    "name": "HeroPublic",
    "loc": 17,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py39.py:class:HeroCreate:chunk1",
    "text": "class HeroCreate(HeroBase):\n    secret_name: str",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py39.py",
    "type": "class",
    "name": "HeroCreate",
    "loc": 21,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sql_databases\\tutorial002_py39.py:class:HeroUpdate:chunk1",
    "text": "class HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None",
    "repo": "fastapi",
    "path": "docs_src\\sql_databases\\tutorial002_py39.py",
    "type": "class",
    "name": "HeroUpdate",
    "loc": 25,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sub_applications\\tutorial001.py:function:read_main:chunk1",
    "text": "def read_main():\n    return {\"message\": \"Hello World from main app\"}",
    "repo": "fastapi",
    "path": "docs_src\\sub_applications\\tutorial001.py",
    "type": "function",
    "name": "read_main",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\sub_applications\\tutorial001.py:function:read_sub:chunk1",
    "text": "def read_sub():\n    return {\"message\": \"Hello World from sub API\"}",
    "repo": "fastapi",
    "path": "docs_src\\sub_applications\\tutorial001.py",
    "type": "function",
    "name": "read_sub",
    "loc": 15,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\using_request_directly\\tutorial001.py:function:read_root:chunk1",
    "text": "def read_root(item_id: str, request: Request):\n    client_host = request.client.host\n    return {\"client_host\": client_host, \"item_id\": item_id}",
    "repo": "fastapi",
    "path": "docs_src\\using_request_directly\\tutorial001.py",
    "type": "function",
    "name": "read_root",
    "loc": 7,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\websockets\\tutorial003.py:class:ConnectionManager:chunk1",
    "text": "class ConnectionManager:\n    def __init__(self):\n        self.active_connections: List[WebSocket] = []\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n\n    async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)\n\n    async def broadcast(self, message: str):\n        for connection in self.active_connections:\n            await connection.send_text(message)",
    "repo": "fastapi",
    "path": "docs_src\\websockets\\tutorial003.py",
    "type": "class",
    "name": "ConnectionManager",
    "loc": 46,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\websockets\\tutorial003_py39.py:class:ConnectionManager:chunk1",
    "text": "class ConnectionManager:\n    def __init__(self):\n        self.active_connections: list[WebSocket] = []\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n\n    async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)\n\n    async def broadcast(self, message: str):\n        for connection in self.active_connections:\n            await connection.send_text(message)",
    "repo": "fastapi",
    "path": "docs_src\\websockets\\tutorial003_py39.py",
    "type": "class",
    "name": "ConnectionManager",
    "loc": 44,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\wsgi\\tutorial001.py:function:flask_main:chunk1",
    "text": "def flask_main():\n    name = request.args.get(\"name\", \"World\")\n    return f\"Hello, {escape(name)} from Flask!\"",
    "repo": "fastapi",
    "path": "docs_src\\wsgi\\tutorial001.py",
    "type": "function",
    "name": "flask_main",
    "loc": 10,
    "role": "src"
  },
  {
    "id": "fastapi:docs_src\\wsgi\\tutorial001.py:function:read_main:chunk1",
    "text": "def read_main():\n    return {\"message\": \"Hello World\"}",
    "repo": "fastapi",
    "path": "docs_src\\wsgi\\tutorial001.py",
    "type": "function",
    "name": "read_main",
    "loc": 19,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\applications.py:class:FastAPI:chunk1",
    "text": "class FastAPI(Starlette):\n    \"\"\"\n    `FastAPI` app class, the main entrypoint to use FastAPI.\n\n    Read more in the\n    [FastAPI docs for First Steps](https://fastapi.tiangolo.com/tutorial/first-steps/).\n\n    ## Example\n\n    ```python\n    from fastapi import FastAPI\n\n    app = FastAPI()\n    ```\n    \"\"\"\n\n    def __init__(\n        self: AppType,\n        *,\n        debug: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Boolean indicating if debug tracebacks should be returned on server\n                errors.\n\n                Read more in the\n                [Starlette docs for Applications](https://www.starlette.io/applications/#instantiating-the-application).\n                \"\"\"\n            ),\n        ] = False,\n        routes: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                **Note**: you probably shouldn't use this parameter, it is inherited\n                from Starlette and supported for compatibility.\n\n                ---\n\n                A list of routes to serve incoming HTTP and WebSocket requests.\n                \"\"\"\n            ),\n            deprecated(\n                \"\"\"\n                You normally wouldn't use this parameter with FastAPI, it is inherited\n                from Starlette and supported for compatibility.\n\n                In FastAPI, you normally would use the *path operation methods*,\n                like `app.get()`, `app.post()`, etc.\n                \"\"\"\n            ),\n        ] = None,\n        title: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The title of the API.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-api).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(title=\"ChimichangApp\")\n                ```\n                \"\"\"\n            ),\n        ] = \"FastAPI\",\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A short summary of the API.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-api).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(summary=\"Deadpond's favorite app. Nuff said.\")\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            str,\n            Doc(\n                '''\n                A description of the API. Supports Markdown (using\n                [CommonMark syntax](https://commonmark.org/)).\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-api).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(\n                    description=\"\"\"\n                                ChimichangApp API helps you do awesome stuff. 🚀\n\n                                ## Items\n\n                                You can **read items**.\n\n                                ## Users\n\n                                You will be able to:\n\n                                * **Create users** (_not implemented_).\n                                * **Read users** (_not implemented_).\n\n                                \"\"\"\n                )\n                ```\n                '''\n            ),\n        ] = \"\",\n        version: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The version of the API.\n\n                **Note** This is the version of your application, not the version of\n                the OpenAPI specification nor the version of FastAPI being used.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-api).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(version=\"0.0.1\")\n                ```\n                \"\"\"\n            ),\n        ] = \"0.1.0\",\n        openapi_url: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                The URL where the OpenAPI schema will be served from.\n\n                If you set it to `None`, no OpenAPI schema will be served publicly, and\n                the default automatic endpoints `/docs` and `/redoc` will also be\n                disabled.\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#openapi-url).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(openapi_url=\"/api/v1/openapi.json\")\n                ```\n                \"\"\"\n            ),\n        ] = \"/openapi.json\",\n        openapi_tags: Annotated[\n            Optional[List[Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                A list of tags used by OpenAPI, these are the same `tags` you can set\n                in the *path operations*, like:\n\n                * `@app.get(\"/users/\", tags=[\"users\"])`\n                * `@app.get(\"/items/\", tags=[\"items\"])`\n\n                The order of the tags can be used to specify the order shown in\n                tools like Swagger UI, used in the automatic path `/docs`.\n\n                It's not required to specify all the tags used.\n\n                The tags that are not declared MAY be organized randomly or based\n                on the tools' logic. Each tag name in the list MUST be unique.\n\n                The value of each item is a `dict` containing:\n\n                * `name`: The name of the tag.\n                * `description`: A short description of the tag.\n                    [CommonMark syntax](https://commonmark.org/) MAY be used for rich\n                    text representation.\n                * `externalDocs`: Additional external documentation for this tag. If\n                    provided, it would contain a `dict` with:\n                    * `description`: A short description of the target documentation.\n                        [CommonMark syntax](https://commonmark.org/) MAY be used for\n                        rich text representation.\n                    * `url`: The URL for the target documentation. Value MUST be in\n                        the form of a URL.\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-tags).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                tags_metadata = [\n                    {\n                        \"name\": \"users\",\n                        \"description\": \"Operations with users. The **login** logic is also here.\",\n                    },\n                    {\n                        \"name\": \"items\",\n                        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n                        \"externalDocs\": {\n                            \"description\": \"Items external docs\",\n                            \"url\": \"https://fastapi.tiangolo.com/\",\n                        },\n                    },\n                ]\n\n                app = FastAPI(openapi_tags=tags_metadata)\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        servers: Annotated[\n            Optional[List[Dict[str, Union[str, Any]]]],\n            Doc(\n                \"\"\"\n                A `list` of `dict`s with connectivity information to a target server.\n\n                You would use it, for example, if your application is served from\n                different domains and you want to use the same Swagger UI in the\n                browser to interact with each of them (instead of having multiple\n                browser tabs open). Or if you want to leave fixed the possible URLs.\n\n                If the servers `list` is not provided, or is an empty `list`, the\n                default value would be a `dict` with a `url` value of `/`.\n\n                Each item in the `list` is a `dict` containing:\n\n                * `url`: A URL to the target host. This URL supports Server Variables\n                and MAY be relative, to indicate that the host location is relative\n                to the location where the OpenAPI document is being served. Variable\n                substitutions will be made when a variable is named in `{`brackets`}`.\n                * `description`: An optional string describing the host designated by\n                the URL. [CommonMark syntax](https://commonmark.org/) MAY be used for\n                rich text representation.\n                * `variables`: A `dict` between a variable name and its value. The value\n                    is used for substitution in the server's URL template.\n\n                Read more in the\n                [FastAPI docs for Behind a Proxy](https://fastapi.tiangolo.com/advanced/behind-a-proxy/#additional-servers).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(\n                    servers=[\n                        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n                        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n                    ]\n                )\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of global dependencies, they will be applied to each\n                *path operation*, including in sub-routers.\n\n                Read more about it in the\n                [FastAPI docs for Global Dependencies](https://fastapi.tiangolo.com/tutorial/dependencies/global-dependencies/).\n\n                **Example**\n\n                ```python\n                from fastapi import Depends, FastAPI\n\n                from .dependencies import func_dep_1, func_dep_2\n\n                app = FastAPI(dependencies=[Depends(func_dep_1), Depends(func_dep_2)])\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        default_response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                The default response class to be used.\n\n                Read more in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#default-response-class).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n                from fastapi.responses import ORJSONResponse\n\n                app = FastAPI(default_response_class=ORJSONResponse)\n                ```\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        redirect_slashes: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Whether to detect and redirect slashes in URLs when the client doesn't\n                use the same format.\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(redirect_slashes=True)  # the default\n\n                @app.get(\"/items/\")\n                async def read_items():\n                    return [{\"item_id\": \"Foo\"}]\n                ```\n\n                With this app, if a client goes to `/items` (without a trailing slash),\n                they will be automatically redirected with an HTTP status code of 307\n                to `/items/`.\n                \"\"\"\n            ),\n        ] = True,\n        docs_url: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                The path to the automatic interactive API documentation.\n                It is handled in the browser by Swagger UI.\n\n                The default URL is `/docs`. You can disable it by setting it to `None`.\n\n                If `openapi_url` is set to `None`, this will be automatically disabled.\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#docs-urls).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(docs_url=\"/documentation\", redoc_url=None)\n                ```\n                \"\"\"\n            ),\n        ] = \"/docs\",\n        redoc_url: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                The path to the alternative automatic interactive API documentation\n                provided by ReDoc.\n\n                The default URL is `/redoc`. You can disable it by setting it to `None`.\n\n                If `openapi_url` is set to `None`, this will be automatically disabled.\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#docs-urls).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(docs_url=\"/documentation\", redoc_url=\"redocumentation\")\n                ```\n                \"\"\"\n            ),\n        ] = \"/redoc\",\n        swagger_ui_oauth2_redirect_url: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                The OAuth2 redirect endpoint for the Swagger UI.\n\n                By default it is `/docs/oauth2-redirect`.\n\n                This is only used if you use OAuth2 (with the \"Authorize\" button)\n                with Swagger UI.\n                \"\"\"\n            ),\n        ] = \"/docs/oauth2-redirect\",\n        swagger_ui_init_oauth: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                OAuth2 configuration for the Swagger UI, by default shown at `/docs`.\n\n                Read more about the available configuration options in the\n                [Swagger UI docs](https://swagger.io/docs/open-source-tools/swagger-ui/usage/oauth2/).\n                \"\"\"\n            ),\n        ] = None,\n        middleware: Annotated[\n            Optional[Sequence[Middleware]],\n            Doc(\n                \"\"\"\n                List of middleware to be added when creating the application.\n\n                In FastAPI you would normally do this with `app.add_middleware()`\n                instead.\n\n                Read more in the\n                [FastAPI docs for Middleware](https://fastapi.tiangolo.com/tutorial/middleware/).\n                \"\"\"\n            ),\n        ] = None,\n        exception_handlers: Annotated[\n            Optional[\n                Dict[\n                    Union[int, Type[Exception]],\n                    Callable[[Request, Any], Coroutine[Any, Any, Response]],\n                ]\n            ],\n            Doc(\n                \"\"\"\n                A dictionary with handlers for exceptions.\n\n                In FastAPI, you would normally use the decorator\n                `@app.exception_handler()`.\n\n                Read more in the\n                [FastAPI docs for Handling Errors](https://fastapi.tiangolo.com/tutorial/handling-errors/).\n                \"\"\"\n            ),\n        ] = None,\n        on_startup: Annotated[\n            Optional[Sequence[Callable[[], Any]]],\n            Doc(\n                \"\"\"\n                A list of startup event handler functions.\n\n                You should instead use the `lifespan` handlers.\n\n                Read more in the [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n                \"\"\"\n            ),\n        ] = None,\n        on_shutdown: Annotated[\n            Optional[Sequence[Callable[[], Any]]],\n            Doc(\n                \"\"\"\n                A list of shutdown event handler functions.\n\n                You should instead use the `lifespan` handlers.\n\n                Read more in the\n                [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n                \"\"\"\n            ),\n        ] = None,\n        lifespan: Annotated[\n            Optional[Lifespan[AppType]],\n            Doc(\n                \"\"\"\n                A `Lifespan` context manager handler. This replaces `startup` and\n                `shutdown` functions with a single context manager.\n\n                Read more in the\n                [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n                \"\"\"\n            ),\n        ] = None,\n        terms_of_service: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A URL to the Terms of Service for your API.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more at the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-api).\n\n                **Example**\n\n                ```python\n                app = FastAPI(terms_of_service=\"http://example.com/terms/\")\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        contact: Annotated[\n            Optional[Dict[str, Union[str, Any]]],\n            Doc(\n                \"\"\"\n                A dictionary with the contact information for the exposed API.\n\n                It can contain several fields.\n\n                * `name`: (`str`) The name of the contact person/organization.\n                * `url`: (`str`) A URL pointing to the contact information. MUST be in\n                    the format of a URL.\n                * `email`: (`str`) The email address of the contact person/organization.\n                    MUST be in the format of an email address.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more at the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-api).\n\n                **Example**\n\n                ```python\n                app = FastAPI(\n                    contact={\n                        \"name\": \"Deadpoolio the Amazing\",\n                        \"url\": \"http://x-force.example.com/contact/\",\n                        \"email\": \"dp@x-force.example.com\",\n                    }\n                )\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        license_info: Annotated[\n            Optional[Dict[str, Union[str, Any]]],\n            Doc(\n                \"\"\"\n                A dictionary with the license information for the exposed API.\n\n                It can contain several fields.\n\n                * `name`: (`str`) **REQUIRED** (if a `license_info` is set). The\n                    license name used for the API.\n                * `identifier`: (`str`) An [SPDX](https://spdx.dev/) license expression\n                    for the API. The `identifier` field is mutually exclusive of the `url`\n                    field. Available since OpenAPI 3.1.0, FastAPI 0.99.0.\n                * `url`: (`str`) A URL to the license used for the API. This MUST be\n                    the format of a URL.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more at the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-api).\n\n                **Example**\n\n                ```python\n                app = FastAPI(\n                    license_info={\n                        \"name\": \"Apache 2.0\",\n                        \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n                    }\n                )\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        openapi_prefix: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                A URL prefix for the OpenAPI URL.\n                \"\"\"\n            ),\n            deprecated(\n                \"\"\"\n                \"openapi_prefix\" has been deprecated in favor of \"root_path\", which\n                follows more closely the ASGI standard, is simpler, and more\n                automatic.\n                \"\"\"\n            ),\n        ] = \"\",\n        root_path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                A path prefix handled by a proxy that is not seen by the application\n                but is seen by external clients, which affects things like Swagger UI.\n\n                Read more about it at the\n                [FastAPI docs for Behind a Proxy](https://fastapi.tiangolo.com/advanced/behind-a-proxy/).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(root_path=\"/api/v1\")\n                ```\n                \"\"\"\n            ),\n        ] = \"\",\n        root_path_in_servers: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                To disable automatically generating the URLs in the `servers` field\n                in the autogenerated OpenAPI using the `root_path`.\n\n                Read more about it in the\n                [FastAPI docs for Behind a Proxy](https://fastapi.tiangolo.com/advanced/behind-a-proxy/#disable-automatic-server-from-root_path).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(root_path_in_servers=False)\n                ```\n                \"\"\"\n            ),\n        ] = True,\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses to be shown in OpenAPI.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Additional Responses in OpenAPI](https://fastapi.tiangolo.com/advanced/additional-responses/).\n\n                And in the\n                [FastAPI docs for Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                OpenAPI callbacks that should apply to all *path operations*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        webhooks: Annotated[\n            Optional[routing.APIRouter],\n            Doc(\n                \"\"\"\n                Add OpenAPI webhooks. This is similar to `callbacks` but it doesn't\n                depend on specific *path operations*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                **Note**: This is available since OpenAPI 3.1.0, FastAPI 0.99.0.\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Webhooks](https://fastapi.tiangolo.com/advanced/openapi-webhooks/).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark all *path operations* as deprecated. You probably don't need it,\n                but it's available.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                To include (or not) all the *path operations* in the generated OpenAPI.\n                You probably don't need it, but it's available.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        swagger_ui_parameters: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Parameters to configure Swagger UI, the autogenerated interactive API\n                documentation (by default at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs about how to Configure Swagger UI](https://fastapi.tiangolo.com/how-to/configure-swagger-ui/).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n        separate_input_output_schemas: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Whether to generate separate OpenAPI schemas for request body and\n                response body when the results would be more precise.\n\n                This is particularly useful when automatically generating clients.\n\n                For example, if you have a model like:\n\n                ```python\n                from pydantic import BaseModel\n\n                class Item(BaseModel):\n                    name: str\n                    tags: list[str] = []\n                ```\n\n                When `Item` is used for input, a request body, `tags` is not required,\n                the client doesn't have to provide it.\n\n                But when using `Item` for output, for a response body, `tags` is always\n                available because it has a default value, even if it's just an empty\n                list. So, the client should be able to always expect it.\n\n                In this case, there would be two different schemas, one for input and\n                another one for output.\n                \"\"\"\n            ),\n        ] = True,\n        **extra: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                Extra keyword arguments to be stored in the app, not used by FastAPI\n                anywhere.\n                \"\"\"\n            ),\n        ],\n    ) -> None:\n        self.debug = debug\n        self.title = title\n        self.summary = summary\n        self.description = description\n        self.version = version\n        self.terms_of_service = terms_of_service\n        self.contact = contact\n        self.license_info = license_info\n        self.openapi_url = openapi_url\n        self.openapi_tags = openapi_tags\n        self.root_path_in_servers = root_path_in_servers\n        self.docs_url = docs_url\n        self.redoc_url = redoc_url\n        self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n        self.swagger_ui_init_oauth = swagger_ui_init_oauth\n        self.swagger_ui_parameters = swagger_ui_parameters\n        self.servers = servers or []\n        self.separate_input_output_schemas = separate_input_output_schemas\n        self.extra = extra\n        self.openapi_version: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The version string of OpenAPI.\n\n                FastAPI will generate OpenAPI version 3.1.0, and will output that as\n                the OpenAPI version. But some tools, even though they might be\n                compatible with OpenAPI 3.1.0, might not recognize it as a valid.\n\n                So you could override this value to trick those tools into using\n                the generated OpenAPI. Have in mind that this is a hack. But if you\n                avoid using features added in OpenAPI 3.1.0, it might work for your\n                use case.\n\n                This is not passed as a parameter to the `FastAPI` class to avoid\n                giving the false idea that FastAPI would generate a different OpenAPI\n                schema. It is only available as an attribute.\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI()\n\n                app.openapi_version = \"3.0.2\"\n                ```\n                \"\"\"\n            ),\n        ] = \"3.1.0\"\n        self.openapi_schema: Optional[Dict[str, Any]] = None\n        if self.openapi_url:\n            assert self.title, \"A title must be provided for OpenAPI, e.g.: 'My API'\"\n            assert self.version, \"A version must be provided for OpenAPI, e.g.: '2.1.0'\"\n        # TODO: remove when discarding the openapi_prefix parameter\n        if openapi_prefix:\n            logger.warning(\n                '\"openapi_prefix\" has been deprecated in favor of \"root_path\", which '\n                \"follows more closely the ASGI standard, is simpler, and more \"\n                \"automatic. Check the docs at \"\n                \"https://fastapi.tiangolo.com/advanced/sub-applications/\"\n            )\n        self.webhooks: Annotated[\n            routing.APIRouter,\n            Doc(\n                \"\"\"\n                The `app.webhooks` attribute is an `APIRouter` with the *path\n                operations* that will be used just for documentation of webhooks.\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Webhooks](https://fastapi.tiangolo.com/advanced/openapi-webhooks/).\n                \"\"\"\n            ),\n        ] = webhooks or routing.APIRouter()\n        self.root_path = root_path or openapi_prefix\n        self.state: Annotated[\n            State,\n            Doc(\n                \"\"\"\n                A state object for the application. This is the same object for the\n                entire application, it doesn't change from request to request.\n\n                You normally wouldn't use this in FastAPI, for most of the cases you\n                would instead use FastAPI dependencies.\n\n                This is simply inherited from Starlette.\n\n                Read more about it in the\n                [Starlette docs for Applications](https://www.starlette.io/applications/#storing-state-on-the-app-instance).\n                \"\"\"\n            ),\n        ] = State()\n        self.dependency_overrides: Annotated[\n            Dict[Callable[..., Any], Callable[..., Any]],\n            Doc(\n                \"\"\"\n                A dictionary with overrides for the dependencies.\n\n                Each key is the original dependency callable, and the value is the\n                actual dependency that should be called.\n\n                This is for testing, to replace expensive dependencies with testing\n                versions.\n\n                Read more about it in the\n                [FastAPI docs for Testing Dependencies with Overrides](https://fastapi.tiangolo.com/advanced/testing-dependencies/).\n                \"\"\"\n            ),\n        ] = {}\n        self.router: routing.APIRouter = routing.APIRouter(\n            routes=routes,\n            redirect_slashes=redirect_slashes,\n            dependency_overrides_provider=self,\n            on_startup=on_startup,\n            on_shutdown=on_shutdown,\n            lifespan=lifespan,\n            default_response_class=default_response_class,\n            dependencies=dependencies,\n            callbacks=callbacks,\n            deprecated=deprecated,\n            include_in_schema=include_in_schema,\n            responses=responses,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n        self.exception_handlers: Dict[\n            Any, Callable[[Request, Any], Union[Response, Awaitable[Response]]]\n        ] = {} if exception_handlers is None else dict(exception_handlers)\n        self.exception_handlers.setdefault(HTTPException, http_exception_handler)\n        self.exception_handlers.setdefault(\n            RequestValidationError, request_validation_exception_handler\n        )\n        self.exception_handlers.setdefault(\n            WebSocketRequestValidationError,\n            # Starlette still has incorrect type specification for the handlers\n            websocket_request_validation_exception_handler,  # type: ignore\n        )\n\n        self.user_middleware: List[Middleware] = (\n            [] if middleware is None else list(middleware)\n        )\n        self.middleware_stack: Union[ASGIApp, None] = None\n        self.setup()\n\n    def openapi(self) -> Dict[str, Any]:\n        \"\"\"\n        Generate the OpenAPI schema of the application. This is called by FastAPI\n        internally.\n\n        The first time it is called it stores the result in the attribute\n        `app.openapi_schema`, and next times it is called, it just returns that same\n        result. To avoid the cost of generating the schema every time.\n\n        If you need to modify the generated OpenAPI schema, you could modify it.\n\n        Read more in the\n        [FastAPI docs for OpenAPI](https://fastapi.tiangolo.com/how-to/extending-openapi/).\n        \"\"\"\n        if not self.openapi_schema:\n            self.openapi_schema = get_openapi(\n                title=self.title,\n                version=self.version,\n                openapi_version=self.openapi_version,\n                summary=self.summary,\n                description=self.description,\n                terms_of_service=self.terms_of_service,\n                contact=self.contact,\n                license_info=self.license_info,\n                routes=self.routes,\n                webhooks=self.webhooks.routes,\n                tags=self.openapi_tags,\n                servers=self.servers,\n                separate_input_output_schemas=self.separate_input_output_schemas,\n            )\n        return self.openapi_schema\n\n    def setup(self) -> None:\n        if self.openapi_url:\n            urls = (server_data.get(\"url\") for server_data in self.servers)\n            server_urls = {url for url in urls if url}\n\n            async def openapi(req: Request) -> JSONResponse:\n                root_path = req.scope.get(\"root_path\", \"\").rstrip(\"/\")\n                if root_path not in server_urls:\n                    if root_path and self.root_path_in_servers:\n                        self.servers.insert(0, {\"url\": root_path})\n                        server_urls.add(root_path)\n                return JSONResponse(self.openapi())\n\n            self.add_route(self.openapi_url, openapi, include_in_schema=False)\n        if self.openapi_url and self.docs_url:\n\n            async def swagger_ui_html(req: Request) -> HTMLResponse:\n                root_path = req.scope.get(\"root_path\", \"\").rstrip(\"/\")\n                openapi_url = root_path + self.openapi_url\n                oauth2_redirect_url = self.swagger_ui_oauth2_redirect_url\n                if oauth2_redirect_url:\n                    oauth2_redirect_url = root_path + oauth2_redirect_url\n                return get_swagger_ui_html(\n                    openapi_url=openapi_url,\n                    title=f\"{self.title} - Swagger UI\",\n                    oauth2_redirect_url=oauth2_redirect_url,\n                    init_oauth=self.swagger_ui_init_oauth,\n                    swagger_ui_parameters=self.swagger_ui_parameters,\n                )\n\n            self.add_route(self.docs_url, swagger_ui_html, include_in_schema=False)\n\n            if self.swagger_ui_oauth2_redirect_url:\n\n                async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n                    return get_swagger_ui_oauth2_redirect_html()\n\n                self.add_route(\n                    self.swagger_ui_oauth2_redirect_url,\n                    swagger_ui_redirect,\n                    include_in_schema=False,\n                )\n        if self.openapi_url and self.redoc_url:\n\n            async def redoc_html(req: Request) -> HTMLResponse:\n                root_path = req.scope.get(\"root_path\", \"\").rstrip(\"/\")\n                openapi_url = root_path + self.openapi_url\n                return get_redoc_html(\n                    openapi_url=openapi_url, title=f\"{self.title} - ReDoc\"\n                )\n\n            self.add_route(self.redoc_url, redoc_html, include_in_schema=False)\n\n    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n        if self.root_path:\n            scope[\"root_path\"] = self.root_path\n        await super().__call__(scope, receive, send)\n\n    def add_api_route(\n        self,\n        path: str,\n        endpoint: Callable[..., Any],\n        *,\n        response_model: Any = Default(None),\n        status_code: Optional[int] = None,\n        tags: Optional[List[Union[str, Enum]]] = None,\n        dependencies: Optional[Sequence[Depends]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        response_description: str = \"Successful Response\",\n        responses: Optional[Dict[Union[int, str], Dict[str, Any]]] = None,\n        deprecated: Optional[bool] = None,\n        methods: Optional[List[str]] = None,\n        operation_id: Optional[str] = None,\n        response_model_include: Optional[IncEx] = None,\n        response_model_exclude: Optional[IncEx] = None,\n        response_model_by_alias: bool = True,\n        response_model_exclude_unset: bool = False,\n        response_model_exclude_defaults: bool = False,\n        response_model_exclude_none: bool = False,\n        include_in_schema: bool = True,\n        response_class: Union[Type[Response], DefaultPlaceholder] = Default(\n            JSONResponse\n        ),\n        name: Optional[str] = None,\n        openapi_extra: Optional[Dict[str, Any]] = None,\n        generate_unique_id_function: Callable[[routing.APIRoute], str] = Default(\n            generate_unique_id\n        ),\n    ) -> None:\n        self.router.add_api_route(\n            path,\n            endpoint=endpoint,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=methods,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def api_route(\n        self,\n        path: str,\n        *,\n        response_model: Any = Default(None),\n        status_code: Optional[int] = None,\n        tags: Optional[List[Union[str, Enum]]] = None,\n        dependencies: Optional[Sequence[Depends]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        response_description: str = \"Successful Response\",\n        responses: Optional[Dict[Union[int, str], Dict[str, Any]]] = None,\n        deprecated: Optional[bool] = None,\n        methods: Optional[List[str]] = None,\n        operation_id: Optional[str] = None,\n        response_model_include: Optional[IncEx] = None,\n        response_model_exclude: Optional[IncEx] = None,\n        response_model_by_alias: bool = True,\n        response_model_exclude_unset: bool = False,\n        response_model_exclude_defaults: bool = False,\n        response_model_exclude_none: bool = False,\n        include_in_schema: bool = True,\n        response_class: Type[Response] = Default(JSONResponse),\n        name: Optional[str] = None,\n        openapi_extra: Optional[Dict[str, Any]] = None,\n        generate_unique_id_function: Callable[[routing.APIRoute], str] = Default(\n            generate_unique_id\n        ),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.router.add_api_route(\n                path,\n                func,\n                response_model=response_model,\n                status_code=status_code,\n                tags=tags,\n                dependencies=dependencies,\n                summary=summary,\n                description=description,\n                response_description=response_description,\n                responses=responses,\n                deprecated=deprecated,\n                methods=methods,\n                operation_id=operation_id,\n                response_model_include=response_model_include",
    "repo": "fastapi",
    "path": "fastapi\\applications.py",
    "type": "class",
    "name": "FastAPI",
    "loc": 48,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\applications.py:class:FastAPI:chunk2",
    "text": " = False,\n        response_model_exclude_defaults: bool = False,\n        response_model_exclude_none: bool = False,\n        include_in_schema: bool = True,\n        response_class: Type[Response] = Default(JSONResponse),\n        name: Optional[str] = None,\n        openapi_extra: Optional[Dict[str, Any]] = None,\n        generate_unique_id_function: Callable[[routing.APIRoute], str] = Default(\n            generate_unique_id\n        ),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.router.add_api_route(\n                path,\n                func,\n                response_model=response_model,\n                status_code=status_code,\n                tags=tags,\n                dependencies=dependencies,\n                summary=summary,\n                description=description,\n                response_description=response_description,\n                responses=responses,\n                deprecated=deprecated,\n                methods=methods,\n                operation_id=operation_id,\n                response_model_include=response_model_include,\n                response_model_exclude=response_model_exclude,\n                response_model_by_alias=response_model_by_alias,\n                response_model_exclude_unset=response_model_exclude_unset,\n                response_model_exclude_defaults=response_model_exclude_defaults,\n                response_model_exclude_none=response_model_exclude_none,\n                include_in_schema=include_in_schema,\n                response_class=response_class,\n                name=name,\n                openapi_extra=openapi_extra,\n                generate_unique_id_function=generate_unique_id_function,\n            )\n            return func\n\n        return decorator\n\n    def add_api_websocket_route(\n        self,\n        path: str,\n        endpoint: Callable[..., Any],\n        name: Optional[str] = None,\n        *,\n        dependencies: Optional[Sequence[Depends]] = None,\n    ) -> None:\n        self.router.add_api_websocket_route(\n            path,\n            endpoint,\n            name=name,\n            dependencies=dependencies,\n        )\n\n    def websocket(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                WebSocket path.\n                \"\"\"\n            ),\n        ],\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A name for the WebSocket. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        *,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be used for this\n                WebSocket.\n\n                Read more about it in the\n                [FastAPI docs for WebSockets](https://fastapi.tiangolo.com/advanced/websockets/).\n                \"\"\"\n            ),\n        ] = None,\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Decorate a WebSocket function.\n\n        Read more about it in the\n        [FastAPI docs for WebSockets](https://fastapi.tiangolo.com/advanced/websockets/).\n\n        **Example**\n\n        ```python\n        from fastapi import FastAPI, WebSocket\n\n        app = FastAPI()\n\n        @app.websocket(\"/ws\")\n        async def websocket_endpoint(websocket: WebSocket):\n            await websocket.accept()\n            while True:\n                data = await websocket.receive_text()\n                await websocket.send_text(f\"Message text was: {data}\")\n        ```\n        \"\"\"\n\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.add_api_websocket_route(\n                path,\n                func,\n                name=name,\n                dependencies=dependencies,\n            )\n            return func\n\n        return decorator\n\n    def include_router(\n        self,\n        router: Annotated[routing.APIRouter, Doc(\"The `APIRouter` to include.\")],\n        *,\n        prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to all the *path operations* in this\n                router.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to all the\n                *path operations* in this router.\n\n                Read more about it in the\n                [FastAPI docs for Bigger Applications - Multiple Files](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n\n                **Example**\n\n                ```python\n                from fastapi import Depends, FastAPI\n\n                from .dependencies import get_token_header\n                from .internal import admin\n\n                app = FastAPI()\n\n                app.include_router(\n                    admin.router,\n                    dependencies=[Depends(get_token_header)],\n                )\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses to be shown in OpenAPI.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Additional Responses in OpenAPI](https://fastapi.tiangolo.com/advanced/additional-responses/).\n\n                And in the\n                [FastAPI docs for Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark all the *path operations* in this router as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                from .internal import old_api\n\n                app = FastAPI()\n\n                app.include_router(\n                    old_api.router,\n                    deprecated=True,\n                )\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include (or not) all the *path operations* in this router in the\n                generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                from .internal import old_api\n\n                app = FastAPI()\n\n                app.include_router(\n                    old_api.router,\n                    include_in_schema=False,\n                )\n                ```\n                \"\"\"\n            ),\n        ] = True,\n        default_response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Default response class to be used for the *path operations* in this\n                router.\n\n                Read more in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#default-response-class).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n                from fastapi.responses import ORJSONResponse\n\n                from .internal import old_api\n\n                app = FastAPI()\n\n                app.include_router(\n                    old_api.router,\n                    default_response_class=ORJSONResponse,\n                )\n                ```\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> None:\n        \"\"\"\n        Include an `APIRouter` in the same app.\n\n        Read more about it in the\n        [FastAPI docs for Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/).\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI\n\n        from .users import users_router\n\n        app = FastAPI()\n\n        app.include_router(users_router)\n        ```\n        \"\"\"\n        self.router.include_router(\n            router,\n            prefix=prefix,\n            tags=tags,\n            dependencies=dependencies,\n            responses=responses,\n            deprecated=deprecated,\n            include_in_schema=include_in_schema,\n            default_response_class=default_response_class,\n            callbacks=callbacks,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def get(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP GET operation.\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI\n\n        app = FastAPI()\n\n        @app.get(\"/items/\")\n        def read_items():\n            return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n        ```\n        \"\"\"\n        return self.router.get(\n            path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def put(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP PUT operation.\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI\n        from pydantic import BaseModel\n\n        class Item(BaseModel):\n            name: str\n            description: str | None = None\n\n        app = FastAPI()\n\n        @app.put(\"/items/{item_id}\")\n        def replace_item(item_id: str, item: Item):\n            return {\"message\": \"Item replaced\", \"id\": item_id}\n        ```\n        \"\"\"\n        return self.router.put(\n            path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def post(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n",
    "repo": "fastapi",
    "path": "fastapi\\applications.py",
    "type": "class",
    "name": "FastAPI",
    "loc": 48,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\applications.py:class:FastAPI:chunk3",
    "text": ".tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP POST operation.\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI\n        from pydantic import BaseModel\n\n        class Item(BaseModel):\n            name: str\n            description: str | None = None\n\n        app = FastAPI()\n\n        @app.post(\"/items/\")\n        def create_item(item: Item):\n            return {\"message\": \"Item created\"}\n        ```\n        \"\"\"\n        return self.router.post(\n            path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def delete(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP DELETE operation.\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI\n\n        app = FastAPI()\n\n        @app.delete(\"/items/{item_id}\")\n        def delete_item(item_id: str):\n            return {\"message\": \"Item deleted\"}\n        ```\n        \"\"\"\n        return self.router.delete(\n            path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def options(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP OPTIONS operation.\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI\n\n        app = FastAPI()\n\n        @app.options(\"/items/\")\n        def get_item_options():\n            return {\"additions\": [\"Aji\", \"Guacamole\"]}\n        ```\n        \"\"\"\n        return self.router.options(\n            path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def head(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON",
    "repo": "fastapi",
    "path": "fastapi\\applications.py",
    "type": "class",
    "name": "FastAPI",
    "loc": 48,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\applications.py:class:FastAPI:chunk4",
    "text": " self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP HEAD operation.\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI, Response\n\n        app = FastAPI()\n\n        @app.head(\"/items/\", status_code=204)\n        def get_items_headers(response: Response):\n            response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n        ```\n        \"\"\"\n        return self.router.head(\n            path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def patch(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP PATCH operation.\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI\n        from pydantic import BaseModel\n\n        class Item(BaseModel):\n            name: str\n            description: str | None = None\n\n        app = FastAPI()\n\n        @app.patch(\"/items/\")\n        def update_item(item: Item):\n            return {\"message\": \"Item updated in place\"}\n        ```\n        \"\"\"\n        return self.router.patch(\n            path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def trace(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP TRACE operation.\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI\n\n        app = FastAPI()\n\n        @app.put(\"/items/{item_id}\")\n        def",
    "repo": "fastapi",
    "path": "fastapi\\applications.py",
    "type": "class",
    "name": "FastAPI",
    "loc": 48,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\applications.py:class:FastAPI:chunk5",
    "text": "configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP TRACE operation.\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI\n\n        app = FastAPI()\n\n        @app.put(\"/items/{item_id}\")\n        def trace_item(item_id: str):\n            return None\n        ```\n        \"\"\"\n        return self.router.trace(\n            path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def websocket_route(\n        self, path: str, name: Union[str, None] = None\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.router.add_websocket_route(path, func, name=name)\n            return func\n\n        return decorator\n\n    @deprecated(\n        \"\"\"\n        on_event is deprecated, use lifespan event handlers instead.\n\n        Read more about it in the\n        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).\n        \"\"\"\n    )\n    def on_event(\n        self,\n        event_type: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The type of event. `startup` or `shutdown`.\n                \"\"\"\n            ),\n        ],\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add an event handler for the application.\n\n        `on_event` is deprecated, use `lifespan` event handlers instead.\n\n        Read more about it in the\n        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/#alternative-events-deprecated).\n        \"\"\"\n        return self.router.on_event(event_type)\n\n    def middleware(\n        self,\n        middleware_type: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The type of middleware. Currently only supports `http`.\n                \"\"\"\n            ),\n        ],\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a middleware to the application.\n\n        Read more about it in the\n        [FastAPI docs for Middleware](https://fastapi.tiangolo.com/tutorial/middleware/).\n\n        ## Example\n\n        ```python\n        import time\n\n        from fastapi import FastAPI, Request\n\n        app = FastAPI()\n\n\n        @app.middleware(\"http\")\n        async def add_process_time_header(request: Request, call_next):\n            start_time = time.time()\n            response = await call_next(request)\n            process_time = time.time() - start_time\n            response.headers[\"X-Process-Time\"] = str(process_time)\n            return response\n        ```\n        \"\"\"\n\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.add_middleware(BaseHTTPMiddleware, dispatch=func)\n            return func\n\n        return decorator\n\n    def exception_handler(\n        self,\n        exc_class_or_status_code: Annotated[\n            Union[int, Type[Exception]],\n            Doc(\n                \"\"\"\n                The Exception class this would handle, or a status code.\n                \"\"\"\n            ),\n        ],\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add an exception handler to the app.\n\n        Read more about it in the\n        [FastAPI docs for Handling Errors](https://fastapi.tiangolo.com/tutorial/handling-errors/).\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI, Request\n        from fastapi.responses import JSONResponse\n\n\n        class UnicornException(Exception):\n            def __init__(self, name: str):\n                self.name = name\n\n\n        app = FastAPI()\n\n\n        @app.exception_handler(UnicornException)\n        async def unicorn_exception_handler(request: Request, exc: UnicornException):\n            return JSONResponse(\n                status_code=418,\n                content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n            )\n        ```\n        \"\"\"\n\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.add_exception_handler(exc_class_or_status_code, func)\n            return func\n\n        return decorator",
    "repo": "fastapi",
    "path": "fastapi\\applications.py",
    "type": "class",
    "name": "FastAPI",
    "loc": 48,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\background.py:class:BackgroundTasks:chunk1",
    "text": "class BackgroundTasks(StarletteBackgroundTasks):\n    \"\"\"\n    A collection of background tasks that will be called after a response has been\n    sent to the client.\n\n    Read more about it in the\n    [FastAPI docs for Background Tasks](https://fastapi.tiangolo.com/tutorial/background-tasks/).\n\n    ## Example\n\n    ```python\n    from fastapi import BackgroundTasks, FastAPI\n\n    app = FastAPI()\n\n\n    def write_notification(email: str, message=\"\"):\n        with open(\"log.txt\", mode=\"w\") as email_file:\n            content = f\"notification for {email}: {message}\"\n            email_file.write(content)\n\n\n    @app.post(\"/send-notification/{email}\")\n    async def send_notification(email: str, background_tasks: BackgroundTasks):\n        background_tasks.add_task(write_notification, email, message=\"some notification\")\n        return {\"message\": \"Notification sent in the background\"}\n    ```\n    \"\"\"\n\n    def add_task(\n        self,\n        func: Annotated[\n            Callable[P, Any],\n            Doc(\n                \"\"\"\n                The function to call after the response is sent.\n\n                It can be a regular `def` function or an `async def` function.\n                \"\"\"\n            ),\n        ],\n        *args: P.args,\n        **kwargs: P.kwargs,\n    ) -> None:\n        \"\"\"\n        Add a function to be called in the background after the response is sent.\n\n        Read more about it in the\n        [FastAPI docs for Background Tasks](https://fastapi.tiangolo.com/tutorial/background-tasks/).\n        \"\"\"\n        return super().add_task(func, *args, **kwargs)",
    "repo": "fastapi",
    "path": "fastapi\\background.py",
    "type": "class",
    "name": "BackgroundTasks",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\cli.py:function:main:chunk1",
    "text": "def main() -> None:\n    if not cli_main:  # type: ignore[truthy-function]\n        message = 'To use the fastapi command, please install \"fastapi[standard]\":\\n\\n\\tpip install \"fastapi[standard]\"\\n'\n        print(message)\n        raise RuntimeError(message)  # noqa: B904\n    cli_main()",
    "repo": "fastapi",
    "path": "fastapi\\cli.py",
    "type": "function",
    "name": "main",
    "loc": 8,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\datastructures.py:function:Default:chunk1",
    "text": "def Default(value: DefaultType) -> DefaultType:\n    \"\"\"\n    You shouldn't use this function directly.\n\n    It's used internally to recognize when a default value has been overwritten, even\n    if the overridden default value was truthy.\n    \"\"\"\n    return DefaultPlaceholder(value)  # type: ignore",
    "repo": "fastapi",
    "path": "fastapi\\datastructures.py",
    "type": "function",
    "name": "Default",
    "loc": 197,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\datastructures.py:class:UploadFile:chunk1",
    "text": "class UploadFile(StarletteUploadFile):\n    \"\"\"\n    A file uploaded in a request.\n\n    Define it as a *path operation function* (or dependency) parameter.\n\n    If you are using a regular `def` function, you can use the `upload_file.file`\n    attribute to access the raw standard Python file (blocking, not async), useful and\n    needed for non-async code.\n\n    Read more about it in the\n    [FastAPI docs for Request Files](https://fastapi.tiangolo.com/tutorial/request-files/).\n\n    ## Example\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import FastAPI, File, UploadFile\n\n    app = FastAPI()\n\n\n    @app.post(\"/files/\")\n    async def create_file(file: Annotated[bytes, File()]):\n        return {\"file_size\": len(file)}\n\n\n    @app.post(\"/uploadfile/\")\n    async def create_upload_file(file: UploadFile):\n        return {\"filename\": file.filename}\n    ```\n    \"\"\"\n\n    file: Annotated[\n        BinaryIO,\n        Doc(\"The standard Python file object (non-async).\"),\n    ]\n    filename: Annotated[Optional[str], Doc(\"The original file name.\")]\n    size: Annotated[Optional[int], Doc(\"The size of the file in bytes.\")]\n    headers: Annotated[Headers, Doc(\"The headers of the request.\")]\n    content_type: Annotated[\n        Optional[str], Doc(\"The content type of the request, from the headers.\")\n    ]\n\n    async def write(\n        self,\n        data: Annotated[\n            bytes,\n            Doc(\n                \"\"\"\n                The bytes to write to the file.\n                \"\"\"\n            ),\n        ],\n    ) -> None:\n        \"\"\"\n        Write some bytes to the file.\n\n        You normally wouldn't use this from a file you read in a request.\n\n        To be awaitable, compatible with async, this is run in threadpool.\n        \"\"\"\n        return await super().write(data)\n\n    async def read(\n        self,\n        size: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                The number of bytes to read from the file.\n                \"\"\"\n            ),\n        ] = -1,\n    ) -> bytes:\n        \"\"\"\n        Read some bytes from the file.\n\n        To be awaitable, compatible with async, this is run in threadpool.\n        \"\"\"\n        return await super().read(size)\n\n    async def seek(\n        self,\n        offset: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                The position in bytes to seek to in the file.\n                \"\"\"\n            ),\n        ],\n    ) -> None:\n        \"\"\"\n        Move to a position in the file.\n\n        Any next read or write will be done from that position.\n\n        To be awaitable, compatible with async, this is run in threadpool.\n        \"\"\"\n        return await super().seek(offset)\n\n    async def close(self) -> None:\n        \"\"\"\n        Close the file.\n\n        To be awaitable, compatible with async, this is run in threadpool.\n        \"\"\"\n        return await super().close()\n\n    @classmethod\n    def __get_validators__(cls: Type[\"UploadFile\"]) -> Iterable[Callable[..., Any]]:\n        yield cls.validate\n\n    @classmethod\n    def validate(cls: Type[\"UploadFile\"], v: Any) -> Any:\n        if not isinstance(v, StarletteUploadFile):\n            raise ValueError(f\"Expected UploadFile, received: {type(v)}\")\n        return v\n\n    @classmethod\n    def _validate(cls, __input_value: Any, _: Any) -> \"UploadFile\":\n        if not isinstance(__input_value, StarletteUploadFile):\n            raise ValueError(f\"Expected UploadFile, received: {type(__input_value)}\")\n        return cast(UploadFile, __input_value)\n\n    if not PYDANTIC_V2:\n\n        @classmethod\n        def __modify_schema__(cls, field_schema: Dict[str, Any]) -> None:\n            field_schema.update({\"type\": \"string\", \"format\": \"binary\"})\n\n    @classmethod\n    def __get_pydantic_json_schema__(\n        cls, core_schema: CoreSchema, handler: GetJsonSchemaHandler\n    ) -> JsonSchemaValue:\n        return {\"type\": \"string\", \"format\": \"binary\"}\n\n    @classmethod\n    def __get_pydantic_core_schema__(\n        cls, source: Type[Any], handler: Callable[[Any], CoreSchema]\n    ) -> CoreSchema:\n        return with_info_plain_validator_function(cls._validate)",
    "repo": "fastapi",
    "path": "fastapi\\datastructures.py",
    "type": "class",
    "name": "UploadFile",
    "loc": 30,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\datastructures.py:class:DefaultPlaceholder:chunk1",
    "text": "class DefaultPlaceholder:\n    \"\"\"\n    You shouldn't use this class directly.\n\n    It's used internally to recognize when a default value has been overwritten, even\n    if the overridden default value was truthy.\n    \"\"\"\n\n    def __init__(self, value: Any):\n        self.value = value\n\n    def __bool__(self) -> bool:\n        return bool(self.value)\n\n    def __eq__(self, o: object) -> bool:\n        return isinstance(o, DefaultPlaceholder) and o.value == self.value",
    "repo": "fastapi",
    "path": "fastapi\\datastructures.py",
    "type": "class",
    "name": "DefaultPlaceholder",
    "loc": 176,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\encoders.py:function:isoformat:chunk1",
    "text": "def isoformat(o: Union[datetime.date, datetime.time]) -> str:\n    return o.isoformat()",
    "repo": "fastapi",
    "path": "fastapi\\encoders.py",
    "type": "function",
    "name": "isoformat",
    "loc": 31,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\encoders.py:function:decimal_encoder:chunk1",
    "text": "def decimal_encoder(dec_value: Decimal) -> Union[int, float]:\n    \"\"\"\n    Encodes a Decimal as int of there's no exponent, otherwise float\n\n    This is useful when we use ConstrainedDecimal to represent Numeric(x,0)\n    where a integer (but not int typed) is used. Encoding this as a float\n    results in failed round-tripping between encode and parse.\n    Our Id type is a prime example of this.\n\n    >>> decimal_encoder(Decimal(\"1.0\"))\n    1.0\n\n    >>> decimal_encoder(Decimal(\"1\"))\n    1\n    \"\"\"\n    if dec_value.as_tuple().exponent >= 0:  # type: ignore[operator]\n        return int(dec_value)\n    else:\n        return float(dec_value)",
    "repo": "fastapi",
    "path": "fastapi\\encoders.py",
    "type": "function",
    "name": "decimal_encoder",
    "loc": 37,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\encoders.py:function:generate_encoders_by_class_tuples:chunk1",
    "text": "def generate_encoders_by_class_tuples(\n    type_encoder_map: Dict[Any, Callable[[Any], Any]],\n) -> Dict[Callable[[Any], Any], Tuple[Any, ...]]:\n    encoders_by_class_tuples: Dict[Callable[[Any], Any], Tuple[Any, ...]] = defaultdict(\n        tuple\n    )\n    for type_, encoder in type_encoder_map.items():\n        encoders_by_class_tuples[encoder] += (type_,)\n    return encoders_by_class_tuples",
    "repo": "fastapi",
    "path": "fastapi\\encoders.py",
    "type": "function",
    "name": "generate_encoders_by_class_tuples",
    "loc": 88,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\encoders.py:function:jsonable_encoder:chunk1",
    "text": "def jsonable_encoder(\n    obj: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The input object to convert to JSON.\n            \"\"\"\n        ),\n    ],\n    include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Pydantic's `include` parameter, passed to Pydantic models to set the\n            fields to include.\n            \"\"\"\n        ),\n    ] = None,\n    exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Pydantic's `exclude` parameter, passed to Pydantic models to set the\n            fields to exclude.\n            \"\"\"\n        ),\n    ] = None,\n    by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `by_alias` parameter, passed to Pydantic models to define if\n            the output should use the alias names (when provided) or the Python\n            attribute names. In an API, if you set an alias, it's probably because you\n            want to use it in the result, so you probably want to leave this set to\n            `True`.\n            \"\"\"\n        ),\n    ] = True,\n    exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_unset` parameter, passed to Pydantic models to define\n            if it should exclude from the output the fields that were not explicitly\n            set (and that only had their default values).\n            \"\"\"\n        ),\n    ] = False,\n    exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_defaults` parameter, passed to Pydantic models to define\n            if it should exclude from the output the fields that had the same default\n            value, even when they were explicitly set.\n            \"\"\"\n        ),\n    ] = False,\n    exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_none` parameter, passed to Pydantic models to define\n            if it should exclude from the output any fields that have a `None` value.\n            \"\"\"\n        ),\n    ] = False,\n    custom_encoder: Annotated[\n        Optional[Dict[Any, Callable[[Any], Any]]],\n        Doc(\n            \"\"\"\n            Pydantic's `custom_encoder` parameter, passed to Pydantic models to define\n            a custom encoder.\n            \"\"\"\n        ),\n    ] = None,\n    sqlalchemy_safe: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Exclude from the output any fields that start with the name `_sa`.\n\n            This is mainly a hack for compatibility with SQLAlchemy objects, they\n            store internal SQLAlchemy-specific state in attributes named with `_sa`,\n            and those objects can't (and shouldn't be) serialized to JSON.\n            \"\"\"\n        ),\n    ] = True,\n) -> Any:\n    \"\"\"\n    Convert any object to something that can be encoded in JSON.\n\n    This is used internally by FastAPI to make sure anything you return can be\n    encoded as JSON before it is sent to the client.\n\n    You can also use it yourself, for example to convert objects before saving them\n    in a database that supports only JSON.\n\n    Read more about it in the\n    [FastAPI docs for JSON Compatible Encoder](https://fastapi.tiangolo.com/tutorial/encoder/).\n    \"\"\"\n    custom_encoder = custom_encoder or {}\n    if custom_encoder:\n        if type(obj) in custom_encoder:\n            return custom_encoder[type(obj)](obj)\n        else:\n            for encoder_type, encoder_instance in custom_encoder.items():\n                if isinstance(obj, encoder_type):\n                    return encoder_instance(obj)\n    if include is not None and not isinstance(include, (set, dict)):\n        include = set(include)\n    if exclude is not None and not isinstance(exclude, (set, dict)):\n        exclude = set(exclude)\n    if isinstance(obj, BaseModel):\n        # TODO: remove when deprecating Pydantic v1\n        encoders: Dict[Any, Any] = {}\n        if not PYDANTIC_V2:\n            encoders = getattr(obj.__config__, \"json_encoders\", {})  # type: ignore[attr-defined]\n            if custom_encoder:\n                encoders.update(custom_encoder)\n        obj_dict = _model_dump(\n            obj,\n            mode=\"json\",\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n            exclude_none=exclude_none,\n            exclude_defaults=exclude_defaults,\n        )\n        if \"__root__\" in obj_dict:\n            obj_dict = obj_dict[\"__root__\"]\n        return jsonable_encoder(\n            obj_dict,\n            exclude_none=exclude_none,\n            exclude_defaults=exclude_defaults,\n            # TODO: remove when deprecating Pydantic v1\n            custom_encoder=encoders,\n            sqlalchemy_safe=sqlalchemy_safe,\n        )\n    if dataclasses.is_dataclass(obj):\n        obj_dict = dataclasses.asdict(obj)\n        return jsonable_encoder(\n            obj_dict,\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n            exclude_defaults=exclude_defaults,\n            exclude_none=exclude_none,\n            custom_encoder=custom_encoder,\n            sqlalchemy_safe=sqlalchemy_safe,\n        )\n    if isinstance(obj, Enum):\n        return obj.value\n    if isinstance(obj, PurePath):\n        return str(obj)\n    if isinstance(obj, (str, int, float, type(None))):\n        return obj\n    if isinstance(obj, UndefinedType):\n        return None\n    if isinstance(obj, dict):\n        encoded_dict = {}\n        allowed_keys = set(obj.keys())\n        if include is not None:\n            allowed_keys &= set(include)\n        if exclude is not None:\n            allowed_keys -= set(exclude)\n        for key, value in obj.items():\n            if (\n                (\n                    not sqlalchemy_safe\n                    or (not isinstance(key, str))\n                    or (not key.startswith(\"_sa\"))\n                )\n                and (value is not None or not exclude_none)\n                and key in allowed_keys\n            ):\n                encoded_key = jsonable_encoder(\n                    key,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n                encoded_value = jsonable_encoder(\n                    value,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n                encoded_dict[encoded_key] = encoded_value\n        return encoded_dict\n    if isinstance(obj, (list, set, frozenset, GeneratorType, tuple, deque)):\n        encoded_list = []\n        for item in obj:\n            encoded_list.append(\n                jsonable_encoder(\n                    item,\n                    include=include,\n                    exclude=exclude,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_defaults=exclude_defaults,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n            )\n        return encoded_list\n\n    if type(obj) in ENCODERS_BY_TYPE:\n        return ENCODERS_BY_TYPE[type(obj)](obj)\n    for encoder, classes_tuple in encoders_by_class_tuples.items():\n        if isinstance(obj, classes_tuple):\n            return encoder(obj)\n\n    try:\n        data = dict(obj)\n    except Exception as e:\n        errors: List[Exception] = []\n        errors.append(e)\n        try:\n            data = vars(obj)\n        except Exception as e:\n            errors.append(e)\n            raise ValueError(errors) from e\n    return jsonable_encoder(\n        data,\n        include=include,\n        exclude=exclude,\n        by_alias=by_alias,\n        exclude_unset=exclude_unset,\n        exclude_defaults=exclude_defaults,\n        exclude_none=exclude_none,\n        custom_encoder=custom_encoder,\n        sqlalchemy_safe=sqlalchemy_safe,\n    )",
    "repo": "fastapi",
    "path": "fastapi\\encoders.py",
    "type": "function",
    "name": "jsonable_encoder",
    "loc": 102,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\exceptions.py:class:HTTPException:chunk1",
    "text": "class HTTPException(StarletteHTTPException):\n    \"\"\"\n    An HTTP exception you can raise in your own code to show errors to the client.\n\n    This is for client errors, invalid authentication, invalid data, etc. Not for server\n    errors in your code.\n\n    Read more about it in the\n    [FastAPI docs for Handling Errors](https://fastapi.tiangolo.com/tutorial/handling-errors/).\n\n    ## Example\n\n    ```python\n    from fastapi import FastAPI, HTTPException\n\n    app = FastAPI()\n\n    items = {\"foo\": \"The Foo Wrestlers\"}\n\n\n    @app.get(\"/items/{item_id}\")\n    async def read_item(item_id: str):\n        if item_id not in items:\n            raise HTTPException(status_code=404, detail=\"Item not found\")\n        return {\"item\": items[item_id]}\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        status_code: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                HTTP status code to send to the client.\n                \"\"\"\n            ),\n        ],\n        detail: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                Any data to be sent to the client in the `detail` key of the JSON\n                response.\n                \"\"\"\n            ),\n        ] = None,\n        headers: Annotated[\n            Optional[Dict[str, str]],\n            Doc(\n                \"\"\"\n                Any headers to send to the client in the response.\n                \"\"\"\n            ),\n        ] = None,\n    ) -> None:\n        super().__init__(status_code=status_code, detail=detail, headers=headers)",
    "repo": "fastapi",
    "path": "fastapi\\exceptions.py",
    "type": "class",
    "name": "HTTPException",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\exceptions.py:class:WebSocketException:chunk1",
    "text": "class WebSocketException(StarletteWebSocketException):\n    \"\"\"\n    A WebSocket exception you can raise in your own code to show errors to the client.\n\n    This is for client errors, invalid authentication, invalid data, etc. Not for server\n    errors in your code.\n\n    Read more about it in the\n    [FastAPI docs for WebSockets](https://fastapi.tiangolo.com/advanced/websockets/).\n\n    ## Example\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import (\n        Cookie,\n        FastAPI,\n        WebSocket,\n        WebSocketException,\n        status,\n    )\n\n    app = FastAPI()\n\n    @app.websocket(\"/items/{item_id}/ws\")\n    async def websocket_endpoint(\n        *,\n        websocket: WebSocket,\n        session: Annotated[str | None, Cookie()] = None,\n        item_id: str,\n    ):\n        if session is None:\n            raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n        await websocket.accept()\n        while True:\n            data = await websocket.receive_text()\n            await websocket.send_text(f\"Session cookie is: {session}\")\n            await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        code: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                A closing code from the\n                [valid codes defined in the specification](https://datatracker.ietf.org/doc/html/rfc6455#section-7.4.1).\n                \"\"\"\n            ),\n        ],\n        reason: Annotated[\n            Union[str, None],\n            Doc(\n                \"\"\"\n                The reason to close the WebSocket connection.\n\n                It is UTF-8-encoded data. The interpretation of the reason is up to the\n                application, it is not specified by the WebSocket specification.\n\n                It could contain text that could be human-readable or interpretable\n                by the client code, etc.\n                \"\"\"\n            ),\n        ] = None,\n    ) -> None:\n        super().__init__(code=code, reason=reason)",
    "repo": "fastapi",
    "path": "fastapi\\exceptions.py",
    "type": "class",
    "name": "WebSocketException",
    "loc": 68,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\exceptions.py:class:FastAPIError:chunk1",
    "text": "class FastAPIError(RuntimeError):\n    \"\"\"\n    A generic, FastAPI-specific error.\n    \"\"\"",
    "repo": "fastapi",
    "path": "fastapi\\exceptions.py",
    "type": "class",
    "name": "FastAPIError",
    "loc": 143,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\exceptions.py:class:ValidationException:chunk1",
    "text": "class ValidationException(Exception):\n    def __init__(self, errors: Sequence[Any]) -> None:\n        self._errors = errors\n\n    def errors(self) -> Sequence[Any]:\n        return self._errors",
    "repo": "fastapi",
    "path": "fastapi\\exceptions.py",
    "type": "class",
    "name": "ValidationException",
    "loc": 149,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\exceptions.py:class:RequestValidationError:chunk1",
    "text": "class RequestValidationError(ValidationException):\n    def __init__(self, errors: Sequence[Any], *, body: Any = None) -> None:\n        super().__init__(errors)\n        self.body = body",
    "repo": "fastapi",
    "path": "fastapi\\exceptions.py",
    "type": "class",
    "name": "RequestValidationError",
    "loc": 157,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\exceptions.py:class:WebSocketRequestValidationError:chunk1",
    "text": "class WebSocketRequestValidationError(ValidationException):\n    pass",
    "repo": "fastapi",
    "path": "fastapi\\exceptions.py",
    "type": "class",
    "name": "WebSocketRequestValidationError",
    "loc": 163,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\exceptions.py:class:ResponseValidationError:chunk1",
    "text": "class ResponseValidationError(ValidationException):\n    def __init__(self, errors: Sequence[Any], *, body: Any = None) -> None:\n        super().__init__(errors)\n        self.body = body\n\n    def __str__(self) -> str:\n        message = f\"{len(self._errors)} validation errors:\\n\"\n        for err in self._errors:\n            message += f\"  {err}\\n\"\n        return message",
    "repo": "fastapi",
    "path": "fastapi\\exceptions.py",
    "type": "class",
    "name": "ResponseValidationError",
    "loc": 167,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\params.py:class:ParamTypes:chunk1",
    "text": "class ParamTypes(Enum):\n    query = \"query\"\n    header = \"header\"\n    path = \"path\"\n    cookie = \"cookie\"",
    "repo": "fastapi",
    "path": "fastapi\\params.py",
    "type": "class",
    "name": "ParamTypes",
    "loc": 18,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\params.py:class:Param:chunk1",
    "text": "class Param(FieldInfo):\n    in_: ParamTypes\n\n    def __init__(\n        self,\n        default: Any = Undefined,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        # TODO: update when deprecating Pydantic v1, import these types\n        # validation_alias: str | AliasPath | AliasChoices | None\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        if example is not _Unset:\n            warnings.warn(\n                \"`example` has been deprecated, please use `examples` instead\",\n                category=DeprecationWarning,\n                stacklevel=4,\n            )\n        self.example = example\n        self.include_in_schema = include_in_schema\n        self.openapi_examples = openapi_examples\n        kwargs = dict(\n            default=default,\n            default_factory=default_factory,\n            alias=alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            discriminator=discriminator,\n            multiple_of=multiple_of,\n            allow_inf_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            **extra,\n        )\n        if examples is not None:\n            kwargs[\"examples\"] = examples\n        if regex is not None:\n            warnings.warn(\n                \"`regex` has been deprecated, please use `pattern` instead\",\n                category=DeprecationWarning,\n                stacklevel=4,\n            )\n        current_json_schema_extra = json_schema_extra or extra\n        if PYDANTIC_VERSION_MINOR_TUPLE < (2, 7):\n            self.deprecated = deprecated\n        else:\n            kwargs[\"deprecated\"] = deprecated\n        if PYDANTIC_V2:\n            kwargs.update(\n                {\n                    \"annotation\": annotation,\n                    \"alias_priority\": alias_priority,\n                    \"validation_alias\": validation_alias,\n                    \"serialization_alias\": serialization_alias,\n                    \"strict\": strict,\n                    \"json_schema_extra\": current_json_schema_extra,\n                }\n            )\n            kwargs[\"pattern\"] = pattern or regex\n        else:\n            kwargs[\"regex\"] = pattern or regex\n            kwargs.update(**current_json_schema_extra)\n        use_kwargs = {k: v for k, v in kwargs.items() if v is not _Unset}\n\n        super().__init__(**use_kwargs)\n\n    def __repr__(self) -> str:\n        return f\"{self.__class__.__name__}({self.default})\"",
    "repo": "fastapi",
    "path": "fastapi\\params.py",
    "type": "class",
    "name": "Param",
    "loc": 25,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\params.py:class:Path:chunk1",
    "text": "class Path(Param):\n    in_ = ParamTypes.path\n\n    def __init__(\n        self,\n        default: Any = ...,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        # TODO: update when deprecating Pydantic v1, import these types\n        # validation_alias: str | AliasPath | AliasChoices | None\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        assert default is ..., \"Path parameters cannot have a default value\"\n        self.in_ = self.in_\n        super().__init__(\n            default=default,\n            default_factory=default_factory,\n            annotation=annotation,\n            alias=alias,\n            alias_priority=alias_priority,\n            validation_alias=validation_alias,\n            serialization_alias=serialization_alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            pattern=pattern,\n            regex=regex,\n            discriminator=discriminator,\n            strict=strict,\n            multiple_of=multiple_of,\n            allow_inf_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            deprecated=deprecated,\n            example=example,\n            examples=examples,\n            openapi_examples=openapi_examples,\n            include_in_schema=include_in_schema,\n            json_schema_extra=json_schema_extra,\n            **extra,\n        )",
    "repo": "fastapi",
    "path": "fastapi\\params.py",
    "type": "class",
    "name": "Path",
    "loc": 139,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\params.py:class:Query:chunk1",
    "text": "class Query(Param):\n    in_ = ParamTypes.query\n\n    def __init__(\n        self,\n        default: Any = Undefined,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        # TODO: update when deprecating Pydantic v1, import these types\n        # validation_alias: str | AliasPath | AliasChoices | None\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        super().__init__(\n            default=default,\n            default_factory=default_factory,\n            annotation=annotation,\n            alias=alias,\n            alias_priority=alias_priority,\n            validation_alias=validation_alias,\n            serialization_alias=serialization_alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            pattern=pattern,\n            regex=regex,\n            discriminator=discriminator,\n            strict=strict,\n            multiple_of=multiple_of,\n            allow_inf_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            deprecated=deprecated,\n            example=example,\n            examples=examples,\n            openapi_examples=openapi_examples,\n            include_in_schema=include_in_schema,\n            json_schema_extra=json_schema_extra,\n            **extra,\n        )",
    "repo": "fastapi",
    "path": "fastapi\\params.py",
    "type": "class",
    "name": "Query",
    "loc": 225,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\params.py:class:Header:chunk1",
    "text": "class Header(Param):\n    in_ = ParamTypes.header\n\n    def __init__(\n        self,\n        default: Any = Undefined,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        # TODO: update when deprecating Pydantic v1, import these types\n        # validation_alias: str | AliasPath | AliasChoices | None\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        convert_underscores: bool = True,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        self.convert_underscores = convert_underscores\n        super().__init__(\n            default=default,\n            default_factory=default_factory,\n            annotation=annotation,\n            alias=alias,\n            alias_priority=alias_priority,\n            validation_alias=validation_alias,\n            serialization_alias=serialization_alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            pattern=pattern,\n            regex=regex,\n            discriminator=discriminator,\n            strict=strict,\n            multiple_of=multiple_of,\n            allow_inf_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            deprecated=deprecated,\n            example=example,\n            examples=examples,\n            openapi_examples=openapi_examples,\n            include_in_schema=include_in_schema,\n            json_schema_extra=json_schema_extra,\n            **extra,\n        )",
    "repo": "fastapi",
    "path": "fastapi\\params.py",
    "type": "class",
    "name": "Header",
    "loc": 309,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\params.py:class:Cookie:chunk1",
    "text": "class Cookie(Param):\n    in_ = ParamTypes.cookie\n\n    def __init__(\n        self,\n        default: Any = Undefined,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        # TODO: update when deprecating Pydantic v1, import these types\n        # validation_alias: str | AliasPath | AliasChoices | None\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        super().__init__(\n            default=default,\n            default_factory=default_factory,\n            annotation=annotation,\n            alias=alias,\n            alias_priority=alias_priority,\n            validation_alias=validation_alias,\n            serialization_alias=serialization_alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            pattern=pattern,\n            regex=regex,\n            discriminator=discriminator,\n            strict=strict,\n            multiple_of=multiple_of,\n            allow_inf_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            deprecated=deprecated,\n            example=example,\n            examples=examples,\n            openapi_examples=openapi_examples,\n            include_in_schema=include_in_schema,\n            json_schema_extra=json_schema_extra,\n            **extra,\n        )",
    "repo": "fastapi",
    "path": "fastapi\\params.py",
    "type": "class",
    "name": "Cookie",
    "loc": 395,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\params.py:class:Body:chunk1",
    "text": "class Body(FieldInfo):\n    def __init__(\n        self,\n        default: Any = Undefined,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        embed: Union[bool, None] = None,\n        media_type: str = \"application/json\",\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        # TODO: update when deprecating Pydantic v1, import these types\n        # validation_alias: str | AliasPath | AliasChoices | None\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        self.embed = embed\n        self.media_type = media_type\n        if example is not _Unset:\n            warnings.warn(\n                \"`example` has been deprecated, please use `examples` instead\",\n                category=DeprecationWarning,\n                stacklevel=4,\n            )\n        self.example = example\n        self.include_in_schema = include_in_schema\n        self.openapi_examples = openapi_examples\n        kwargs = dict(\n            default=default,\n            default_factory=default_factory,\n            alias=alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            discriminator=discriminator,\n            multiple_of=multiple_of,\n            allow_inf_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            **extra,\n        )\n        if examples is not None:\n            kwargs[\"examples\"] = examples\n        if regex is not None:\n            warnings.warn(\n                \"`regex` has been deprecated, please use `pattern` instead\",\n                category=DeprecationWarning,\n                stacklevel=4,\n            )\n        current_json_schema_extra = json_schema_extra or extra\n        if PYDANTIC_VERSION_MINOR_TUPLE < (2, 7):\n            self.deprecated = deprecated\n        else:\n            kwargs[\"deprecated\"] = deprecated\n        if PYDANTIC_V2:\n            kwargs.update(\n                {\n                    \"annotation\": annotation,\n                    \"alias_priority\": alias_priority,\n                    \"validation_alias\": validation_alias,\n                    \"serialization_alias\": serialization_alias,\n                    \"strict\": strict,\n                    \"json_schema_extra\": current_json_schema_extra,\n                }\n            )\n            kwargs[\"pattern\"] = pattern or regex\n        else:\n            kwargs[\"regex\"] = pattern or regex\n            kwargs.update(**current_json_schema_extra)\n\n        use_kwargs = {k: v for k, v in kwargs.items() if v is not _Unset}\n\n        super().__init__(**use_kwargs)\n\n    def __repr__(self) -> str:\n        return f\"{self.__class__.__name__}({self.default})\"",
    "repo": "fastapi",
    "path": "fastapi\\params.py",
    "type": "class",
    "name": "Body",
    "loc": 479,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\params.py:class:Form:chunk1",
    "text": "class Form(Body):\n    def __init__(\n        self,\n        default: Any = Undefined,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        media_type: str = \"application/x-www-form-urlencoded\",\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        # TODO: update when deprecating Pydantic v1, import these types\n        # validation_alias: str | AliasPath | AliasChoices | None\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        super().__init__(\n            default=default,\n            default_factory=default_factory,\n            annotation=annotation,\n            media_type=media_type,\n            alias=alias,\n            alias_priority=alias_priority,\n            validation_alias=validation_alias,\n            serialization_alias=serialization_alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            pattern=pattern,\n            regex=regex,\n            discriminator=discriminator,\n            strict=strict,\n            multiple_of=multiple_of,\n            allow_inf_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            deprecated=deprecated,\n            example=example,\n            examples=examples,\n            openapi_examples=openapi_examples,\n            include_in_schema=include_in_schema,\n            json_schema_extra=json_schema_extra,\n            **extra,\n        )",
    "repo": "fastapi",
    "path": "fastapi\\params.py",
    "type": "class",
    "name": "Form",
    "loc": 596,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\params.py:class:File:chunk1",
    "text": "class File(Form):\n    def __init__(\n        self,\n        default: Any = Undefined,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        media_type: str = \"multipart/form-data\",\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        # TODO: update when deprecating Pydantic v1, import these types\n        # validation_alias: str | AliasPath | AliasChoices | None\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        super().__init__(\n            default=default,\n            default_factory=default_factory,\n            annotation=annotation,\n            media_type=media_type,\n            alias=alias,\n            alias_priority=alias_priority,\n            validation_alias=validation_alias,\n            serialization_alias=serialization_alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            pattern=pattern,\n            regex=regex,\n            discriminator=discriminator,\n            strict=strict,\n            multiple_of=multiple_of,\n            allow_inf_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            deprecated=deprecated,\n            example=example,\n            examples=examples,\n            openapi_examples=openapi_examples,\n            include_in_schema=include_in_schema,\n            json_schema_extra=json_schema_extra,\n            **extra,\n        )",
    "repo": "fastapi",
    "path": "fastapi\\params.py",
    "type": "class",
    "name": "File",
    "loc": 680,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\params.py:class:Depends:chunk1",
    "text": "class Depends:\n    def __init__(\n        self, dependency: Optional[Callable[..., Any]] = None, *, use_cache: bool = True\n    ):\n        self.dependency = dependency\n        self.use_cache = use_cache\n\n    def __repr__(self) -> str:\n        attr = getattr(self.dependency, \"__name__\", type(self.dependency).__name__)\n        cache = \"\" if self.use_cache else \", use_cache=False\"\n        return f\"{self.__class__.__name__}({attr}{cache})\"",
    "repo": "fastapi",
    "path": "fastapi\\params.py",
    "type": "class",
    "name": "Depends",
    "loc": 764,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\params.py:class:Security:chunk1",
    "text": "class Security(Depends):\n    def __init__(\n        self,\n        dependency: Optional[Callable[..., Any]] = None,\n        *,\n        scopes: Optional[Sequence[str]] = None,\n        use_cache: bool = True,\n    ):\n        super().__init__(dependency=dependency, use_cache=use_cache)\n        self.scopes = scopes or []",
    "repo": "fastapi",
    "path": "fastapi\\params.py",
    "type": "class",
    "name": "Security",
    "loc": 777,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\param_functions.py:function:Path:chunk1",
    "text": "def Path(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = ...,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [FastAPI docs for Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -> Any:\n    \"\"\"\n    Declare a path parameter for a *path operation*.\n\n    Read more about it in the\n    [FastAPI docs for Path Parameters and Numeric Validations](https://fastapi.tiangolo.com/tutorial/path-params-numeric-validations/).\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import FastAPI, Path\n\n    app = FastAPI()\n\n\n    @app.get(\"/items/{item_id}\")\n    async def read_items(\n        item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    ):\n        return {\"item_id\": item_id}\n    ```\n    \"\"\"\n    return params.Path(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )",
    "repo": "fastapi",
    "path": "fastapi\\param_functions.py",
    "type": "function",
    "name": "Path",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\param_functions.py:function:Query:chunk1",
    "text": "def Query(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [FastAPI docs for Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -> Any:\n    return params.Query(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )",
    "repo": "fastapi",
    "path": "fastapi\\param_functions.py",
    "type": "function",
    "name": "Query",
    "loc": 339,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\param_functions.py:function:Header:chunk1",
    "text": "def Header(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    convert_underscores: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Automatically convert underscores to hyphens in the parameter field name.\n\n            Read more about it in the\n            [FastAPI docs for Header Parameters](https://fastapi.tiangolo.com/tutorial/header-params/#automatic-conversion)\n            \"\"\"\n        ),\n    ] = True,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [FastAPI docs for Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -> Any:\n    return params.Header(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        convert_underscores=convert_underscores,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )",
    "repo": "fastapi",
    "path": "fastapi\\param_functions.py",
    "type": "function",
    "name": "Header",
    "loc": 643,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\param_functions.py:function:Cookie:chunk1",
    "text": "def Cookie(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [FastAPI docs for Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -> Any:\n    return params.Cookie(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )",
    "repo": "fastapi",
    "path": "fastapi\\param_functions.py",
    "type": "function",
    "name": "Cookie",
    "loc": 959,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\param_functions.py:function:Body:chunk1",
    "text": "def Body(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    embed: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            When `embed` is `True`, the parameter will be expected in a JSON body as a\n            key instead of being the JSON body itself.\n\n            This happens automatically when more than one `Body` parameter is declared.\n\n            Read more about it in the\n            [FastAPI docs for Body - Multiple Parameters](https://fastapi.tiangolo.com/tutorial/body-multiple-params/#embed-a-single-body-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"application/json\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [FastAPI docs for Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -> Any:\n    return params.Body(\n        default=default,\n        default_factory=default_factory,\n        embed=embed,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )",
    "repo": "fastapi",
    "path": "fastapi\\param_functions.py",
    "type": "function",
    "name": "Body",
    "loc": 1263,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\param_functions.py:function:Form:chunk1",
    "text": "def Form(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"application/x-www-form-urlencoded\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [FastAPI docs for Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -> Any:\n    return params.Form(\n        default=default,\n        default_factory=default_factory,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )",
    "repo": "fastapi",
    "path": "fastapi\\param_functions.py",
    "type": "function",
    "name": "Form",
    "loc": 1592,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\param_functions.py:function:File:chunk1",
    "text": "def File(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"multipart/form-data\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [FastAPI docs for Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -> Any:\n    return params.File(\n        default=default,\n        default_factory=default_factory,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )",
    "repo": "fastapi",
    "path": "fastapi\\param_functions.py",
    "type": "function",
    "name": "File",
    "loc": 1906,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\param_functions.py:function:Depends:chunk1",
    "text": "def Depends(  # noqa: N802\n    dependency: Annotated[\n        Optional[Callable[..., Any]],\n        Doc(\n            \"\"\"\n            A \"dependable\" callable (like a function).\n\n            Don't call it directly, FastAPI will call it for you, just pass the object\n            directly.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    use_cache: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, after a dependency is called the first time in a request, if\n            the dependency is declared again for the rest of the request (for example\n            if the dependency is needed by several dependencies), the value will be\n            re-used for the rest of the request.\n\n            Set `use_cache` to `False` to disable this behavior and ensure the\n            dependency is called again (if declared more than once) in the same request.\n            \"\"\"\n        ),\n    ] = True,\n) -> Any:\n    \"\"\"\n    Declare a FastAPI dependency.\n\n    It takes a single \"dependable\" callable (like a function).\n\n    Don't call it directly, FastAPI will call it for you.\n\n    Read more about it in the\n    [FastAPI docs for Dependencies](https://fastapi.tiangolo.com/tutorial/dependencies/).\n\n    **Example**\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import Depends, FastAPI\n\n    app = FastAPI()\n\n\n    async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n        return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n    @app.get(\"/items/\")\n    async def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n        return commons\n    ```\n    \"\"\"\n    return params.Depends(dependency=dependency, use_cache=use_cache)",
    "repo": "fastapi",
    "path": "fastapi\\param_functions.py",
    "type": "function",
    "name": "Depends",
    "loc": 2220,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\param_functions.py:function:Security:chunk1",
    "text": "def Security(  # noqa: N802\n    dependency: Annotated[\n        Optional[Callable[..., Any]],\n        Doc(\n            \"\"\"\n            A \"dependable\" callable (like a function).\n\n            Don't call it directly, FastAPI will call it for you, just pass the object\n            directly.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    scopes: Annotated[\n        Optional[Sequence[str]],\n        Doc(\n            \"\"\"\n            OAuth2 scopes required for the *path operation* that uses this Security\n            dependency.\n\n            The term \"scope\" comes from the OAuth2 specification, it seems to be\n            intentionally vague and interpretable. It normally refers to permissions,\n            in cases to roles.\n\n            These scopes are integrated with OpenAPI (and the API docs at `/docs`).\n            So they are visible in the OpenAPI specification.\n            )\n            \"\"\"\n        ),\n    ] = None,\n    use_cache: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, after a dependency is called the first time in a request, if\n            the dependency is declared again for the rest of the request (for example\n            if the dependency is needed by several dependencies), the value will be\n            re-used for the rest of the request.\n\n            Set `use_cache` to `False` to disable this behavior and ensure the\n            dependency is called again (if declared more than once) in the same request.\n            \"\"\"\n        ),\n    ] = True,\n) -> Any:\n    \"\"\"\n    Declare a FastAPI Security dependency.\n\n    The only difference with a regular dependency is that it can declare OAuth2\n    scopes that will be integrated with OpenAPI and the automatic UI docs (by default\n    at `/docs`).\n\n    It takes a single \"dependable\" callable (like a function).\n\n    Don't call it directly, FastAPI will call it for you.\n\n    Read more about it in the\n    [FastAPI docs for Security](https://fastapi.tiangolo.com/tutorial/security/) and\n    in the\n    [FastAPI docs for OAuth2 scopes](https://fastapi.tiangolo.com/advanced/security/oauth2-scopes/).\n\n    **Example**\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import Security, FastAPI\n\n    from .db import User\n    from .security import get_current_active_user\n\n    app = FastAPI()\n\n    @app.get(\"/users/me/items/\")\n    async def read_own_items(\n        current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])]\n    ):\n        return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n    ```\n    \"\"\"\n    return params.Security(dependency=dependency, scopes=scopes, use_cache=use_cache)",
    "repo": "fastapi",
    "path": "fastapi\\param_functions.py",
    "type": "function",
    "name": "Security",
    "loc": 2280,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\responses.py:class:UJSONResponse:chunk1",
    "text": "class UJSONResponse(JSONResponse):\n    \"\"\"\n    JSON response using the high-performance ujson library to serialize data to JSON.\n\n    Read more about it in the\n    [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/).\n    \"\"\"\n\n    def render(self, content: Any) -> bytes:\n        assert ujson is not None, \"ujson must be installed to use UJSONResponse\"\n        return ujson.dumps(content, ensure_ascii=False).encode(\"utf-8\")",
    "repo": "fastapi",
    "path": "fastapi\\responses.py",
    "type": "class",
    "name": "UJSONResponse",
    "loc": 23,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\responses.py:class:ORJSONResponse:chunk1",
    "text": "class ORJSONResponse(JSONResponse):\n    \"\"\"\n    JSON response using the high-performance orjson library to serialize data to JSON.\n\n    Read more about it in the\n    [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/).\n    \"\"\"\n\n    def render(self, content: Any) -> bytes:\n        assert orjson is not None, \"orjson must be installed to use ORJSONResponse\"\n        return orjson.dumps(\n            content, option=orjson.OPT_NON_STR_KEYS | orjson.OPT_SERIALIZE_NUMPY\n        )",
    "repo": "fastapi",
    "path": "fastapi\\responses.py",
    "type": "class",
    "name": "ORJSONResponse",
    "loc": 36,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\routing.py:function:_prepare_response_content:chunk1",
    "text": "def _prepare_response_content(\n    res: Any,\n    *,\n    exclude_unset: bool,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n) -> Any:\n    if isinstance(res, BaseModel):\n        read_with_orm_mode = getattr(_get_model_config(res), \"read_with_orm_mode\", None)\n        if read_with_orm_mode:\n            # Let from_orm extract the data from this model instead of converting\n            # it now to a dict.\n            # Otherwise, there's no way to extract lazy data that requires attribute\n            # access instead of dict iteration, e.g. lazy relationships.\n            return res\n        return _model_dump(\n            res,\n            by_alias=True,\n            exclude_unset=exclude_unset,\n            exclude_defaults=exclude_defaults,\n            exclude_none=exclude_none,\n        )\n    elif isinstance(res, list):\n        return [\n            _prepare_response_content(\n                item,\n                exclude_unset=exclude_unset,\n                exclude_defaults=exclude_defaults,\n                exclude_none=exclude_none,\n            )\n            for item in res\n        ]\n    elif isinstance(res, dict):\n        return {\n            k: _prepare_response_content(\n                v,\n                exclude_unset=exclude_unset,\n                exclude_defaults=exclude_defaults,\n                exclude_none=exclude_none,\n            )\n            for k, v in res.items()\n        }\n    elif dataclasses.is_dataclass(res):\n        return dataclasses.asdict(res)\n    return res",
    "repo": "fastapi",
    "path": "fastapi\\routing.py",
    "type": "function",
    "name": "_prepare_response_content",
    "loc": 79,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\routing.py:function:_merge_lifespan_context:chunk1",
    "text": "def _merge_lifespan_context(\n    original_context: Lifespan[Any], nested_context: Lifespan[Any]\n) -> Lifespan[Any]:\n    @asynccontextmanager\n    async def merged_lifespan(\n        app: AppType,\n    ) -> AsyncIterator[Optional[Mapping[str, Any]]]:\n        async with original_context(app) as maybe_original_state:\n            async with nested_context(app) as maybe_nested_state:\n                if maybe_nested_state is None and maybe_original_state is None:\n                    yield None  # old ASGI compatibility\n                else:\n                    yield {**(maybe_nested_state or {}), **(maybe_original_state or {})}\n\n    return merged_lifespan  # type: ignore[return-value]",
    "repo": "fastapi",
    "path": "fastapi\\routing.py",
    "type": "function",
    "name": "_merge_lifespan_context",
    "loc": 126,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\routing.py:function:get_request_handler:chunk1",
    "text": "def get_request_handler(\n    dependant: Dependant,\n    body_field: Optional[ModelField] = None,\n    status_code: Optional[int] = None,\n    response_class: Union[Type[Response], DefaultPlaceholder] = Default(JSONResponse),\n    response_field: Optional[ModelField] = None,\n    response_model_include: Optional[IncEx] = None,\n    response_model_exclude: Optional[IncEx] = None,\n    response_model_by_alias: bool = True,\n    response_model_exclude_unset: bool = False,\n    response_model_exclude_defaults: bool = False,\n    response_model_exclude_none: bool = False,\n    dependency_overrides_provider: Optional[Any] = None,\n    embed_body_fields: bool = False,\n) -> Callable[[Request], Coroutine[Any, Any, Response]]:\n    assert dependant.call is not None, \"dependant.call must be a function\"\n    is_coroutine = asyncio.iscoroutinefunction(dependant.call)\n    is_body_form = body_field and isinstance(body_field.field_info, params.Form)\n    if isinstance(response_class, DefaultPlaceholder):\n        actual_response_class: Type[Response] = response_class.value\n    else:\n        actual_response_class = response_class\n\n    async def app(request: Request) -> Response:\n        response: Union[Response, None] = None\n        async with AsyncExitStack() as file_stack:\n            try:\n                body: Any = None\n                if body_field:\n                    if is_body_form:\n                        body = await request.form()\n                        file_stack.push_async_callback(body.close)\n                    else:\n                        body_bytes = await request.body()\n                        if body_bytes:\n                            json_body: Any = Undefined\n                            content_type_value = request.headers.get(\"content-type\")\n                            if not content_type_value:\n                                json_body = await request.json()\n                            else:\n                                message = email.message.Message()\n                                message[\"content-type\"] = content_type_value\n                                if message.get_content_maintype() == \"application\":\n                                    subtype = message.get_content_subtype()\n                                    if subtype == \"json\" or subtype.endswith(\"+json\"):\n                                        json_body = await request.json()\n                            if json_body != Undefined:\n                                body = json_body\n                            else:\n                                body = body_bytes\n            except json.JSONDecodeError as e:\n                validation_error = RequestValidationError(\n                    [\n                        {\n                            \"type\": \"json_invalid\",\n                            \"loc\": (\"body\", e.pos),\n                            \"msg\": \"JSON decode error\",\n                            \"input\": {},\n                            \"ctx\": {\"error\": e.msg},\n                        }\n                    ],\n                    body=e.doc,\n                )\n                raise validation_error from e\n            except HTTPException:\n                # If a middleware raises an HTTPException, it should be raised again\n                raise\n            except Exception as e:\n                http_error = HTTPException(\n                    status_code=400, detail=\"There was an error parsing the body\"\n                )\n                raise http_error from e\n            errors: List[Any] = []\n            async with AsyncExitStack() as async_exit_stack:\n                solved_result = await solve_dependencies(\n                    request=request,\n                    dependant=dependant,\n                    body=body,\n                    dependency_overrides_provider=dependency_overrides_provider,\n                    async_exit_stack=async_exit_stack,\n                    embed_body_fields=embed_body_fields,\n                )\n                errors = solved_result.errors\n                if not errors:\n                    raw_response = await run_endpoint_function(\n                        dependant=dependant,\n                        values=solved_result.values,\n                        is_coroutine=is_coroutine,\n                    )\n                    if isinstance(raw_response, Response):\n                        if raw_response.background is None:\n                            raw_response.background = solved_result.background_tasks\n                        response = raw_response\n                    else:\n                        response_args: Dict[str, Any] = {\n                            \"background\": solved_result.background_tasks\n                        }\n                        # If status_code was set, use it, otherwise use the default from the\n                        # response class, in the case of redirect it's 307\n                        current_status_code = (\n                            status_code\n                            if status_code\n                            else solved_result.response.status_code\n                        )\n                        if current_status_code is not None:\n                            response_args[\"status_code\"] = current_status_code\n                        if solved_result.response.status_code:\n                            response_args[\"status_code\"] = (\n                                solved_result.response.status_code\n                            )\n                        content = await serialize_response(\n                            field=response_field,\n                            response_content=raw_response,\n                            include=response_model_include,\n                            exclude=response_model_exclude,\n                            by_alias=response_model_by_alias,\n                            exclude_unset=response_model_exclude_unset,\n                            exclude_defaults=response_model_exclude_defaults,\n                            exclude_none=response_model_exclude_none,\n                            is_coroutine=is_coroutine,\n                        )\n                        response = actual_response_class(content, **response_args)\n                        if not is_body_allowed_for_status_code(response.status_code):\n                            response.body = b\"\"\n                        response.headers.raw.extend(solved_result.response.headers.raw)\n            if errors:\n                validation_error = RequestValidationError(\n                    _normalize_errors(errors), body=body\n                )\n                raise validation_error\n        if response is None:\n            raise FastAPIError(\n                \"No response object was returned. There's a high chance that the \"\n                \"application code is raising an exception and a dependency with yield \"\n                \"has a block with a bare except, or a block with except Exception, \"\n                \"and is not raising the exception again. Read more about it in the \"\n                \"docs: https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-with-yield/#dependencies-with-yield-and-except\"\n            )\n        return response\n\n    return app",
    "repo": "fastapi",
    "path": "fastapi\\routing.py",
    "type": "function",
    "name": "get_request_handler",
    "loc": 217,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\routing.py:function:get_websocket_app:chunk1",
    "text": "def get_websocket_app(\n    dependant: Dependant,\n    dependency_overrides_provider: Optional[Any] = None,\n    embed_body_fields: bool = False,\n) -> Callable[[WebSocket], Coroutine[Any, Any, Any]]:\n    async def app(websocket: WebSocket) -> None:\n        async with AsyncExitStack() as async_exit_stack:\n            # TODO: remove this scope later, after a few releases\n            # This scope fastapi_astack is no longer used by FastAPI, kept for\n            # compatibility, just in case\n            websocket.scope[\"fastapi_astack\"] = async_exit_stack\n            solved_result = await solve_dependencies(\n                request=websocket,\n                dependant=dependant,\n                dependency_overrides_provider=dependency_overrides_provider,\n                async_exit_stack=async_exit_stack,\n                embed_body_fields=embed_body_fields,\n            )\n            if solved_result.errors:\n                raise WebSocketRequestValidationError(\n                    _normalize_errors(solved_result.errors)\n                )\n            assert dependant.call is not None, \"dependant.call must be a function\"\n            await dependant.call(**solved_result.values)\n\n    return app",
    "repo": "fastapi",
    "path": "fastapi\\routing.py",
    "type": "function",
    "name": "get_websocket_app",
    "loc": 360,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\routing.py:class:APIWebSocketRoute:chunk1",
    "text": "class APIWebSocketRoute(routing.WebSocketRoute):\n    def __init__(\n        self,\n        path: str,\n        endpoint: Callable[..., Any],\n        *,\n        name: Optional[str] = None,\n        dependencies: Optional[Sequence[params.Depends]] = None,\n        dependency_overrides_provider: Optional[Any] = None,\n    ) -> None:\n        self.path = path\n        self.endpoint = endpoint\n        self.name = get_name(endpoint) if name is None else name\n        self.dependencies = list(dependencies or [])\n        self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n        self.dependant = get_dependant(path=self.path_format, call=self.endpoint)\n        for depends in self.dependencies[::-1]:\n            self.dependant.dependencies.insert(\n                0,\n                get_parameterless_sub_dependant(depends=depends, path=self.path_format),\n            )\n        self._flat_dependant = get_flat_dependant(self.dependant)\n        self._embed_body_fields = _should_embed_body_fields(\n            self._flat_dependant.body_params\n        )\n        self.app = websocket_session(\n            get_websocket_app(\n                dependant=self.dependant,\n                dependency_overrides_provider=dependency_overrides_provider,\n                embed_body_fields=self._embed_body_fields,\n            )\n        )\n\n    def matches(self, scope: Scope) -> Tuple[Match, Scope]:\n        match, child_scope = super().matches(scope)\n        if match != Match.NONE:\n            child_scope[\"route\"] = self\n        return match, child_scope",
    "repo": "fastapi",
    "path": "fastapi\\routing.py",
    "type": "class",
    "name": "APIWebSocketRoute",
    "loc": 388,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\routing.py:class:APIRoute:chunk1",
    "text": "class APIRoute(routing.Route):\n    def __init__(\n        self,\n        path: str,\n        endpoint: Callable[..., Any],\n        *,\n        response_model: Any = Default(None),\n        status_code: Optional[int] = None,\n        tags: Optional[List[Union[str, Enum]]] = None,\n        dependencies: Optional[Sequence[params.Depends]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        response_description: str = \"Successful Response\",\n        responses: Optional[Dict[Union[int, str], Dict[str, Any]]] = None,\n        deprecated: Optional[bool] = None,\n        name: Optional[str] = None,\n        methods: Optional[Union[Set[str], List[str]]] = None,\n        operation_id: Optional[str] = None,\n        response_model_include: Optional[IncEx] = None,\n        response_model_exclude: Optional[IncEx] = None,\n        response_model_by_alias: bool = True,\n        response_model_exclude_unset: bool = False,\n        response_model_exclude_defaults: bool = False,\n        response_model_exclude_none: bool = False,\n        include_in_schema: bool = True,\n        response_class: Union[Type[Response], DefaultPlaceholder] = Default(\n            JSONResponse\n        ),\n        dependency_overrides_provider: Optional[Any] = None,\n        callbacks: Optional[List[BaseRoute]] = None,\n        openapi_extra: Optional[Dict[str, Any]] = None,\n        generate_unique_id_function: Union[\n            Callable[[\"APIRoute\"], str], DefaultPlaceholder\n        ] = Default(generate_unique_id),\n    ) -> None:\n        self.path = path\n        self.endpoint = endpoint\n        if isinstance(response_model, DefaultPlaceholder):\n            return_annotation = get_typed_return_annotation(endpoint)\n            if lenient_issubclass(return_annotation, Response):\n                response_model = None\n            else:\n                response_model = return_annotation\n        self.response_model = response_model\n        self.summary = summary\n        self.response_description = response_description\n        self.deprecated = deprecated\n        self.operation_id = operation_id\n        self.response_model_include = response_model_include\n        self.response_model_exclude = response_model_exclude\n        self.response_model_by_alias = response_model_by_alias\n        self.response_model_exclude_unset = response_model_exclude_unset\n        self.response_model_exclude_defaults = response_model_exclude_defaults\n        self.response_model_exclude_none = response_model_exclude_none\n        self.include_in_schema = include_in_schema\n        self.response_class = response_class\n        self.dependency_overrides_provider = dependency_overrides_provider\n        self.callbacks = callbacks\n        self.openapi_extra = openapi_extra\n        self.generate_unique_id_function = generate_unique_id_function\n        self.tags = tags or []\n        self.responses = responses or {}\n        self.name = get_name(endpoint) if name is None else name\n        self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n        if methods is None:\n            methods = [\"GET\"]\n        self.methods: Set[str] = {method.upper() for method in methods}\n        if isinstance(generate_unique_id_function, DefaultPlaceholder):\n            current_generate_unique_id: Callable[[APIRoute], str] = (\n                generate_unique_id_function.value\n            )\n        else:\n            current_generate_unique_id = generate_unique_id_function\n        self.unique_id = self.operation_id or current_generate_unique_id(self)\n        # normalize enums e.g. http.HTTPStatus\n        if isinstance(status_code, IntEnum):\n            status_code = int(status_code)\n        self.status_code = status_code\n        if self.response_model:\n            assert is_body_allowed_for_status_code(\n                status_code\n            ), f\"Status code {status_code} must not have a response body\"\n            response_name = \"Response_\" + self.unique_id\n            self.response_field = create_model_field(\n                name=response_name,\n                type_=self.response_model,\n                mode=\"serialization\",\n            )\n            # Create a clone of the field, so that a Pydantic submodel is not returned\n            # as is just because it's an instance of a subclass of a more limited class\n            # e.g. UserInDB (containing hashed_password) could be a subclass of User\n            # that doesn't have the hashed_password. But because it's a subclass, it\n            # would pass the validation and be returned as is.\n            # By being a new field, no inheritance will be passed as is. A new model\n            # will always be created.\n            # TODO: remove when deprecating Pydantic v1\n            self.secure_cloned_response_field: Optional[ModelField] = (\n                create_cloned_field(self.response_field)\n            )\n        else:\n            self.response_field = None  # type: ignore\n            self.secure_cloned_response_field = None\n        self.dependencies = list(dependencies or [])\n        self.description = description or inspect.cleandoc(self.endpoint.__doc__ or \"\")\n        # if a \"form feed\" character (page break) is found in the description text,\n        # truncate description text to the content preceding the first \"form feed\"\n        self.description = self.description.split(\"\\f\")[0].strip()\n        response_fields = {}\n        for additional_status_code, response in self.responses.items():\n            assert isinstance(response, dict), \"An additional response must be a dict\"\n            model = response.get(\"model\")\n            if model:\n                assert is_body_allowed_for_status_code(\n                    additional_status_code\n                ), f\"Status code {additional_status_code} must not have a response body\"\n                response_name = f\"Response_{additional_status_code}_{self.unique_id}\"\n                response_field = create_model_field(\n                    name=response_name, type_=model, mode=\"serialization\"\n                )\n                response_fields[additional_status_code] = response_field\n        if response_fields:\n            self.response_fields: Dict[Union[int, str], ModelField] = response_fields\n        else:\n            self.response_fields = {}\n\n        assert callable(endpoint), \"An endpoint must be a callable\"\n        self.dependant = get_dependant(path=self.path_format, call=self.endpoint)\n        for depends in self.dependencies[::-1]:\n            self.dependant.dependencies.insert(\n                0,\n                get_parameterless_sub_dependant(depends=depends, path=self.path_format),\n            )\n        self._flat_dependant = get_flat_dependant(self.dependant)\n        self._embed_body_fields = _should_embed_body_fields(\n            self._flat_dependant.body_params\n        )\n        self.body_field = get_body_field(\n            flat_dependant=self._flat_dependant,\n            name=self.unique_id,\n            embed_body_fields=self._embed_body_fields,\n        )\n        self.app = request_response(self.get_route_handler())\n\n    def get_route_handler(self) -> Callable[[Request], Coroutine[Any, Any, Response]]:\n        return get_request_handler(\n            dependant=self.dependant,\n            body_field=self.body_field,\n            status_code=self.status_code,\n            response_class=self.response_class,\n            response_field=self.secure_cloned_response_field,\n            response_model_include=self.response_model_include,\n            response_model_exclude=self.response_model_exclude,\n            response_model_by_alias=self.response_model_by_alias,\n            response_model_exclude_unset=self.response_model_exclude_unset,\n            response_model_exclude_defaults=self.response_model_exclude_defaults,\n            response_model_exclude_none=self.response_model_exclude_none,\n            dependency_overrides_provider=self.dependency_overrides_provider,\n            embed_body_fields=self._embed_body_fields,\n        )\n\n    def matches(self, scope: Scope) -> Tuple[Match, Scope]:\n        match, child_scope = super().matches(scope)\n        if match != Match.NONE:\n            child_scope[\"route\"] = self\n        return match, child_scope",
    "repo": "fastapi",
    "path": "fastapi\\routing.py",
    "type": "class",
    "name": "APIRoute",
    "loc": 428,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\routing.py:class:APIRouter:chunk1",
    "text": "class APIRouter(routing.Router):\n    \"\"\"\n    `APIRouter` class, used to group *path operations*, for example to structure\n    an app in multiple files. It would then be included in the `FastAPI` app, or\n    in another `APIRouter` (ultimately included in the app).\n\n    Read more about it in the\n    [FastAPI docs for Bigger Applications - Multiple Files](https://fastapi.tiangolo.com/tutorial/bigger-applications/).\n\n    ## Example\n\n    ```python\n    from fastapi import APIRouter, FastAPI\n\n    app = FastAPI()\n    router = APIRouter()\n\n\n    @router.get(\"/users/\", tags=[\"users\"])\n    async def read_users():\n        return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\n    app.include_router(router)\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to all the *path operations* in this\n                router.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to all the\n                *path operations* in this router.\n\n                Read more about it in the\n                [FastAPI docs for Bigger Applications - Multiple Files](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n                \"\"\"\n            ),\n        ] = None,\n        default_response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                The default response class to be used.\n\n                Read more in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#default-response-class).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses to be shown in OpenAPI.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Additional Responses in OpenAPI](https://fastapi.tiangolo.com/advanced/additional-responses/).\n\n                And in the\n                [FastAPI docs for Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                OpenAPI callbacks that should apply to all *path operations* in this\n                router.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        routes: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                **Note**: you probably shouldn't use this parameter, it is inherited\n                from Starlette and supported for compatibility.\n\n                ---\n\n                A list of routes to serve incoming HTTP and WebSocket requests.\n                \"\"\"\n            ),\n            deprecated(\n                \"\"\"\n                You normally wouldn't use this parameter with FastAPI, it is inherited\n                from Starlette and supported for compatibility.\n\n                In FastAPI, you normally would use the *path operation methods*,\n                like `router.get()`, `router.post()`, etc.\n                \"\"\"\n            ),\n        ] = None,\n        redirect_slashes: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Whether to detect and redirect slashes in URLs when the client doesn't\n                use the same format.\n                \"\"\"\n            ),\n        ] = True,\n        default: Annotated[\n            Optional[ASGIApp],\n            Doc(\n                \"\"\"\n                Default function handler for this router. Used to handle\n                404 Not Found errors.\n                \"\"\"\n            ),\n        ] = None,\n        dependency_overrides_provider: Annotated[\n            Optional[Any],\n            Doc(\n                \"\"\"\n                Only used internally by FastAPI to handle dependency overrides.\n\n                You shouldn't need to use it. It normally points to the `FastAPI` app\n                object.\n                \"\"\"\n            ),\n        ] = None,\n        route_class: Annotated[\n            Type[APIRoute],\n            Doc(\n                \"\"\"\n                Custom route (*path operation*) class to be used by this router.\n\n                Read more about it in the\n                [FastAPI docs for Custom Request and APIRoute class](https://fastapi.tiangolo.com/how-to/custom-request-and-route/#custom-apiroute-class-in-a-router).\n                \"\"\"\n            ),\n        ] = APIRoute,\n        on_startup: Annotated[\n            Optional[Sequence[Callable[[], Any]]],\n            Doc(\n                \"\"\"\n                A list of startup event handler functions.\n\n                You should instead use the `lifespan` handlers.\n\n                Read more in the [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n                \"\"\"\n            ),\n        ] = None,\n        on_shutdown: Annotated[\n            Optional[Sequence[Callable[[], Any]]],\n            Doc(\n                \"\"\"\n                A list of shutdown event handler functions.\n\n                You should instead use the `lifespan` handlers.\n\n                Read more in the\n                [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n                \"\"\"\n            ),\n        ] = None,\n        # the generic to Lifespan[AppType] is the type of the top level application\n        # which the router cannot know statically, so we use typing.Any\n        lifespan: Annotated[\n            Optional[Lifespan[Any]],\n            Doc(\n                \"\"\"\n                A `Lifespan` context manager handler. This replaces `startup` and\n                `shutdown` functions with a single context manager.\n\n                Read more in the\n                [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark all *path operations* in this router as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                To include (or not) all the *path operations* in this router in the\n                generated OpenAPI.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> None:\n        super().__init__(\n            routes=routes,\n            redirect_slashes=redirect_slashes,\n            default=default,\n            on_startup=on_startup,\n            on_shutdown=on_shutdown,\n            lifespan=lifespan,\n        )\n        if prefix:\n            assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n            assert not prefix.endswith(\n                \"/\"\n            ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n        self.prefix = prefix\n        self.tags: List[Union[str, Enum]] = tags or []\n        self.dependencies = list(dependencies or [])\n        self.deprecated = deprecated\n        self.include_in_schema = include_in_schema\n        self.responses = responses or {}\n        self.callbacks = callbacks or []\n        self.dependency_overrides_provider = dependency_overrides_provider\n        self.route_class = route_class\n        self.default_response_class = default_response_class\n        self.generate_unique_id_function = generate_unique_id_function\n\n    def route(\n        self,\n        path: str,\n        methods: Optional[List[str]] = None,\n        name: Optional[str] = None,\n        include_in_schema: bool = True,\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.add_route(\n                path,\n                func,\n                methods=methods,\n                name=name,\n                include_in_schema=include_in_schema,\n            )\n            return func\n\n        return decorator\n\n    def add_api_route(\n        self,\n        path: str,\n        endpoint: Callable[..., Any],\n        *,\n        response_model: Any = Default(None),\n        status_code: Optional[int] = None,\n        tags: Optional[List[Union[str, Enum]]] = None,\n        dependencies: Optional[Sequence[params.Depends]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        response_description: str = \"Successful Response\",\n        responses: Optional[Dict[Union[int, str], Dict[str, Any]]] = None,\n        deprecated: Optional[bool] = None,\n        methods: Optional[Union[Set[str], List[str]]] = None,\n        operation_id: Optional[str] = None,\n        response_model_include: Optional[IncEx] = None,\n        response_model_exclude: Optional[IncEx] = None,\n        response_model_by_alias: bool = True,\n        response_model_exclude_unset: bool = False,\n        response_model_exclude_defaults: bool = False,\n        response_model_exclude_none: bool = False,\n        include_in_schema: bool = True,\n        response_class: Union[Type[Response], DefaultPlaceholder] = Default(\n            JSONResponse\n        ),\n        name: Optional[str] = None,\n        route_class_override: Optional[Type[APIRoute]] = None,\n        callbacks: Optional[List[BaseRoute]] = None,\n        openapi_extra: Optional[Dict[str, Any]] = None,\n        generate_unique_id_function: Union[\n            Callable[[APIRoute], str], DefaultPlaceholder\n        ] = Default(generate_unique_id),\n    ) -> None:\n        route_class = route_class_override or self.route_class\n        responses = responses or {}\n        combined_responses = {**self.responses, **responses}\n        current_response_class = get_value_or_default(\n            response_class, self.default_response_class\n        )\n        current_tags = self.tags.copy()\n        if tags:\n            current_tags.extend(tags)\n        current_dependencies = self.dependencies.copy()\n        if dependencies:\n            current_dependencies.extend(dependencies)\n        current_callbacks = self.callbacks.copy()\n        if callbacks:\n            current_callbacks.extend(callbacks)\n        current_generate_unique_id = get_value_or_default(\n            generate_unique_id_function, self.generate_unique_id_function\n        )\n        route = route_class(\n            self.prefix + path,\n            endpoint=endpoint,\n            response_model=response_model,\n            status_code=status_code,\n            tags=current_tags,\n            dependencies=current_dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=combined_responses,\n            deprecated=deprecated or self.deprecated,\n            methods=methods,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema and self.include_in_schema,\n            response_class=current_response_class,\n            name=name,\n            dependency_overrides_provider=self.dependency_overrides_provider,\n            callbacks=current_callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=current_generate_unique_id,\n        )\n        self.routes.append(route)\n\n    def api_route(\n        self,\n        path: str,\n        *,\n        response_model: Any = Default(None),\n        status_code: Optional[int] = None,\n        tags: Optional[List[Union[str, Enum]]] = None,\n        dependencies: Optional[Sequence[params.Depends]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        response_description: str = \"Successful Response\",\n        responses: Optional[Dict[Union[int, str], Dict[str, Any]]] = None,\n        deprecated: Optional[bool] = None,\n        methods: Optional[List[str]] = None,\n        operation_id: Optional[str] = None,\n        response_model_include: Optional[IncEx] = None,\n        response_model_exclude: Optional[IncEx] = None,\n        response_model_by_alias: bool = True,\n        response_model_exclude_unset: bool = False,\n        response_model_exclude_defaults: bool = False,\n        response_model_exclude_none: bool = False,\n        include_in_schema: bool = True,\n        response_class: Type[Response] = Default(JSONResponse),\n        name: Optional[str] = None,\n        callbacks: Optional[List[BaseRoute]] = None,\n        openapi_extra: Optional[Dict[str, Any]] = None,\n        generate_unique_id_function: Callable[[APIRoute], str] = Default(\n            generate_unique_id\n        ),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.add_api_route(\n                path,\n                func,\n                response_model=response_model,\n                status_code=status_code,\n                tags=tags,\n                dependencies=dependencies,\n                summary=summary,\n                description=description,\n                response_description=response_description,\n                responses=responses,\n                deprecated=deprecated,\n                methods=methods,\n                operation_id=operation_id,\n                response_model_include=response_model_include,\n                response_model_exclude=response_model_exclude,\n                response_model_by_alias=response_model_by_alias,\n                response_model_exclude_unset=response_model_exclude_unset,\n                response_model_exclude_defaults=response_model_exclude_defaults,\n                response_model_exclude_none=response_model_exclude_none,\n                include_in_schema=include_in_schema,\n                response_class=response_class,\n                name=name,\n                callbacks=callbacks,\n                openapi_extra=openapi_extra,\n                generate_unique_id_function=generate_unique_id_function,\n            )\n            return func\n\n        return decorator\n\n    def add_api_websocket_route(\n        self,\n        path: str,\n        endpoint: Callable[..., Any],\n        name: Optional[str] = None,\n        *,\n        dependencies: Optional[Sequence[params.Depends]] = None,\n    ) -> None:\n        current_dependencies = self.dependencies.copy()\n        if dependencies:\n            current_dependencies.extend(dependencies)\n\n        route = APIWebSocketRoute(\n            self.prefix + path,\n            endpoint=endpoint,\n            name=name,\n            dependencies=current_dependencies,\n            dependency_overrides_provider=self.dependency_overrides_provider,\n        )\n        self.routes.append(route)\n\n    def websocket(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                WebSocket path.\n                \"\"\"\n            ),\n        ],\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A name for the WebSocket. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        *,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be used for this\n                WebSocket.\n\n                Read more about it in the\n                [FastAPI docs for WebSockets](https://fastapi.tiangolo.com/advanced/websockets/).\n                \"\"\"\n            ),\n        ] = None,\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Decorate a WebSocket function.\n\n        Read more about it in the\n        [FastAPI docs for WebSockets](https://fastapi.tiangolo.com/advanced/websockets/).\n\n        **Example**\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI, WebSocket\n\n        app = FastAPI()\n        router = APIRouter()\n\n        @router.websocket(\"/ws\")\n        async def websocket_endpoint(websocket: WebSocket):\n            await websocket.accept()\n            while True:\n                data = await websocket.receive_text()\n                await websocket.send_text(f\"Message text was: {data}\")\n\n        app.include_router(router)\n        ```\n        \"\"\"\n\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.add_api_websocket_route(\n                path, func, name=name, dependencies=dependencies\n            )\n            return func\n\n        return decorator\n\n    def websocket_route(\n        self, path: str, name: Union[str, None] = None\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.add_websocket_route(path, func, name=name)\n            return func\n\n        return decorator\n\n    def include_router(\n        self,\n        router: Annotated[\"APIRouter\", Doc(\"The `APIRouter` to include.\")],\n        *,\n        prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to all the *path operations* in this\n                router.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to all the\n                *path operations* in this router.\n\n                Read more about it in the\n                [FastAPI docs for Bigger Applications - Multiple Files](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n                \"\"\"\n            ),\n        ] = None,\n        default_response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                The default response class to be used.\n\n                Read more in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#default-response-class).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses to be shown in OpenAPI.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Additional Responses in OpenAPI](https://fastapi.tiangolo.com/advanced/additional-responses/).\n\n                And in the\n                [FastAPI docs for Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                OpenAPI callbacks that should apply to all *path operations* in this\n                router.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark all *path operations* in this router as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include (or not) all the *path operations* in this router in the\n                generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = True,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> None:\n        \"\"\"\n        Include another `APIRouter` in the same current `APIRouter`.\n\n        Read more about it in the\n        [FastAPI docs for Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/).\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n\n        app = FastAPI()\n        internal_router = APIRouter()\n        users_router = APIRouter()\n\n        @users_router.get(\"/users/\")\n        def read_users():\n            return [{\"name\": \"Rick\"}, {\"name\": \"Morty\"}]\n\n        internal_router.include_router(users_router)\n        app.include_router(internal_router)\n        ```\n        \"\"\"\n        if prefix:\n            assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n            assert not prefix.endswith(\n                \"/\"\n            ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n        else:\n            for r in router.routes:\n                path = getattr(r, \"path\")  # noqa: B009\n                name = getattr(r, \"name\", \"unknown\")\n                if path is not None and not path:\n                    raise FastAPIError(\n                        f\"Prefix and path cannot be both empty (path operation: {name})\"\n                    )\n        if responses is None:\n            responses = {}\n        for route in router.routes:\n            if isinstance(route, APIRoute):\n                combined_responses = {**responses, **route.responses}\n                use_response_class = get_value_or_default(\n                    route.response_class,\n                    router.default_response_class,\n                    default_response_class,\n                    self.default_response_class,\n                )\n                current_tags = []\n                if tags:\n                    current_tags.extend(tags)\n                if route.tags:\n                    current_tags.extend(route.tags)\n                current_dependencies: List[params.Depends] = []\n                if dependencies:\n                    current_dependencies.extend(dependencies)\n                if route.dependencies:\n                    current_dependencies.extend(route.dependencies)\n                current_callbacks = []\n                if callbacks:\n                    current_callbacks.extend(callbacks)\n                if route.callbacks:\n                    current_callbacks.extend(route.callbacks)\n                current_generate_unique_id = get_value_or_default(\n                    route.generate_unique_id_function,\n                    router.generate_unique_id_function,\n                    generate_unique_id_function,\n                    self.generate_unique_id_function,\n                )\n                self.add_api_route(\n                    prefix + route.path,\n                    route.endpoint,\n                    response_model=route.response_model,\n                    status_code=route.status_code,\n                    tags=current_tags,\n                    dependencies=current_dependencies,\n                    summary=route.summary,\n                    description=route.description,\n                    response_description=route.response_description,\n                    responses=combined_responses,\n                    deprecated=route.deprecated or deprecated or self.deprecated,\n                    methods=route.methods,\n                    operation_id=route.operation_id,\n                    response_model_include=route.response_model_include,\n                    response_model_exclude=route.response_model_exclude,\n                    response_model_by_alias=route.response_model_by_alias,\n                    response_model_exclude_unset=route.response_model_exclude_unset,\n                    response_model_exclude_defaults=route.response_model_exclude_defaults,\n                    response_model_exclude_none=route.response_model_exclude_none,\n                    include_in_schema=route.include_in_schema\n                    and self.include_in_schema\n                    and include_in_schema,\n                    response_class=use_response_class,\n                    name=route.name,\n                    route_class_override=type(route),\n                    callbacks=current_callbacks,\n                    openapi_extra=route.openapi_extra,\n                    generate_unique_id_function=current_generate_unique_id,\n                )\n            elif isinstance(route, routing.Route):\n                methods = list(route.methods or [])\n                self.add_route(\n                    prefix + route.path,\n                    route.endpoint,\n                    methods=methods,\n                    include_in_schema=route.include_in_schema,\n                    name=route.name,\n                )\n            elif isinstance(route, APIWebSocketRoute):\n                current_dependencies = []\n                if dependencies:\n                    current_dependencies.extend(dependencies)\n                if route.dependencies:\n                    current_dependencies.extend(route.dependencies)\n                self.add_api_websocket_route(\n                    prefix + route.path,\n                    route.endpoint,\n                    dependencies=current_dependencies,\n                    name=route.name,\n                )\n            elif isinstance(route, routing.WebSocketRoute):\n                self.add_websocket_route(\n                    prefix + route.path, route.endpoint, name=route.name\n                )\n        for handler in router.on_startup:\n            self.add_event_handler(\"startup\", handler)\n        for handler in router.on_shutdown:\n            self.add_event_handler(\"shutdown\", handler)\n        self.lifespan_context = _merge_lifespan_context(\n            self.lifespan_context,\n            router.lifespan_context,\n        )\n\n    def get(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], Decorated",
    "repo": "fastapi",
    "path": "fastapi\\routing.py",
    "type": "class",
    "name": "APIRouter",
    "loc": 595,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\routing.py:class:APIRouter:chunk2",
    "text": " metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP GET operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n\n        app = FastAPI()\n        router = APIRouter()\n\n        @router.get(\"/items/\")\n        def read_items():\n            return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n\n        app.include_router(router)\n        ```\n        \"\"\"\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"GET\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def put(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP PUT operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n        from pydantic import BaseModel\n\n        class Item(BaseModel):\n            name: str\n            description: str | None = None\n\n        app = FastAPI()\n        router = APIRouter()\n\n        @router.put(\"/items/{item_id}\")\n        def replace_item(item_id: str, item: Item):\n            return {\"message\": \"Item replaced\", \"id\": item_id}\n\n        app.include_router(router)\n        ```\n        \"\"\"\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"PUT\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def post(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP POST operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n        from pydantic import BaseModel\n\n        class Item(BaseModel):\n            name: str\n            description: str | None = None\n\n        app = FastAPI()\n        router = APIRouter()\n\n        @router.post(\"/items/\")\n        def create_item(item: Item):\n            return {\"message\": \"Item created\"}\n\n        app.include_router(router)\n        ```\n        \"\"\"\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"POST\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def delete(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n           ",
    "repo": "fastapi",
    "path": "fastapi\\routing.py",
    "type": "class",
    "name": "APIRouter",
    "loc": 595,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\routing.py:class:APIRouter:chunk3",
    "text": " exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP DELETE operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n\n        app = FastAPI()\n        router = APIRouter()\n\n        @router.delete(\"/items/{item_id}\")\n        def delete_item(item_id: str):\n            return {\"message\": \"Item deleted\"}\n\n        app.include_router(router)\n        ```\n        \"\"\"\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"DELETE\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def options(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP OPTIONS operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n\n        app = FastAPI()\n        router = APIRouter()\n\n        @router.options(\"/items/\")\n        def get_item_options():\n            return {\"additions\": [\"Aji\", \"Guacamole\"]}\n\n        app.include_router(router)\n        ```\n        \"\"\"\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"OPTIONS\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def head(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP HEAD operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n        from pydantic import BaseModel\n\n        class Item(BaseModel):\n            name: str\n            description: str | None = None\n\n        app = FastAPI()\n        router = APIRouter()\n\n        @router.head(\"/items/\", status_code=204)\n        def get_items_headers(response: Response):\n            response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n\n        app.include_router(router)\n        ```\n        \"\"\"\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"HEAD\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def patch(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if",
    "repo": "fastapi",
    "path": "fastapi\\routing.py",
    "type": "class",
    "name": "APIRouter",
    "loc": 595,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\routing.py:class:APIRouter:chunk4",
    "text": "iangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP PATCH operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n        from pydantic import BaseModel\n\n        class Item(BaseModel):\n            name: str\n            description: str | None = None\n\n        app = FastAPI()\n        router = APIRouter()\n\n        @router.patch(\"/items/\")\n        def update_item(item: Item):\n            return {\"message\": \"Item updated in place\"}\n\n        app.include_router(router)\n        ```\n        \"\"\"\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"PATCH\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def trace(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP TRACE operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n        from pydantic import BaseModel\n\n        class Item(BaseModel):\n            name: str\n            description: str | None = None\n\n        app = FastAPI()\n        router = APIRouter()\n\n        @router.trace(\"/items/{item_id}\")\n        def trace_item(item_id: str):\n            return None\n\n        app.include_router(router)\n        ```\n        \"\"\"\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"TRACE\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    @deprecated(\n        \"\"\"\n        on_event is deprecated, use lifespan event handlers instead.\n\n        Read more about it in the\n        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).\n        \"\"\"\n    )\n    def on_event(\n        self,\n        event_type: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The type of event. `startup` or `shutdown`.\n                \"\"\"\n            ),\n        ],\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add an event handler for the router.\n\n        `on_event` is deprecated, use `lifespan` event handlers instead.\n\n        Read more about it in the\n        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/#alternative-events-deprecated).\n        \"\"\"\n\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.add_event_handler(event_type, func)\n            return func\n\n        return decorator",
    "repo": "fastapi",
    "path": "fastapi\\routing.py",
    "type": "class",
    "name": "APIRouter",
    "loc": 595,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\utils.py:function:is_body_allowed_for_status_code:chunk1",
    "text": "def is_body_allowed_for_status_code(status_code: Union[int, str, None]) -> bool:\n    if status_code is None:\n        return True\n    # Ref: https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#patterned-fields-1\n    if status_code in {\n        \"default\",\n        \"1XX\",\n        \"2XX\",\n        \"3XX\",\n        \"4XX\",\n        \"5XX\",\n    }:\n        return True\n    current_status_code = int(status_code)\n    return not (current_status_code < 200 or current_status_code in {204, 205, 304})",
    "repo": "fastapi",
    "path": "fastapi\\utils.py",
    "type": "function",
    "name": "is_body_allowed_for_status_code",
    "loc": 42,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\utils.py:function:get_path_param_names:chunk1",
    "text": "def get_path_param_names(path: str) -> Set[str]:\n    return set(re.findall(\"{(.*?)}\", path))",
    "repo": "fastapi",
    "path": "fastapi\\utils.py",
    "type": "function",
    "name": "get_path_param_names",
    "loc": 59,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\utils.py:function:create_model_field:chunk1",
    "text": "def create_model_field(\n    name: str,\n    type_: Any,\n    class_validators: Optional[Dict[str, Validator]] = None,\n    default: Optional[Any] = Undefined,\n    required: Union[bool, UndefinedType] = Undefined,\n    model_config: Type[BaseConfig] = BaseConfig,\n    field_info: Optional[FieldInfo] = None,\n    alias: Optional[str] = None,\n    mode: Literal[\"validation\", \"serialization\"] = \"validation\",\n) -> ModelField:\n    class_validators = class_validators or {}\n    if PYDANTIC_V2:\n        field_info = field_info or FieldInfo(\n            annotation=type_, default=default, alias=alias\n        )\n    else:\n        field_info = field_info or FieldInfo()\n    kwargs = {\"name\": name, \"field_info\": field_info}\n    if PYDANTIC_V2:\n        kwargs.update({\"mode\": mode})\n    else:\n        kwargs.update(\n            {\n                \"type_\": type_,\n                \"class_validators\": class_validators,\n                \"default\": default,\n                \"required\": required,\n                \"model_config\": model_config,\n                \"alias\": alias,\n            }\n        )\n    try:\n        return ModelField(**kwargs)  # type: ignore[arg-type]\n    except (RuntimeError, PydanticSchemaGenerationError):\n        raise fastapi.exceptions.FastAPIError(\n            \"Invalid args for response field! Hint: \"\n            f\"check that {type_} is a valid Pydantic field type. \"\n            \"If you are using a return type annotation that is not a valid Pydantic \"\n            \"field (e.g. Union[Response, dict, None]) you can disable generating the \"\n            \"response model from the type annotation with the path operation decorator \"\n            \"parameter response_model=None. Read more: \"\n            \"https://fastapi.tiangolo.com/tutorial/response-model/\"\n        ) from None",
    "repo": "fastapi",
    "path": "fastapi\\utils.py",
    "type": "function",
    "name": "create_model_field",
    "loc": 63,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\utils.py:function:create_cloned_field:chunk1",
    "text": "def create_cloned_field(\n    field: ModelField,\n    *,\n    cloned_types: Optional[MutableMapping[Type[BaseModel], Type[BaseModel]]] = None,\n) -> ModelField:\n    if PYDANTIC_V2:\n        return field\n    # cloned_types caches already cloned types to support recursive models and improve\n    # performance by avoiding unnecessary cloning\n    if cloned_types is None:\n        cloned_types = _CLONED_TYPES_CACHE\n\n    original_type = field.type_\n    if is_dataclass(original_type) and hasattr(original_type, \"__pydantic_model__\"):\n        original_type = original_type.__pydantic_model__\n    use_type = original_type\n    if lenient_issubclass(original_type, BaseModel):\n        original_type = cast(Type[BaseModel], original_type)\n        use_type = cloned_types.get(original_type)\n        if use_type is None:\n            use_type = create_model(original_type.__name__, __base__=original_type)\n            cloned_types[original_type] = use_type\n            for f in original_type.__fields__.values():\n                use_type.__fields__[f.name] = create_cloned_field(\n                    f, cloned_types=cloned_types\n                )\n    new_field = create_model_field(name=field.name, type_=use_type)\n    new_field.has_alias = field.has_alias  # type: ignore[attr-defined]\n    new_field.alias = field.alias  # type: ignore[misc]\n    new_field.class_validators = field.class_validators  # type: ignore[attr-defined]\n    new_field.default = field.default  # type: ignore[misc]\n    new_field.required = field.required  # type: ignore[misc]\n    new_field.model_config = field.model_config  # type: ignore[attr-defined]\n    new_field.field_info = field.field_info\n    new_field.allow_none = field.allow_none  # type: ignore[attr-defined]\n    new_field.validate_always = field.validate_always  # type: ignore[attr-defined]\n    if field.sub_fields:  # type: ignore[attr-defined]\n        new_field.sub_fields = [  # type: ignore[attr-defined]\n            create_cloned_field(sub_field, cloned_types=cloned_types)\n            for sub_field in field.sub_fields  # type: ignore[attr-defined]\n        ]\n    if field.key_field:  # type: ignore[attr-defined]\n        new_field.key_field = create_cloned_field(  # type: ignore[attr-defined]\n            field.key_field,  # type: ignore[attr-defined]\n            cloned_types=cloned_types,\n        )\n    new_field.validators = field.validators  # type: ignore[attr-defined]\n    new_field.pre_validators = field.pre_validators  # type: ignore[attr-defined]\n    new_field.post_validators = field.post_validators  # type: ignore[attr-defined]\n    new_field.parse_json = field.parse_json  # type: ignore[attr-defined]\n    new_field.shape = field.shape  # type: ignore[attr-defined]\n    new_field.populate_validators()  # type: ignore[attr-defined]\n    return new_field",
    "repo": "fastapi",
    "path": "fastapi\\utils.py",
    "type": "function",
    "name": "create_cloned_field",
    "loc": 109,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\utils.py:function:generate_operation_id_for_path:chunk1",
    "text": "def generate_operation_id_for_path(\n    *, name: str, path: str, method: str\n) -> str:  # pragma: nocover\n    warnings.warn(\n        \"fastapi.utils.generate_operation_id_for_path() was deprecated, \"\n        \"it is not used internally, and will be removed soon\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    operation_id = f\"{name}{path}\"\n    operation_id = re.sub(r\"\\W\", \"_\", operation_id)\n    operation_id = f\"{operation_id}_{method.lower()}\"\n    return operation_id",
    "repo": "fastapi",
    "path": "fastapi\\utils.py",
    "type": "function",
    "name": "generate_operation_id_for_path",
    "loc": 164,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\utils.py:function:generate_unique_id:chunk1",
    "text": "def generate_unique_id(route: \"APIRoute\") -> str:\n    operation_id = f\"{route.name}{route.path_format}\"\n    operation_id = re.sub(r\"\\W\", \"_\", operation_id)\n    assert route.methods\n    operation_id = f\"{operation_id}_{list(route.methods)[0].lower()}\"\n    return operation_id",
    "repo": "fastapi",
    "path": "fastapi\\utils.py",
    "type": "function",
    "name": "generate_unique_id",
    "loc": 179,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\utils.py:function:deep_dict_update:chunk1",
    "text": "def deep_dict_update(main_dict: Dict[Any, Any], update_dict: Dict[Any, Any]) -> None:\n    for key, value in update_dict.items():\n        if (\n            key in main_dict\n            and isinstance(main_dict[key], dict)\n            and isinstance(value, dict)\n        ):\n            deep_dict_update(main_dict[key], value)\n        elif (\n            key in main_dict\n            and isinstance(main_dict[key], list)\n            and isinstance(update_dict[key], list)\n        ):\n            main_dict[key] = main_dict[key] + update_dict[key]\n        else:\n            main_dict[key] = value",
    "repo": "fastapi",
    "path": "fastapi\\utils.py",
    "type": "function",
    "name": "deep_dict_update",
    "loc": 187,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\utils.py:function:get_value_or_default:chunk1",
    "text": "def get_value_or_default(\n    first_item: Union[DefaultPlaceholder, DefaultType],\n    *extra_items: Union[DefaultPlaceholder, DefaultType],\n) -> Union[DefaultPlaceholder, DefaultType]:\n    \"\"\"\n    Pass items or `DefaultPlaceholder`s by descending priority.\n\n    The first one to _not_ be a `DefaultPlaceholder` will be returned.\n\n    Otherwise, the first item (a `DefaultPlaceholder`) will be returned.\n    \"\"\"\n    items = (first_item,) + extra_items\n    for item in items:\n        if not isinstance(item, DefaultPlaceholder):\n            return item\n    return first_item",
    "repo": "fastapi",
    "path": "fastapi\\utils.py",
    "type": "function",
    "name": "get_value_or_default",
    "loc": 205,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:get_annotation_from_field_info:chunk1",
    "text": "def get_annotation_from_field_info(\n        annotation: Any, field_info: FieldInfo, field_name: str\n    ) -> Any:\n        return annotation",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "get_annotation_from_field_info",
    "loc": 167,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:_normalize_errors:chunk1",
    "text": "def _normalize_errors(errors: Sequence[Any]) -> List[Dict[str, Any]]:\n        return errors  # type: ignore[return-value]",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "_normalize_errors",
    "loc": 172,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:_model_rebuild:chunk1",
    "text": "def _model_rebuild(model: Type[BaseModel]) -> None:\n        model.model_rebuild()",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "_model_rebuild",
    "loc": 175,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:_model_dump:chunk1",
    "text": "def _model_dump(\n        model: BaseModel, mode: Literal[\"json\", \"python\"] = \"json\", **kwargs: Any\n    ) -> Any:\n        return model.model_dump(mode=mode, **kwargs)",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "_model_dump",
    "loc": 178,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:_get_model_config:chunk1",
    "text": "def _get_model_config(model: BaseModel) -> Any:\n        return model.model_config",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "_get_model_config",
    "loc": 183,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:get_schema_from_model_field:chunk1",
    "text": "def get_schema_from_model_field(\n        *,\n        field: ModelField,\n        schema_generator: GenerateJsonSchema,\n        model_name_map: ModelNameMap,\n        field_mapping: Dict[\n            Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n        ],\n        separate_input_output_schemas: bool = True,\n    ) -> Dict[str, Any]:\n        override_mode: Union[Literal[\"validation\"], None] = (\n            None if separate_input_output_schemas else \"validation\"\n        )\n        # This expects that GenerateJsonSchema was already used to generate the definitions\n        json_schema = field_mapping[(field, override_mode or field.mode)]\n        if \"$ref\" not in json_schema:\n            # TODO remove when deprecating Pydantic v1\n            # Ref: https://github.com/pydantic/pydantic/blob/d61792cc42c80b13b23e3ffa74bc37ec7c77f7d1/pydantic/schema.py#L207\n            json_schema[\"title\"] = (\n                field.field_info.title or field.alias.title().replace(\"_\", \" \")\n            )\n        return json_schema",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "get_schema_from_model_field",
    "loc": 186,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:get_compat_model_name_map:chunk1",
    "text": "def get_compat_model_name_map(fields: List[ModelField]) -> ModelNameMap:\n        return {}",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "get_compat_model_name_map",
    "loc": 209,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:get_definitions:chunk1",
    "text": "def get_definitions(\n        *,\n        fields: List[ModelField],\n        schema_generator: GenerateJsonSchema,\n        model_name_map: ModelNameMap,\n        separate_input_output_schemas: bool = True,\n    ) -> Tuple[\n        Dict[\n            Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n        ],\n        Dict[str, Dict[str, Any]],\n    ]:\n        override_mode: Union[Literal[\"validation\"], None] = (\n            None if separate_input_output_schemas else \"validation\"\n        )\n        inputs = [\n            (field, override_mode or field.mode, field._type_adapter.core_schema)\n            for field in fields\n        ]\n        field_mapping, definitions = schema_generator.generate_definitions(\n            inputs=inputs\n        )\n        return field_mapping, definitions  # type: ignore[return-value]",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "get_definitions",
    "loc": 212,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:is_scalar_field:chunk1",
    "text": "def is_scalar_field(field: ModelField) -> bool:\n        from fastapi import params\n\n        return field_annotation_is_scalar(\n            field.field_info.annotation\n        ) and not isinstance(field.field_info, params.Body)",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "is_scalar_field",
    "loc": 236,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:is_sequence_field:chunk1",
    "text": "def is_sequence_field(field: ModelField) -> bool:\n        return field_annotation_is_sequence(field.field_info.annotation)",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "is_sequence_field",
    "loc": 243,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:is_scalar_sequence_field:chunk1",
    "text": "def is_scalar_sequence_field(field: ModelField) -> bool:\n        return field_annotation_is_scalar_sequence(field.field_info.annotation)",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "is_scalar_sequence_field",
    "loc": 246,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:is_bytes_field:chunk1",
    "text": "def is_bytes_field(field: ModelField) -> bool:\n        return is_bytes_or_nonable_bytes_annotation(field.type_)",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "is_bytes_field",
    "loc": 249,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:is_bytes_sequence_field:chunk1",
    "text": "def is_bytes_sequence_field(field: ModelField) -> bool:\n        return is_bytes_sequence_annotation(field.type_)",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "is_bytes_sequence_field",
    "loc": 252,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:copy_field_info:chunk1",
    "text": "def copy_field_info(*, field_info: FieldInfo, annotation: Any) -> FieldInfo:\n        cls = type(field_info)\n        merged_field_info = cls.from_annotation(annotation)\n        new_field_info = copy(field_info)\n        new_field_info.metadata = merged_field_info.metadata\n        new_field_info.annotation = merged_field_info.annotation\n        return new_field_info",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "copy_field_info",
    "loc": 255,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:serialize_sequence_value:chunk1",
    "text": "def serialize_sequence_value(*, field: ModelField, value: Any) -> Sequence[Any]:\n        origin_type = (\n            get_origin(field.field_info.annotation) or field.field_info.annotation\n        )\n        assert issubclass(origin_type, sequence_types)  # type: ignore[arg-type]\n        return sequence_annotation_to_type[origin_type](value)  # type: ignore[no-any-return]",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "serialize_sequence_value",
    "loc": 263,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:get_missing_field_error:chunk1",
    "text": "def get_missing_field_error(loc: Tuple[str, ...]) -> Dict[str, Any]:\n        error = ValidationError.from_exception_data(\n            \"Field required\", [{\"type\": \"missing\", \"loc\": loc, \"input\": {}}]\n        ).errors(include_url=False)[0]\n        error[\"input\"] = None\n        return error  # type: ignore[return-value]",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "get_missing_field_error",
    "loc": 270,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:create_body_model:chunk1",
    "text": "def create_body_model(\n        *, fields: Sequence[ModelField], model_name: str\n    ) -> Type[BaseModel]:\n        field_params = {f.name: (f.field_info.annotation, f.field_info) for f in fields}\n        BodyModel: Type[BaseModel] = create_model(model_name, **field_params)  # type: ignore[call-overload]\n        return BodyModel",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "create_body_model",
    "loc": 277,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:get_model_fields:chunk1",
    "text": "def get_model_fields(model: Type[BaseModel]) -> List[ModelField]:\n        return [\n            ModelField(field_info=field_info, name=name)\n            for name, field_info in model.model_fields.items()\n        ]",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "get_model_fields",
    "loc": 284,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:with_info_plain_validator_function:chunk1",
    "text": "def with_info_plain_validator_function(  # type: ignore[misc]\n        function: Callable[..., Any],\n        *,\n        ref: Union[str, None] = None,\n        metadata: Any = None,\n        serialization: Any = None,\n    ) -> Any:\n        return {}",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "with_info_plain_validator_function",
    "loc": 370,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:get_model_definitions:chunk1",
    "text": "def get_model_definitions(\n        *,\n        flat_models: Set[Union[Type[BaseModel], Type[Enum]]],\n        model_name_map: Dict[Union[Type[BaseModel], Type[Enum]], str],\n    ) -> Dict[str, Any]:\n        definitions: Dict[str, Dict[str, Any]] = {}\n        for model in flat_models:\n            m_schema, m_definitions, m_nested_models = model_process_schema(\n                model, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n            )\n            definitions.update(m_definitions)\n            model_name = model_name_map[model]\n            if \"description\" in m_schema:\n                m_schema[\"description\"] = m_schema[\"description\"].split(\"\\f\")[0]\n            definitions[model_name] = m_schema\n        return definitions",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "get_model_definitions",
    "loc": 379,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:is_pv1_scalar_field:chunk1",
    "text": "def is_pv1_scalar_field(field: ModelField) -> bool:\n        from fastapi import params\n\n        field_info = field.field_info\n        if not (\n            field.shape == SHAPE_SINGLETON  # type: ignore[attr-defined]\n            and not lenient_issubclass(field.type_, BaseModel)\n            and not lenient_issubclass(field.type_, dict)\n            and not field_annotation_is_sequence(field.type_)\n            and not is_dataclass(field.type_)\n            and not isinstance(field_info, params.Body)\n        ):\n            return False\n        if field.sub_fields:  # type: ignore[attr-defined]\n            if not all(\n                is_pv1_scalar_field(f)\n                for f in field.sub_fields  # type: ignore[attr-defined]\n            ):\n                return False\n        return True",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "is_pv1_scalar_field",
    "loc": 396,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:is_pv1_scalar_sequence_field:chunk1",
    "text": "def is_pv1_scalar_sequence_field(field: ModelField) -> bool:\n        if (field.shape in sequence_shapes) and not lenient_issubclass(  # type: ignore[attr-defined]\n            field.type_, BaseModel\n        ):\n            if field.sub_fields is not None:  # type: ignore[attr-defined]\n                for sub_field in field.sub_fields:  # type: ignore[attr-defined]\n                    if not is_pv1_scalar_field(sub_field):\n                        return False\n            return True\n        if _annotation_is_sequence(field.type_):\n            return True\n        return False",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "is_pv1_scalar_sequence_field",
    "loc": 417,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:_normalize_errors:chunk1",
    "text": "def _normalize_errors(errors: Sequence[Any]) -> List[Dict[str, Any]]:\n        use_errors: List[Any] = []\n        for error in errors:\n            if isinstance(error, ErrorWrapper):\n                new_errors = ValidationError(  # type: ignore[call-arg]\n                    errors=[error], model=RequestErrorModel\n                ).errors()\n                use_errors.extend(new_errors)\n            elif isinstance(error, list):\n                use_errors.extend(_normalize_errors(error))\n            else:\n                use_errors.append(error)\n        return use_errors",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "_normalize_errors",
    "loc": 430,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:_model_rebuild:chunk1",
    "text": "def _model_rebuild(model: Type[BaseModel]) -> None:\n        model.update_forward_refs()",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "_model_rebuild",
    "loc": 444,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:_model_dump:chunk1",
    "text": "def _model_dump(\n        model: BaseModel, mode: Literal[\"json\", \"python\"] = \"json\", **kwargs: Any\n    ) -> Any:\n        return model.dict(**kwargs)",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "_model_dump",
    "loc": 447,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:_get_model_config:chunk1",
    "text": "def _get_model_config(model: BaseModel) -> Any:\n        return model.__config__  # type: ignore[attr-defined]",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "_get_model_config",
    "loc": 452,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:get_schema_from_model_field:chunk1",
    "text": "def get_schema_from_model_field(\n        *,\n        field: ModelField,\n        schema_generator: GenerateJsonSchema,\n        model_name_map: ModelNameMap,\n        field_mapping: Dict[\n            Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n        ],\n        separate_input_output_schemas: bool = True,\n    ) -> Dict[str, Any]:\n        # This expects that GenerateJsonSchema was already used to generate the definitions\n        return field_schema(  # type: ignore[no-any-return]\n            field, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n        )[0]",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "get_schema_from_model_field",
    "loc": 455,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:get_compat_model_name_map:chunk1",
    "text": "def get_compat_model_name_map(fields: List[ModelField]) -> ModelNameMap:\n        models = get_flat_models_from_fields(fields, known_models=set())\n        return get_model_name_map(models)  # type: ignore[no-any-return]",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "get_compat_model_name_map",
    "loc": 470,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:get_definitions:chunk1",
    "text": "def get_definitions(\n        *,\n        fields: List[ModelField],\n        schema_generator: GenerateJsonSchema,\n        model_name_map: ModelNameMap,\n        separate_input_output_schemas: bool = True,\n    ) -> Tuple[\n        Dict[\n            Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n        ],\n        Dict[str, Dict[str, Any]],\n    ]:\n        models = get_flat_models_from_fields(fields, known_models=set())\n        return {}, get_model_definitions(\n            flat_models=models, model_name_map=model_name_map\n        )",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "get_definitions",
    "loc": 474,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:is_scalar_field:chunk1",
    "text": "def is_scalar_field(field: ModelField) -> bool:\n        return is_pv1_scalar_field(field)",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "is_scalar_field",
    "loc": 491,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:is_sequence_field:chunk1",
    "text": "def is_sequence_field(field: ModelField) -> bool:\n        return field.shape in sequence_shapes or _annotation_is_sequence(field.type_)  # type: ignore[attr-defined]",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "is_sequence_field",
    "loc": 494,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:is_scalar_sequence_field:chunk1",
    "text": "def is_scalar_sequence_field(field: ModelField) -> bool:\n        return is_pv1_scalar_sequence_field(field)",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "is_scalar_sequence_field",
    "loc": 497,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:is_bytes_field:chunk1",
    "text": "def is_bytes_field(field: ModelField) -> bool:\n        return lenient_issubclass(field.type_, bytes)",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "is_bytes_field",
    "loc": 500,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:is_bytes_sequence_field:chunk1",
    "text": "def is_bytes_sequence_field(field: ModelField) -> bool:\n        return field.shape in sequence_shapes and lenient_issubclass(field.type_, bytes)  # type: ignore[attr-defined]",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "is_bytes_sequence_field",
    "loc": 503,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:copy_field_info:chunk1",
    "text": "def copy_field_info(*, field_info: FieldInfo, annotation: Any) -> FieldInfo:\n        return copy(field_info)",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "copy_field_info",
    "loc": 506,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:serialize_sequence_value:chunk1",
    "text": "def serialize_sequence_value(*, field: ModelField, value: Any) -> Sequence[Any]:\n        return sequence_shape_to_type[field.shape](value)  # type: ignore[no-any-return,attr-defined]",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "serialize_sequence_value",
    "loc": 509,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:get_missing_field_error:chunk1",
    "text": "def get_missing_field_error(loc: Tuple[str, ...]) -> Dict[str, Any]:\n        missing_field_error = ErrorWrapper(MissingError(), loc=loc)  # type: ignore[call-arg]\n        new_error = ValidationError([missing_field_error], RequestErrorModel)\n        return new_error.errors()[0]  # type: ignore[return-value]",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "get_missing_field_error",
    "loc": 512,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:create_body_model:chunk1",
    "text": "def create_body_model(\n        *, fields: Sequence[ModelField], model_name: str\n    ) -> Type[BaseModel]:\n        BodyModel = create_model(model_name)\n        for f in fields:\n            BodyModel.__fields__[f.name] = f  # type: ignore[index]\n        return BodyModel",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "create_body_model",
    "loc": 517,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:get_model_fields:chunk1",
    "text": "def get_model_fields(model: Type[BaseModel]) -> List[ModelField]:\n        return list(model.__fields__.values())  # type: ignore[attr-defined]",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "get_model_fields",
    "loc": 525,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:_regenerate_error_with_loc:chunk1",
    "text": "def _regenerate_error_with_loc(\n    *, errors: Sequence[Any], loc_prefix: Tuple[Union[str, int], ...]\n) -> List[Dict[str, Any]]:\n    updated_loc_errors: List[Any] = [\n        {**err, \"loc\": loc_prefix + err.get(\"loc\", ())}\n        for err in _normalize_errors(errors)\n    ]\n\n    return updated_loc_errors",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "_regenerate_error_with_loc",
    "loc": 529,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:_annotation_is_sequence:chunk1",
    "text": "def _annotation_is_sequence(annotation: Union[Type[Any], None]) -> bool:\n    if lenient_issubclass(annotation, (str, bytes)):\n        return False\n    return lenient_issubclass(annotation, sequence_types)",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "_annotation_is_sequence",
    "loc": 540,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:field_annotation_is_sequence:chunk1",
    "text": "def field_annotation_is_sequence(annotation: Union[Type[Any], None]) -> bool:\n    origin = get_origin(annotation)\n    if origin is Union or origin is UnionType:\n        for arg in get_args(annotation):\n            if field_annotation_is_sequence(arg):\n                return True\n        return False\n    return _annotation_is_sequence(annotation) or _annotation_is_sequence(\n        get_origin(annotation)\n    )",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "field_annotation_is_sequence",
    "loc": 546,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:value_is_sequence:chunk1",
    "text": "def value_is_sequence(value: Any) -> bool:\n    return isinstance(value, sequence_types) and not isinstance(value, (str, bytes))  # type: ignore[arg-type]",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "value_is_sequence",
    "loc": 558,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:_annotation_is_complex:chunk1",
    "text": "def _annotation_is_complex(annotation: Union[Type[Any], None]) -> bool:\n    return (\n        lenient_issubclass(annotation, (BaseModel, Mapping, UploadFile))\n        or _annotation_is_sequence(annotation)\n        or is_dataclass(annotation)\n    )",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "_annotation_is_complex",
    "loc": 562,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:field_annotation_is_complex:chunk1",
    "text": "def field_annotation_is_complex(annotation: Union[Type[Any], None]) -> bool:\n    origin = get_origin(annotation)\n    if origin is Union or origin is UnionType:\n        return any(field_annotation_is_complex(arg) for arg in get_args(annotation))\n\n    return (\n        _annotation_is_complex(annotation)\n        or _annotation_is_complex(origin)\n        or hasattr(origin, \"__pydantic_core_schema__\")\n        or hasattr(origin, \"__get_pydantic_core_schema__\")\n    )",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "field_annotation_is_complex",
    "loc": 570,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:field_annotation_is_scalar:chunk1",
    "text": "def field_annotation_is_scalar(annotation: Any) -> bool:\n    # handle Ellipsis here to make tuple[int, ...] work nicely\n    return annotation is Ellipsis or not field_annotation_is_complex(annotation)",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "field_annotation_is_scalar",
    "loc": 583,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:field_annotation_is_scalar_sequence:chunk1",
    "text": "def field_annotation_is_scalar_sequence(annotation: Union[Type[Any], None]) -> bool:\n    origin = get_origin(annotation)\n    if origin is Union or origin is UnionType:\n        at_least_one_scalar_sequence = False\n        for arg in get_args(annotation):\n            if field_annotation_is_scalar_sequence(arg):\n                at_least_one_scalar_sequence = True\n                continue\n            elif not field_annotation_is_scalar(arg):\n                return False\n        return at_least_one_scalar_sequence\n    return field_annotation_is_sequence(annotation) and all(\n        field_annotation_is_scalar(sub_annotation)\n        for sub_annotation in get_args(annotation)\n    )",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "field_annotation_is_scalar_sequence",
    "loc": 588,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:is_bytes_or_nonable_bytes_annotation:chunk1",
    "text": "def is_bytes_or_nonable_bytes_annotation(annotation: Any) -> bool:\n    if lenient_issubclass(annotation, bytes):\n        return True\n    origin = get_origin(annotation)\n    if origin is Union or origin is UnionType:\n        for arg in get_args(annotation):\n            if lenient_issubclass(arg, bytes):\n                return True\n    return False",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "is_bytes_or_nonable_bytes_annotation",
    "loc": 605,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:is_uploadfile_or_nonable_uploadfile_annotation:chunk1",
    "text": "def is_uploadfile_or_nonable_uploadfile_annotation(annotation: Any) -> bool:\n    if lenient_issubclass(annotation, UploadFile):\n        return True\n    origin = get_origin(annotation)\n    if origin is Union or origin is UnionType:\n        for arg in get_args(annotation):\n            if lenient_issubclass(arg, UploadFile):\n                return True\n    return False",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "is_uploadfile_or_nonable_uploadfile_annotation",
    "loc": 616,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:is_bytes_sequence_annotation:chunk1",
    "text": "def is_bytes_sequence_annotation(annotation: Any) -> bool:\n    origin = get_origin(annotation)\n    if origin is Union or origin is UnionType:\n        at_least_one = False\n        for arg in get_args(annotation):\n            if is_bytes_sequence_annotation(arg):\n                at_least_one = True\n                continue\n        return at_least_one\n    return field_annotation_is_sequence(annotation) and all(\n        is_bytes_or_nonable_bytes_annotation(sub_annotation)\n        for sub_annotation in get_args(annotation)\n    )",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "is_bytes_sequence_annotation",
    "loc": 627,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:is_uploadfile_sequence_annotation:chunk1",
    "text": "def is_uploadfile_sequence_annotation(annotation: Any) -> bool:\n    origin = get_origin(annotation)\n    if origin is Union or origin is UnionType:\n        at_least_one = False\n        for arg in get_args(annotation):\n            if is_uploadfile_sequence_annotation(arg):\n                at_least_one = True\n                continue\n        return at_least_one\n    return field_annotation_is_sequence(annotation) and all(\n        is_uploadfile_or_nonable_uploadfile_annotation(sub_annotation)\n        for sub_annotation in get_args(annotation)\n    )",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "is_uploadfile_sequence_annotation",
    "loc": 642,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:function:get_cached_model_fields:chunk1",
    "text": "def get_cached_model_fields(model: Type[BaseModel]) -> List[ModelField]:\n    return get_model_fields(model)",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "function",
    "name": "get_cached_model_fields",
    "loc": 658,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:class:BaseConfig:chunk1",
    "text": "class BaseConfig:\n        pass",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "class",
    "name": "BaseConfig",
    "loc": 81,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:class:ErrorWrapper:chunk1",
    "text": "class ErrorWrapper(Exception):\n        pass",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "class",
    "name": "ErrorWrapper",
    "loc": 84,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:class:ModelField:chunk1",
    "text": "class ModelField:\n        field_info: FieldInfo\n        name: str\n        mode: Literal[\"validation\", \"serialization\"] = \"validation\"\n\n        @property\n        def alias(self) -> str:\n            a = self.field_info.alias\n            return a if a is not None else self.name\n\n        @property\n        def required(self) -> bool:\n            return self.field_info.is_required()\n\n        @property\n        def default(self) -> Any:\n            return self.get_default()\n\n        @property\n        def type_(self) -> Any:\n            return self.field_info.annotation\n\n        def __post_init__(self) -> None:\n            self._type_adapter: TypeAdapter[Any] = TypeAdapter(\n                Annotated[self.field_info.annotation, self.field_info]\n            )\n\n        def get_default(self) -> Any:\n            if self.field_info.is_required():\n                return Undefined\n            return self.field_info.get_default(call_default_factory=True)\n\n        def validate(\n            self,\n            value: Any,\n            values: Dict[str, Any] = {},  # noqa: B006\n            *,\n            loc: Tuple[Union[int, str], ...] = (),\n        ) -> Tuple[Any, Union[List[Dict[str, Any]], None]]:\n            try:\n                return (\n                    self._type_adapter.validate_python(value, from_attributes=True),\n                    None,\n                )\n            except ValidationError as exc:\n                return None, _regenerate_error_with_loc(\n                    errors=exc.errors(include_url=False), loc_prefix=loc\n                )\n\n        def serialize(\n            self,\n            value: Any,\n            *,\n            mode: Literal[\"json\", \"python\"] = \"json\",\n            include: Union[IncEx, None] = None,\n            exclude: Union[IncEx, None] = None,\n            by_alias: bool = True,\n            exclude_unset: bool = False,\n            exclude_defaults: bool = False,\n            exclude_none: bool = False,\n        ) -> Any:\n            # What calls this code passes a value that already called\n            # self._type_adapter.validate_python(value)\n            return self._type_adapter.dump_python(\n                value,\n                mode=mode,\n                include=include,\n                exclude=exclude,\n                by_alias=by_alias,\n                exclude_unset=exclude_unset,\n                exclude_defaults=exclude_defaults,\n                exclude_none=exclude_none,\n            )\n\n        def __hash__(self) -> int:\n            # Each ModelField is unique for our purposes, to allow making a dict from\n            # ModelField to its JSON Schema.\n            return id(self)",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "class",
    "name": "ModelField",
    "loc": 88,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:class:GenerateJsonSchema:chunk1",
    "text": "class GenerateJsonSchema:  # type: ignore[no-redef]\n        ref_template: str",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "class",
    "name": "GenerateJsonSchema",
    "loc": 364,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\_compat.py:class:PydanticSchemaGenerationError:chunk1",
    "text": "class PydanticSchemaGenerationError(Exception):  # type: ignore[no-redef]\n        pass",
    "repo": "fastapi",
    "path": "fastapi\\_compat.py",
    "type": "class",
    "name": "PydanticSchemaGenerationError",
    "loc": 367,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\models.py:class:SecurityRequirement:chunk1",
    "text": "class SecurityRequirement:\n    security_scheme: SecurityBase\n    scopes: Optional[Sequence[str]] = None",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\models.py",
    "type": "class",
    "name": "SecurityRequirement",
    "loc": 9,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\models.py:class:Dependant:chunk1",
    "text": "class Dependant:\n    path_params: List[ModelField] = field(default_factory=list)\n    query_params: List[ModelField] = field(default_factory=list)\n    header_params: List[ModelField] = field(default_factory=list)\n    cookie_params: List[ModelField] = field(default_factory=list)\n    body_params: List[ModelField] = field(default_factory=list)\n    dependencies: List[\"Dependant\"] = field(default_factory=list)\n    security_requirements: List[SecurityRequirement] = field(default_factory=list)\n    name: Optional[str] = None\n    call: Optional[Callable[..., Any]] = None\n    request_param_name: Optional[str] = None\n    websocket_param_name: Optional[str] = None\n    http_connection_param_name: Optional[str] = None\n    response_param_name: Optional[str] = None\n    background_tasks_param_name: Optional[str] = None\n    security_scopes_param_name: Optional[str] = None\n    security_scopes: Optional[List[str]] = None\n    use_cache: bool = True\n    path: Optional[str] = None\n    cache_key: Tuple[Optional[Callable[..., Any]], Tuple[str, ...]] = field(init=False)\n\n    def __post_init__(self) -> None:\n        self.cache_key = (self.call, tuple(sorted(set(self.security_scopes or []))))",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\models.py",
    "type": "class",
    "name": "Dependant",
    "loc": 15,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:function:ensure_multipart_is_installed:chunk1",
    "text": "def ensure_multipart_is_installed() -> None:\n    try:\n        from python_multipart import __version__\n\n        # Import an attribute that can be mocked/deleted in testing\n        assert __version__ > \"0.0.12\"\n    except (ImportError, AssertionError):\n        try:\n            # __version__ is available in both multiparts, and can be mocked\n            from multipart import __version__  # type: ignore[no-redef,import-untyped]\n\n            assert __version__\n            try:\n                # parse_options_header is only available in the right multipart\n                from multipart.multipart import (  # type: ignore[import-untyped]\n                    parse_options_header,\n                )\n\n                assert parse_options_header\n            except ImportError:\n                logger.error(multipart_incorrect_install_error)\n                raise RuntimeError(multipart_incorrect_install_error) from None\n        except ImportError:\n            logger.error(multipart_not_installed_error)\n            raise RuntimeError(multipart_not_installed_error) from None",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "function",
    "name": "ensure_multipart_is_installed",
    "loc": 91,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:function:get_param_sub_dependant:chunk1",
    "text": "def get_param_sub_dependant(\n    *,\n    param_name: str,\n    depends: params.Depends,\n    path: str,\n    security_scopes: Optional[List[str]] = None,\n) -> Dependant:\n    assert depends.dependency\n    return get_sub_dependant(\n        depends=depends,\n        dependency=depends.dependency,\n        path=path,\n        name=param_name,\n        security_scopes=security_scopes,\n    )",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "function",
    "name": "get_param_sub_dependant",
    "loc": 118,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:function:get_parameterless_sub_dependant:chunk1",
    "text": "def get_parameterless_sub_dependant(*, depends: params.Depends, path: str) -> Dependant:\n    assert callable(\n        depends.dependency\n    ), \"A parameter-less dependency must have a callable dependency\"\n    return get_sub_dependant(depends=depends, dependency=depends.dependency, path=path)",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "function",
    "name": "get_parameterless_sub_dependant",
    "loc": 135,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:function:get_sub_dependant:chunk1",
    "text": "def get_sub_dependant(\n    *,\n    depends: params.Depends,\n    dependency: Callable[..., Any],\n    path: str,\n    name: Optional[str] = None,\n    security_scopes: Optional[List[str]] = None,\n) -> Dependant:\n    security_requirement = None\n    security_scopes = security_scopes or []\n    if isinstance(depends, params.Security):\n        dependency_scopes = depends.scopes\n        security_scopes.extend(dependency_scopes)\n    if isinstance(dependency, SecurityBase):\n        use_scopes: List[str] = []\n        if isinstance(dependency, (OAuth2, OpenIdConnect)):\n            use_scopes = security_scopes\n        security_requirement = SecurityRequirement(\n            security_scheme=dependency, scopes=use_scopes\n        )\n    sub_dependant = get_dependant(\n        path=path,\n        call=dependency,\n        name=name,\n        security_scopes=security_scopes,\n        use_cache=depends.use_cache,\n    )\n    if security_requirement:\n        sub_dependant.security_requirements.append(security_requirement)\n    return sub_dependant",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "function",
    "name": "get_sub_dependant",
    "loc": 142,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:function:get_flat_dependant:chunk1",
    "text": "def get_flat_dependant(\n    dependant: Dependant,\n    *,\n    skip_repeats: bool = False,\n    visited: Optional[List[CacheKey]] = None,\n) -> Dependant:\n    if visited is None:\n        visited = []\n    visited.append(dependant.cache_key)\n\n    flat_dependant = Dependant(\n        path_params=dependant.path_params.copy(),\n        query_params=dependant.query_params.copy(),\n        header_params=dependant.header_params.copy(),\n        cookie_params=dependant.cookie_params.copy(),\n        body_params=dependant.body_params.copy(),\n        security_requirements=dependant.security_requirements.copy(),\n        use_cache=dependant.use_cache,\n        path=dependant.path,\n    )\n    for sub_dependant in dependant.dependencies:\n        if skip_repeats and sub_dependant.cache_key in visited:\n            continue\n        flat_sub = get_flat_dependant(\n            sub_dependant, skip_repeats=skip_repeats, visited=visited\n        )\n        flat_dependant.path_params.extend(flat_sub.path_params)\n        flat_dependant.query_params.extend(flat_sub.query_params)\n        flat_dependant.header_params.extend(flat_sub.header_params)\n        flat_dependant.cookie_params.extend(flat_sub.cookie_params)\n        flat_dependant.body_params.extend(flat_sub.body_params)\n        flat_dependant.security_requirements.extend(flat_sub.security_requirements)\n    return flat_dependant",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "function",
    "name": "get_flat_dependant",
    "loc": 177,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:function:_get_flat_fields_from_params:chunk1",
    "text": "def _get_flat_fields_from_params(fields: List[ModelField]) -> List[ModelField]:\n    if not fields:\n        return fields\n    first_field = fields[0]\n    if len(fields) == 1 and lenient_issubclass(first_field.type_, BaseModel):\n        fields_to_extract = get_cached_model_fields(first_field.type_)\n        return fields_to_extract\n    return fields",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "function",
    "name": "_get_flat_fields_from_params",
    "loc": 212,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:function:get_flat_params:chunk1",
    "text": "def get_flat_params(dependant: Dependant) -> List[ModelField]:\n    flat_dependant = get_flat_dependant(dependant, skip_repeats=True)\n    path_params = _get_flat_fields_from_params(flat_dependant.path_params)\n    query_params = _get_flat_fields_from_params(flat_dependant.query_params)\n    header_params = _get_flat_fields_from_params(flat_dependant.header_params)\n    cookie_params = _get_flat_fields_from_params(flat_dependant.cookie_params)\n    return path_params + query_params + header_params + cookie_params",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "function",
    "name": "get_flat_params",
    "loc": 222,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:function:get_typed_signature:chunk1",
    "text": "def get_typed_signature(call: Callable[..., Any]) -> inspect.Signature:\n    signature = inspect.signature(call)\n    globalns = getattr(call, \"__globals__\", {})\n    typed_params = [\n        inspect.Parameter(\n            name=param.name,\n            kind=param.kind,\n            default=param.default,\n            annotation=get_typed_annotation(param.annotation, globalns),\n        )\n        for param in signature.parameters.values()\n    ]\n    typed_signature = inspect.Signature(typed_params)\n    return typed_signature",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "function",
    "name": "get_typed_signature",
    "loc": 231,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:function:get_typed_annotation:chunk1",
    "text": "def get_typed_annotation(annotation: Any, globalns: Dict[str, Any]) -> Any:\n    if isinstance(annotation, str):\n        annotation = ForwardRef(annotation)\n        annotation = evaluate_forwardref(annotation, globalns, globalns)\n    return annotation",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "function",
    "name": "get_typed_annotation",
    "loc": 247,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:function:get_typed_return_annotation:chunk1",
    "text": "def get_typed_return_annotation(call: Callable[..., Any]) -> Any:\n    signature = inspect.signature(call)\n    annotation = signature.return_annotation\n\n    if annotation is inspect.Signature.empty:\n        return None\n\n    globalns = getattr(call, \"__globals__\", {})\n    return get_typed_annotation(annotation, globalns)",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "function",
    "name": "get_typed_return_annotation",
    "loc": 254,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:function:get_dependant:chunk1",
    "text": "def get_dependant(\n    *,\n    path: str,\n    call: Callable[..., Any],\n    name: Optional[str] = None,\n    security_scopes: Optional[List[str]] = None,\n    use_cache: bool = True,\n) -> Dependant:\n    path_param_names = get_path_param_names(path)\n    endpoint_signature = get_typed_signature(call)\n    signature_params = endpoint_signature.parameters\n    dependant = Dependant(\n        call=call,\n        name=name,\n        path=path,\n        security_scopes=security_scopes,\n        use_cache=use_cache,\n    )\n    for param_name, param in signature_params.items():\n        is_path_param = param_name in path_param_names\n        param_details = analyze_param(\n            param_name=param_name,\n            annotation=param.annotation,\n            value=param.default,\n            is_path_param=is_path_param,\n        )\n        if param_details.depends is not None:\n            sub_dependant = get_param_sub_dependant(\n                param_name=param_name,\n                depends=param_details.depends,\n                path=path,\n                security_scopes=security_scopes,\n            )\n            dependant.dependencies.append(sub_dependant)\n            continue\n        if add_non_field_param_to_dependency(\n            param_name=param_name,\n            type_annotation=param_details.type_annotation,\n            dependant=dependant,\n        ):\n            assert (\n                param_details.field is None\n            ), f\"Cannot specify multiple FastAPI annotations for {param_name!r}\"\n            continue\n        assert param_details.field is not None\n        if isinstance(param_details.field.field_info, params.Body):\n            dependant.body_params.append(param_details.field)\n        else:\n            add_param_to_fields(field=param_details.field, dependant=dependant)\n    return dependant",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "function",
    "name": "get_dependant",
    "loc": 265,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:function:add_non_field_param_to_dependency:chunk1",
    "text": "def add_non_field_param_to_dependency(\n    *, param_name: str, type_annotation: Any, dependant: Dependant\n) -> Optional[bool]:\n    if lenient_issubclass(type_annotation, Request):\n        dependant.request_param_name = param_name\n        return True\n    elif lenient_issubclass(type_annotation, WebSocket):\n        dependant.websocket_param_name = param_name\n        return True\n    elif lenient_issubclass(type_annotation, HTTPConnection):\n        dependant.http_connection_param_name = param_name\n        return True\n    elif lenient_issubclass(type_annotation, Response):\n        dependant.response_param_name = param_name\n        return True\n    elif lenient_issubclass(type_annotation, StarletteBackgroundTasks):\n        dependant.background_tasks_param_name = param_name\n        return True\n    elif lenient_issubclass(type_annotation, SecurityScopes):\n        dependant.security_scopes_param_name = param_name\n        return True\n    return None",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "function",
    "name": "add_non_field_param_to_dependency",
    "loc": 317,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:function:analyze_param:chunk1",
    "text": "def analyze_param(\n    *,\n    param_name: str,\n    annotation: Any,\n    value: Any,\n    is_path_param: bool,\n) -> ParamDetails:\n    field_info = None\n    depends = None\n    type_annotation: Any = Any\n    use_annotation: Any = Any\n    if annotation is not inspect.Signature.empty:\n        use_annotation = annotation\n        type_annotation = annotation\n    # Extract Annotated info\n    if get_origin(use_annotation) is Annotated:\n        annotated_args = get_args(annotation)\n        type_annotation = annotated_args[0]\n        fastapi_annotations = [\n            arg\n            for arg in annotated_args[1:]\n            if isinstance(arg, (FieldInfo, params.Depends))\n        ]\n        fastapi_specific_annotations = [\n            arg\n            for arg in fastapi_annotations\n            if isinstance(arg, (params.Param, params.Body, params.Depends))\n        ]\n        if fastapi_specific_annotations:\n            fastapi_annotation: Union[FieldInfo, params.Depends, None] = (\n                fastapi_specific_annotations[-1]\n            )\n        else:\n            fastapi_annotation = None\n        # Set default for Annotated FieldInfo\n        if isinstance(fastapi_annotation, FieldInfo):\n            # Copy `field_info` because we mutate `field_info.default` below.\n            field_info = copy_field_info(\n                field_info=fastapi_annotation, annotation=use_annotation\n            )\n            assert (\n                field_info.default is Undefined or field_info.default is RequiredParam\n            ), (\n                f\"`{field_info.__class__.__name__}` default value cannot be set in\"\n                f\" `Annotated` for {param_name!r}. Set the default value with `=` instead.\"\n            )\n            if value is not inspect.Signature.empty:\n                assert not is_path_param, \"Path parameters cannot have default values\"\n                field_info.default = value\n            else:\n                field_info.default = RequiredParam\n        # Get Annotated Depends\n        elif isinstance(fastapi_annotation, params.Depends):\n            depends = fastapi_annotation\n    # Get Depends from default value\n    if isinstance(value, params.Depends):\n        assert depends is None, (\n            \"Cannot specify `Depends` in `Annotated` and default value\"\n            f\" together for {param_name!r}\"\n        )\n        assert field_info is None, (\n            \"Cannot specify a FastAPI annotation in `Annotated` and `Depends` as a\"\n            f\" default value together for {param_name!r}\"\n        )\n        depends = value\n    # Get FieldInfo from default value\n    elif isinstance(value, FieldInfo):\n        assert field_info is None, (\n            \"Cannot specify FastAPI annotations in `Annotated` and default value\"\n            f\" together for {param_name!r}\"\n        )\n        field_info = value\n        if PYDANTIC_V2:\n            field_info.annotation = type_annotation\n\n    # Get Depends from type annotation\n    if depends is not None and depends.dependency is None:\n        # Copy `depends` before mutating it\n        depends = copy(depends)\n        depends.dependency = type_annotation\n\n    # Handle non-param type annotations like Request\n    if lenient_issubclass(\n        type_annotation,\n        (\n            Request,\n            WebSocket,\n            HTTPConnection,\n            Response,\n            StarletteBackgroundTasks,\n            SecurityScopes,\n        ),\n    ):\n        assert depends is None, f\"Cannot specify `Depends` for type {type_annotation!r}\"\n        assert (\n            field_info is None\n        ), f\"Cannot specify FastAPI annotation for type {type_annotation!r}\"\n    # Handle default assignations, neither field_info nor depends was not found in Annotated nor default value\n    elif field_info is None and depends is None:\n        default_value = value if value is not inspect.Signature.empty else RequiredParam\n        if is_path_param:\n            # We might check here that `default_value is RequiredParam`, but the fact is that the same\n            # parameter might sometimes be a path parameter and sometimes not. See\n            # `tests/test_infer_param_optionality.py` for an example.\n            field_info = params.Path(annotation=use_annotation)\n        elif is_uploadfile_or_nonable_uploadfile_annotation(\n            type_annotation\n        ) or is_uploadfile_sequence_annotation(type_annotation):\n            field_info = params.File(annotation=use_annotation, default=default_value)\n        elif not field_annotation_is_scalar(annotation=type_annotation):\n            field_info = params.Body(annotation=use_annotation, default=default_value)\n        else:\n            field_info = params.Query(annotation=use_annotation, default=default_value)\n\n    field = None\n    # It's a field_info, not a dependency\n    if field_info is not None:\n        # Handle field_info.in_\n        if is_path_param:\n            assert isinstance(field_info, params.Path), (\n                f\"Cannot use `{field_info.__class__.__name__}` for path param\"\n                f\" {param_name!r}\"\n            )\n        elif (\n            isinstance(field_info, params.Param)\n            and getattr(field_info, \"in_\", None) is None\n        ):\n            field_info.in_ = params.ParamTypes.query\n        use_annotation_from_field_info = get_annotation_from_field_info(\n            use_annotation,\n            field_info,\n            param_name,\n        )\n        if isinstance(field_info, params.Form):\n            ensure_multipart_is_installed()\n        if not field_info.alias and getattr(field_info, \"convert_underscores\", None):\n            alias = param_name.replace(\"_\", \"-\")\n        else:\n            alias = field_info.alias or param_name\n        field_info.alias = alias\n        field = create_model_field(\n            name=param_name,\n            type_=use_annotation_from_field_info,\n            default=field_info.default,\n            alias=alias,\n            required=field_info.default in (RequiredParam, Undefined),\n            field_info=field_info,\n        )\n        if is_path_param:\n            assert is_scalar_field(\n                field=field\n            ), \"Path params must be of one of the supported types\"\n        elif isinstance(field_info, params.Query):\n            assert (\n                is_scalar_field(field)\n                or is_scalar_sequence_field(field)\n                or (\n                    lenient_issubclass(field.type_, BaseModel)\n                    # For Pydantic v1\n                    and getattr(field, \"shape\", 1) == 1\n                )\n            )\n\n    return ParamDetails(type_annotation=type_annotation, depends=depends, field=field)",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "function",
    "name": "analyze_param",
    "loc": 348,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:function:add_param_to_fields:chunk1",
    "text": "def add_param_to_fields(*, field: ModelField, dependant: Dependant) -> None:\n    field_info = field.field_info\n    field_info_in = getattr(field_info, \"in_\", None)\n    if field_info_in == params.ParamTypes.path:\n        dependant.path_params.append(field)\n    elif field_info_in == params.ParamTypes.query:\n        dependant.query_params.append(field)\n    elif field_info_in == params.ParamTypes.header:\n        dependant.header_params.append(field)\n    else:\n        assert (\n            field_info_in == params.ParamTypes.cookie\n        ), f\"non-body parameters must be in path, query, header or cookie: {field.name}\"\n        dependant.cookie_params.append(field)",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "function",
    "name": "add_param_to_fields",
    "loc": 514,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:function:is_coroutine_callable:chunk1",
    "text": "def is_coroutine_callable(call: Callable[..., Any]) -> bool:\n    if inspect.isroutine(call):\n        return inspect.iscoroutinefunction(call)\n    if inspect.isclass(call):\n        return False\n    dunder_call = getattr(call, \"__call__\", None)  # noqa: B004\n    return inspect.iscoroutinefunction(dunder_call)",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "function",
    "name": "is_coroutine_callable",
    "loc": 530,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:function:is_async_gen_callable:chunk1",
    "text": "def is_async_gen_callable(call: Callable[..., Any]) -> bool:\n    if inspect.isasyncgenfunction(call):\n        return True\n    dunder_call = getattr(call, \"__call__\", None)  # noqa: B004\n    return inspect.isasyncgenfunction(dunder_call)",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "function",
    "name": "is_async_gen_callable",
    "loc": 539,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:function:is_gen_callable:chunk1",
    "text": "def is_gen_callable(call: Callable[..., Any]) -> bool:\n    if inspect.isgeneratorfunction(call):\n        return True\n    dunder_call = getattr(call, \"__call__\", None)  # noqa: B004\n    return inspect.isgeneratorfunction(dunder_call)",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "function",
    "name": "is_gen_callable",
    "loc": 546,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:function:_validate_value_with_model_field:chunk1",
    "text": "def _validate_value_with_model_field(\n    *, field: ModelField, value: Any, values: Dict[str, Any], loc: Tuple[str, ...]\n) -> Tuple[Any, List[Any]]:\n    if value is None:\n        if field.required:\n            return None, [get_missing_field_error(loc=loc)]\n        else:\n            return deepcopy(field.default), []\n    v_, errors_ = field.validate(value, values, loc=loc)\n    if isinstance(errors_, ErrorWrapper):\n        return None, [errors_]\n    elif isinstance(errors_, list):\n        new_errors = _regenerate_error_with_loc(errors=errors_, loc_prefix=())\n        return None, new_errors\n    else:\n        return v_, []",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "function",
    "name": "_validate_value_with_model_field",
    "loc": 698,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:function:_get_multidict_value:chunk1",
    "text": "def _get_multidict_value(\n    field: ModelField, values: Mapping[str, Any], alias: Union[str, None] = None\n) -> Any:\n    alias = alias or field.alias\n    if is_sequence_field(field) and isinstance(values, (ImmutableMultiDict, Headers)):\n        value = values.getlist(alias)\n    else:\n        value = values.get(alias, None)\n    if (\n        value is None\n        or (\n            isinstance(field.field_info, params.Form)\n            and isinstance(value, str)  # For type checks\n            and value == \"\"\n        )\n        or (is_sequence_field(field) and len(value) == 0)\n    ):\n        if field.required:\n            return\n        else:\n            return deepcopy(field.default)\n    return value",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "function",
    "name": "_get_multidict_value",
    "loc": 716,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:function:request_params_to_args:chunk1",
    "text": "def request_params_to_args(\n    fields: Sequence[ModelField],\n    received_params: Union[Mapping[str, Any], QueryParams, Headers],\n) -> Tuple[Dict[str, Any], List[Any]]:\n    values: Dict[str, Any] = {}\n    errors: List[Dict[str, Any]] = []\n\n    if not fields:\n        return values, errors\n\n    first_field = fields[0]\n    fields_to_extract = fields\n    single_not_embedded_field = False\n    if len(fields) == 1 and lenient_issubclass(first_field.type_, BaseModel):\n        fields_to_extract = get_cached_model_fields(first_field.type_)\n        single_not_embedded_field = True\n\n    params_to_process: Dict[str, Any] = {}\n\n    processed_keys = set()\n\n    for field in fields_to_extract:\n        alias = None\n        if isinstance(received_params, Headers):\n            # Handle fields extracted from a Pydantic Model for a header, each field\n            # doesn't have a FieldInfo of type Header with the default convert_underscores=True\n            convert_underscores = getattr(field.field_info, \"convert_underscores\", True)\n            if convert_underscores:\n                alias = (\n                    field.alias\n                    if field.alias != field.name\n                    else field.name.replace(\"_\", \"-\")\n                )\n        value = _get_multidict_value(field, received_params, alias=alias)\n        if value is not None:\n            params_to_process[field.name] = value\n        processed_keys.add(alias or field.alias)\n        processed_keys.add(field.name)\n\n    for key, value in received_params.items():\n        if key not in processed_keys:\n            params_to_process[key] = value\n\n    if single_not_embedded_field:\n        field_info = first_field.field_info\n        assert isinstance(\n            field_info, params.Param\n        ), \"Params must be subclasses of Param\"\n        loc: Tuple[str, ...] = (field_info.in_.value,)\n        v_, errors_ = _validate_value_with_model_field(\n            field=first_field, value=params_to_process, values=values, loc=loc\n        )\n        return {first_field.name: v_}, errors_\n\n    for field in fields:\n        value = _get_multidict_value(field, received_params)\n        field_info = field.field_info\n        assert isinstance(\n            field_info, params.Param\n        ), \"Params must be subclasses of Param\"\n        loc = (field_info.in_.value, field.alias)\n        v_, errors_ = _validate_value_with_model_field(\n            field=field, value=value, values=values, loc=loc\n        )\n        if errors_:\n            errors.extend(errors_)\n        else:\n            values[field.name] = v_\n    return values, errors",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "function",
    "name": "request_params_to_args",
    "loc": 740,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:function:_should_embed_body_fields:chunk1",
    "text": "def _should_embed_body_fields(fields: List[ModelField]) -> bool:\n    if not fields:\n        return False\n    # More than one dependency could have the same field, it would show up as multiple\n    # fields but it's the same one, so count them by name\n    body_param_names_set = {field.name for field in fields}\n    # A top level field has to be a single field, not multiple\n    if len(body_param_names_set) > 1:\n        return True\n    first_field = fields[0]\n    # If it explicitly specifies it is embedded, it has to be embedded\n    if getattr(first_field.field_info, \"embed\", None):\n        return True\n    # If it's a Form (or File) field, it has to be a BaseModel to be top level\n    # otherwise it has to be embedded, so that the key value pair can be extracted\n    if isinstance(first_field.field_info, params.Form) and not lenient_issubclass(\n        first_field.type_, BaseModel\n    ):\n        return True\n    return False",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "function",
    "name": "_should_embed_body_fields",
    "loc": 811,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:function:get_body_field:chunk1",
    "text": "def get_body_field(\n    *, flat_dependant: Dependant, name: str, embed_body_fields: bool\n) -> Optional[ModelField]:\n    \"\"\"\n    Get a ModelField representing the request body for a path operation, combining\n    all body parameters into a single field if necessary.\n\n    Used to check if it's form data (with `isinstance(body_field, params.Form)`)\n    or JSON and to generate the JSON Schema for a request body.\n\n    This is **not** used to validate/parse the request body, that's done with each\n    individual body parameter.\n    \"\"\"\n    if not flat_dependant.body_params:\n        return None\n    first_param = flat_dependant.body_params[0]\n    if not embed_body_fields:\n        return first_param\n    model_name = \"Body_\" + name\n    BodyModel = create_body_model(\n        fields=flat_dependant.body_params, model_name=model_name\n    )\n    required = any(True for f in flat_dependant.body_params if f.required)\n    BodyFieldInfo_kwargs: Dict[str, Any] = {\n        \"annotation\": BodyModel,\n        \"alias\": \"body\",\n    }\n    if not required:\n        BodyFieldInfo_kwargs[\"default\"] = None\n    if any(isinstance(f.field_info, params.File) for f in flat_dependant.body_params):\n        BodyFieldInfo: Type[params.Body] = params.File\n    elif any(isinstance(f.field_info, params.Form) for f in flat_dependant.body_params):\n        BodyFieldInfo = params.Form\n    else:\n        BodyFieldInfo = params.Body\n\n        body_param_media_types = [\n            f.field_info.media_type\n            for f in flat_dependant.body_params\n            if isinstance(f.field_info, params.Body)\n        ]\n        if len(set(body_param_media_types)) == 1:\n            BodyFieldInfo_kwargs[\"media_type\"] = body_param_media_types[0]\n    final_field = create_model_field(\n        name=\"body\",\n        type_=BodyModel,\n        required=required,\n        alias=\"body\",\n        field_info=BodyFieldInfo(**BodyFieldInfo_kwargs),\n    )\n    return final_field",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "function",
    "name": "get_body_field",
    "loc": 922,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:class:ParamDetails:chunk1",
    "text": "class ParamDetails:\n    type_annotation: Any\n    depends: Optional[params.Depends]\n    field: Optional[ModelField]",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "class",
    "name": "ParamDetails",
    "loc": 342,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\dependencies\\utils.py:class:SolvedDependency:chunk1",
    "text": "class SolvedDependency:\n    values: Dict[str, Any]\n    errors: List[Any]\n    background_tasks: Optional[StarletteBackgroundTasks]\n    response: Response\n    dependency_cache: Dict[Tuple[Callable[..., Any], Tuple[str]], Any]",
    "repo": "fastapi",
    "path": "fastapi\\dependencies\\utils.py",
    "type": "class",
    "name": "SolvedDependency",
    "loc": 564,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\docs.py:function:get_swagger_ui_html:chunk1",
    "text": "def get_swagger_ui_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that Swagger UI should load and use.\n\n            This is normally done automatically by FastAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `<title>` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    swagger_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js\",\n    swagger_css_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI CSS.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css\",\n    swagger_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://fastapi.tiangolo.com/img/favicon.png\",\n    oauth2_redirect_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The OAuth2 redirect URL, it is normally automatically handled by FastAPI.\n            \"\"\"\n        ),\n    ] = None,\n    init_oauth: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            A dictionary with Swagger UI OAuth2 initialization configurations.\n            \"\"\"\n        ),\n    ] = None,\n    swagger_ui_parameters: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Configuration parameters for Swagger UI.\n\n            It defaults to [swagger_ui_default_parameters][fastapi.openapi.docs.swagger_ui_default_parameters].\n            \"\"\"\n        ),\n    ] = None,\n) -> HTMLResponse:\n    \"\"\"\n    Generate and return the HTML  that loads Swagger UI for the interactive\n    API docs (normally served at `/docs`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load Swagger UI's JavaScript and CSS.\n\n    Read more about it in the\n    [FastAPI docs for Configure Swagger UI](https://fastapi.tiangolo.com/how-to/configure-swagger-ui/)\n    and the [FastAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://fastapi.tiangolo.com/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    current_swagger_ui_parameters = swagger_ui_default_parameters.copy()\n    if swagger_ui_parameters:\n        current_swagger_ui_parameters.update(swagger_ui_parameters)\n\n    html = f\"\"\"\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"{swagger_css_url}\">\n    <link rel=\"shortcut icon\" href=\"{swagger_favicon_url}\">\n    <title>{title}</title>\n    </head>\n    <body>\n    <div id=\"swagger-ui\">\n    </div>\n    <script src=\"{swagger_js_url}\"></script>\n    <!-- `SwaggerUIBundle` is now available on the page -->\n    <script>\n    const ui = SwaggerUIBundle({{\n        url: '{openapi_url}',\n    \"\"\"\n\n    for key, value in current_swagger_ui_parameters.items():\n        html += f\"{json.dumps(key)}: {json.dumps(jsonable_encoder(value))},\\n\"\n\n    if oauth2_redirect_url:\n        html += f\"oauth2RedirectUrl: window.location.origin + '{oauth2_redirect_url}',\"\n\n    html += \"\"\"\n    presets: [\n        SwaggerUIBundle.presets.apis,\n        SwaggerUIBundle.SwaggerUIStandalonePreset\n        ],\n    })\"\"\"\n\n    if init_oauth:\n        html += f\"\"\"\n        ui.initOAuth({json.dumps(jsonable_encoder(init_oauth))})\n        \"\"\"\n\n    html += \"\"\"\n    </script>\n    </body>\n    </html>\n    \"\"\"\n    return HTMLResponse(html)",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\docs.py",
    "type": "function",
    "name": "get_swagger_ui_html",
    "loc": 26,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\docs.py:function:get_redoc_html:chunk1",
    "text": "def get_redoc_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that ReDoc should load and use.\n\n            This is normally done automatically by FastAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `<title>` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    redoc_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the ReDoc JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js\",\n    redoc_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://fastapi.tiangolo.com/img/favicon.png\",\n    with_google_fonts: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Load and use Google Fonts.\n            \"\"\"\n        ),\n    ] = True,\n) -> HTMLResponse:\n    \"\"\"\n    Generate and return the HTML response that loads ReDoc for the alternative\n    API docs (normally served at `/redoc`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load ReDoc's JavaScript and CSS.\n\n    Read more about it in the\n    [FastAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://fastapi.tiangolo.com/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    html = f\"\"\"\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <title>{title}</title>\n    <!-- needed for adaptive design -->\n    <meta charset=\"utf-8\"/>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    \"\"\"\n    if with_google_fonts:\n        html += \"\"\"\n    <link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\">\n    \"\"\"\n    html += f\"\"\"\n    <link rel=\"shortcut icon\" href=\"{redoc_favicon_url}\">\n    <!--\n    ReDoc doesn't change outer page styles\n    -->\n    <style>\n      body {{\n        margin: 0;\n        padding: 0;\n      }}\n    </style>\n    </head>\n    <body>\n    <noscript>\n        ReDoc requires Javascript to function. Please enable it to browse the documentation.\n    </noscript>\n    <redoc spec-url=\"{openapi_url}\"></redoc>\n    <script src=\"{redoc_js_url}\"> </script>\n    </body>\n    </html>\n    \"\"\"\n    return HTMLResponse(html)",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\docs.py",
    "type": "function",
    "name": "get_redoc_html",
    "loc": 161,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\docs.py:function:get_swagger_ui_oauth2_redirect_html:chunk1",
    "text": "def get_swagger_ui_oauth2_redirect_html() -> HTMLResponse:\n    \"\"\"\n    Generate the HTML response with the OAuth2 redirection for Swagger UI.\n\n    You normally don't need to use or change this.\n    \"\"\"\n    # copied from https://github.com/swagger-api/swagger-ui/blob/v4.14.0/dist/oauth2-redirect.html\n    html = \"\"\"\n    <!doctype html>\n    <html lang=\"en-US\">\n    <head>\n        <title>Swagger UI: OAuth2 Redirect</title>\n    </head>\n    <body>\n    <script>\n        'use strict';\n        function run () {\n            var oauth2 = window.opener.swaggerUIRedirectOauth2;\n            var sentState = oauth2.state;\n            var redirectUrl = oauth2.redirectUrl;\n            var isValid, qp, arr;\n\n            if (/code|token|error/.test(window.location.hash)) {\n                qp = window.location.hash.substring(1).replace('?', '&');\n            } else {\n                qp = location.search.substring(1);\n            }\n\n            arr = qp.split(\"&\");\n            arr.forEach(function (v,i,_arr) { _arr[i] = '\"' + v.replace('=', '\":\"') + '\"';});\n            qp = qp ? JSON.parse('{' + arr.join() + '}',\n                    function (key, value) {\n                        return key === \"\" ? value : decodeURIComponent(value);\n                    }\n            ) : {};\n\n            isValid = qp.state === sentState;\n\n            if ((\n              oauth2.auth.schema.get(\"flow\") === \"accessCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorizationCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorization_code\"\n            ) && !oauth2.auth.code) {\n                if (!isValid) {\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"warning\",\n                        message: \"Authorization may be unsafe, passed state was changed in server. The passed state wasn't returned from auth server.\"\n                    });\n                }\n\n                if (qp.code) {\n                    delete oauth2.state;\n                    oauth2.auth.code = qp.code;\n                    oauth2.callback({auth: oauth2.auth, redirectUrl: redirectUrl});\n                } else {\n                    let oauthErrorMsg;\n                    if (qp.error) {\n                        oauthErrorMsg = \"[\"+qp.error+\"]: \" +\n                            (qp.error_description ? qp.error_description+ \". \" : \"no accessCode received from the server. \") +\n                            (qp.error_uri ? \"More info: \"+qp.error_uri : \"\");\n                    }\n\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"error\",\n                        message: oauthErrorMsg || \"[Authorization failed]: no accessCode received from the server.\"\n                    });\n                }\n            } else {\n                oauth2.callback({auth: oauth2.auth, token: qp, isValid: isValid, redirectUrl: redirectUrl});\n            }\n            window.close();\n        }\n\n        if (document.readyState !== 'loading') {\n            run();\n        } else {\n            document.addEventListener('DOMContentLoaded', function () {\n                run();\n            });\n        }\n    </script>\n    </body>\n    </html>\n        \"\"\"\n    return HTMLResponse(content=html)",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\docs.py",
    "type": "function",
    "name": "get_swagger_ui_oauth2_redirect_html",
    "loc": 256,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:EmailStr:chunk1",
    "text": "class EmailStr(str):  # type: ignore\n        @classmethod\n        def __get_validators__(cls) -> Iterable[Callable[..., Any]]:\n            yield cls.validate\n\n        @classmethod\n        def validate(cls, v: Any) -> str:\n            logger.warning(\n                \"email-validator not installed, email fields will be treated as str.\\n\"\n                \"To install, run: pip install email-validator\"\n            )\n            return str(v)\n\n        @classmethod\n        def _validate(cls, __input_value: Any, _: Any) -> str:\n            logger.warning(\n                \"email-validator not installed, email fields will be treated as str.\\n\"\n                \"To install, run: pip install email-validator\"\n            )\n            return str(__input_value)\n\n        @classmethod\n        def __get_pydantic_json_schema__(\n            cls, core_schema: CoreSchema, handler: GetJsonSchemaHandler\n        ) -> JsonSchemaValue:\n            return {\"type\": \"string\", \"format\": \"email\"}\n\n        @classmethod\n        def __get_pydantic_core_schema__(\n            cls, source: Type[Any], handler: Callable[[Any], CoreSchema]\n        ) -> CoreSchema:\n            return with_info_plain_validator_function(cls._validate)",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "EmailStr",
    "loc": 24,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:Config:chunk1",
    "text": "class Config:\n            extra = \"allow\"",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "Config",
    "loc": 64,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:BaseModelWithConfig:chunk1",
    "text": "class BaseModelWithConfig(BaseModel):\n    if PYDANTIC_V2:\n        model_config = {\"extra\": \"allow\"}\n\n    else:\n\n        class Config:\n            extra = \"allow\"",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "BaseModelWithConfig",
    "loc": 58,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:Contact:chunk1",
    "text": "class Contact(BaseModelWithConfig):\n    name: Optional[str] = None\n    url: Optional[AnyUrl] = None\n    email: Optional[EmailStr] = None",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "Contact",
    "loc": 68,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:License:chunk1",
    "text": "class License(BaseModelWithConfig):\n    name: str\n    identifier: Optional[str] = None\n    url: Optional[AnyUrl] = None",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "License",
    "loc": 74,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:Info:chunk1",
    "text": "class Info(BaseModelWithConfig):\n    title: str\n    summary: Optional[str] = None\n    description: Optional[str] = None\n    termsOfService: Optional[str] = None\n    contact: Optional[Contact] = None\n    license: Optional[License] = None\n    version: str",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "Info",
    "loc": 80,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:ServerVariable:chunk1",
    "text": "class ServerVariable(BaseModelWithConfig):\n    enum: Annotated[Optional[List[str]], Field(min_length=1)] = None\n    default: str\n    description: Optional[str] = None",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "ServerVariable",
    "loc": 90,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:Server:chunk1",
    "text": "class Server(BaseModelWithConfig):\n    url: Union[AnyUrl, str]\n    description: Optional[str] = None\n    variables: Optional[Dict[str, ServerVariable]] = None",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "Server",
    "loc": 96,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:Reference:chunk1",
    "text": "class Reference(BaseModel):\n    ref: str = Field(alias=\"$ref\")",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "Reference",
    "loc": 102,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:Discriminator:chunk1",
    "text": "class Discriminator(BaseModel):\n    propertyName: str\n    mapping: Optional[Dict[str, str]] = None",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "Discriminator",
    "loc": 106,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:XML:chunk1",
    "text": "class XML(BaseModelWithConfig):\n    name: Optional[str] = None\n    namespace: Optional[str] = None\n    prefix: Optional[str] = None\n    attribute: Optional[bool] = None\n    wrapped: Optional[bool] = None",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "XML",
    "loc": 111,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:ExternalDocumentation:chunk1",
    "text": "class ExternalDocumentation(BaseModelWithConfig):\n    description: Optional[str] = None\n    url: AnyUrl",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "ExternalDocumentation",
    "loc": 119,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:Schema:chunk1",
    "text": "class Schema(BaseModelWithConfig):\n    # Ref: JSON Schema 2020-12: https://json-schema.org/draft/2020-12/json-schema-core.html#name-the-json-schema-core-vocabu\n    # Core Vocabulary\n    schema_: Optional[str] = Field(default=None, alias=\"$schema\")\n    vocabulary: Optional[str] = Field(default=None, alias=\"$vocabulary\")\n    id: Optional[str] = Field(default=None, alias=\"$id\")\n    anchor: Optional[str] = Field(default=None, alias=\"$anchor\")\n    dynamicAnchor: Optional[str] = Field(default=None, alias=\"$dynamicAnchor\")\n    ref: Optional[str] = Field(default=None, alias=\"$ref\")\n    dynamicRef: Optional[str] = Field(default=None, alias=\"$dynamicRef\")\n    defs: Optional[Dict[str, \"SchemaOrBool\"]] = Field(default=None, alias=\"$defs\")\n    comment: Optional[str] = Field(default=None, alias=\"$comment\")\n    # Ref: JSON Schema 2020-12: https://json-schema.org/draft/2020-12/json-schema-core.html#name-a-vocabulary-for-applying-s\n    # A Vocabulary for Applying Subschemas\n    allOf: Optional[List[\"SchemaOrBool\"]] = None\n    anyOf: Optional[List[\"SchemaOrBool\"]] = None\n    oneOf: Optional[List[\"SchemaOrBool\"]] = None\n    not_: Optional[\"SchemaOrBool\"] = Field(default=None, alias=\"not\")\n    if_: Optional[\"SchemaOrBool\"] = Field(default=None, alias=\"if\")\n    then: Optional[\"SchemaOrBool\"] = None\n    else_: Optional[\"SchemaOrBool\"] = Field(default=None, alias=\"else\")\n    dependentSchemas: Optional[Dict[str, \"SchemaOrBool\"]] = None\n    prefixItems: Optional[List[\"SchemaOrBool\"]] = None\n    # TODO: uncomment and remove below when deprecating Pydantic v1\n    # It generales a list of schemas for tuples, before prefixItems was available\n    # items: Optional[\"SchemaOrBool\"] = None\n    items: Optional[Union[\"SchemaOrBool\", List[\"SchemaOrBool\"]]] = None\n    contains: Optional[\"SchemaOrBool\"] = None\n    properties: Optional[Dict[str, \"SchemaOrBool\"]] = None\n    patternProperties: Optional[Dict[str, \"SchemaOrBool\"]] = None\n    additionalProperties: Optional[\"SchemaOrBool\"] = None\n    propertyNames: Optional[\"SchemaOrBool\"] = None\n    unevaluatedItems: Optional[\"SchemaOrBool\"] = None\n    unevaluatedProperties: Optional[\"SchemaOrBool\"] = None\n    # Ref: JSON Schema Validation 2020-12: https://json-schema.org/draft/2020-12/json-schema-validation.html#name-a-vocabulary-for-structural\n    # A Vocabulary for Structural Validation\n    type: Optional[str] = None\n    enum: Optional[List[Any]] = None\n    const: Optional[Any] = None\n    multipleOf: Optional[float] = Field(default=None, gt=0)\n    maximum: Optional[float] = None\n    exclusiveMaximum: Optional[float] = None\n    minimum: Optional[float] = None\n    exclusiveMinimum: Optional[float] = None\n    maxLength: Optional[int] = Field(default=None, ge=0)\n    minLength: Optional[int] = Field(default=None, ge=0)\n    pattern: Optional[str] = None\n    maxItems: Optional[int] = Field(default=None, ge=0)\n    minItems: Optional[int] = Field(default=None, ge=0)\n    uniqueItems: Optional[bool] = None\n    maxContains: Optional[int] = Field(default=None, ge=0)\n    minContains: Optional[int] = Field(default=None, ge=0)\n    maxProperties: Optional[int] = Field(default=None, ge=0)\n    minProperties: Optional[int] = Field(default=None, ge=0)\n    required: Optional[List[str]] = None\n    dependentRequired: Optional[Dict[str, Set[str]]] = None\n    # Ref: JSON Schema Validation 2020-12: https://json-schema.org/draft/2020-12/json-schema-validation.html#name-vocabularies-for-semantic-c\n    # Vocabularies for Semantic Content With \"format\"\n    format: Optional[str] = None\n    # Ref: JSON Schema Validation 2020-12: https://json-schema.org/draft/2020-12/json-schema-validation.html#name-a-vocabulary-for-the-conten\n    # A Vocabulary for the Contents of String-Encoded Data\n    contentEncoding: Optional[str] = None\n    contentMediaType: Optional[str] = None\n    contentSchema: Optional[\"SchemaOrBool\"] = None\n    # Ref: JSON Schema Validation 2020-12: https://json-schema.org/draft/2020-12/json-schema-validation.html#name-a-vocabulary-for-basic-meta\n    # A Vocabulary for Basic Meta-Data Annotations\n    title: Optional[str] = None\n    description: Optional[str] = None\n    default: Optional[Any] = None\n    deprecated: Optional[bool] = None\n    readOnly: Optional[bool] = None\n    writeOnly: Optional[bool] = None\n    examples: Optional[List[Any]] = None\n    # Ref: OpenAPI 3.1.0: https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schema-object\n    # Schema Object\n    discriminator: Optional[Discriminator] = None\n    xml: Optional[XML] = None\n    externalDocs: Optional[ExternalDocumentation] = None\n    example: Annotated[\n        Optional[Any],\n        typing_deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = None",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "Schema",
    "loc": 124,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:Config:chunk1",
    "text": "class Config:\n            extra = \"allow\"",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "Config",
    "loc": 227,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:Example:chunk1",
    "text": "class Example(TypedDict, total=False):\n    summary: Optional[str]\n    description: Optional[str]\n    value: Optional[Any]\n    externalValue: Optional[AnyUrl]\n\n    if PYDANTIC_V2:  # type: ignore [misc]\n        __pydantic_config__ = {\"extra\": \"allow\"}\n\n    else:\n\n        class Config:\n            extra = \"allow\"",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "Example",
    "loc": 216,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:ParameterInType:chunk1",
    "text": "class ParameterInType(Enum):\n    query = \"query\"\n    header = \"header\"\n    path = \"path\"\n    cookie = \"cookie\"",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "ParameterInType",
    "loc": 231,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:Encoding:chunk1",
    "text": "class Encoding(BaseModelWithConfig):\n    contentType: Optional[str] = None\n    headers: Optional[Dict[str, Union[\"Header\", Reference]]] = None\n    style: Optional[str] = None\n    explode: Optional[bool] = None\n    allowReserved: Optional[bool] = None",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "Encoding",
    "loc": 238,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:MediaType:chunk1",
    "text": "class MediaType(BaseModelWithConfig):\n    schema_: Optional[Union[Schema, Reference]] = Field(default=None, alias=\"schema\")\n    example: Optional[Any] = None\n    examples: Optional[Dict[str, Union[Example, Reference]]] = None\n    encoding: Optional[Dict[str, Encoding]] = None",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "MediaType",
    "loc": 246,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:ParameterBase:chunk1",
    "text": "class ParameterBase(BaseModelWithConfig):\n    description: Optional[str] = None\n    required: Optional[bool] = None\n    deprecated: Optional[bool] = None\n    # Serialization rules for simple scenarios\n    style: Optional[str] = None\n    explode: Optional[bool] = None\n    allowReserved: Optional[bool] = None\n    schema_: Optional[Union[Schema, Reference]] = Field(default=None, alias=\"schema\")\n    example: Optional[Any] = None\n    examples: Optional[Dict[str, Union[Example, Reference]]] = None\n    # Serialization rules for more complex scenarios\n    content: Optional[Dict[str, MediaType]] = None",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "ParameterBase",
    "loc": 253,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:Parameter:chunk1",
    "text": "class Parameter(ParameterBase):\n    name: str\n    in_: ParameterInType = Field(alias=\"in\")",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "Parameter",
    "loc": 268,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:Header:chunk1",
    "text": "class Header(ParameterBase):\n    pass",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "Header",
    "loc": 273,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:RequestBody:chunk1",
    "text": "class RequestBody(BaseModelWithConfig):\n    description: Optional[str] = None\n    content: Dict[str, MediaType]\n    required: Optional[bool] = None",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "RequestBody",
    "loc": 277,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:Link:chunk1",
    "text": "class Link(BaseModelWithConfig):\n    operationRef: Optional[str] = None\n    operationId: Optional[str] = None\n    parameters: Optional[Dict[str, Union[Any, str]]] = None\n    requestBody: Optional[Union[Any, str]] = None\n    description: Optional[str] = None\n    server: Optional[Server] = None",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "Link",
    "loc": 283,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:Response:chunk1",
    "text": "class Response(BaseModelWithConfig):\n    description: str\n    headers: Optional[Dict[str, Union[Header, Reference]]] = None\n    content: Optional[Dict[str, MediaType]] = None\n    links: Optional[Dict[str, Union[Link, Reference]]] = None",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "Response",
    "loc": 292,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:Operation:chunk1",
    "text": "class Operation(BaseModelWithConfig):\n    tags: Optional[List[str]] = None\n    summary: Optional[str] = None\n    description: Optional[str] = None\n    externalDocs: Optional[ExternalDocumentation] = None\n    operationId: Optional[str] = None\n    parameters: Optional[List[Union[Parameter, Reference]]] = None\n    requestBody: Optional[Union[RequestBody, Reference]] = None\n    # Using Any for Specification Extensions\n    responses: Optional[Dict[str, Union[Response, Any]]] = None\n    callbacks: Optional[Dict[str, Union[Dict[str, \"PathItem\"], Reference]]] = None\n    deprecated: Optional[bool] = None\n    security: Optional[List[Dict[str, List[str]]]] = None\n    servers: Optional[List[Server]] = None",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "Operation",
    "loc": 299,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:PathItem:chunk1",
    "text": "class PathItem(BaseModelWithConfig):\n    ref: Optional[str] = Field(default=None, alias=\"$ref\")\n    summary: Optional[str] = None\n    description: Optional[str] = None\n    get: Optional[Operation] = None\n    put: Optional[Operation] = None\n    post: Optional[Operation] = None\n    delete: Optional[Operation] = None\n    options: Optional[Operation] = None\n    head: Optional[Operation] = None\n    patch: Optional[Operation] = None\n    trace: Optional[Operation] = None\n    servers: Optional[List[Server]] = None\n    parameters: Optional[List[Union[Parameter, Reference]]] = None",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "PathItem",
    "loc": 315,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:SecuritySchemeType:chunk1",
    "text": "class SecuritySchemeType(Enum):\n    apiKey = \"apiKey\"\n    http = \"http\"\n    oauth2 = \"oauth2\"\n    openIdConnect = \"openIdConnect\"",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "SecuritySchemeType",
    "loc": 331,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:SecurityBase:chunk1",
    "text": "class SecurityBase(BaseModelWithConfig):\n    type_: SecuritySchemeType = Field(alias=\"type\")\n    description: Optional[str] = None",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "SecurityBase",
    "loc": 338,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:APIKeyIn:chunk1",
    "text": "class APIKeyIn(Enum):\n    query = \"query\"\n    header = \"header\"\n    cookie = \"cookie\"",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "APIKeyIn",
    "loc": 343,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:APIKey:chunk1",
    "text": "class APIKey(SecurityBase):\n    type_: SecuritySchemeType = Field(default=SecuritySchemeType.apiKey, alias=\"type\")\n    in_: APIKeyIn = Field(alias=\"in\")\n    name: str",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "APIKey",
    "loc": 349,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:HTTPBase:chunk1",
    "text": "class HTTPBase(SecurityBase):\n    type_: SecuritySchemeType = Field(default=SecuritySchemeType.http, alias=\"type\")\n    scheme: str",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "HTTPBase",
    "loc": 355,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:HTTPBearer:chunk1",
    "text": "class HTTPBearer(HTTPBase):\n    scheme: Literal[\"bearer\"] = \"bearer\"\n    bearerFormat: Optional[str] = None",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "HTTPBearer",
    "loc": 360,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:OAuthFlow:chunk1",
    "text": "class OAuthFlow(BaseModelWithConfig):\n    refreshUrl: Optional[str] = None\n    scopes: Dict[str, str] = {}",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "OAuthFlow",
    "loc": 365,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:OAuthFlowImplicit:chunk1",
    "text": "class OAuthFlowImplicit(OAuthFlow):\n    authorizationUrl: str",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "OAuthFlowImplicit",
    "loc": 370,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:OAuthFlowPassword:chunk1",
    "text": "class OAuthFlowPassword(OAuthFlow):\n    tokenUrl: str",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "OAuthFlowPassword",
    "loc": 374,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:OAuthFlowClientCredentials:chunk1",
    "text": "class OAuthFlowClientCredentials(OAuthFlow):\n    tokenUrl: str",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "OAuthFlowClientCredentials",
    "loc": 378,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:OAuthFlowAuthorizationCode:chunk1",
    "text": "class OAuthFlowAuthorizationCode(OAuthFlow):\n    authorizationUrl: str\n    tokenUrl: str",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "OAuthFlowAuthorizationCode",
    "loc": 382,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:OAuthFlows:chunk1",
    "text": "class OAuthFlows(BaseModelWithConfig):\n    implicit: Optional[OAuthFlowImplicit] = None\n    password: Optional[OAuthFlowPassword] = None\n    clientCredentials: Optional[OAuthFlowClientCredentials] = None\n    authorizationCode: Optional[OAuthFlowAuthorizationCode] = None",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "OAuthFlows",
    "loc": 387,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:OAuth2:chunk1",
    "text": "class OAuth2(SecurityBase):\n    type_: SecuritySchemeType = Field(default=SecuritySchemeType.oauth2, alias=\"type\")\n    flows: OAuthFlows",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "OAuth2",
    "loc": 394,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:OpenIdConnect:chunk1",
    "text": "class OpenIdConnect(SecurityBase):\n    type_: SecuritySchemeType = Field(\n        default=SecuritySchemeType.openIdConnect, alias=\"type\"\n    )\n    openIdConnectUrl: str",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "OpenIdConnect",
    "loc": 399,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:Components:chunk1",
    "text": "class Components(BaseModelWithConfig):\n    schemas: Optional[Dict[str, Union[Schema, Reference]]] = None\n    responses: Optional[Dict[str, Union[Response, Reference]]] = None\n    parameters: Optional[Dict[str, Union[Parameter, Reference]]] = None\n    examples: Optional[Dict[str, Union[Example, Reference]]] = None\n    requestBodies: Optional[Dict[str, Union[RequestBody, Reference]]] = None\n    headers: Optional[Dict[str, Union[Header, Reference]]] = None\n    securitySchemes: Optional[Dict[str, Union[SecurityScheme, Reference]]] = None\n    links: Optional[Dict[str, Union[Link, Reference]]] = None\n    # Using Any for Specification Extensions\n    callbacks: Optional[Dict[str, Union[Dict[str, PathItem], Reference, Any]]] = None\n    pathItems: Optional[Dict[str, Union[PathItem, Reference]]] = None",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "Components",
    "loc": 409,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:Tag:chunk1",
    "text": "class Tag(BaseModelWithConfig):\n    name: str\n    description: Optional[str] = None\n    externalDocs: Optional[ExternalDocumentation] = None",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "Tag",
    "loc": 423,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\models.py:class:OpenAPI:chunk1",
    "text": "class OpenAPI(BaseModelWithConfig):\n    openapi: str\n    info: Info\n    jsonSchemaDialect: Optional[str] = None\n    servers: Optional[List[Server]] = None\n    # Using Any for Specification Extensions\n    paths: Optional[Dict[str, Union[PathItem, Any]]] = None\n    webhooks: Optional[Dict[str, Union[PathItem, Reference]]] = None\n    components: Optional[Components] = None\n    security: Optional[List[Dict[str, List[str]]]] = None\n    tags: Optional[List[Tag]] = None\n    externalDocs: Optional[ExternalDocumentation] = None",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\models.py",
    "type": "class",
    "name": "OpenAPI",
    "loc": 429,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\utils.py:function:get_openapi_security_definitions:chunk1",
    "text": "def get_openapi_security_definitions(\n    flat_dependant: Dependant,\n) -> Tuple[Dict[str, Any], List[Dict[str, Any]]]:\n    security_definitions = {}\n    operation_security = []\n    for security_requirement in flat_dependant.security_requirements:\n        security_definition = jsonable_encoder(\n            security_requirement.security_scheme.model,\n            by_alias=True,\n            exclude_none=True,\n        )\n        security_name = security_requirement.security_scheme.scheme_name\n        security_definitions[security_name] = security_definition\n        operation_security.append({security_name: security_requirement.scopes})\n    return security_definitions, operation_security",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\utils.py",
    "type": "function",
    "name": "get_openapi_security_definitions",
    "loc": 77,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\utils.py:function:_get_openapi_operation_parameters:chunk1",
    "text": "def _get_openapi_operation_parameters(\n    *,\n    dependant: Dependant,\n    schema_generator: GenerateJsonSchema,\n    model_name_map: ModelNameMap,\n    field_mapping: Dict[\n        Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n    ],\n    separate_input_output_schemas: bool = True,\n) -> List[Dict[str, Any]]:\n    parameters = []\n    flat_dependant = get_flat_dependant(dependant, skip_repeats=True)\n    path_params = _get_flat_fields_from_params(flat_dependant.path_params)\n    query_params = _get_flat_fields_from_params(flat_dependant.query_params)\n    header_params = _get_flat_fields_from_params(flat_dependant.header_params)\n    cookie_params = _get_flat_fields_from_params(flat_dependant.cookie_params)\n    parameter_groups = [\n        (ParamTypes.path, path_params),\n        (ParamTypes.query, query_params),\n        (ParamTypes.header, header_params),\n        (ParamTypes.cookie, cookie_params),\n    ]\n    for param_type, param_group in parameter_groups:\n        for param in param_group:\n            field_info = param.field_info\n            # field_info = cast(Param, field_info)\n            if not getattr(field_info, \"include_in_schema\", True):\n                continue\n            param_schema = get_schema_from_model_field(\n                field=param,\n                schema_generator=schema_generator,\n                model_name_map=model_name_map,\n                field_mapping=field_mapping,\n                separate_input_output_schemas=separate_input_output_schemas,\n            )\n            parameter = {\n                \"name\": param.alias,\n                \"in\": param_type.value,\n                \"required\": param.required,\n                \"schema\": param_schema,\n            }\n            if field_info.description:\n                parameter[\"description\"] = field_info.description\n            openapi_examples = getattr(field_info, \"openapi_examples\", None)\n            example = getattr(field_info, \"example\", None)\n            if openapi_examples:\n                parameter[\"examples\"] = jsonable_encoder(openapi_examples)\n            elif example != Undefined:\n                parameter[\"example\"] = jsonable_encoder(example)\n            if getattr(field_info, \"deprecated\", None):\n                parameter[\"deprecated\"] = True\n            parameters.append(parameter)\n    return parameters",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\utils.py",
    "type": "function",
    "name": "_get_openapi_operation_parameters",
    "loc": 94,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\utils.py:function:get_openapi_operation_request_body:chunk1",
    "text": "def get_openapi_operation_request_body(\n    *,\n    body_field: Optional[ModelField],\n    schema_generator: GenerateJsonSchema,\n    model_name_map: ModelNameMap,\n    field_mapping: Dict[\n        Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n    ],\n    separate_input_output_schemas: bool = True,\n) -> Optional[Dict[str, Any]]:\n    if not body_field:\n        return None\n    assert isinstance(body_field, ModelField)\n    body_schema = get_schema_from_model_field(\n        field=body_field,\n        schema_generator=schema_generator,\n        model_name_map=model_name_map,\n        field_mapping=field_mapping,\n        separate_input_output_schemas=separate_input_output_schemas,\n    )\n    field_info = cast(Body, body_field.field_info)\n    request_media_type = field_info.media_type\n    required = body_field.required\n    request_body_oai: Dict[str, Any] = {}\n    if required:\n        request_body_oai[\"required\"] = required\n    request_media_content: Dict[str, Any] = {\"schema\": body_schema}\n    if field_info.openapi_examples:\n        request_media_content[\"examples\"] = jsonable_encoder(\n            field_info.openapi_examples\n        )\n    elif field_info.example != Undefined:\n        request_media_content[\"example\"] = jsonable_encoder(field_info.example)\n    request_body_oai[\"content\"] = {request_media_type: request_media_content}\n    return request_body_oai",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\utils.py",
    "type": "function",
    "name": "get_openapi_operation_request_body",
    "loc": 149,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\utils.py:function:generate_operation_id:chunk1",
    "text": "def generate_operation_id(\n    *, route: routing.APIRoute, method: str\n) -> str:  # pragma: nocover\n    warnings.warn(\n        \"fastapi.openapi.utils.generate_operation_id() was deprecated, \"\n        \"it is not used internally, and will be removed soon\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    if route.operation_id:\n        return route.operation_id\n    path: str = route.path_format\n    return generate_operation_id_for_path(name=route.name, path=path, method=method)",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\utils.py",
    "type": "function",
    "name": "generate_operation_id",
    "loc": 186,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\utils.py:function:generate_operation_summary:chunk1",
    "text": "def generate_operation_summary(*, route: routing.APIRoute, method: str) -> str:\n    if route.summary:\n        return route.summary\n    return route.name.replace(\"_\", \" \").title()",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\utils.py",
    "type": "function",
    "name": "generate_operation_summary",
    "loc": 201,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\utils.py:function:get_openapi_operation_metadata:chunk1",
    "text": "def get_openapi_operation_metadata(\n    *, route: routing.APIRoute, method: str, operation_ids: Set[str]\n) -> Dict[str, Any]:\n    operation: Dict[str, Any] = {}\n    if route.tags:\n        operation[\"tags\"] = route.tags\n    operation[\"summary\"] = generate_operation_summary(route=route, method=method)\n    if route.description:\n        operation[\"description\"] = route.description\n    operation_id = route.operation_id or route.unique_id\n    if operation_id in operation_ids:\n        message = (\n            f\"Duplicate Operation ID {operation_id} for function \"\n            + f\"{route.endpoint.__name__}\"\n        )\n        file_name = getattr(route.endpoint, \"__globals__\", {}).get(\"__file__\")\n        if file_name:\n            message += f\" at {file_name}\"\n        warnings.warn(message, stacklevel=1)\n    operation_ids.add(operation_id)\n    operation[\"operationId\"] = operation_id\n    if route.deprecated:\n        operation[\"deprecated\"] = route.deprecated\n    return operation",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\utils.py",
    "type": "function",
    "name": "get_openapi_operation_metadata",
    "loc": 207,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\utils.py:function:get_openapi_path:chunk1",
    "text": "def get_openapi_path(\n    *,\n    route: routing.APIRoute,\n    operation_ids: Set[str],\n    schema_generator: GenerateJsonSchema,\n    model_name_map: ModelNameMap,\n    field_mapping: Dict[\n        Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n    ],\n    separate_input_output_schemas: bool = True,\n) -> Tuple[Dict[str, Any], Dict[str, Any], Dict[str, Any]]:\n    path = {}\n    security_schemes: Dict[str, Any] = {}\n    definitions: Dict[str, Any] = {}\n    assert route.methods is not None, \"Methods must be a list\"\n    if isinstance(route.response_class, DefaultPlaceholder):\n        current_response_class: Type[Response] = route.response_class.value\n    else:\n        current_response_class = route.response_class\n    assert current_response_class, \"A response class is needed to generate OpenAPI\"\n    route_response_media_type: Optional[str] = current_response_class.media_type\n    if route.include_in_schema:\n        for method in route.methods:\n            operation = get_openapi_operation_metadata(\n                route=route, method=method, operation_ids=operation_ids\n            )\n            parameters: List[Dict[str, Any]] = []\n            flat_dependant = get_flat_dependant(route.dependant, skip_repeats=True)\n            security_definitions, operation_security = get_openapi_security_definitions(\n                flat_dependant=flat_dependant\n            )\n            if operation_security:\n                operation.setdefault(\"security\", []).extend(operation_security)\n            if security_definitions:\n                security_schemes.update(security_definitions)\n            operation_parameters = _get_openapi_operation_parameters(\n                dependant=route.dependant,\n                schema_generator=schema_generator,\n                model_name_map=model_name_map,\n                field_mapping=field_mapping,\n                separate_input_output_schemas=separate_input_output_schemas,\n            )\n            parameters.extend(operation_parameters)\n            if parameters:\n                all_parameters = {\n                    (param[\"in\"], param[\"name\"]): param for param in parameters\n                }\n                required_parameters = {\n                    (param[\"in\"], param[\"name\"]): param\n                    for param in parameters\n                    if param.get(\"required\")\n                }\n                # Make sure required definitions of the same parameter take precedence\n                # over non-required definitions\n                all_parameters.update(required_parameters)\n                operation[\"parameters\"] = list(all_parameters.values())\n            if method in METHODS_WITH_BODY:\n                request_body_oai = get_openapi_operation_request_body(\n                    body_field=route.body_field,\n                    schema_generator=schema_generator,\n                    model_name_map=model_name_map,\n                    field_mapping=field_mapping,\n                    separate_input_output_schemas=separate_input_output_schemas,\n                )\n                if request_body_oai:\n                    operation[\"requestBody\"] = request_body_oai\n            if route.callbacks:\n                callbacks = {}\n                for callback in route.callbacks:\n                    if isinstance(callback, routing.APIRoute):\n                        (\n                            cb_path,\n                            cb_security_schemes,\n                            cb_definitions,\n                        ) = get_openapi_path(\n                            route=callback,\n                            operation_ids=operation_ids,\n                            schema_generator=schema_generator,\n                            model_name_map=model_name_map,\n                            field_mapping=field_mapping,\n                            separate_input_output_schemas=separate_input_output_schemas,\n                        )\n                        callbacks[callback.name] = {callback.path: cb_path}\n                operation[\"callbacks\"] = callbacks\n            if route.status_code is not None:\n                status_code = str(route.status_code)\n            else:\n                # It would probably make more sense for all response classes to have an\n                # explicit default status_code, and to extract it from them, instead of\n                # doing this inspection tricks, that would probably be in the future\n                # TODO: probably make status_code a default class attribute for all\n                # responses in Starlette\n                response_signature = inspect.signature(current_response_class.__init__)\n                status_code_param = response_signature.parameters.get(\"status_code\")\n                if status_code_param is not None:\n                    if isinstance(status_code_param.default, int):\n                        status_code = str(status_code_param.default)\n            operation.setdefault(\"responses\", {}).setdefault(status_code, {})[\n                \"description\"\n            ] = route.response_description\n            if route_response_media_type and is_body_allowed_for_status_code(\n                route.status_code\n            ):\n                response_schema = {\"type\": \"string\"}\n                if lenient_issubclass(current_response_class, JSONResponse):\n                    if route.response_field:\n                        response_schema = get_schema_from_model_field(\n                            field=route.response_field,\n                            schema_generator=schema_generator,\n                            model_name_map=model_name_map,\n                            field_mapping=field_mapping,\n                            separate_input_output_schemas=separate_input_output_schemas,\n                        )\n                    else:\n                        response_schema = {}\n                operation.setdefault(\"responses\", {}).setdefault(\n                    status_code, {}\n                ).setdefault(\"content\", {}).setdefault(route_response_media_type, {})[\n                    \"schema\"\n                ] = response_schema\n            if route.responses:\n                operation_responses = operation.setdefault(\"responses\", {})\n                for (\n                    additional_status_code,\n                    additional_response,\n                ) in route.responses.items():\n                    process_response = additional_response.copy()\n                    process_response.pop(\"model\", None)\n                    status_code_key = str(additional_status_code).upper()\n                    if status_code_key == \"DEFAULT\":\n                        status_code_key = \"default\"\n                    openapi_response = operation_responses.setdefault(\n                        status_code_key, {}\n                    )\n                    assert isinstance(\n                        process_response, dict\n                    ), \"An additional response must be a dict\"\n                    field = route.response_fields.get(additional_status_code)\n                    additional_field_schema: Optional[Dict[str, Any]] = None\n                    if field:\n                        additional_field_schema = get_schema_from_model_field(\n                            field=field,\n                            schema_generator=schema_generator,\n                            model_name_map=model_name_map,\n                            field_mapping=field_mapping,\n                            separate_input_output_schemas=separate_input_output_schemas,\n                        )\n                        media_type = route_response_media_type or \"application/json\"\n                        additional_schema = (\n                            process_response.setdefault(\"content\", {})\n                            .setdefault(media_type, {})\n                            .setdefault(\"schema\", {})\n                        )\n                        deep_dict_update(additional_schema, additional_field_schema)\n                    status_text: Optional[str] = status_code_ranges.get(\n                        str(additional_status_code).upper()\n                    ) or http.client.responses.get(int(additional_status_code))\n                    description = (\n                        process_response.get(\"description\")\n                        or openapi_response.get(\"description\")\n                        or status_text\n                        or \"Additional Response\"\n                    )\n                    deep_dict_update(openapi_response, process_response)\n                    openapi_response[\"description\"] = description\n            http422 = str(HTTP_422_UNPROCESSABLE_ENTITY)\n            all_route_params = get_flat_params(route.dependant)\n            if (all_route_params or route.body_field) and not any(\n                status in operation[\"responses\"]\n                for status in [http422, \"4XX\", \"default\"]\n            ):\n                operation[\"responses\"][http422] = {\n                    \"description\": \"Validation Error\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\"$ref\": REF_PREFIX + \"HTTPValidationError\"}\n                        }\n                    },\n                }\n                if \"ValidationError\" not in definitions:\n                    definitions.update(\n                        {\n                            \"ValidationError\": validation_error_definition,\n                            \"HTTPValidationError\": validation_error_response_definition,\n                        }\n                    )\n            if route.openapi_extra:\n                deep_dict_update(operation, route.openapi_extra)\n            path[method.lower()] = operation\n    return path, security_schemes, definitions",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\utils.py",
    "type": "function",
    "name": "get_openapi_path",
    "loc": 233,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\utils.py:function:get_fields_from_routes:chunk1",
    "text": "def get_fields_from_routes(\n    routes: Sequence[BaseRoute],\n) -> List[ModelField]:\n    body_fields_from_routes: List[ModelField] = []\n    responses_from_routes: List[ModelField] = []\n    request_fields_from_routes: List[ModelField] = []\n    callback_flat_models: List[ModelField] = []\n    for route in routes:\n        if getattr(route, \"include_in_schema\", None) and isinstance(\n            route, routing.APIRoute\n        ):\n            if route.body_field:\n                assert isinstance(\n                    route.body_field, ModelField\n                ), \"A request body must be a Pydantic Field\"\n                body_fields_from_routes.append(route.body_field)\n            if route.response_field:\n                responses_from_routes.append(route.response_field)\n            if route.response_fields:\n                responses_from_routes.extend(route.response_fields.values())\n            if route.callbacks:\n                callback_flat_models.extend(get_fields_from_routes(route.callbacks))\n            params = get_flat_params(route.dependant)\n            request_fields_from_routes.extend(params)\n\n    flat_models = callback_flat_models + list(\n        body_fields_from_routes + responses_from_routes + request_fields_from_routes\n    )\n    return flat_models",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\utils.py",
    "type": "function",
    "name": "get_fields_from_routes",
    "loc": 425,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\openapi\\utils.py:function:get_openapi:chunk1",
    "text": "def get_openapi(\n    *,\n    title: str,\n    version: str,\n    openapi_version: str = \"3.1.0\",\n    summary: Optional[str] = None,\n    description: Optional[str] = None,\n    routes: Sequence[BaseRoute],\n    webhooks: Optional[Sequence[BaseRoute]] = None,\n    tags: Optional[List[Dict[str, Any]]] = None,\n    servers: Optional[List[Dict[str, Union[str, Any]]]] = None,\n    terms_of_service: Optional[str] = None,\n    contact: Optional[Dict[str, Union[str, Any]]] = None,\n    license_info: Optional[Dict[str, Union[str, Any]]] = None,\n    separate_input_output_schemas: bool = True,\n) -> Dict[str, Any]:\n    info: Dict[str, Any] = {\"title\": title, \"version\": version}\n    if summary:\n        info[\"summary\"] = summary\n    if description:\n        info[\"description\"] = description\n    if terms_of_service:\n        info[\"termsOfService\"] = terms_of_service\n    if contact:\n        info[\"contact\"] = contact\n    if license_info:\n        info[\"license\"] = license_info\n    output: Dict[str, Any] = {\"openapi\": openapi_version, \"info\": info}\n    if servers:\n        output[\"servers\"] = servers\n    components: Dict[str, Dict[str, Any]] = {}\n    paths: Dict[str, Dict[str, Any]] = {}\n    webhook_paths: Dict[str, Dict[str, Any]] = {}\n    operation_ids: Set[str] = set()\n    all_fields = get_fields_from_routes(list(routes or []) + list(webhooks or []))\n    model_name_map = get_compat_model_name_map(all_fields)\n    schema_generator = GenerateJsonSchema(ref_template=REF_TEMPLATE)\n    field_mapping, definitions = get_definitions(\n        fields=all_fields,\n        schema_generator=schema_generator,\n        model_name_map=model_name_map,\n        separate_input_output_schemas=separate_input_output_schemas,\n    )\n    for route in routes or []:\n        if isinstance(route, routing.APIRoute):\n            result = get_openapi_path(\n                route=route,\n                operation_ids=operation_ids,\n                schema_generator=schema_generator,\n                model_name_map=model_name_map,\n                field_mapping=field_mapping,\n                separate_input_output_schemas=separate_input_output_schemas,\n            )\n            if result:\n                path, security_schemes, path_definitions = result\n                if path:\n                    paths.setdefault(route.path_format, {}).update(path)\n                if security_schemes:\n                    components.setdefault(\"securitySchemes\", {}).update(\n                        security_schemes\n                    )\n                if path_definitions:\n                    definitions.update(path_definitions)\n    for webhook in webhooks or []:\n        if isinstance(webhook, routing.APIRoute):\n            result = get_openapi_path(\n                route=webhook,\n                operation_ids=operation_ids,\n                schema_generator=schema_generator,\n                model_name_map=model_name_map,\n                field_mapping=field_mapping,\n                separate_input_output_schemas=separate_input_output_schemas,\n            )\n            if result:\n                path, security_schemes, path_definitions = result\n                if path:\n                    webhook_paths.setdefault(webhook.path_format, {}).update(path)\n                if security_schemes:\n                    components.setdefault(\"securitySchemes\", {}).update(\n                        security_schemes\n                    )\n                if path_definitions:\n                    definitions.update(path_definitions)\n    if definitions:\n        components[\"schemas\"] = {k: definitions[k] for k in sorted(definitions)}\n    if components:\n        output[\"components\"] = components\n    output[\"paths\"] = paths\n    if webhook_paths:\n        output[\"webhooks\"] = webhook_paths\n    if tags:\n        output[\"tags\"] = tags\n    return jsonable_encoder(OpenAPI(**output), by_alias=True, exclude_none=True)  # type: ignore",
    "repo": "fastapi",
    "path": "fastapi\\openapi\\utils.py",
    "type": "function",
    "name": "get_openapi",
    "loc": 456,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\security\\api_key.py:class:APIKeyBase:chunk1",
    "text": "class APIKeyBase(SecurityBase):\n    @staticmethod\n    def check_api_key(api_key: Optional[str], auto_error: bool) -> Optional[str]:\n        if not api_key:\n            if auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            return None\n        return api_key",
    "repo": "fastapi",
    "path": "fastapi\\security\\api_key.py",
    "type": "class",
    "name": "APIKeyBase",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\security\\api_key.py:class:APIKeyQuery:chunk1",
    "text": "class APIKeyQuery(APIKeyBase):\n    \"\"\"\n    API key authentication using a query parameter.\n\n    This defines the name of the query parameter that should be provided in the request\n    with the API key and integrates that into the OpenAPI documentation. It extracts\n    the key value sent in the query parameter automatically and provides it as the\n    dependency result. But it doesn't define how to send that API key to the client.\n\n    ## Usage\n\n    Create an instance object and use that object as the dependency in `Depends()`.\n\n    The dependency result will be a string containing the key value.\n\n    ## Example\n\n    ```python\n    from fastapi import Depends, FastAPI\n    from fastapi.security import APIKeyQuery\n\n    app = FastAPI()\n\n    query_scheme = APIKeyQuery(name=\"api_key\")\n\n\n    @app.get(\"/items/\")\n    async def read_items(api_key: str = Depends(query_scheme)):\n        return {\"api_key\": api_key}\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        name: Annotated[\n            str,\n            Doc(\"Query parameter name.\"),\n        ],\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if the query parameter is not provided, `APIKeyQuery` will\n                automatically cancel the request and send the client an error.\n\n                If `auto_error` is set to `False`, when the query parameter is not\n                available, instead of erroring out, the dependency result will be\n                `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, in a query\n                parameter or in an HTTP Bearer token).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model: APIKey = APIKey(\n            **{\"in\": APIKeyIn.query},  # type: ignore[arg-type]\n            name=name,\n            description=description,\n        )\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error\n\n    async def __call__(self, request: Request) -> Optional[str]:\n        api_key = request.query_params.get(self.model.name)\n        return self.check_api_key(api_key, self.auto_error)",
    "repo": "fastapi",
    "path": "fastapi\\security\\api_key.py",
    "type": "class",
    "name": "APIKeyQuery",
    "loc": 23,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\security\\api_key.py:class:APIKeyHeader:chunk1",
    "text": "class APIKeyHeader(APIKeyBase):\n    \"\"\"\n    API key authentication using a header.\n\n    This defines the name of the header that should be provided in the request with\n    the API key and integrates that into the OpenAPI documentation. It extracts\n    the key value sent in the header automatically and provides it as the dependency\n    result. But it doesn't define how to send that key to the client.\n\n    ## Usage\n\n    Create an instance object and use that object as the dependency in `Depends()`.\n\n    The dependency result will be a string containing the key value.\n\n    ## Example\n\n    ```python\n    from fastapi import Depends, FastAPI\n    from fastapi.security import APIKeyHeader\n\n    app = FastAPI()\n\n    header_scheme = APIKeyHeader(name=\"x-key\")\n\n\n    @app.get(\"/items/\")\n    async def read_items(key: str = Depends(header_scheme)):\n        return {\"key\": key}\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        name: Annotated[str, Doc(\"Header name.\")],\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if the header is not provided, `APIKeyHeader` will\n                automatically cancel the request and send the client an error.\n\n                If `auto_error` is set to `False`, when the header is not available,\n                instead of erroring out, the dependency result will be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, in a header or\n                in an HTTP Bearer token).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model: APIKey = APIKey(\n            **{\"in\": APIKeyIn.header},  # type: ignore[arg-type]\n            name=name,\n            description=description,\n        )\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error\n\n    async def __call__(self, request: Request) -> Optional[str]:\n        api_key = request.headers.get(self.model.name)\n        return self.check_api_key(api_key, self.auto_error)",
    "repo": "fastapi",
    "path": "fastapi\\security\\api_key.py",
    "type": "class",
    "name": "APIKeyHeader",
    "loc": 115,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\security\\api_key.py:class:APIKeyCookie:chunk1",
    "text": "class APIKeyCookie(APIKeyBase):\n    \"\"\"\n    API key authentication using a cookie.\n\n    This defines the name of the cookie that should be provided in the request with\n    the API key and integrates that into the OpenAPI documentation. It extracts\n    the key value sent in the cookie automatically and provides it as the dependency\n    result. But it doesn't define how to set that cookie.\n\n    ## Usage\n\n    Create an instance object and use that object as the dependency in `Depends()`.\n\n    The dependency result will be a string containing the key value.\n\n    ## Example\n\n    ```python\n    from fastapi import Depends, FastAPI\n    from fastapi.security import APIKeyCookie\n\n    app = FastAPI()\n\n    cookie_scheme = APIKeyCookie(name=\"session\")\n\n\n    @app.get(\"/items/\")\n    async def read_items(session: str = Depends(cookie_scheme)):\n        return {\"session\": session}\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        name: Annotated[str, Doc(\"Cookie name.\")],\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if the cookie is not provided, `APIKeyCookie` will\n                automatically cancel the request and send the client an error.\n\n                If `auto_error` is set to `False`, when the cookie is not available,\n                instead of erroring out, the dependency result will be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, in a cookie or\n                in an HTTP Bearer token).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model: APIKey = APIKey(\n            **{\"in\": APIKeyIn.cookie},  # type: ignore[arg-type]\n            name=name,\n            description=description,\n        )\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error\n\n    async def __call__(self, request: Request) -> Optional[str]:\n        api_key = request.cookies.get(self.model.name)\n        return self.check_api_key(api_key, self.auto_error)",
    "repo": "fastapi",
    "path": "fastapi\\security\\api_key.py",
    "type": "class",
    "name": "APIKeyCookie",
    "loc": 203,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\security\\base.py:class:SecurityBase:chunk1",
    "text": "class SecurityBase:\n    model: SecurityBaseModel\n    scheme_name: str",
    "repo": "fastapi",
    "path": "fastapi\\security\\base.py",
    "type": "class",
    "name": "SecurityBase",
    "loc": 4,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\security\\http.py:class:HTTPBasicCredentials:chunk1",
    "text": "class HTTPBasicCredentials(BaseModel):\n    \"\"\"\n    The HTTP Basic credentials given as the result of using `HTTPBasic` in a\n    dependency.\n\n    Read more about it in the\n    [FastAPI docs for HTTP Basic Auth](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/).\n    \"\"\"\n\n    username: Annotated[str, Doc(\"The HTTP Basic username.\")]\n    password: Annotated[str, Doc(\"The HTTP Basic password.\")]",
    "repo": "fastapi",
    "path": "fastapi\\security\\http.py",
    "type": "class",
    "name": "HTTPBasicCredentials",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\security\\http.py:class:HTTPAuthorizationCredentials:chunk1",
    "text": "class HTTPAuthorizationCredentials(BaseModel):\n    \"\"\"\n    The HTTP authorization credentials in the result of using `HTTPBearer` or\n    `HTTPDigest` in a dependency.\n\n    The HTTP authorization header value is split by the first space.\n\n    The first part is the `scheme`, the second part is the `credentials`.\n\n    For example, in an HTTP Bearer token scheme, the client will send a header\n    like:\n\n    ```\n    Authorization: Bearer deadbeef12346\n    ```\n\n    In this case:\n\n    * `scheme` will have the value `\"Bearer\"`\n    * `credentials` will have the value `\"deadbeef12346\"`\n    \"\"\"\n\n    scheme: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTTP authorization scheme extracted from the header value.\n            \"\"\"\n        ),\n    ]\n    credentials: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTTP authorization credentials extracted from the header value.\n            \"\"\"\n        ),\n    ]",
    "repo": "fastapi",
    "path": "fastapi\\security\\http.py",
    "type": "class",
    "name": "HTTPAuthorizationCredentials",
    "loc": 29,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\security\\http.py:class:HTTPBase:chunk1",
    "text": "class HTTPBase(SecurityBase):\n    def __init__(\n        self,\n        *,\n        scheme: str,\n        scheme_name: Optional[str] = None,\n        description: Optional[str] = None,\n        auto_error: bool = True,\n    ):\n        self.model = HTTPBaseModel(scheme=scheme, description=description)\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error\n\n    async def __call__(\n        self, request: Request\n    ) -> Optional[HTTPAuthorizationCredentials]:\n        authorization = request.headers.get(\"Authorization\")\n        scheme, credentials = get_authorization_scheme_param(authorization)\n        if not (authorization and scheme and credentials):\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            else:\n                return None\n        return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)",
    "repo": "fastapi",
    "path": "fastapi\\security\\http.py",
    "type": "class",
    "name": "HTTPBase",
    "loc": 69,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\security\\http.py:class:HTTPBasic:chunk1",
    "text": "class HTTPBasic(HTTPBase):\n    \"\"\"\n    HTTP Basic authentication.\n\n    ## Usage\n\n    Create an instance object and use that object as the dependency in `Depends()`.\n\n    The dependency result will be an `HTTPBasicCredentials` object containing the\n    `username` and the `password`.\n\n    Read more about it in the\n    [FastAPI docs for HTTP Basic Auth](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/).\n\n    ## Example\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import Depends, FastAPI\n    from fastapi.security import HTTPBasic, HTTPBasicCredentials\n\n    app = FastAPI()\n\n    security = HTTPBasic()\n\n\n    @app.get(\"/users/me\")\n    def read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n        return {\"username\": credentials.username, \"password\": credentials.password}\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        realm: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                HTTP Basic authentication realm.\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if the HTTP Basic authentication is not provided (a\n                header), `HTTPBasic` will automatically cancel the request and send the\n                client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Basic authentication\n                is not available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, in HTTP Basic\n                authentication or in an HTTP Bearer token).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model = HTTPBaseModel(scheme=\"basic\", description=description)\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.realm = realm\n        self.auto_error = auto_error\n\n    async def __call__(  # type: ignore\n        self, request: Request\n    ) -> Optional[HTTPBasicCredentials]:\n        authorization = request.headers.get(\"Authorization\")\n        scheme, param = get_authorization_scheme_param(authorization)\n        if self.realm:\n            unauthorized_headers = {\"WWW-Authenticate\": f'Basic realm=\"{self.realm}\"'}\n        else:\n            unauthorized_headers = {\"WWW-Authenticate\": \"Basic\"}\n        if not authorization or scheme.lower() != \"basic\":\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_401_UNAUTHORIZED,\n                    detail=\"Not authenticated\",\n                    headers=unauthorized_headers,\n                )\n            else:\n                return None\n        invalid_user_credentials_exc = HTTPException(\n            status_code=HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers=unauthorized_headers,\n        )\n        try:\n            data = b64decode(param).decode(\"ascii\")\n        except (ValueError, UnicodeDecodeError, binascii.Error):\n            raise invalid_user_credentials_exc  # noqa: B904\n        username, separator, password = data.partition(\":\")\n        if not separator:\n            raise invalid_user_credentials_exc\n        return HTTPBasicCredentials(username=username, password=password)",
    "repo": "fastapi",
    "path": "fastapi\\security\\http.py",
    "type": "class",
    "name": "HTTPBasic",
    "loc": 97,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\security\\http.py:class:HTTPBearer:chunk1",
    "text": "class HTTPBearer(HTTPBase):\n    \"\"\"\n    HTTP Bearer token authentication.\n\n    ## Usage\n\n    Create an instance object and use that object as the dependency in `Depends()`.\n\n    The dependency result will be an `HTTPAuthorizationCredentials` object containing\n    the `scheme` and the `credentials`.\n\n    ## Example\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import Depends, FastAPI\n    from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer\n\n    app = FastAPI()\n\n    security = HTTPBearer()\n\n\n    @app.get(\"/users/me\")\n    def read_current_user(\n        credentials: Annotated[HTTPAuthorizationCredentials, Depends(security)]\n    ):\n        return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        bearerFormat: Annotated[Optional[str], Doc(\"Bearer token format.\")] = None,\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if the HTTP Bearer token is not provided (in an\n                `Authorization` header), `HTTPBearer` will automatically cancel the\n                request and send the client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Bearer token\n                is not available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, in an HTTP\n                Bearer token or in a cookie).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model = HTTPBearerModel(bearerFormat=bearerFormat, description=description)\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error\n\n    async def __call__(\n        self, request: Request\n    ) -> Optional[HTTPAuthorizationCredentials]:\n        authorization = request.headers.get(\"Authorization\")\n        scheme, credentials = get_authorization_scheme_param(authorization)\n        if not (authorization and scheme and credentials):\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            else:\n                return None\n        if scheme.lower() != \"bearer\":\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN,\n                    detail=\"Invalid authentication credentials\",\n                )\n            else:\n                return None\n        return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)",
    "repo": "fastapi",
    "path": "fastapi\\security\\http.py",
    "type": "class",
    "name": "HTTPBearer",
    "loc": 220,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\security\\http.py:class:HTTPDigest:chunk1",
    "text": "class HTTPDigest(HTTPBase):\n    \"\"\"\n    HTTP Digest authentication.\n\n    ## Usage\n\n    Create an instance object and use that object as the dependency in `Depends()`.\n\n    The dependency result will be an `HTTPAuthorizationCredentials` object containing\n    the `scheme` and the `credentials`.\n\n    ## Example\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import Depends, FastAPI\n    from fastapi.security import HTTPAuthorizationCredentials, HTTPDigest\n\n    app = FastAPI()\n\n    security = HTTPDigest()\n\n\n    @app.get(\"/users/me\")\n    def read_current_user(\n        credentials: Annotated[HTTPAuthorizationCredentials, Depends(security)]\n    ):\n        return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if the HTTP Digest is not provided, `HTTPDigest` will\n                automatically cancel the request and send the client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Digest is not\n                available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, in HTTP\n                Digest or in a cookie).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model = HTTPBaseModel(scheme=\"digest\", description=description)\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error\n\n    async def __call__(\n        self, request: Request\n    ) -> Optional[HTTPAuthorizationCredentials]:\n        authorization = request.headers.get(\"Authorization\")\n        scheme, credentials = get_authorization_scheme_param(authorization)\n        if not (authorization and scheme and credentials):\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            else:\n                return None\n        if scheme.lower() != \"digest\":\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN,\n                    detail=\"Invalid authentication credentials\",\n                )\n            else:\n                return None\n        return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)",
    "repo": "fastapi",
    "path": "fastapi\\security\\http.py",
    "type": "class",
    "name": "HTTPDigest",
    "loc": 324,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\security\\oauth2.py:class:OAuth2PasswordRequestForm:chunk1",
    "text": "class OAuth2PasswordRequestForm:\n    \"\"\"\n    This is a dependency class to collect the `username` and `password` as form data\n    for an OAuth2 password flow.\n\n    The OAuth2 specification dictates that for a password flow the data should be\n    collected using form data (instead of JSON) and that it should have the specific\n    fields `username` and `password`.\n\n    All the initialization parameters are extracted from the request.\n\n    Read more about it in the\n    [FastAPI docs for Simple OAuth2 with Password and Bearer](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/).\n\n    ## Example\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import Depends, FastAPI\n    from fastapi.security import OAuth2PasswordRequestForm\n\n    app = FastAPI()\n\n\n    @app.post(\"/login\")\n    def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n        data = {}\n        data[\"scopes\"] = []\n        for scope in form_data.scopes:\n            data[\"scopes\"].append(scope)\n        if form_data.client_id:\n            data[\"client_id\"] = form_data.client_id\n        if form_data.client_secret:\n            data[\"client_secret\"] = form_data.client_secret\n        return data\n    ```\n\n    Note that for OAuth2 the scope `items:read` is a single scope in an opaque string.\n    You could have custom internal logic to separate it by colon characters (`:`) or\n    similar, and get the two parts `items` and `read`. Many applications do that to\n    group and organize permissions, you could do it as well in your application, just\n    know that that it is application specific, it's not part of the specification.\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        grant_type: Annotated[\n            Union[str, None],\n            Form(pattern=\"^password$\"),\n            Doc(\n                \"\"\"\n                The OAuth2 spec says it is required and MUST be the fixed string\n                \"password\". Nevertheless, this dependency class is permissive and\n                allows not passing it. If you want to enforce it, use instead the\n                `OAuth2PasswordRequestFormStrict` dependency.\n                \"\"\"\n            ),\n        ] = None,\n        username: Annotated[\n            str,\n            Form(),\n            Doc(\n                \"\"\"\n                `username` string. The OAuth2 spec requires the exact field name\n                `username`.\n                \"\"\"\n            ),\n        ],\n        password: Annotated[\n            str,\n            Form(),\n            Doc(\n                \"\"\"\n                `password` string. The OAuth2 spec requires the exact field name\n                `password\".\n                \"\"\"\n            ),\n        ],\n        scope: Annotated[\n            str,\n            Form(),\n            Doc(\n                \"\"\"\n                A single string with actually several scopes separated by spaces. Each\n                scope is also a string.\n\n                For example, a single string with:\n\n                ```python\n                \"items:read items:write users:read profile openid\"\n                ````\n\n                would represent the scopes:\n\n                * `items:read`\n                * `items:write`\n                * `users:read`\n                * `profile`\n                * `openid`\n                \"\"\"\n            ),\n        ] = \"\",\n        client_id: Annotated[\n            Union[str, None],\n            Form(),\n            Doc(\n                \"\"\"\n                If there's a `client_id`, it can be sent as part of the form fields.\n                But the OAuth2 specification recommends sending the `client_id` and\n                `client_secret` (if any) using HTTP Basic auth.\n                \"\"\"\n            ),\n        ] = None,\n        client_secret: Annotated[\n            Union[str, None],\n            Form(),\n            Doc(\n                \"\"\"\n                If there's a `client_password` (and a `client_id`), they can be sent\n                as part of the form fields. But the OAuth2 specification recommends\n                sending the `client_id` and `client_secret` (if any) using HTTP Basic\n                auth.\n                \"\"\"\n            ),\n        ] = None,\n    ):\n        self.grant_type = grant_type\n        self.username = username\n        self.password = password\n        self.scopes = scope.split()\n        self.client_id = client_id\n        self.client_secret = client_secret",
    "repo": "fastapi",
    "path": "fastapi\\security\\oauth2.py",
    "type": "class",
    "name": "OAuth2PasswordRequestForm",
    "loc": 16,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\security\\oauth2.py:class:OAuth2PasswordRequestFormStrict:chunk1",
    "text": "class OAuth2PasswordRequestFormStrict(OAuth2PasswordRequestForm):\n    \"\"\"\n    This is a dependency class to collect the `username` and `password` as form data\n    for an OAuth2 password flow.\n\n    The OAuth2 specification dictates that for a password flow the data should be\n    collected using form data (instead of JSON) and that it should have the specific\n    fields `username` and `password`.\n\n    All the initialization parameters are extracted from the request.\n\n    The only difference between `OAuth2PasswordRequestFormStrict` and\n    `OAuth2PasswordRequestForm` is that `OAuth2PasswordRequestFormStrict` requires the\n    client to send the form field `grant_type` with the value `\"password\"`, which\n    is required in the OAuth2 specification (it seems that for no particular reason),\n    while for `OAuth2PasswordRequestForm` `grant_type` is optional.\n\n    Read more about it in the\n    [FastAPI docs for Simple OAuth2 with Password and Bearer](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/).\n\n    ## Example\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import Depends, FastAPI\n    from fastapi.security import OAuth2PasswordRequestForm\n\n    app = FastAPI()\n\n\n    @app.post(\"/login\")\n    def login(form_data: Annotated[OAuth2PasswordRequestFormStrict, Depends()]):\n        data = {}\n        data[\"scopes\"] = []\n        for scope in form_data.scopes:\n            data[\"scopes\"].append(scope)\n        if form_data.client_id:\n            data[\"client_id\"] = form_data.client_id\n        if form_data.client_secret:\n            data[\"client_secret\"] = form_data.client_secret\n        return data\n    ```\n\n    Note that for OAuth2 the scope `items:read` is a single scope in an opaque string.\n    You could have custom internal logic to separate it by colon characters (`:`) or\n    similar, and get the two parts `items` and `read`. Many applications do that to\n    group and organize permissions, you could do it as well in your application, just\n    know that that it is application specific, it's not part of the specification.\n\n\n    grant_type: the OAuth2 spec says it is required and MUST be the fixed string \"password\".\n        This dependency is strict about it. If you want to be permissive, use instead the\n        OAuth2PasswordRequestForm dependency class.\n    username: username string. The OAuth2 spec requires the exact field name \"username\".\n    password: password string. The OAuth2 spec requires the exact field name \"password\".\n    scope: Optional string. Several scopes (each one a string) separated by spaces. E.g.\n        \"items:read items:write users:read profile openid\"\n    client_id: optional string. OAuth2 recommends sending the client_id and client_secret (if any)\n        using HTTP Basic auth, as: client_id:client_secret\n    client_secret: optional string. OAuth2 recommends sending the client_id and client_secret (if any)\n        using HTTP Basic auth, as: client_id:client_secret\n    \"\"\"\n\n    def __init__(\n        self,\n        grant_type: Annotated[\n            str,\n            Form(pattern=\"^password$\"),\n            Doc(\n                \"\"\"\n                The OAuth2 spec says it is required and MUST be the fixed string\n                \"password\". This dependency is strict about it. If you want to be\n                permissive, use instead the `OAuth2PasswordRequestForm` dependency\n                class.\n                \"\"\"\n            ),\n        ],\n        username: Annotated[\n            str,\n            Form(),\n            Doc(\n                \"\"\"\n                `username` string. The OAuth2 spec requires the exact field name\n                `username`.\n                \"\"\"\n            ),\n        ],\n        password: Annotated[\n            str,\n            Form(),\n            Doc(\n                \"\"\"\n                `password` string. The OAuth2 spec requires the exact field name\n                `password\".\n                \"\"\"\n            ),\n        ],\n        scope: Annotated[\n            str,\n            Form(),\n            Doc(\n                \"\"\"\n                A single string with actually several scopes separated by spaces. Each\n                scope is also a string.\n\n                For example, a single string with:\n\n                ```python\n                \"items:read items:write users:read profile openid\"\n                ````\n\n                would represent the scopes:\n\n                * `items:read`\n                * `items:write`\n                * `users:read`\n                * `profile`\n                * `openid`\n                \"\"\"\n            ),\n        ] = \"\",\n        client_id: Annotated[\n            Union[str, None],\n            Form(),\n            Doc(\n                \"\"\"\n                If there's a `client_id`, it can be sent as part of the form fields.\n                But the OAuth2 specification recommends sending the `client_id` and\n                `client_secret` (if any) using HTTP Basic auth.\n                \"\"\"\n            ),\n        ] = None,\n        client_secret: Annotated[\n            Union[str, None],\n            Form(),\n            Doc(\n                \"\"\"\n                If there's a `client_password` (and a `client_id`), they can be sent\n                as part of the form fields. But the OAuth2 specification recommends\n                sending the `client_id` and `client_secret` (if any) using HTTP Basic\n                auth.\n                \"\"\"\n            ),\n        ] = None,\n    ):\n        super().__init__(\n            grant_type=grant_type,\n            username=username,\n            password=password,\n            scope=scope,\n            client_id=client_id,\n            client_secret=client_secret,\n        )",
    "repo": "fastapi",
    "path": "fastapi\\security\\oauth2.py",
    "type": "class",
    "name": "OAuth2PasswordRequestFormStrict",
    "loc": 152,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\security\\oauth2.py:class:OAuth2:chunk1",
    "text": "class OAuth2(SecurityBase):\n    \"\"\"\n    This is the base class for OAuth2 authentication, an instance of it would be used\n    as a dependency. All other OAuth2 classes inherit from it and customize it for\n    each OAuth2 flow.\n\n    You normally would not create a new class inheriting from it but use one of the\n    existing subclasses, and maybe compose them if you want to support multiple flows.\n\n    Read more about it in the\n    [FastAPI docs for Security](https://fastapi.tiangolo.com/tutorial/security/).\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        flows: Annotated[\n            Union[OAuthFlowsModel, Dict[str, Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                The dictionary of OAuth2 flows.\n                \"\"\"\n            ),\n        ] = OAuthFlowsModel(),\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if no HTTP Authorization header is provided, required for\n                OAuth2 authentication, it will automatically cancel the request and\n                send the client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Authorization header\n                is not available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, with OAuth2\n                or in a cookie).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model = OAuth2Model(\n            flows=cast(OAuthFlowsModel, flows), description=description\n        )\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error\n\n    async def __call__(self, request: Request) -> Optional[str]:\n        authorization = request.headers.get(\"Authorization\")\n        if not authorization:\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            else:\n                return None\n        return authorization",
    "repo": "fastapi",
    "path": "fastapi\\security\\oauth2.py",
    "type": "class",
    "name": "OAuth2",
    "loc": 308,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\security\\oauth2.py:class:OAuth2PasswordBearer:chunk1",
    "text": "class OAuth2PasswordBearer(OAuth2):\n    \"\"\"\n    OAuth2 flow for authentication using a bearer token obtained with a password.\n    An instance of it would be used as a dependency.\n\n    Read more about it in the\n    [FastAPI docs for Simple OAuth2 with Password and Bearer](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/).\n    \"\"\"\n\n    def __init__(\n        self,\n        tokenUrl: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL to obtain the OAuth2 token. This would be the *path operation*\n                that has `OAuth2PasswordRequestForm` as a dependency.\n                \"\"\"\n            ),\n        ],\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        scopes: Annotated[\n            Optional[Dict[str, str]],\n            Doc(\n                \"\"\"\n                The OAuth2 scopes that would be required by the *path operations* that\n                use this dependency.\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if no HTTP Authorization header is provided, required for\n                OAuth2 authentication, it will automatically cancel the request and\n                send the client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Authorization header\n                is not available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, with OAuth2\n                or in a cookie).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        if not scopes:\n            scopes = {}\n        flows = OAuthFlowsModel(\n            password=cast(Any, {\"tokenUrl\": tokenUrl, \"scopes\": scopes})\n        )\n        super().__init__(\n            flows=flows,\n            scheme_name=scheme_name,\n            description=description,\n            auto_error=auto_error,\n        )\n\n    async def __call__(self, request: Request) -> Optional[str]:\n        authorization = request.headers.get(\"Authorization\")\n        scheme, param = get_authorization_scheme_param(authorization)\n        if not authorization or scheme.lower() != \"bearer\":\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_401_UNAUTHORIZED,\n                    detail=\"Not authenticated\",\n                    headers={\"WWW-Authenticate\": \"Bearer\"},\n                )\n            else:\n                return None\n        return param",
    "repo": "fastapi",
    "path": "fastapi\\security\\oauth2.py",
    "type": "class",
    "name": "OAuth2PasswordBearer",
    "loc": 391,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\security\\oauth2.py:class:OAuth2AuthorizationCodeBearer:chunk1",
    "text": "class OAuth2AuthorizationCodeBearer(OAuth2):\n    \"\"\"\n    OAuth2 flow for authentication using a bearer token obtained with an OAuth2 code\n    flow. An instance of it would be used as a dependency.\n    \"\"\"\n\n    def __init__(\n        self,\n        authorizationUrl: str,\n        tokenUrl: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL to obtain the OAuth2 token.\n                \"\"\"\n            ),\n        ],\n        refreshUrl: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                The URL to refresh the token and obtain a new one.\n                \"\"\"\n            ),\n        ] = None,\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        scopes: Annotated[\n            Optional[Dict[str, str]],\n            Doc(\n                \"\"\"\n                The OAuth2 scopes that would be required by the *path operations* that\n                use this dependency.\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if no HTTP Authorization header is provided, required for\n                OAuth2 authentication, it will automatically cancel the request and\n                send the client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Authorization header\n                is not available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, with OAuth2\n                or in a cookie).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        if not scopes:\n            scopes = {}\n        flows = OAuthFlowsModel(\n            authorizationCode=cast(\n                Any,\n                {\n                    \"authorizationUrl\": authorizationUrl,\n                    \"tokenUrl\": tokenUrl,\n                    \"refreshUrl\": refreshUrl,\n                    \"scopes\": scopes,\n                },\n            )\n        )\n        super().__init__(\n            flows=flows,\n            scheme_name=scheme_name,\n            description=description,\n            auto_error=auto_error,\n        )\n\n    async def __call__(self, request: Request) -> Optional[str]:\n        authorization = request.headers.get(\"Authorization\")\n        scheme, param = get_authorization_scheme_param(authorization)\n        if not authorization or scheme.lower() != \"bearer\":\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_401_UNAUTHORIZED,\n                    detail=\"Not authenticated\",\n                    headers={\"WWW-Authenticate\": \"Bearer\"},\n                )\n            else:\n                return None  # pragma: nocover\n        return param",
    "repo": "fastapi",
    "path": "fastapi\\security\\oauth2.py",
    "type": "class",
    "name": "OAuth2AuthorizationCodeBearer",
    "loc": 488,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\security\\oauth2.py:class:SecurityScopes:chunk1",
    "text": "class SecurityScopes:\n    \"\"\"\n    This is a special class that you can define in a parameter in a dependency to\n    obtain the OAuth2 scopes required by all the dependencies in the same chain.\n\n    This way, multiple dependencies can have different scopes, even when used in the\n    same *path operation*. And with this, you can access all the scopes required in\n    all those dependencies in a single place.\n\n    Read more about it in the\n    [FastAPI docs for OAuth2 scopes](https://fastapi.tiangolo.com/advanced/security/oauth2-scopes/).\n    \"\"\"\n\n    def __init__(\n        self,\n        scopes: Annotated[\n            Optional[List[str]],\n            Doc(\n                \"\"\"\n                This will be filled by FastAPI.\n                \"\"\"\n            ),\n        ] = None,\n    ):\n        self.scopes: Annotated[\n            List[str],\n            Doc(\n                \"\"\"\n                The list of all the scopes required by dependencies.\n                \"\"\"\n            ),\n        ] = scopes or []\n        self.scope_str: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                All the scopes required by all the dependencies in a single string\n                separated by spaces, as defined in the OAuth2 specification.\n                \"\"\"\n            ),\n        ] = \" \".join(self.scopes)",
    "repo": "fastapi",
    "path": "fastapi\\security\\oauth2.py",
    "type": "class",
    "name": "SecurityScopes",
    "loc": 598,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\security\\open_id_connect_url.py:class:OpenIdConnect:chunk1",
    "text": "class OpenIdConnect(SecurityBase):\n    \"\"\"\n    OpenID Connect authentication class. An instance of it would be used as a\n    dependency.\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        openIdConnectUrl: Annotated[\n            str,\n            Doc(\n                \"\"\"\n            The OpenID Connect URL.\n            \"\"\"\n            ),\n        ],\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if no HTTP Authorization header is provided, required for\n                OpenID Connect authentication, it will automatically cancel the request\n                and send the client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Authorization header\n                is not available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, with OpenID\n                Connect or in a cookie).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model = OpenIdConnectModel(\n            openIdConnectUrl=openIdConnectUrl, description=description\n        )\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error\n\n    async def __call__(self, request: Request) -> Optional[str]:\n        authorization = request.headers.get(\"Authorization\")\n        if not authorization:\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            else:\n                return None\n        return authorization",
    "repo": "fastapi",
    "path": "fastapi\\security\\open_id_connect_url.py",
    "type": "class",
    "name": "OpenIdConnect",
    "loc": 11,
    "role": "src"
  },
  {
    "id": "fastapi:fastapi\\security\\utils.py:function:get_authorization_scheme_param:chunk1",
    "text": "def get_authorization_scheme_param(\n    authorization_header_value: Optional[str],\n) -> Tuple[str, str]:\n    if not authorization_header_value:\n        return \"\", \"\"\n    scheme, _, param = authorization_header_value.partition(\" \")\n    return scheme, param",
    "repo": "fastapi",
    "path": "fastapi\\security\\utils.py",
    "type": "function",
    "name": "get_authorization_scheme_param",
    "loc": 4,
    "role": "src"
  },
  {
    "id": "fastapi:scripts\\contributors.py:function:get_graphql_response:chunk1",
    "text": "def get_graphql_response(\n    *,\n    settings: Settings,\n    query: str,\n    after: str | None = None,\n) -> dict[str, Any]:\n    headers = {\"Authorization\": f\"token {settings.github_token.get_secret_value()}\"}\n    variables = {\"after\": after}\n    response = httpx.post(\n        github_graphql_url,\n        headers=headers,\n        timeout=settings.httpx_timeout,\n        json={\"query\": query, \"variables\": variables, \"operationName\": \"Q\"},\n    )\n    if response.status_code != 200:\n        logging.error(f\"Response was not 200, after: {after}\")\n        logging.error(response.text)\n        raise RuntimeError(response.text)\n    data = response.json()\n    if \"errors\" in data:\n        logging.error(f\"Errors in response, after: {after}\")\n        logging.error(data[\"errors\"])\n        logging.error(response.text)\n        raise RuntimeError(response.text)\n    return data",
    "repo": "fastapi",
    "path": "scripts\\contributors.py",
    "type": "function",
    "name": "get_graphql_response",
    "loc": 121,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\contributors.py:function:get_graphql_pr_edges:chunk1",
    "text": "def get_graphql_pr_edges(\n    *, settings: Settings, after: str | None = None\n) -> list[PullRequestEdge]:\n    data = get_graphql_response(settings=settings, query=prs_query, after=after)\n    graphql_response = PRsResponse.model_validate(data)\n    return graphql_response.data.repository.pullRequests.edges",
    "repo": "fastapi",
    "path": "scripts\\contributors.py",
    "type": "function",
    "name": "get_graphql_pr_edges",
    "loc": 148,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\contributors.py:function:get_pr_nodes:chunk1",
    "text": "def get_pr_nodes(settings: Settings) -> list[PullRequestNode]:\n    pr_nodes: list[PullRequestNode] = []\n    pr_edges = get_graphql_pr_edges(settings=settings)\n\n    while pr_edges:\n        for edge in pr_edges:\n            pr_nodes.append(edge.node)\n        last_edge = pr_edges[-1]\n        pr_edges = get_graphql_pr_edges(settings=settings, after=last_edge.cursor)\n    return pr_nodes",
    "repo": "fastapi",
    "path": "scripts\\contributors.py",
    "type": "function",
    "name": "get_pr_nodes",
    "loc": 156,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\contributors.py:function:get_contributors:chunk1",
    "text": "def get_contributors(pr_nodes: list[PullRequestNode]) -> ContributorsResults:\n    contributors = Counter[str]()\n    translation_reviewers = Counter[str]()\n    translators = Counter[str]()\n    authors: dict[str, Author] = {}\n\n    for pr in pr_nodes:\n        if pr.author:\n            authors[pr.author.login] = pr.author\n        is_lang = False\n        for label in pr.labels.nodes:\n            if label.name == \"lang-all\":\n                is_lang = True\n                break\n        for review in pr.reviews.nodes:\n            if review.author:\n                authors[review.author.login] = review.author\n                if is_lang:\n                    translation_reviewers[review.author.login] += 1\n        if pr.state == \"MERGED\" and pr.author:\n            if is_lang:\n                translators[pr.author.login] += 1\n            else:\n                contributors[pr.author.login] += 1\n    return ContributorsResults(\n        contributors=contributors,\n        translation_reviewers=translation_reviewers,\n        translators=translators,\n        authors=authors,\n    )",
    "repo": "fastapi",
    "path": "scripts\\contributors.py",
    "type": "function",
    "name": "get_contributors",
    "loc": 175,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\contributors.py:function:get_users_to_write:chunk1",
    "text": "def get_users_to_write(\n    *,\n    counter: Counter[str],\n    authors: dict[str, Author],\n    min_count: int = 2,\n) -> dict[str, Any]:\n    users: dict[str, Any] = {}\n    for user, count in counter.most_common():\n        if count >= min_count:\n            author = authors[user]\n            users[user] = {\n                \"login\": user,\n                \"count\": count,\n                \"avatarUrl\": author.avatarUrl,\n                \"url\": author.url,\n            }\n    return users",
    "repo": "fastapi",
    "path": "scripts\\contributors.py",
    "type": "function",
    "name": "get_users_to_write",
    "loc": 207,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\contributors.py:function:update_content:chunk1",
    "text": "def update_content(*, content_path: Path, new_content: Any) -> bool:\n    old_content = content_path.read_text(encoding=\"utf-8\")\n\n    new_content = yaml.dump(new_content, sort_keys=False, width=200, allow_unicode=True)\n    if old_content == new_content:\n        logging.info(f\"The content hasn't changed for {content_path}\")\n        return False\n    content_path.write_text(new_content, encoding=\"utf-8\")\n    logging.info(f\"Updated {content_path}\")\n    return True",
    "repo": "fastapi",
    "path": "scripts\\contributors.py",
    "type": "function",
    "name": "update_content",
    "loc": 226,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\contributors.py:function:main:chunk1",
    "text": "def main() -> None:\n    logging.basicConfig(level=logging.INFO)\n    settings = Settings()\n    logging.info(f\"Using config: {settings.model_dump_json()}\")\n    g = Github(settings.github_token.get_secret_value())\n    repo = g.get_repo(settings.github_repository)\n\n    pr_nodes = get_pr_nodes(settings=settings)\n    contributors_results = get_contributors(pr_nodes=pr_nodes)\n    authors = contributors_results.authors\n\n    top_contributors = get_users_to_write(\n        counter=contributors_results.contributors,\n        authors=authors,\n    )\n\n    top_translators = get_users_to_write(\n        counter=contributors_results.translators,\n        authors=authors,\n    )\n    top_translations_reviewers = get_users_to_write(\n        counter=contributors_results.translation_reviewers,\n        authors=authors,\n    )\n\n    # For local development\n    # contributors_path = Path(\"../docs/en/data/contributors.yml\")\n    contributors_path = Path(\"./docs/en/data/contributors.yml\")\n    # translators_path = Path(\"../docs/en/data/translators.yml\")\n    translators_path = Path(\"./docs/en/data/translators.yml\")\n    # translation_reviewers_path = Path(\"../docs/en/data/translation_reviewers.yml\")\n    translation_reviewers_path = Path(\"./docs/en/data/translation_reviewers.yml\")\n\n    updated = [\n        update_content(content_path=contributors_path, new_content=top_contributors),\n        update_content(content_path=translators_path, new_content=top_translators),\n        update_content(\n            content_path=translation_reviewers_path,\n            new_content=top_translations_reviewers,\n        ),\n    ]\n\n    if not any(updated):\n        logging.info(\"The data hasn't changed, finishing.\")\n        return\n\n    logging.info(\"Setting up GitHub Actions git user\")\n    subprocess.run([\"git\", \"config\", \"user.name\", \"github-actions\"], check=True)\n    subprocess.run(\n        [\"git\", \"config\", \"user.email\", \"github-actions@github.com\"], check=True\n    )\n    branch_name = f\"fastapi-people-contributors-{secrets.token_hex(4)}\"\n    logging.info(f\"Creating a new branch {branch_name}\")\n    subprocess.run([\"git\", \"checkout\", \"-b\", branch_name], check=True)\n    logging.info(\"Adding updated file\")\n    subprocess.run(\n        [\n            \"git\",\n            \"add\",\n            str(contributors_path),\n            str(translators_path),\n            str(translation_reviewers_path),\n        ],\n        check=True,\n    )\n    logging.info(\"Committing updated file\")\n    message = \"👥 Update FastAPI People - Contributors and Translators\"\n    subprocess.run([\"git\", \"commit\", \"-m\", message], check=True)\n    logging.info(\"Pushing branch\")\n    subprocess.run([\"git\", \"push\", \"origin\", branch_name], check=True)\n    logging.info(\"Creating PR\")\n    pr = repo.create_pull(title=message, body=message, base=\"master\", head=branch_name)\n    logging.info(f\"Created PR: {pr.number}\")\n    logging.info(\"Finished\")",
    "repo": "fastapi",
    "path": "scripts\\contributors.py",
    "type": "function",
    "name": "main",
    "loc": 238,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\contributors.py:class:Author:chunk1",
    "text": "class Author(BaseModel):\n    login: str\n    avatarUrl: str\n    url: str",
    "repo": "fastapi",
    "path": "scripts\\contributors.py",
    "type": "class",
    "name": "Author",
    "loc": 59,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\contributors.py:class:LabelNode:chunk1",
    "text": "class LabelNode(BaseModel):\n    name: str",
    "repo": "fastapi",
    "path": "scripts\\contributors.py",
    "type": "class",
    "name": "LabelNode",
    "loc": 65,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\contributors.py:class:Labels:chunk1",
    "text": "class Labels(BaseModel):\n    nodes: list[LabelNode]",
    "repo": "fastapi",
    "path": "scripts\\contributors.py",
    "type": "class",
    "name": "Labels",
    "loc": 69,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\contributors.py:class:ReviewNode:chunk1",
    "text": "class ReviewNode(BaseModel):\n    author: Author | None = None\n    state: str",
    "repo": "fastapi",
    "path": "scripts\\contributors.py",
    "type": "class",
    "name": "ReviewNode",
    "loc": 73,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\contributors.py:class:Reviews:chunk1",
    "text": "class Reviews(BaseModel):\n    nodes: list[ReviewNode]",
    "repo": "fastapi",
    "path": "scripts\\contributors.py",
    "type": "class",
    "name": "Reviews",
    "loc": 78,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\contributors.py:class:PullRequestNode:chunk1",
    "text": "class PullRequestNode(BaseModel):\n    number: int\n    labels: Labels\n    author: Author | None = None\n    title: str\n    createdAt: datetime\n    lastEditedAt: datetime | None = None\n    updatedAt: datetime | None = None\n    state: str\n    reviews: Reviews",
    "repo": "fastapi",
    "path": "scripts\\contributors.py",
    "type": "class",
    "name": "PullRequestNode",
    "loc": 82,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\contributors.py:class:PullRequestEdge:chunk1",
    "text": "class PullRequestEdge(BaseModel):\n    cursor: str\n    node: PullRequestNode",
    "repo": "fastapi",
    "path": "scripts\\contributors.py",
    "type": "class",
    "name": "PullRequestEdge",
    "loc": 94,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\contributors.py:class:PullRequests:chunk1",
    "text": "class PullRequests(BaseModel):\n    edges: list[PullRequestEdge]",
    "repo": "fastapi",
    "path": "scripts\\contributors.py",
    "type": "class",
    "name": "PullRequests",
    "loc": 99,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\contributors.py:class:PRsRepository:chunk1",
    "text": "class PRsRepository(BaseModel):\n    pullRequests: PullRequests",
    "repo": "fastapi",
    "path": "scripts\\contributors.py",
    "type": "class",
    "name": "PRsRepository",
    "loc": 103,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\contributors.py:class:PRsResponseData:chunk1",
    "text": "class PRsResponseData(BaseModel):\n    repository: PRsRepository",
    "repo": "fastapi",
    "path": "scripts\\contributors.py",
    "type": "class",
    "name": "PRsResponseData",
    "loc": 107,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\contributors.py:class:PRsResponse:chunk1",
    "text": "class PRsResponse(BaseModel):\n    data: PRsResponseData",
    "repo": "fastapi",
    "path": "scripts\\contributors.py",
    "type": "class",
    "name": "PRsResponse",
    "loc": 111,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\contributors.py:class:Settings:chunk1",
    "text": "class Settings(BaseSettings):\n    github_token: SecretStr\n    github_repository: str\n    httpx_timeout: int = 30",
    "repo": "fastapi",
    "path": "scripts\\contributors.py",
    "type": "class",
    "name": "Settings",
    "loc": 115,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\contributors.py:class:ContributorsResults:chunk1",
    "text": "class ContributorsResults(BaseModel):\n    contributors: Counter[str]\n    translation_reviewers: Counter[str]\n    translators: Counter[str]\n    authors: dict[str, Author]",
    "repo": "fastapi",
    "path": "scripts\\contributors.py",
    "type": "class",
    "name": "ContributorsResults",
    "loc": 168,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\deploy_docs_status.py:function:main:chunk1",
    "text": "def main() -> None:\n    logging.basicConfig(level=logging.INFO)\n    settings = Settings()\n\n    logging.info(f\"Using config: {settings.model_dump_json()}\")\n    g = Github(settings.github_token.get_secret_value())\n    repo = g.get_repo(settings.github_repository)\n    use_pr = next(\n        (pr for pr in repo.get_pulls() if pr.head.sha == settings.commit_sha), None\n    )\n    if not use_pr:\n        logging.error(f\"No PR found for hash: {settings.commit_sha}\")\n        return\n    commits = list(use_pr.get_commits())\n    current_commit = [c for c in commits if c.sha == settings.commit_sha][0]\n    run_url = f\"https://github.com/{settings.github_repository}/actions/runs/{settings.run_id}\"\n    if settings.is_done and not settings.deploy_url:\n        current_commit.create_status(\n            state=\"success\",\n            description=\"No Docs Changes\",\n            context=\"deploy-docs\",\n            target_url=run_url,\n        )\n        logging.info(\"No docs changes found\")\n        return\n    if not settings.deploy_url:\n        current_commit.create_status(\n            state=\"pending\",\n            description=\"Deploying Docs\",\n            context=\"deploy-docs\",\n            target_url=run_url,\n        )\n        logging.info(\"No deploy URL available yet\")\n        return\n    current_commit.create_status(\n        state=\"success\",\n        description=\"Docs Deployed\",\n        context=\"deploy-docs\",\n        target_url=run_url,\n    )\n\n    files = list(use_pr.get_files())\n    docs_files = [f for f in files if f.filename.startswith(\"docs/\")]\n\n    deploy_url = settings.deploy_url.rstrip(\"/\")\n    lang_links: dict[str, list[LinkData]] = {}\n    for f in docs_files:\n        match = re.match(r\"docs/([^/]+)/docs/(.*)\", f.filename)\n        if not match:\n            continue\n        lang = match.group(1)\n        path = match.group(2)\n        if path.endswith(\"index.md\"):\n            path = path.replace(\"index.md\", \"\")\n        else:\n            path = path.replace(\".md\", \"/\")\n        en_path = path\n        if lang == \"en\":\n            use_path = en_path\n        else:\n            use_path = f\"{lang}/{path}\"\n        link = LinkData(\n            previous_link=f\"https://fastapi.tiangolo.com/{use_path}\",\n            preview_link=f\"{deploy_url}/{use_path}\",\n        )\n        if lang != \"en\":\n            link.en_link = f\"https://fastapi.tiangolo.com/{en_path}\"\n        lang_links.setdefault(lang, []).append(link)\n\n    links: list[LinkData] = []\n    en_links = lang_links.get(\"en\", [])\n    en_links.sort(key=lambda x: x.preview_link)\n    links.extend(en_links)\n\n    langs = list(lang_links.keys())\n    langs.sort()\n    for lang in langs:\n        if lang == \"en\":\n            continue\n        current_lang_links = lang_links[lang]\n        current_lang_links.sort(key=lambda x: x.preview_link)\n        links.extend(current_lang_links)\n\n    message = f\"📝 Docs preview for commit {settings.commit_sha} at: {deploy_url}\"\n\n    if links:\n        message += \"\\n\\n### Modified Pages\\n\\n\"\n        for link in links:\n            message += f\"* {link.preview_link}\"\n            message += f\" - ([before]({link.previous_link}))\"\n            if link.en_link:\n                message += f\" - ([English]({link.en_link}))\"\n            message += \"\\n\"\n\n    print(message)\n    use_pr.as_issue().create_comment(message)\n\n    logging.info(\"Finished\")",
    "repo": "fastapi",
    "path": "scripts\\deploy_docs_status.py",
    "type": "function",
    "name": "main",
    "loc": 24,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\deploy_docs_status.py:class:Settings:chunk1",
    "text": "class Settings(BaseSettings):\n    github_repository: str\n    github_token: SecretStr\n    deploy_url: str | None = None\n    commit_sha: str\n    run_id: int\n    is_done: bool = False",
    "repo": "fastapi",
    "path": "scripts\\deploy_docs_status.py",
    "type": "class",
    "name": "Settings",
    "loc": 9,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\deploy_docs_status.py:class:LinkData:chunk1",
    "text": "class LinkData(BaseModel):\n    previous_link: str\n    preview_link: str\n    en_link: str | None = None",
    "repo": "fastapi",
    "path": "scripts\\deploy_docs_status.py",
    "type": "class",
    "name": "LinkData",
    "loc": 18,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\docs.py:function:is_mkdocs_insiders:chunk1",
    "text": "def is_mkdocs_insiders() -> bool:\n    version = metadata.version(\"mkdocs-material\")\n    return \"insiders\" in version",
    "repo": "fastapi",
    "path": "scripts\\docs.py",
    "type": "function",
    "name": "is_mkdocs_insiders",
    "loc": 49,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\docs.py:function:get_en_config:chunk1",
    "text": "def get_en_config() -> Dict[str, Any]:\n    return mkdocs.utils.yaml_load(en_config_path.read_text(encoding=\"utf-8\"))",
    "repo": "fastapi",
    "path": "scripts\\docs.py",
    "type": "function",
    "name": "get_en_config",
    "loc": 54,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\docs.py:function:get_lang_paths:chunk1",
    "text": "def get_lang_paths() -> List[Path]:\n    return sorted(docs_path.iterdir())",
    "repo": "fastapi",
    "path": "scripts\\docs.py",
    "type": "function",
    "name": "get_lang_paths",
    "loc": 58,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\docs.py:function:lang_callback:chunk1",
    "text": "def lang_callback(lang: Optional[str]) -> Union[str, None]:\n    if lang is None:\n        return None\n    lang = lang.lower()\n    return lang",
    "repo": "fastapi",
    "path": "scripts\\docs.py",
    "type": "function",
    "name": "lang_callback",
    "loc": 62,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\docs.py:function:complete_existing_lang:chunk1",
    "text": "def complete_existing_lang(incomplete: str):\n    lang_path: Path\n    for lang_path in get_lang_paths():\n        if lang_path.is_dir() and lang_path.name.startswith(incomplete):\n            yield lang_path.name",
    "repo": "fastapi",
    "path": "scripts\\docs.py",
    "type": "function",
    "name": "complete_existing_lang",
    "loc": 69,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\docs.py:function:callback:chunk1",
    "text": "def callback() -> None:\n    if is_mkdocs_insiders():\n        os.environ[\"INSIDERS_FILE\"] = \"../en/mkdocs.insiders.yml\"\n    # For MacOS with insiders and Cairo\n    os.environ[\"DYLD_FALLBACK_LIBRARY_PATH\"] = \"/opt/homebrew/lib\"",
    "repo": "fastapi",
    "path": "scripts\\docs.py",
    "type": "function",
    "name": "callback",
    "loc": 77,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\docs.py:function:new_lang:chunk1",
    "text": "def new_lang(lang: str = typer.Argument(..., callback=lang_callback)):\n    \"\"\"\n    Generate a new docs translation directory for the language LANG.\n    \"\"\"\n    new_path: Path = Path(\"docs\") / lang\n    if new_path.exists():\n        typer.echo(f\"The language was already created: {lang}\")\n        raise typer.Abort()\n    new_path.mkdir()\n    new_config_path: Path = Path(new_path) / mkdocs_name\n    new_config_path.write_text(\"INHERIT: ../en/mkdocs.yml\\n\", encoding=\"utf-8\")\n    new_config_docs_path: Path = new_path / \"docs\"\n    new_config_docs_path.mkdir()\n    en_index_path: Path = en_docs_path / \"docs\" / \"index.md\"\n    new_index_path: Path = new_config_docs_path / \"index.md\"\n    en_index_content = en_index_path.read_text(encoding=\"utf-8\")\n    new_index_content = f\"{missing_translation_snippet}\\n\\n{en_index_content}\"\n    new_index_path.write_text(new_index_content, encoding=\"utf-8\")\n    typer.secho(f\"Successfully initialized: {new_path}\", color=typer.colors.GREEN)\n    update_languages()",
    "repo": "fastapi",
    "path": "scripts\\docs.py",
    "type": "function",
    "name": "new_lang",
    "loc": 85,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\docs.py:function:build_lang:chunk1",
    "text": "def build_lang(\n    lang: str = typer.Argument(\n        ..., callback=lang_callback, autocompletion=complete_existing_lang\n    ),\n) -> None:\n    \"\"\"\n    Build the docs for a language.\n    \"\"\"\n    insiders_env_file = os.environ.get(\"INSIDERS_FILE\")\n    print(f\"Insiders file {insiders_env_file}\")\n    if is_mkdocs_insiders():\n        print(\"Using insiders\")\n    lang_path: Path = Path(\"docs\") / lang\n    if not lang_path.is_dir():\n        typer.echo(f\"The language translation doesn't seem to exist yet: {lang}\")\n        raise typer.Abort()\n    typer.echo(f\"Building docs for: {lang}\")\n    build_site_dist_path = build_site_path / lang\n    if lang == \"en\":\n        dist_path = site_path\n        # Don't remove en dist_path as it might already contain other languages.\n        # When running build_all(), that function already removes site_path.\n        # All this is only relevant locally, on GitHub Actions all this is done through\n        # artifacts and multiple workflows, so it doesn't matter if directories are\n        # removed or not.\n    else:\n        dist_path = site_path / lang\n        shutil.rmtree(dist_path, ignore_errors=True)\n    current_dir = os.getcwd()\n    os.chdir(lang_path)\n    shutil.rmtree(build_site_dist_path, ignore_errors=True)\n    subprocess.run([\"mkdocs\", \"build\", \"--site-dir\", build_site_dist_path], check=True)\n    shutil.copytree(build_site_dist_path, dist_path, dirs_exist_ok=True)\n    os.chdir(current_dir)\n    typer.secho(f\"Successfully built docs for: {lang}\", color=typer.colors.GREEN)",
    "repo": "fastapi",
    "path": "scripts\\docs.py",
    "type": "function",
    "name": "build_lang",
    "loc": 108,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\docs.py:function:generate_readme_content:chunk1",
    "text": "def generate_readme_content() -> str:\n    en_index = en_docs_path / \"docs\" / \"index.md\"\n    content = en_index.read_text(\"utf-8\")\n    match_pre = re.search(r\"</style>\\n\\n\", content)\n    match_start = re.search(r\"<!-- sponsors -->\", content)\n    match_end = re.search(r\"<!-- /sponsors -->\", content)\n    sponsors_data_path = en_docs_path / \"data\" / \"sponsors.yml\"\n    sponsors = mkdocs.utils.yaml_load(sponsors_data_path.read_text(encoding=\"utf-8\"))\n    if not (match_start and match_end):\n        raise RuntimeError(\"Couldn't auto-generate sponsors section\")\n    if not match_pre:\n        raise RuntimeError(\"Couldn't find pre section (<style>) in index.md\")\n    frontmatter_end = match_pre.end()\n    pre_end = match_start.end()\n    post_start = match_end.start()\n    template = Template(index_sponsors_template)\n    message = template.render(sponsors=sponsors)\n    pre_content = content[frontmatter_end:pre_end]\n    post_content = content[post_start:]\n    new_content = pre_content + message + post_content\n    # Remove content between <!-- only-mkdocs --> and <!-- /only-mkdocs -->\n    new_content = re.sub(\n        r\"<!-- only-mkdocs -->.*?<!-- /only-mkdocs -->\",\n        \"\",\n        new_content,\n        flags=re.DOTALL,\n    )\n    return new_content",
    "repo": "fastapi",
    "path": "scripts\\docs.py",
    "type": "function",
    "name": "generate_readme_content",
    "loc": 157,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\docs.py:function:generate_readme:chunk1",
    "text": "def generate_readme() -> None:\n    \"\"\"\n    Generate README.md content from main index.md\n    \"\"\"\n    typer.echo(\"Generating README\")\n    readme_path = Path(\"README.md\")\n    new_content = generate_readme_content()\n    readme_path.write_text(new_content, encoding=\"utf-8\")",
    "repo": "fastapi",
    "path": "scripts\\docs.py",
    "type": "function",
    "name": "generate_readme",
    "loc": 188,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\docs.py:function:verify_readme:chunk1",
    "text": "def verify_readme() -> None:\n    \"\"\"\n    Verify README.md content from main index.md\n    \"\"\"\n    typer.echo(\"Verifying README\")\n    readme_path = Path(\"README.md\")\n    generated_content = generate_readme_content()\n    readme_content = readme_path.read_text(\"utf-8\")\n    if generated_content != readme_content:\n        typer.secho(\n            \"README.md outdated from the latest index.md\", color=typer.colors.RED\n        )\n        raise typer.Abort()\n    typer.echo(\"Valid README ✅\")",
    "repo": "fastapi",
    "path": "scripts\\docs.py",
    "type": "function",
    "name": "verify_readme",
    "loc": 199,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\docs.py:function:build_all:chunk1",
    "text": "def build_all() -> None:\n    \"\"\"\n    Build mkdocs site for en, and then build each language inside, end result is located\n    at directory ./site/ with each language inside.\n    \"\"\"\n    update_languages()\n    shutil.rmtree(site_path, ignore_errors=True)\n    langs = [lang.name for lang in get_lang_paths() if lang.is_dir()]\n    cpu_count = os.cpu_count() or 1\n    process_pool_size = cpu_count * 4\n    typer.echo(f\"Using process pool size: {process_pool_size}\")\n    with Pool(process_pool_size) as p:\n        p.map(build_lang, langs)",
    "repo": "fastapi",
    "path": "scripts\\docs.py",
    "type": "function",
    "name": "build_all",
    "loc": 216,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\docs.py:function:update_languages:chunk1",
    "text": "def update_languages() -> None:\n    \"\"\"\n    Update the mkdocs.yml file Languages section including all the available languages.\n    \"\"\"\n    update_config()",
    "repo": "fastapi",
    "path": "scripts\\docs.py",
    "type": "function",
    "name": "update_languages",
    "loc": 232,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\docs.py:function:serve:chunk1",
    "text": "def serve() -> None:\n    \"\"\"\n    A quick server to preview a built site with translations.\n\n    For development, prefer the command live (or just mkdocs serve).\n\n    This is here only to preview a site with translations already built.\n\n    Make sure you run the build-all command first.\n    \"\"\"\n    typer.echo(\"Warning: this is a very simple server.\")\n    typer.echo(\"For development, use the command live instead.\")\n    typer.echo(\"This is here only to preview a site with translations already built.\")\n    typer.echo(\"Make sure you run the build-all command first.\")\n    os.chdir(\"site\")\n    server_address = (\"\", 8008)\n    server = HTTPServer(server_address, SimpleHTTPRequestHandler)\n    typer.echo(\"Serving at: http://127.0.0.1:8008\")\n    server.serve_forever()",
    "repo": "fastapi",
    "path": "scripts\\docs.py",
    "type": "function",
    "name": "serve",
    "loc": 240,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\docs.py:function:live:chunk1",
    "text": "def live(\n    lang: str = typer.Argument(\n        None, callback=lang_callback, autocompletion=complete_existing_lang\n    ),\n    dirty: bool = False,\n) -> None:\n    \"\"\"\n    Serve with livereload a docs site for a specific language.\n\n    This only shows the actual translated files, not the placeholders created with\n    build-all.\n\n    Takes an optional LANG argument with the name of the language to serve, by default\n    en.\n    \"\"\"\n    # Enable line numbers during local development to make it easier to highlight\n    if lang is None:\n        lang = \"en\"\n    lang_path: Path = docs_path / lang\n    # Enable line numbers during local development to make it easier to highlight\n    args = [\"mkdocs\", \"serve\", \"--dev-addr\", \"127.0.0.1:8008\"]\n    if dirty:\n        args.append(\"--dirty\")\n    subprocess.run(\n        args, env={**os.environ, \"LINENUMS\": \"true\"}, cwd=lang_path, check=True\n    )",
    "repo": "fastapi",
    "path": "scripts\\docs.py",
    "type": "function",
    "name": "live",
    "loc": 262,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\docs.py:function:get_updated_config_content:chunk1",
    "text": "def get_updated_config_content() -> Dict[str, Any]:\n    config = get_en_config()\n    languages = [{\"en\": \"/\"}]\n    new_alternate: List[Dict[str, str]] = []\n    # Language names sourced from https://quickref.me/iso-639-1\n    # Contributors may wish to update or change these, e.g. to fix capitalization.\n    language_names_path = Path(__file__).parent / \"../docs/language_names.yml\"\n    local_language_names: Dict[str, str] = mkdocs.utils.yaml_load(\n        language_names_path.read_text(encoding=\"utf-8\")\n    )\n    for lang_path in get_lang_paths():\n        if lang_path.name in {\"en\", \"em\"} or not lang_path.is_dir():\n            continue\n        code = lang_path.name\n        languages.append({code: f\"/{code}/\"})\n    for lang_dict in languages:\n        code = list(lang_dict.keys())[0]\n        url = lang_dict[code]\n        if code not in local_language_names:\n            print(\n                f\"Missing language name for: {code}, \"\n                \"update it in docs/language_names.yml\"\n            )\n            raise typer.Abort()\n        use_name = f\"{code} - {local_language_names[code]}\"\n        new_alternate.append({\"link\": url, \"name\": use_name})\n    new_alternate.append({\"link\": \"/em/\", \"name\": \"😉\"})\n    config[\"extra\"][\"alternate\"] = new_alternate\n    return config",
    "repo": "fastapi",
    "path": "scripts\\docs.py",
    "type": "function",
    "name": "get_updated_config_content",
    "loc": 290,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\docs.py:function:update_config:chunk1",
    "text": "def update_config() -> None:\n    config = get_updated_config_content()\n    en_config_path.write_text(\n        yaml.dump(config, sort_keys=False, width=200, allow_unicode=True),\n        encoding=\"utf-8\",\n    )",
    "repo": "fastapi",
    "path": "scripts\\docs.py",
    "type": "function",
    "name": "update_config",
    "loc": 321,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\docs.py:function:verify_config:chunk1",
    "text": "def verify_config() -> None:\n    \"\"\"\n    Verify main mkdocs.yml content to make sure it uses the latest language names.\n    \"\"\"\n    typer.echo(\"Verifying mkdocs.yml\")\n    config = get_en_config()\n    updated_config = get_updated_config_content()\n    if config != updated_config:\n        typer.secho(\n            \"docs/en/mkdocs.yml outdated from docs/language_names.yml, \"\n            \"update language_names.yml and run \"\n            \"python ./scripts/docs.py update-languages\",\n            color=typer.colors.RED,\n        )\n        raise typer.Abort()\n    typer.echo(\"Valid mkdocs.yml ✅\")",
    "repo": "fastapi",
    "path": "scripts\\docs.py",
    "type": "function",
    "name": "verify_config",
    "loc": 330,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\docs.py:function:verify_non_translated:chunk1",
    "text": "def verify_non_translated() -> None:\n    \"\"\"\n    Verify there are no files in the non translatable pages.\n    \"\"\"\n    print(\"Verifying non translated pages\")\n    lang_paths = get_lang_paths()\n    error_paths = []\n    for lang in lang_paths:\n        if lang.name == \"en\":\n            continue\n        for non_translatable in non_translated_sections:\n            non_translatable_path = lang / \"docs\" / non_translatable\n            if non_translatable_path.exists():\n                error_paths.append(non_translatable_path)\n    if error_paths:\n        print(\"Non-translated pages found, remove them:\")\n        for error_path in error_paths:\n            print(error_path)\n        raise typer.Abort()\n    print(\"No non-translated pages found ✅\")",
    "repo": "fastapi",
    "path": "scripts\\docs.py",
    "type": "function",
    "name": "verify_non_translated",
    "loc": 349,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\docs.py:function:verify_docs:chunk1",
    "text": "def verify_docs():\n    verify_readme()\n    verify_config()\n    verify_non_translated()",
    "repo": "fastapi",
    "path": "scripts\\docs.py",
    "type": "function",
    "name": "verify_docs",
    "loc": 372,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\docs.py:function:langs_json:chunk1",
    "text": "def langs_json():\n    langs = []\n    for lang_path in get_lang_paths():\n        if lang_path.is_dir():\n            langs.append(lang_path.name)\n    print(json.dumps(langs))",
    "repo": "fastapi",
    "path": "scripts\\docs.py",
    "type": "function",
    "name": "langs_json",
    "loc": 379,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\docs.py:function:generate_docs_src_versions_for_file:chunk1",
    "text": "def generate_docs_src_versions_for_file(file_path: Path) -> None:\n    target_versions = [\"py39\", \"py310\"]\n    base_content = file_path.read_text(encoding=\"utf-8\")\n    previous_content = {base_content}\n    for target_version in target_versions:\n        version_result = subprocess.run(\n            [\n                find_ruff_bin(),\n                \"check\",\n                \"--target-version\",\n                target_version,\n                \"--fix\",\n                \"--unsafe-fixes\",\n                \"-\",\n            ],\n            input=base_content.encode(\"utf-8\"),\n            capture_output=True,\n        )\n        content_target = version_result.stdout.decode(\"utf-8\")\n        format_result = subprocess.run(\n            [find_ruff_bin(), \"format\", \"-\"],\n            input=content_target.encode(\"utf-8\"),\n            capture_output=True,\n        )\n        content_format = format_result.stdout.decode(\"utf-8\")\n        if content_format in previous_content:\n            continue\n        previous_content.add(content_format)\n        version_file = file_path.with_name(\n            file_path.name.replace(\".py\", f\"_{target_version}.py\")\n        )\n        logging.info(f\"Writing to {version_file}\")\n        version_file.write_text(content_format, encoding=\"utf-8\")",
    "repo": "fastapi",
    "path": "scripts\\docs.py",
    "type": "function",
    "name": "generate_docs_src_versions_for_file",
    "loc": 388,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\label_approved.py:class:LabelSettings:chunk1",
    "text": "class LabelSettings(BaseModel):\n    await_label: str | None = None\n    number: int",
    "repo": "fastapi",
    "path": "scripts\\label_approved.py",
    "type": "class",
    "name": "LabelSettings",
    "loc": 10,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\label_approved.py:class:Settings:chunk1",
    "text": "class Settings(BaseSettings):\n    github_repository: str\n    token: SecretStr\n    debug: bool | None = False\n    config: dict[str, LabelSettings] | Literal[\"\"] = default_config",
    "repo": "fastapi",
    "path": "scripts\\label_approved.py",
    "type": "class",
    "name": "Settings",
    "loc": 18,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\mkdocs_hooks.py:function:get_missing_translation_content:chunk1",
    "text": "def get_missing_translation_content(docs_dir: str) -> str:\n    docs_dir_path = Path(docs_dir)\n    missing_translation_path = docs_dir_path.parent.parent / \"missing-translation.md\"\n    return missing_translation_path.read_text(encoding=\"utf-8\")",
    "repo": "fastapi",
    "path": "scripts\\mkdocs_hooks.py",
    "type": "function",
    "name": "get_missing_translation_content",
    "loc": 23,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\mkdocs_hooks.py:function:get_mkdocs_material_langs:chunk1",
    "text": "def get_mkdocs_material_langs() -> List[str]:\n    material_path = Path(material.__file__).parent\n    material_langs_path = material_path / \"templates\" / \"partials\" / \"languages\"\n    langs = [file.stem for file in material_langs_path.glob(\"*.html\")]\n    return langs",
    "repo": "fastapi",
    "path": "scripts\\mkdocs_hooks.py",
    "type": "function",
    "name": "get_mkdocs_material_langs",
    "loc": 30,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\mkdocs_hooks.py:function:on_config:chunk1",
    "text": "def on_config(config: MkDocsConfig, **kwargs: Any) -> MkDocsConfig:\n    available_langs = get_mkdocs_material_langs()\n    dir_path = Path(config.docs_dir)\n    lang = dir_path.parent.name\n    if lang in available_langs:\n        config.theme[\"language\"] = lang\n    if not (config.site_url or \"\").endswith(f\"{lang}/\") and lang != \"en\":\n        config.site_url = f\"{config.site_url}{lang}/\"\n    return config",
    "repo": "fastapi",
    "path": "scripts\\mkdocs_hooks.py",
    "type": "function",
    "name": "on_config",
    "loc": 41,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\mkdocs_hooks.py:function:resolve_file:chunk1",
    "text": "def resolve_file(*, item: str, files: Files, config: MkDocsConfig) -> None:\n    item_path = Path(config.docs_dir) / item\n    if not item_path.is_file():\n        en_src_dir = (Path(config.docs_dir) / \"../../en/docs\").resolve()\n        potential_path = en_src_dir / item\n        if potential_path.is_file():\n            files.append(\n                EnFile(\n                    path=item,\n                    src_dir=str(en_src_dir),\n                    dest_dir=config.site_dir,\n                    use_directory_urls=config.use_directory_urls,\n                )\n            )",
    "repo": "fastapi",
    "path": "scripts\\mkdocs_hooks.py",
    "type": "function",
    "name": "resolve_file",
    "loc": 52,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\mkdocs_hooks.py:function:resolve_files:chunk1",
    "text": "def resolve_files(*, items: List[Any], files: Files, config: MkDocsConfig) -> None:\n    for item in items:\n        if isinstance(item, str):\n            resolve_file(item=item, files=files, config=config)\n        elif isinstance(item, dict):\n            assert len(item) == 1\n            values = list(item.values())\n            if not values:\n                continue\n            if isinstance(values[0], str):\n                resolve_file(item=values[0], files=files, config=config)\n            elif isinstance(values[0], list):\n                resolve_files(items=values[0], files=files, config=config)\n            else:\n                raise ValueError(f\"Unexpected value: {values}\")",
    "repo": "fastapi",
    "path": "scripts\\mkdocs_hooks.py",
    "type": "function",
    "name": "resolve_files",
    "loc": 68,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\mkdocs_hooks.py:function:on_files:chunk1",
    "text": "def on_files(files: Files, *, config: MkDocsConfig) -> Files:\n    resolve_files(items=config.nav or [], files=files, config=config)\n    if \"logo\" in config.theme:\n        resolve_file(item=config.theme[\"logo\"], files=files, config=config)\n    if \"favicon\" in config.theme:\n        resolve_file(item=config.theme[\"favicon\"], files=files, config=config)\n    resolve_files(items=config.extra_css, files=files, config=config)\n    resolve_files(items=config.extra_javascript, files=files, config=config)\n    return files",
    "repo": "fastapi",
    "path": "scripts\\mkdocs_hooks.py",
    "type": "function",
    "name": "on_files",
    "loc": 85,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\mkdocs_hooks.py:function:generate_renamed_section_items:chunk1",
    "text": "def generate_renamed_section_items(\n    items: List[Union[Page, Section, Link]], *, config: MkDocsConfig\n) -> List[Union[Page, Section, Link]]:\n    new_items: List[Union[Page, Section, Link]] = []\n    for item in items:\n        if isinstance(item, Section):\n            new_title = item.title\n            new_children = generate_renamed_section_items(item.children, config=config)\n            first_child = new_children[0]\n            if isinstance(first_child, Page):\n                if first_child.file.src_path.endswith(\"index.md\"):\n                    # Read the source so that the title is parsed and available\n                    first_child.read_source(config=config)\n                    new_title = first_child.title or new_title\n            # Creating a new section makes it render it collapsed by default\n            # no idea why, so, let's just modify the existing one\n            # new_section = Section(title=new_title, children=new_children)\n            item.title = new_title\n            item.children = new_children\n            new_items.append(item)\n        else:\n            new_items.append(item)\n    return new_items",
    "repo": "fastapi",
    "path": "scripts\\mkdocs_hooks.py",
    "type": "function",
    "name": "generate_renamed_section_items",
    "loc": 96,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\mkdocs_hooks.py:function:on_nav:chunk1",
    "text": "def on_nav(\n    nav: Navigation, *, config: MkDocsConfig, files: Files, **kwargs: Any\n) -> Navigation:\n    new_items = generate_renamed_section_items(nav.items, config=config)\n    return Navigation(items=new_items, pages=nav.pages)",
    "repo": "fastapi",
    "path": "scripts\\mkdocs_hooks.py",
    "type": "function",
    "name": "on_nav",
    "loc": 121,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\mkdocs_hooks.py:function:on_pre_page:chunk1",
    "text": "def on_pre_page(page: Page, *, config: MkDocsConfig, files: Files) -> Page:\n    return page",
    "repo": "fastapi",
    "path": "scripts\\mkdocs_hooks.py",
    "type": "function",
    "name": "on_pre_page",
    "loc": 128,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\mkdocs_hooks.py:function:on_page_markdown:chunk1",
    "text": "def on_page_markdown(\n    markdown: str, *, page: Page, config: MkDocsConfig, files: Files\n) -> str:\n    if isinstance(page.file, EnFile):\n        for excluded_section in non_translated_sections:\n            if page.file.src_path.startswith(excluded_section):\n                return markdown\n        missing_translation_content = get_missing_translation_content(config.docs_dir)\n        header = \"\"\n        body = markdown\n        if markdown.startswith(\"#\"):\n            header, _, body = markdown.partition(\"\\n\\n\")\n        return f\"{header}\\n\\n{missing_translation_content}\\n\\n{body}\"\n    return markdown",
    "repo": "fastapi",
    "path": "scripts\\mkdocs_hooks.py",
    "type": "function",
    "name": "on_page_markdown",
    "loc": 132,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\mkdocs_hooks.py:class:EnFile:chunk1",
    "text": "class EnFile(File):\n    pass",
    "repo": "fastapi",
    "path": "scripts\\mkdocs_hooks.py",
    "type": "class",
    "name": "EnFile",
    "loc": 37,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:function:get_graphql_response:chunk1",
    "text": "def get_graphql_response(\n    *,\n    settings: Settings,\n    query: str,\n    after: Union[str, None] = None,\n    category_id: Union[str, None] = None,\n    discussion_number: Union[int, None] = None,\n    discussion_id: Union[str, None] = None,\n    comment_id: Union[str, None] = None,\n    body: Union[str, None] = None,\n) -> Dict[str, Any]:\n    headers = {\"Authorization\": f\"token {settings.github_token.get_secret_value()}\"}\n    variables = {\n        \"after\": after,\n        \"category_id\": category_id,\n        \"discussion_number\": discussion_number,\n        \"discussion_id\": discussion_id,\n        \"comment_id\": comment_id,\n        \"body\": body,\n    }\n    response = httpx.post(\n        github_graphql_url,\n        headers=headers,\n        timeout=settings.httpx_timeout,\n        json={\"query\": query, \"variables\": variables, \"operationName\": \"Q\"},\n    )\n    if response.status_code != 200:\n        logging.error(\n            f\"Response was not 200, after: {after}, category_id: {category_id}\"\n        )\n        logging.error(response.text)\n        raise RuntimeError(response.text)\n    data = response.json()\n    if \"errors\" in data:\n        logging.error(f\"Errors in response, after: {after}, category_id: {category_id}\")\n        logging.error(data[\"errors\"])\n        logging.error(response.text)\n        raise RuntimeError(response.text)\n    return cast(Dict[str, Any], data)",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "function",
    "name": "get_graphql_response",
    "loc": 198,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:function:get_graphql_translation_discussions:chunk1",
    "text": "def get_graphql_translation_discussions(\n    *, settings: Settings\n) -> List[AllDiscussionsDiscussionNode]:\n    data = get_graphql_response(\n        settings=settings,\n        query=all_discussions_query,\n        category_id=questions_translations_category_id,\n    )\n    graphql_response = AllDiscussionsResponse.model_validate(data)\n    return graphql_response.data.repository.discussions.nodes",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "function",
    "name": "get_graphql_translation_discussions",
    "loc": 239,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:function:get_graphql_translation_discussion_comments_edges:chunk1",
    "text": "def get_graphql_translation_discussion_comments_edges(\n    *, settings: Settings, discussion_number: int, after: Union[str, None] = None\n) -> List[CommentsEdge]:\n    data = get_graphql_response(\n        settings=settings,\n        query=translation_discussion_query,\n        discussion_number=discussion_number,\n        after=after,\n    )\n    graphql_response = CommentsResponse.model_validate(data)\n    return graphql_response.data.repository.discussion.comments.edges",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "function",
    "name": "get_graphql_translation_discussion_comments_edges",
    "loc": 251,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:function:get_graphql_translation_discussion_comments:chunk1",
    "text": "def get_graphql_translation_discussion_comments(\n    *, settings: Settings, discussion_number: int\n) -> list[Comment]:\n    comment_nodes: List[Comment] = []\n    discussion_edges = get_graphql_translation_discussion_comments_edges(\n        settings=settings, discussion_number=discussion_number\n    )\n\n    while discussion_edges:\n        for discussion_edge in discussion_edges:\n            comment_nodes.append(discussion_edge.node)\n        last_edge = discussion_edges[-1]\n        discussion_edges = get_graphql_translation_discussion_comments_edges(\n            settings=settings,\n            discussion_number=discussion_number,\n            after=last_edge.cursor,\n        )\n    return comment_nodes",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "function",
    "name": "get_graphql_translation_discussion_comments",
    "loc": 264,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:function:create_comment:chunk1",
    "text": "def create_comment(*, settings: Settings, discussion_id: str, body: str) -> Comment:\n    data = get_graphql_response(\n        settings=settings,\n        query=add_comment_mutation,\n        discussion_id=discussion_id,\n        body=body,\n    )\n    response = AddCommentResponse.model_validate(data)\n    return response.data.addDiscussionComment.comment",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "function",
    "name": "create_comment",
    "loc": 284,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:function:update_comment:chunk1",
    "text": "def update_comment(*, settings: Settings, comment_id: str, body: str) -> Comment:\n    data = get_graphql_response(\n        settings=settings,\n        query=update_comment_mutation,\n        comment_id=comment_id,\n        body=body,\n    )\n    response = UpdateCommentResponse.model_validate(data)\n    return response.data.updateDiscussionComment.comment",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "function",
    "name": "update_comment",
    "loc": 295,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:function:main:chunk1",
    "text": "def main() -> None:\n    settings = Settings()\n    if settings.debug:\n        logging.basicConfig(level=logging.DEBUG)\n    else:\n        logging.basicConfig(level=logging.INFO)\n    logging.debug(f\"Using config: {settings.model_dump_json()}\")\n    g = Github(settings.github_token.get_secret_value())\n    repo = g.get_repo(settings.github_repository)\n    if not settings.github_event_path.is_file():\n        raise RuntimeError(\n            f\"No github event file available at: {settings.github_event_path}\"\n        )\n    contents = settings.github_event_path.read_text()\n    github_event = PartialGitHubEvent.model_validate_json(contents)\n    logging.info(f\"Using GitHub event: {github_event}\")\n    number = (\n        github_event.pull_request and github_event.pull_request.number\n    ) or settings.number\n    if number is None:\n        raise RuntimeError(\"No PR number available\")\n\n    # Avoid race conditions with multiple labels\n    sleep_time = random.random() * 10  # random number between 0 and 10 seconds\n    logging.info(\n        f\"Sleeping for {sleep_time} seconds to avoid \"\n        \"race conditions and multiple comments\"\n    )\n    time.sleep(sleep_time)\n\n    # Get PR\n    logging.debug(f\"Processing PR: #{number}\")\n    pr = repo.get_pull(number)\n    label_strs = {label.name for label in pr.get_labels()}\n    langs = []\n    for label in label_strs:\n        if label.startswith(\"lang-\") and not label == lang_all_label:\n            langs.append(label[5:])\n    logging.info(f\"PR #{pr.number} has labels: {label_strs}\")\n    if not langs or lang_all_label not in label_strs:\n        logging.info(f\"PR #{pr.number} doesn't seem to be a translation PR, skipping\")\n        sys.exit(0)\n\n    # Generate translation map, lang ID to discussion\n    discussions = get_graphql_translation_discussions(settings=settings)\n    lang_to_discussion_map: Dict[str, AllDiscussionsDiscussionNode] = {}\n    for discussion in discussions:\n        for edge in discussion.labels.edges:\n            label = edge.node.name\n            if label.startswith(\"lang-\") and not label == lang_all_label:\n                lang = label[5:]\n                lang_to_discussion_map[lang] = discussion\n    logging.debug(f\"Using translations map: {lang_to_discussion_map}\")\n\n    # Messages to create or check\n    new_translation_message = f\"Good news everyone! 😉 There's a new translation PR to be reviewed: #{pr.number} by @{pr.user.login}. 🎉 This requires 2 approvals from native speakers to be merged. 🤓\"\n    done_translation_message = f\"~There's a new translation PR to be reviewed: #{pr.number} by @{pr.user.login}~ Good job! This is done. 🍰☕\"\n\n    # Normally only one language, but still\n    for lang in langs:\n        if lang not in lang_to_discussion_map:\n            log_message = f\"Could not find discussion for language: {lang}\"\n            logging.error(log_message)\n            raise RuntimeError(log_message)\n        discussion = lang_to_discussion_map[lang]\n        logging.info(\n            f\"Found a translation discussion for language: {lang} in discussion: #{discussion.number}\"\n        )\n\n        already_notified_comment: Union[Comment, None] = None\n        already_done_comment: Union[Comment, None] = None\n\n        logging.info(\n            f\"Checking current comments in discussion: #{discussion.number} to see if already notified about this PR: #{pr.number}\"\n        )\n        comments = get_graphql_translation_discussion_comments(\n            settings=settings, discussion_number=discussion.number\n        )\n        for comment in comments:\n            if new_translation_message in comment.body:\n                already_notified_comment = comment\n            elif done_translation_message in comment.body:\n                already_done_comment = comment\n        logging.info(\n            f\"Already notified comment: {already_notified_comment}, already done comment: {already_done_comment}\"\n        )\n\n        if pr.state == \"open\" and awaiting_label in label_strs:\n            logging.info(\n                f\"This PR seems to be a language translation and awaiting reviews: #{pr.number}\"\n            )\n            if already_notified_comment:\n                logging.info(\n                    f\"This PR #{pr.number} was already notified in comment: {already_notified_comment.url}\"\n                )\n            else:\n                logging.info(\n                    f\"Writing notification comment about PR #{pr.number} in Discussion: #{discussion.number}\"\n                )\n                comment = create_comment(\n                    settings=settings,\n                    discussion_id=discussion.id,\n                    body=new_translation_message,\n                )\n                logging.info(f\"Notified in comment: {comment.url}\")\n        elif pr.state == \"closed\" or approved_label in label_strs:\n            logging.info(f\"Already approved or closed PR #{pr.number}\")\n            if already_done_comment:\n                logging.info(\n                    f\"This PR #{pr.number} was already marked as done in comment: {already_done_comment.url}\"\n                )\n            elif already_notified_comment:\n                updated_comment = update_comment(\n                    settings=settings,\n                    comment_id=already_notified_comment.id,\n                    body=done_translation_message,\n                )\n                logging.info(f\"Marked as done in comment: {updated_comment.url}\")\n        else:\n            logging.info(\n                f\"There doesn't seem to be anything to be done about PR #{pr.number}\"\n            )\n    logging.info(\"Finished\")",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "function",
    "name": "main",
    "loc": 306,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:Comment:chunk1",
    "text": "class Comment(BaseModel):\n    id: str\n    url: str\n    body: str",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "Comment",
    "loc": 87,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:UpdateDiscussionComment:chunk1",
    "text": "class UpdateDiscussionComment(BaseModel):\n    comment: Comment",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "UpdateDiscussionComment",
    "loc": 93,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:UpdateCommentData:chunk1",
    "text": "class UpdateCommentData(BaseModel):\n    updateDiscussionComment: UpdateDiscussionComment",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "UpdateCommentData",
    "loc": 97,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:UpdateCommentResponse:chunk1",
    "text": "class UpdateCommentResponse(BaseModel):\n    data: UpdateCommentData",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "UpdateCommentResponse",
    "loc": 101,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:AddDiscussionComment:chunk1",
    "text": "class AddDiscussionComment(BaseModel):\n    comment: Comment",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "AddDiscussionComment",
    "loc": 105,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:AddCommentData:chunk1",
    "text": "class AddCommentData(BaseModel):\n    addDiscussionComment: AddDiscussionComment",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "AddCommentData",
    "loc": 109,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:AddCommentResponse:chunk1",
    "text": "class AddCommentResponse(BaseModel):\n    data: AddCommentData",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "AddCommentResponse",
    "loc": 113,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:CommentsEdge:chunk1",
    "text": "class CommentsEdge(BaseModel):\n    node: Comment\n    cursor: str",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "CommentsEdge",
    "loc": 117,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:Comments:chunk1",
    "text": "class Comments(BaseModel):\n    edges: List[CommentsEdge]",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "Comments",
    "loc": 122,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:CommentsDiscussion:chunk1",
    "text": "class CommentsDiscussion(BaseModel):\n    comments: Comments",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "CommentsDiscussion",
    "loc": 126,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:CommentsRepository:chunk1",
    "text": "class CommentsRepository(BaseModel):\n    discussion: CommentsDiscussion",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "CommentsRepository",
    "loc": 130,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:CommentsData:chunk1",
    "text": "class CommentsData(BaseModel):\n    repository: CommentsRepository",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "CommentsData",
    "loc": 134,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:CommentsResponse:chunk1",
    "text": "class CommentsResponse(BaseModel):\n    data: CommentsData",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "CommentsResponse",
    "loc": 138,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:AllDiscussionsLabelNode:chunk1",
    "text": "class AllDiscussionsLabelNode(BaseModel):\n    id: str\n    name: str",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "AllDiscussionsLabelNode",
    "loc": 142,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:AllDiscussionsLabelsEdge:chunk1",
    "text": "class AllDiscussionsLabelsEdge(BaseModel):\n    node: AllDiscussionsLabelNode",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "AllDiscussionsLabelsEdge",
    "loc": 147,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:AllDiscussionsDiscussionLabels:chunk1",
    "text": "class AllDiscussionsDiscussionLabels(BaseModel):\n    edges: List[AllDiscussionsLabelsEdge]",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "AllDiscussionsDiscussionLabels",
    "loc": 151,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:AllDiscussionsDiscussionNode:chunk1",
    "text": "class AllDiscussionsDiscussionNode(BaseModel):\n    title: str\n    id: str\n    number: int\n    labels: AllDiscussionsDiscussionLabels",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "AllDiscussionsDiscussionNode",
    "loc": 155,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:AllDiscussionsDiscussions:chunk1",
    "text": "class AllDiscussionsDiscussions(BaseModel):\n    nodes: List[AllDiscussionsDiscussionNode]",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "AllDiscussionsDiscussions",
    "loc": 162,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:AllDiscussionsRepository:chunk1",
    "text": "class AllDiscussionsRepository(BaseModel):\n    discussions: AllDiscussionsDiscussions",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "AllDiscussionsRepository",
    "loc": 166,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:AllDiscussionsData:chunk1",
    "text": "class AllDiscussionsData(BaseModel):\n    repository: AllDiscussionsRepository",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "AllDiscussionsData",
    "loc": 170,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:AllDiscussionsResponse:chunk1",
    "text": "class AllDiscussionsResponse(BaseModel):\n    data: AllDiscussionsData",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "AllDiscussionsResponse",
    "loc": 174,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:Settings:chunk1",
    "text": "class Settings(BaseSettings):\n    model_config = {\"env_ignore_empty\": True}\n\n    github_repository: str\n    github_token: SecretStr\n    github_event_path: Path\n    github_event_name: Union[str, None] = None\n    httpx_timeout: int = 30\n    debug: Union[bool, None] = False\n    number: int | None = None",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "Settings",
    "loc": 178,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:PartialGitHubEventIssue:chunk1",
    "text": "class PartialGitHubEventIssue(BaseModel):\n    number: int | None = None",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "PartialGitHubEventIssue",
    "loc": 190,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\notify_translations.py:class:PartialGitHubEvent:chunk1",
    "text": "class PartialGitHubEvent(BaseModel):\n    pull_request: PartialGitHubEventIssue | None = None",
    "repo": "fastapi",
    "path": "scripts\\notify_translations.py",
    "type": "class",
    "name": "PartialGitHubEvent",
    "loc": 194,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\people.py:function:get_graphql_response:chunk1",
    "text": "def get_graphql_response(\n    *,\n    settings: Settings,\n    query: str,\n    after: Union[str, None] = None,\n    category_id: Union[str, None] = None,\n) -> dict[str, Any]:\n    headers = {\"Authorization\": f\"token {settings.github_token.get_secret_value()}\"}\n    variables = {\"after\": after, \"category_id\": category_id}\n    response = httpx.post(\n        github_graphql_url,\n        headers=headers,\n        timeout=settings.httpx_timeout,\n        json={\"query\": query, \"variables\": variables, \"operationName\": \"Q\"},\n    )\n    if response.status_code != 200:\n        logging.error(\n            f\"Response was not 200, after: {after}, category_id: {category_id}\"\n        )\n        logging.error(response.text)\n        raise RuntimeError(response.text)\n    data = response.json()\n    if \"errors\" in data:\n        logging.error(f\"Errors in response, after: {after}, category_id: {category_id}\")\n        logging.error(data[\"errors\"])\n        logging.error(response.text)\n        raise RuntimeError(response.text)\n    return data",
    "repo": "fastapi",
    "path": "scripts\\people.py",
    "type": "function",
    "name": "get_graphql_response",
    "loc": 124,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\people.py:function:get_graphql_question_discussion_edges:chunk1",
    "text": "def get_graphql_question_discussion_edges(\n    *,\n    settings: Settings,\n    after: Union[str, None] = None,\n) -> list[DiscussionsEdge]:\n    data = get_graphql_response(\n        settings=settings,\n        query=discussions_query,\n        after=after,\n        category_id=questions_category_id,\n    )\n    graphql_response = DiscussionsResponse.model_validate(data)\n    return graphql_response.data.repository.discussions.edges",
    "repo": "fastapi",
    "path": "scripts\\people.py",
    "type": "function",
    "name": "get_graphql_question_discussion_edges",
    "loc": 154,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\people.py:function:get_discussion_nodes:chunk1",
    "text": "def get_discussion_nodes(settings: Settings) -> list[DiscussionsNode]:\n    discussion_nodes: list[DiscussionsNode] = []\n    discussion_edges = get_graphql_question_discussion_edges(settings=settings)\n\n    while discussion_edges:\n        for discussion_edge in discussion_edges:\n            discussion_nodes.append(discussion_edge.node)\n        last_edge = discussion_edges[-1]\n        # Handle GitHub secondary rate limits, requests per minute\n        time.sleep(5)\n        discussion_edges = get_graphql_question_discussion_edges(\n            settings=settings, after=last_edge.cursor\n        )\n    return discussion_nodes",
    "repo": "fastapi",
    "path": "scripts\\people.py",
    "type": "function",
    "name": "get_discussion_nodes",
    "loc": 178,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\people.py:function:get_discussions_experts:chunk1",
    "text": "def get_discussions_experts(\n    discussion_nodes: list[DiscussionsNode],\n) -> DiscussionExpertsResults:\n    commenters = Counter[str]()\n    last_month_commenters = Counter[str]()\n    three_months_commenters = Counter[str]()\n    six_months_commenters = Counter[str]()\n    one_year_commenters = Counter[str]()\n    authors: dict[str, Author] = {}\n\n    now = datetime.now(tz=timezone.utc)\n    one_month_ago = now - timedelta(days=30)\n    three_months_ago = now - timedelta(days=90)\n    six_months_ago = now - timedelta(days=180)\n    one_year_ago = now - timedelta(days=365)\n\n    for discussion in discussion_nodes:\n        discussion_author_name = None\n        if discussion.author:\n            authors[discussion.author.login] = discussion.author\n            discussion_author_name = discussion.author.login\n        discussion_commentors: dict[str, datetime] = {}\n        for comment in discussion.comments.nodes:\n            if comment.author:\n                authors[comment.author.login] = comment.author\n                if comment.author.login != discussion_author_name:\n                    author_time = discussion_commentors.get(\n                        comment.author.login, comment.createdAt\n                    )\n                    discussion_commentors[comment.author.login] = max(\n                        author_time, comment.createdAt\n                    )\n            for reply in comment.replies.nodes:\n                if reply.author:\n                    authors[reply.author.login] = reply.author\n                    if reply.author.login != discussion_author_name:\n                        author_time = discussion_commentors.get(\n                            reply.author.login, reply.createdAt\n                        )\n                        discussion_commentors[reply.author.login] = max(\n                            author_time, reply.createdAt\n                        )\n        for author_name, author_time in discussion_commentors.items():\n            commenters[author_name] += 1\n            if author_time > one_month_ago:\n                last_month_commenters[author_name] += 1\n            if author_time > three_months_ago:\n                three_months_commenters[author_name] += 1\n            if author_time > six_months_ago:\n                six_months_commenters[author_name] += 1\n            if author_time > one_year_ago:\n                one_year_commenters[author_name] += 1\n    discussion_experts_results = DiscussionExpertsResults(\n        authors=authors,\n        commenters=commenters,\n        last_month_commenters=last_month_commenters,\n        three_months_commenters=three_months_commenters,\n        six_months_commenters=six_months_commenters,\n        one_year_commenters=one_year_commenters,\n    )\n    return discussion_experts_results",
    "repo": "fastapi",
    "path": "scripts\\people.py",
    "type": "function",
    "name": "get_discussions_experts",
    "loc": 194,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\people.py:function:get_top_users:chunk1",
    "text": "def get_top_users(\n    *,\n    counter: Counter[str],\n    authors: dict[str, Author],\n    skip_users: Container[str],\n    min_count: int = 2,\n) -> list[dict[str, Any]]:\n    users: list[dict[str, Any]] = []\n    for commenter, count in counter.most_common(50):\n        if commenter in skip_users:\n            continue\n        if count >= min_count:\n            author = authors[commenter]\n            users.append(\n                {\n                    \"login\": commenter,\n                    \"count\": count,\n                    \"avatarUrl\": author.avatarUrl,\n                    \"url\": author.url,\n                }\n            )\n    return users",
    "repo": "fastapi",
    "path": "scripts\\people.py",
    "type": "function",
    "name": "get_top_users",
    "loc": 257,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\people.py:function:get_users_to_write:chunk1",
    "text": "def get_users_to_write(\n    *,\n    counter: Counter[str],\n    authors: dict[str, Author],\n    min_count: int = 2,\n) -> list[dict[str, Any]]:\n    users: dict[str, Any] = {}\n    users_list: list[dict[str, Any]] = []\n    for user, count in counter.most_common(60):\n        if count >= min_count:\n            author = authors[user]\n            user_data = {\n                \"login\": user,\n                \"count\": count,\n                \"avatarUrl\": author.avatarUrl,\n                \"url\": author.url,\n            }\n            users[user] = user_data\n            users_list.append(user_data)\n    return users_list",
    "repo": "fastapi",
    "path": "scripts\\people.py",
    "type": "function",
    "name": "get_users_to_write",
    "loc": 281,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\people.py:function:update_content:chunk1",
    "text": "def update_content(*, content_path: Path, new_content: Any) -> bool:\n    old_content = content_path.read_text(encoding=\"utf-8\")\n\n    new_content = yaml.dump(new_content, sort_keys=False, width=200, allow_unicode=True)\n    if old_content == new_content:\n        logging.info(f\"The content hasn't changed for {content_path}\")\n        return False\n    content_path.write_text(new_content, encoding=\"utf-8\")\n    logging.info(f\"Updated {content_path}\")\n    return True",
    "repo": "fastapi",
    "path": "scripts\\people.py",
    "type": "function",
    "name": "update_content",
    "loc": 303,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\people.py:function:main:chunk1",
    "text": "def main() -> None:\n    logging.basicConfig(level=logging.INFO)\n    settings = Settings()\n    logging.info(f\"Using config: {settings.model_dump_json()}\")\n    g = Github(settings.github_token.get_secret_value())\n    repo = g.get_repo(settings.github_repository)\n\n    discussion_nodes = get_discussion_nodes(settings=settings)\n    experts_results = get_discussions_experts(discussion_nodes=discussion_nodes)\n\n    authors = experts_results.authors\n    maintainers_logins = {\"tiangolo\"}\n    maintainers = []\n    for login in maintainers_logins:\n        user = authors[login]\n        maintainers.append(\n            {\n                \"login\": login,\n                \"answers\": experts_results.commenters[login],\n                \"avatarUrl\": user.avatarUrl,\n                \"url\": user.url,\n            }\n        )\n\n    experts = get_users_to_write(\n        counter=experts_results.commenters,\n        authors=authors,\n    )\n    last_month_experts = get_users_to_write(\n        counter=experts_results.last_month_commenters,\n        authors=authors,\n    )\n    three_months_experts = get_users_to_write(\n        counter=experts_results.three_months_commenters,\n        authors=authors,\n    )\n    six_months_experts = get_users_to_write(\n        counter=experts_results.six_months_commenters,\n        authors=authors,\n    )\n    one_year_experts = get_users_to_write(\n        counter=experts_results.one_year_commenters,\n        authors=authors,\n    )\n\n    people = {\n        \"maintainers\": maintainers,\n        \"experts\": experts,\n        \"last_month_experts\": last_month_experts,\n        \"three_months_experts\": three_months_experts,\n        \"six_months_experts\": six_months_experts,\n        \"one_year_experts\": one_year_experts,\n    }\n\n    # For local development\n    # people_path = Path(\"../docs/en/data/people.yml\")\n    people_path = Path(\"./docs/en/data/people.yml\")\n\n    updated = update_content(content_path=people_path, new_content=people)\n\n    if not updated:\n        logging.info(\"The data hasn't changed, finishing.\")\n        return\n\n    logging.info(\"Setting up GitHub Actions git user\")\n    subprocess.run([\"git\", \"config\", \"user.name\", \"github-actions\"], check=True)\n    subprocess.run(\n        [\"git\", \"config\", \"user.email\", \"github-actions@github.com\"], check=True\n    )\n    branch_name = f\"fastapi-people-experts-{secrets.token_hex(4)}\"\n    logging.info(f\"Creating a new branch {branch_name}\")\n    subprocess.run([\"git\", \"checkout\", \"-b\", branch_name], check=True)\n    logging.info(\"Adding updated file\")\n    subprocess.run([\"git\", \"add\", str(people_path)], check=True)\n    logging.info(\"Committing updated file\")\n    message = \"👥 Update FastAPI People - Experts\"\n    subprocess.run([\"git\", \"commit\", \"-m\", message], check=True)\n    logging.info(\"Pushing branch\")\n    subprocess.run([\"git\", \"push\", \"origin\", branch_name], check=True)\n    logging.info(\"Creating PR\")\n    pr = repo.create_pull(title=message, body=message, base=\"master\", head=branch_name)\n    logging.info(f\"Created PR: {pr.number}\")\n    logging.info(\"Finished\")",
    "repo": "fastapi",
    "path": "scripts\\people.py",
    "type": "function",
    "name": "main",
    "loc": 315,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\people.py:class:Author:chunk1",
    "text": "class Author(BaseModel):\n    login: str\n    avatarUrl: str | None = None\n    url: str | None = None",
    "repo": "fastapi",
    "path": "scripts\\people.py",
    "type": "class",
    "name": "Author",
    "loc": 64,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\people.py:class:CommentsNode:chunk1",
    "text": "class CommentsNode(BaseModel):\n    createdAt: datetime\n    author: Union[Author, None] = None",
    "repo": "fastapi",
    "path": "scripts\\people.py",
    "type": "class",
    "name": "CommentsNode",
    "loc": 70,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\people.py:class:Replies:chunk1",
    "text": "class Replies(BaseModel):\n    totalCount: int\n    nodes: list[CommentsNode]",
    "repo": "fastapi",
    "path": "scripts\\people.py",
    "type": "class",
    "name": "Replies",
    "loc": 75,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\people.py:class:DiscussionsCommentsNode:chunk1",
    "text": "class DiscussionsCommentsNode(CommentsNode):\n    replies: Replies",
    "repo": "fastapi",
    "path": "scripts\\people.py",
    "type": "class",
    "name": "DiscussionsCommentsNode",
    "loc": 80,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\people.py:class:DiscussionsComments:chunk1",
    "text": "class DiscussionsComments(BaseModel):\n    totalCount: int\n    nodes: list[DiscussionsCommentsNode]",
    "repo": "fastapi",
    "path": "scripts\\people.py",
    "type": "class",
    "name": "DiscussionsComments",
    "loc": 84,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\people.py:class:DiscussionsNode:chunk1",
    "text": "class DiscussionsNode(BaseModel):\n    number: int\n    author: Union[Author, None] = None\n    title: str | None = None\n    createdAt: datetime\n    comments: DiscussionsComments",
    "repo": "fastapi",
    "path": "scripts\\people.py",
    "type": "class",
    "name": "DiscussionsNode",
    "loc": 89,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\people.py:class:DiscussionsEdge:chunk1",
    "text": "class DiscussionsEdge(BaseModel):\n    cursor: str\n    node: DiscussionsNode",
    "repo": "fastapi",
    "path": "scripts\\people.py",
    "type": "class",
    "name": "DiscussionsEdge",
    "loc": 97,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\people.py:class:Discussions:chunk1",
    "text": "class Discussions(BaseModel):\n    edges: list[DiscussionsEdge]",
    "repo": "fastapi",
    "path": "scripts\\people.py",
    "type": "class",
    "name": "Discussions",
    "loc": 102,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\people.py:class:DiscussionsRepository:chunk1",
    "text": "class DiscussionsRepository(BaseModel):\n    discussions: Discussions",
    "repo": "fastapi",
    "path": "scripts\\people.py",
    "type": "class",
    "name": "DiscussionsRepository",
    "loc": 106,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\people.py:class:DiscussionsResponseData:chunk1",
    "text": "class DiscussionsResponseData(BaseModel):\n    repository: DiscussionsRepository",
    "repo": "fastapi",
    "path": "scripts\\people.py",
    "type": "class",
    "name": "DiscussionsResponseData",
    "loc": 110,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\people.py:class:DiscussionsResponse:chunk1",
    "text": "class DiscussionsResponse(BaseModel):\n    data: DiscussionsResponseData",
    "repo": "fastapi",
    "path": "scripts\\people.py",
    "type": "class",
    "name": "DiscussionsResponse",
    "loc": 114,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\people.py:class:Settings:chunk1",
    "text": "class Settings(BaseSettings):\n    github_token: SecretStr\n    github_repository: str\n    httpx_timeout: int = 30",
    "repo": "fastapi",
    "path": "scripts\\people.py",
    "type": "class",
    "name": "Settings",
    "loc": 118,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\people.py:class:DiscussionExpertsResults:chunk1",
    "text": "class DiscussionExpertsResults(BaseModel):\n    commenters: Counter[str]\n    last_month_commenters: Counter[str]\n    three_months_commenters: Counter[str]\n    six_months_commenters: Counter[str]\n    one_year_commenters: Counter[str]\n    authors: dict[str, Author]",
    "repo": "fastapi",
    "path": "scripts\\people.py",
    "type": "class",
    "name": "DiscussionExpertsResults",
    "loc": 169,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\sponsors.py:function:get_graphql_response:chunk1",
    "text": "def get_graphql_response(\n    *,\n    settings: Settings,\n    query: str,\n    after: str | None = None,\n) -> dict[str, Any]:\n    headers = {\"Authorization\": f\"token {settings.sponsors_token.get_secret_value()}\"}\n    variables = {\"after\": after}\n    response = httpx.post(\n        github_graphql_url,\n        headers=headers,\n        timeout=settings.httpx_timeout,\n        json={\"query\": query, \"variables\": variables, \"operationName\": \"Q\"},\n    )\n    if response.status_code != 200:\n        logging.error(f\"Response was not 200, after: {after}\")\n        logging.error(response.text)\n        raise RuntimeError(response.text)\n    data = response.json()\n    if \"errors\" in data:\n        logging.error(f\"Errors in response, after: {after}\")\n        logging.error(data[\"errors\"])\n        logging.error(response.text)\n        raise RuntimeError(response.text)\n    return data",
    "repo": "fastapi",
    "path": "scripts\\sponsors.py",
    "type": "function",
    "name": "get_graphql_response",
    "loc": 92,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\sponsors.py:function:get_graphql_sponsor_edges:chunk1",
    "text": "def get_graphql_sponsor_edges(\n    *, settings: Settings, after: str | None = None\n) -> list[SponsorshipAsMaintainerEdge]:\n    data = get_graphql_response(settings=settings, query=sponsors_query, after=after)\n    graphql_response = SponsorsResponse.model_validate(data)\n    return graphql_response.data.user.sponsorshipsAsMaintainer.edges",
    "repo": "fastapi",
    "path": "scripts\\sponsors.py",
    "type": "function",
    "name": "get_graphql_sponsor_edges",
    "loc": 119,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\sponsors.py:function:get_individual_sponsors:chunk1",
    "text": "def get_individual_sponsors(\n    settings: Settings,\n) -> defaultdict[float, dict[str, SponsorEntity]]:\n    nodes: list[SponsorshipAsMaintainerNode] = []\n    edges = get_graphql_sponsor_edges(settings=settings)\n\n    while edges:\n        for edge in edges:\n            nodes.append(edge.node)\n        last_edge = edges[-1]\n        edges = get_graphql_sponsor_edges(settings=settings, after=last_edge.cursor)\n\n    tiers: defaultdict[float, dict[str, SponsorEntity]] = defaultdict(dict)\n    for node in nodes:\n        tiers[node.tier.monthlyPriceInDollars][node.sponsorEntity.login] = (\n            node.sponsorEntity\n        )\n    return tiers",
    "repo": "fastapi",
    "path": "scripts\\sponsors.py",
    "type": "function",
    "name": "get_individual_sponsors",
    "loc": 127,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\sponsors.py:function:update_content:chunk1",
    "text": "def update_content(*, content_path: Path, new_content: Any) -> bool:\n    old_content = content_path.read_text(encoding=\"utf-8\")\n\n    new_content = yaml.dump(new_content, sort_keys=False, width=200, allow_unicode=True)\n    if old_content == new_content:\n        logging.info(f\"The content hasn't changed for {content_path}\")\n        return False\n    content_path.write_text(new_content, encoding=\"utf-8\")\n    logging.info(f\"Updated {content_path}\")\n    return True",
    "repo": "fastapi",
    "path": "scripts\\sponsors.py",
    "type": "function",
    "name": "update_content",
    "loc": 147,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\sponsors.py:function:main:chunk1",
    "text": "def main() -> None:\n    logging.basicConfig(level=logging.INFO)\n    settings = Settings()\n    logging.info(f\"Using config: {settings.model_dump_json()}\")\n    g = Github(settings.pr_token.get_secret_value())\n    repo = g.get_repo(settings.github_repository)\n\n    tiers = get_individual_sponsors(settings=settings)\n    keys = list(tiers.keys())\n    keys.sort(reverse=True)\n    sponsors = []\n    for key in keys:\n        sponsor_group = []\n        for login, sponsor in tiers[key].items():\n            sponsor_group.append(\n                {\"login\": login, \"avatarUrl\": sponsor.avatarUrl, \"url\": sponsor.url}\n            )\n        sponsors.append(sponsor_group)\n    github_sponsors = {\n        \"sponsors\": sponsors,\n    }\n\n    # For local development\n    # github_sponsors_path = Path(\"../docs/en/data/github_sponsors.yml\")\n    github_sponsors_path = Path(\"./docs/en/data/github_sponsors.yml\")\n    updated = update_content(\n        content_path=github_sponsors_path, new_content=github_sponsors\n    )\n\n    if not updated:\n        logging.info(\"The data hasn't changed, finishing.\")\n        return\n\n    logging.info(\"Setting up GitHub Actions git user\")\n    subprocess.run([\"git\", \"config\", \"user.name\", \"github-actions\"], check=True)\n    subprocess.run(\n        [\"git\", \"config\", \"user.email\", \"github-actions@github.com\"], check=True\n    )\n    branch_name = f\"fastapi-people-sponsors-{secrets.token_hex(4)}\"\n    logging.info(f\"Creating a new branch {branch_name}\")\n    subprocess.run([\"git\", \"checkout\", \"-b\", branch_name], check=True)\n    logging.info(\"Adding updated file\")\n    subprocess.run(\n        [\n            \"git\",\n            \"add\",\n            str(github_sponsors_path),\n        ],\n        check=True,\n    )\n    logging.info(\"Committing updated file\")\n    message = \"👥 Update FastAPI People - Sponsors\"\n    subprocess.run([\"git\", \"commit\", \"-m\", message], check=True)\n    logging.info(\"Pushing branch\")\n    subprocess.run([\"git\", \"push\", \"origin\", branch_name], check=True)\n    logging.info(\"Creating PR\")\n    pr = repo.create_pull(title=message, body=message, base=\"master\", head=branch_name)\n    logging.info(f\"Created PR: {pr.number}\")\n    logging.info(\"Finished\")",
    "repo": "fastapi",
    "path": "scripts\\sponsors.py",
    "type": "function",
    "name": "main",
    "loc": 159,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\sponsors.py:class:SponsorEntity:chunk1",
    "text": "class SponsorEntity(BaseModel):\n    login: str\n    avatarUrl: str\n    url: str",
    "repo": "fastapi",
    "path": "scripts\\sponsors.py",
    "type": "class",
    "name": "SponsorEntity",
    "loc": 48,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\sponsors.py:class:Tier:chunk1",
    "text": "class Tier(BaseModel):\n    name: str\n    monthlyPriceInDollars: float",
    "repo": "fastapi",
    "path": "scripts\\sponsors.py",
    "type": "class",
    "name": "Tier",
    "loc": 54,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\sponsors.py:class:SponsorshipAsMaintainerNode:chunk1",
    "text": "class SponsorshipAsMaintainerNode(BaseModel):\n    sponsorEntity: SponsorEntity\n    tier: Tier",
    "repo": "fastapi",
    "path": "scripts\\sponsors.py",
    "type": "class",
    "name": "SponsorshipAsMaintainerNode",
    "loc": 59,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\sponsors.py:class:SponsorshipAsMaintainerEdge:chunk1",
    "text": "class SponsorshipAsMaintainerEdge(BaseModel):\n    cursor: str\n    node: SponsorshipAsMaintainerNode",
    "repo": "fastapi",
    "path": "scripts\\sponsors.py",
    "type": "class",
    "name": "SponsorshipAsMaintainerEdge",
    "loc": 64,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\sponsors.py:class:SponsorshipAsMaintainer:chunk1",
    "text": "class SponsorshipAsMaintainer(BaseModel):\n    edges: list[SponsorshipAsMaintainerEdge]",
    "repo": "fastapi",
    "path": "scripts\\sponsors.py",
    "type": "class",
    "name": "SponsorshipAsMaintainer",
    "loc": 69,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\sponsors.py:class:SponsorsUser:chunk1",
    "text": "class SponsorsUser(BaseModel):\n    sponsorshipsAsMaintainer: SponsorshipAsMaintainer",
    "repo": "fastapi",
    "path": "scripts\\sponsors.py",
    "type": "class",
    "name": "SponsorsUser",
    "loc": 73,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\sponsors.py:class:SponsorsResponseData:chunk1",
    "text": "class SponsorsResponseData(BaseModel):\n    user: SponsorsUser",
    "repo": "fastapi",
    "path": "scripts\\sponsors.py",
    "type": "class",
    "name": "SponsorsResponseData",
    "loc": 77,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\sponsors.py:class:SponsorsResponse:chunk1",
    "text": "class SponsorsResponse(BaseModel):\n    data: SponsorsResponseData",
    "repo": "fastapi",
    "path": "scripts\\sponsors.py",
    "type": "class",
    "name": "SponsorsResponse",
    "loc": 81,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\sponsors.py:class:Settings:chunk1",
    "text": "class Settings(BaseSettings):\n    sponsors_token: SecretStr\n    pr_token: SecretStr\n    github_repository: str\n    httpx_timeout: int = 30",
    "repo": "fastapi",
    "path": "scripts\\sponsors.py",
    "type": "class",
    "name": "Settings",
    "loc": 85,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\topic_repos.py:function:main:chunk1",
    "text": "def main() -> None:\n    logging.basicConfig(level=logging.INFO)\n    settings = Settings()\n\n    logging.info(f\"Using config: {settings.model_dump_json()}\")\n    g = Github(settings.github_token.get_secret_value(), per_page=100)\n    r = g.get_repo(settings.github_repository)\n    repos = g.search_repositories(query=\"topic:fastapi\")\n    repos_list = list(repos)\n    final_repos: list[Repo] = []\n    for repo in repos_list[:100]:\n        if repo.full_name == settings.github_repository:\n            continue\n        final_repos.append(\n            Repo(\n                name=repo.name,\n                html_url=repo.html_url,\n                stars=repo.stargazers_count,\n                owner_login=repo.owner.login,\n                owner_html_url=repo.owner.html_url,\n            )\n        )\n    data = [repo.model_dump() for repo in final_repos]\n\n    # Local development\n    # repos_path = Path(\"../docs/en/data/topic_repos.yml\")\n    repos_path = Path(\"./docs/en/data/topic_repos.yml\")\n    repos_old_content = repos_path.read_text(encoding=\"utf-8\")\n    new_repos_content = yaml.dump(data, sort_keys=False, width=200, allow_unicode=True)\n    if repos_old_content == new_repos_content:\n        logging.info(\"The data hasn't changed. Finishing.\")\n        return\n    repos_path.write_text(new_repos_content, encoding=\"utf-8\")\n    logging.info(\"Setting up GitHub Actions git user\")\n    subprocess.run([\"git\", \"config\", \"user.name\", \"github-actions\"], check=True)\n    subprocess.run(\n        [\"git\", \"config\", \"user.email\", \"github-actions@github.com\"], check=True\n    )\n    branch_name = f\"fastapi-topic-repos-{secrets.token_hex(4)}\"\n    logging.info(f\"Creating a new branch {branch_name}\")\n    subprocess.run([\"git\", \"checkout\", \"-b\", branch_name], check=True)\n    logging.info(\"Adding updated file\")\n    subprocess.run([\"git\", \"add\", str(repos_path)], check=True)\n    logging.info(\"Committing updated file\")\n    message = \"👥 Update FastAPI GitHub topic repositories\"\n    subprocess.run([\"git\", \"commit\", \"-m\", message], check=True)\n    logging.info(\"Pushing branch\")\n    subprocess.run([\"git\", \"push\", \"origin\", branch_name], check=True)\n    logging.info(\"Creating PR\")\n    pr = r.create_pull(title=message, body=message, base=\"master\", head=branch_name)\n    logging.info(f\"Created PR: {pr.number}\")\n    logging.info(\"Finished\")",
    "repo": "fastapi",
    "path": "scripts\\topic_repos.py",
    "type": "function",
    "name": "main",
    "loc": 25,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\topic_repos.py:class:Settings:chunk1",
    "text": "class Settings(BaseSettings):\n    github_repository: str\n    github_token: SecretStr",
    "repo": "fastapi",
    "path": "scripts\\topic_repos.py",
    "type": "class",
    "name": "Settings",
    "loc": 12,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\topic_repos.py:class:Repo:chunk1",
    "text": "class Repo(BaseModel):\n    name: str\n    html_url: str\n    stars: int\n    owner_login: str\n    owner_html_url: str",
    "repo": "fastapi",
    "path": "scripts\\topic_repos.py",
    "type": "class",
    "name": "Repo",
    "loc": 17,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\translate.py:function:get_langs:chunk1",
    "text": "def get_langs() -> dict[str, str]:\n    return yaml.safe_load(Path(\"docs/language_names.yml\").read_text())",
    "repo": "fastapi",
    "path": "scripts\\translate.py",
    "type": "function",
    "name": "get_langs",
    "loc": 35,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\translate.py:function:generate_lang_path:chunk1",
    "text": "def generate_lang_path(*, lang: str, path: Path) -> Path:\n    en_docs_path = Path(\"docs/en/docs\")\n    assert str(path).startswith(\n        str(en_docs_path)\n    ), f\"Path must be inside {en_docs_path}\"\n    lang_docs_path = Path(f\"docs/{lang}/docs\")\n    out_path = Path(str(path).replace(str(en_docs_path), str(lang_docs_path)))\n    return out_path",
    "repo": "fastapi",
    "path": "scripts\\translate.py",
    "type": "function",
    "name": "generate_lang_path",
    "loc": 39,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\translate.py:function:translate_page:chunk1",
    "text": "def translate_page(*, lang: str, path: Path) -> None:\n    langs = get_langs()\n    language = langs[lang]\n    lang_path = Path(f\"docs/{lang}\")\n    lang_path.mkdir(exist_ok=True)\n    lang_prompt_path = lang_path / \"llm-prompt.md\"\n    assert lang_prompt_path.exists(), f\"Prompt file not found: {lang_prompt_path}\"\n    lang_prompt_content = lang_prompt_path.read_text()\n\n    en_docs_path = Path(\"docs/en/docs\")\n    assert str(path).startswith(\n        str(en_docs_path)\n    ), f\"Path must be inside {en_docs_path}\"\n    out_path = generate_lang_path(lang=lang, path=path)\n    out_path.parent.mkdir(parents=True, exist_ok=True)\n    original_content = path.read_text()\n    old_translation: str | None = None\n    if out_path.exists():\n        old_translation = out_path.read_text()\n    agent = Agent(\"openai:gpt-4o\")\n\n    prompt_segments = [\n        lang_prompt_content,\n        general_prompt,\n    ]\n    if old_translation:\n        prompt_segments.extend(\n            [\n                \"There's an existing previous translation for this content that is probably outdated with old content or old instructions.\",\n                \"Update the translation given your current instructions and the original content.\",\n                \"If you have instructions to translate specific terms or phrases in a specific way, please follow those instructions instead of keeping the old and outdated content.\",\n                \"Previous translation:\",\n                f\"%%%\\n{old_translation}%%%\",\n            ]\n        )\n    prompt_segments.extend(\n        [\n            f\"Translate to {language} ({lang}).\",\n            \"Original content:\",\n            f\"%%%\\n{original_content}%%%\",\n        ]\n    )\n    prompt = \"\\n\\n\".join(prompt_segments)\n\n    result = agent.run_sync(prompt)\n    out_content = f\"{result.data.strip()}\\n\"\n    out_path.write_text(out_content)",
    "repo": "fastapi",
    "path": "scripts\\translate.py",
    "type": "function",
    "name": "translate_page",
    "loc": 49,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\translate.py:function:iter_paths_to_translate:chunk1",
    "text": "def iter_paths_to_translate() -> Iterable[Path]:\n    \"\"\"\n    Iterate on the markdown files to translate in order of priority.\n    \"\"\"\n    first_dirs = [\n        Path(\"docs/en/docs/learn\"),\n        Path(\"docs/en/docs/tutorial\"),\n        Path(\"docs/en/docs/advanced\"),\n        Path(\"docs/en/docs/about\"),\n        Path(\"docs/en/docs/how-to\"),\n    ]\n    first_parent = Path(\"docs/en/docs\")\n    yield from first_parent.glob(\"*.md\")\n    for dir_path in first_dirs:\n        yield from dir_path.rglob(\"*.md\")\n    first_dirs_str = tuple(str(d) for d in first_dirs)\n    for path in Path(\"docs/en/docs\").rglob(\"*.md\"):\n        if str(path).startswith(first_dirs_str):\n            continue\n        if path.parent == first_parent:\n            continue\n        yield path",
    "repo": "fastapi",
    "path": "scripts\\translate.py",
    "type": "function",
    "name": "iter_paths_to_translate",
    "loc": 98,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\translate.py:function:translate_all:chunk1",
    "text": "def translate_all(lang: str) -> None:\n    paths_to_process: list[Path] = []\n    for path in iter_paths_to_translate():\n        if str(path).replace(\"docs/en/docs/\", \"\").startswith(non_translated_sections):\n            continue\n        paths_to_process.append(path)\n    print(\"Original paths:\")\n    for p in paths_to_process:\n        print(f\"  - {p}\")\n    print(f\"Total original paths: {len(paths_to_process)}\")\n    missing_paths: list[Path] = []\n    skipped_paths: list[Path] = []\n    for p in paths_to_process:\n        lang_path = generate_lang_path(lang=lang, path=p)\n        if lang_path.exists():\n            skipped_paths.append(p)\n            continue\n        missing_paths.append(p)\n    print(\"Paths to skip:\")\n    for p in skipped_paths:\n        print(f\"  - {p}\")\n    print(f\"Total paths to skip: {len(skipped_paths)}\")\n    print(\"Paths to process:\")\n    for p in missing_paths:\n        print(f\"  - {p}\")\n    print(f\"Total paths to process: {len(missing_paths)}\")\n    for p in missing_paths:\n        print(f\"Translating: {p}\")\n        translate_page(lang=\"es\", path=p)\n        print(f\"Done translating: {p}\")",
    "repo": "fastapi",
    "path": "scripts\\translate.py",
    "type": "function",
    "name": "translate_all",
    "loc": 122,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\translate.py:function:main:chunk1",
    "text": "def main(*, lang: str, path: Path = None) -> None:\n    if path:\n        translate_page(lang=lang, path=path)\n    else:\n        translate_all(lang=lang)",
    "repo": "fastapi",
    "path": "scripts\\translate.py",
    "type": "function",
    "name": "main",
    "loc": 154,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\playwright\\cookie_param_models\\image01.py:function:run:chunk1",
    "text": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    # Update the viewport manually\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context()\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_role(\"link\", name=\"/items/\").click()\n    # Manually add the screenshot\n    page.screenshot(path=\"docs/en/docs/img/tutorial/cookie-param-models/image01.png\")\n\n    # ---------------------\n    context.close()\n    browser.close()",
    "repo": "fastapi",
    "path": "scripts\\playwright\\cookie_param_models\\image01.py",
    "type": "function",
    "name": "run",
    "loc": 9,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\playwright\\header_param_models\\image01.py:function:run:chunk1",
    "text": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    # Update the viewport manually\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_role(\"button\", name=\"GET /items/ Read Items\").click()\n    page.get_by_role(\"button\", name=\"Try it out\").click()\n    # Manually add the screenshot\n    page.screenshot(path=\"docs/en/docs/img/tutorial/header-param-models/image01.png\")\n\n    # ---------------------\n    context.close()\n    browser.close()",
    "repo": "fastapi",
    "path": "scripts\\playwright\\header_param_models\\image01.py",
    "type": "function",
    "name": "run",
    "loc": 9,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\playwright\\query_param_models\\image01.py:function:run:chunk1",
    "text": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    # Update the viewport manually\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context()\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_role(\"button\", name=\"GET /items/ Read Items\").click()\n    page.get_by_role(\"button\", name=\"Try it out\").click()\n    page.get_by_role(\"heading\", name=\"Servers\").click()\n    # Manually add the screenshot\n    page.screenshot(path=\"docs/en/docs/img/tutorial/query-param-models/image01.png\")\n\n    # ---------------------\n    context.close()\n    browser.close()",
    "repo": "fastapi",
    "path": "scripts\\playwright\\query_param_models\\image01.py",
    "type": "function",
    "name": "run",
    "loc": 9,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\playwright\\request_form_models\\image01.py:function:run:chunk1",
    "text": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    # Update the viewport manually\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_role(\"button\", name=\"POST /login/ Login\").click()\n    page.get_by_role(\"button\", name=\"Try it out\").click()\n    # Manually add the screenshot\n    page.screenshot(path=\"docs/en/docs/img/tutorial/request-form-models/image01.png\")\n\n    # ---------------------\n    context.close()\n    browser.close()",
    "repo": "fastapi",
    "path": "scripts\\playwright\\request_form_models\\image01.py",
    "type": "function",
    "name": "run",
    "loc": 9,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\playwright\\separate_openapi_schemas\\image01.py:function:run:chunk1",
    "text": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    # Update the viewport manually\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_text(\"POST/items/Create Item\").click()\n    page.get_by_role(\"tab\", name=\"Schema\").first.click()\n    # Manually add the screenshot\n    page.screenshot(\n        path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image01.png\"\n    )\n\n    # ---------------------\n    context.close()\n    browser.close()",
    "repo": "fastapi",
    "path": "scripts\\playwright\\separate_openapi_schemas\\image01.py",
    "type": "function",
    "name": "run",
    "loc": 7,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\playwright\\separate_openapi_schemas\\image02.py:function:run:chunk1",
    "text": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    # Update the viewport manually\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_text(\"GET/items/Read Items\").click()\n    page.get_by_role(\"button\", name=\"Try it out\").click()\n    page.get_by_role(\"button\", name=\"Execute\").click()\n    # Manually add the screenshot\n    page.screenshot(\n        path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image02.png\"\n    )\n\n    # ---------------------\n    context.close()\n    browser.close()",
    "repo": "fastapi",
    "path": "scripts\\playwright\\separate_openapi_schemas\\image02.py",
    "type": "function",
    "name": "run",
    "loc": 7,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\playwright\\separate_openapi_schemas\\image03.py:function:run:chunk1",
    "text": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    # Update the viewport manually\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_text(\"GET/items/Read Items\").click()\n    page.get_by_role(\"tab\", name=\"Schema\").click()\n    page.get_by_label(\"Schema\").get_by_role(\"button\", name=\"Expand all\").click()\n    # Manually add the screenshot\n    page.screenshot(\n        path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image03.png\"\n    )\n\n    # ---------------------\n    context.close()\n    browser.close()",
    "repo": "fastapi",
    "path": "scripts\\playwright\\separate_openapi_schemas\\image03.py",
    "type": "function",
    "name": "run",
    "loc": 7,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\playwright\\separate_openapi_schemas\\image04.py:function:run:chunk1",
    "text": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    # Update the viewport manually\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_role(\"button\", name=\"Item-Input\").click()\n    page.get_by_role(\"button\", name=\"Item-Output\").click()\n    page.set_viewport_size({\"width\": 960, \"height\": 820})\n    # Manually add the screenshot\n    page.screenshot(\n        path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image04.png\"\n    )\n    # ---------------------\n    context.close()\n    browser.close()",
    "repo": "fastapi",
    "path": "scripts\\playwright\\separate_openapi_schemas\\image04.py",
    "type": "function",
    "name": "run",
    "loc": 7,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\playwright\\separate_openapi_schemas\\image05.py:function:run:chunk1",
    "text": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    # Update the viewport manually\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_role(\"button\", name=\"Item\", exact=True).click()\n    page.set_viewport_size({\"width\": 960, \"height\": 700})\n    # Manually add the screenshot\n    page.screenshot(\n        path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image05.png\"\n    )\n\n    # ---------------------\n    context.close()\n    browser.close()",
    "repo": "fastapi",
    "path": "scripts\\playwright\\separate_openapi_schemas\\image05.py",
    "type": "function",
    "name": "run",
    "loc": 7,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\playwright\\sql_databases\\image01.py:function:run:chunk1",
    "text": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    # Update the viewport manually\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_label(\"post /heroes/\").click()\n    # Manually add the screenshot\n    page.screenshot(path=\"docs/en/docs/img/tutorial/sql-databases/image01.png\")\n\n    # ---------------------\n    context.close()\n    browser.close()",
    "repo": "fastapi",
    "path": "scripts\\playwright\\sql_databases\\image01.py",
    "type": "function",
    "name": "run",
    "loc": 9,
    "role": "scripts"
  },
  {
    "id": "fastapi:scripts\\playwright\\sql_databases\\image02.py:function:run:chunk1",
    "text": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    # Update the viewport manually\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_label(\"post /heroes/\").click()\n    # Manually add the screenshot\n    page.screenshot(path=\"docs/en/docs/img/tutorial/sql-databases/image02.png\")\n\n    # ---------------------\n    context.close()\n    browser.close()",
    "repo": "fastapi",
    "path": "scripts\\playwright\\sql_databases\\image02.py",
    "type": "function",
    "name": "run",
    "loc": 9,
    "role": "scripts"
  },
  {
    "id": "fastapi:tests\\main.py:function:non_operation:chunk1",
    "text": "def non_operation():\n    return {\"message\": \"Hello World\"}",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "non_operation",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:non_decorated_route:chunk1",
    "text": "def non_decorated_route():\n    return {\"message\": \"Hello World\"}",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "non_decorated_route",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_text:chunk1",
    "text": "def get_text():\n    return \"Hello World\"",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_text",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_id:chunk1",
    "text": "def get_id(item_id):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_id",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_str_id:chunk1",
    "text": "def get_str_id(item_id: str):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_str_id",
    "loc": 32,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_int_id:chunk1",
    "text": "def get_int_id(item_id: int):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_int_id",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_float_id:chunk1",
    "text": "def get_float_id(item_id: float):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_float_id",
    "loc": 42,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_bool_id:chunk1",
    "text": "def get_bool_id(item_id: bool):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_bool_id",
    "loc": 47,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_path_param_id:chunk1",
    "text": "def get_path_param_id(item_id: Optional[str] = Path()):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_path_param_id",
    "loc": 52,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_path_param_min_length:chunk1",
    "text": "def get_path_param_min_length(item_id: str = Path(min_length=3)):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_path_param_min_length",
    "loc": 57,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_path_param_max_length:chunk1",
    "text": "def get_path_param_max_length(item_id: str = Path(max_length=3)):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_path_param_max_length",
    "loc": 62,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_path_param_min_max_length:chunk1",
    "text": "def get_path_param_min_max_length(item_id: str = Path(max_length=3, min_length=2)):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_path_param_min_max_length",
    "loc": 67,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_path_param_gt:chunk1",
    "text": "def get_path_param_gt(item_id: float = Path(gt=3)):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_path_param_gt",
    "loc": 72,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_path_param_gt0:chunk1",
    "text": "def get_path_param_gt0(item_id: float = Path(gt=0)):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_path_param_gt0",
    "loc": 77,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_path_param_ge:chunk1",
    "text": "def get_path_param_ge(item_id: float = Path(ge=3)):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_path_param_ge",
    "loc": 82,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_path_param_lt:chunk1",
    "text": "def get_path_param_lt(item_id: float = Path(lt=3)):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_path_param_lt",
    "loc": 87,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_path_param_lt0:chunk1",
    "text": "def get_path_param_lt0(item_id: float = Path(lt=0)):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_path_param_lt0",
    "loc": 92,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_path_param_le:chunk1",
    "text": "def get_path_param_le(item_id: float = Path(le=3)):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_path_param_le",
    "loc": 97,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_path_param_lt_gt:chunk1",
    "text": "def get_path_param_lt_gt(item_id: float = Path(lt=3, gt=1)):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_path_param_lt_gt",
    "loc": 102,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_path_param_le_ge:chunk1",
    "text": "def get_path_param_le_ge(item_id: float = Path(le=3, ge=1)):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_path_param_le_ge",
    "loc": 107,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_path_param_lt_int:chunk1",
    "text": "def get_path_param_lt_int(item_id: int = Path(lt=3)):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_path_param_lt_int",
    "loc": 112,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_path_param_gt_int:chunk1",
    "text": "def get_path_param_gt_int(item_id: int = Path(gt=3)):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_path_param_gt_int",
    "loc": 117,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_path_param_le_int:chunk1",
    "text": "def get_path_param_le_int(item_id: int = Path(le=3)):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_path_param_le_int",
    "loc": 122,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_path_param_ge_int:chunk1",
    "text": "def get_path_param_ge_int(item_id: int = Path(ge=3)):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_path_param_ge_int",
    "loc": 127,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_path_param_lt_gt_int:chunk1",
    "text": "def get_path_param_lt_gt_int(item_id: int = Path(lt=3, gt=1)):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_path_param_lt_gt_int",
    "loc": 132,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_path_param_le_ge_int:chunk1",
    "text": "def get_path_param_le_ge_int(item_id: int = Path(le=3, ge=1)):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_path_param_le_ge_int",
    "loc": 137,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_query:chunk1",
    "text": "def get_query(query):\n    return f\"foo bar {query}\"",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_query",
    "loc": 142,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_query_optional:chunk1",
    "text": "def get_query_optional(query=None):\n    if query is None:\n        return \"foo bar\"\n    return f\"foo bar {query}\"",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_query_optional",
    "loc": 147,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_query_type:chunk1",
    "text": "def get_query_type(query: int):\n    return f\"foo bar {query}\"",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_query_type",
    "loc": 154,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_query_type_optional:chunk1",
    "text": "def get_query_type_optional(query: Optional[int] = None):\n    if query is None:\n        return \"foo bar\"\n    return f\"foo bar {query}\"",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_query_type_optional",
    "loc": 159,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_query_type_int_default:chunk1",
    "text": "def get_query_type_int_default(query: int = 10):\n    return f\"foo bar {query}\"",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_query_type_int_default",
    "loc": 166,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_query_param:chunk1",
    "text": "def get_query_param(query=Query(default=None)):\n    if query is None:\n        return \"foo bar\"\n    return f\"foo bar {query}\"",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_query_param",
    "loc": 171,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_query_param_required:chunk1",
    "text": "def get_query_param_required(query=Query()):\n    return f\"foo bar {query}\"",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_query_param_required",
    "loc": 178,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_query_param_required_type:chunk1",
    "text": "def get_query_param_required_type(query: int = Query()):\n    return f\"foo bar {query}\"",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_query_param_required_type",
    "loc": 183,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_enum_status_code:chunk1",
    "text": "def get_enum_status_code():\n    return \"foo bar\"",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_enum_status_code",
    "loc": 188,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_query_type_frozenset:chunk1",
    "text": "def get_query_type_frozenset(query: FrozenSet[int] = Query(...)):\n    return \",\".join(map(str, sorted(query)))",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_query_type_frozenset",
    "loc": 193,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_query_list:chunk1",
    "text": "def get_query_list(device_ids: List[int] = Query()) -> List[int]:\n    return device_ids",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_query_list",
    "loc": 198,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\main.py:function:get_query_list_default:chunk1",
    "text": "def get_query_list_default(device_ids: List[int] = Query(default=[])) -> List[int]:\n    return device_ids",
    "repo": "fastapi",
    "path": "tests\\main.py",
    "type": "function",
    "name": "get_query_list_default",
    "loc": 203,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_properties.py:function:foo:chunk1",
    "text": "def foo(items: Items):\n    return items.items",
    "repo": "fastapi",
    "path": "tests\\test_additional_properties.py",
    "type": "function",
    "name": "foo",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_properties.py:function:test_additional_properties_post:chunk1",
    "text": "def test_additional_properties_post():\n    response = client.post(\"/foo\", json={\"items\": {\"foo\": 1, \"bar\": 2}})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"foo\": 1, \"bar\": 2}",
    "repo": "fastapi",
    "path": "tests\\test_additional_properties.py",
    "type": "function",
    "name": "test_additional_properties_post",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_properties.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/foo\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Foo\",\n                    \"operationId\": \"foo_foo_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Items\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Items\": {\n                    \"title\": \"Items\",\n                    \"required\": [\"items\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"items\": {\n                            \"title\": \"Items\",\n                            \"type\": \"object\",\n                            \"additionalProperties\": {\"type\": \"integer\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_additional_properties.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_properties.py:class:Items:chunk1",
    "text": "class Items(BaseModel):\n    items: Dict[str, int]",
    "repo": "fastapi",
    "path": "tests\\test_additional_properties.py",
    "type": "class",
    "name": "Items",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_properties_bool.py:function:test_call_invalid:chunk1",
    "text": "def test_call_invalid():\n    response = client.post(\"/\", json={\"foo\": {\"bar\": \"baz\"}})\n    assert response.status_code == 422",
    "repo": "fastapi",
    "path": "tests\\test_additional_properties_bool.py",
    "type": "function",
    "name": "test_call_invalid",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_properties_bool.py:function:test_call_valid:chunk1",
    "text": "def test_call_valid():\n    response = client.post(\"/\", json={})\n    assert response.status_code == 200\n    assert response.json() == {}",
    "repo": "fastapi",
    "path": "tests\\test_additional_properties_bool.py",
    "type": "function",
    "name": "test_call_valid",
    "loc": 41,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_properties_bool.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"post\": {\n                    \"summary\": \"Post\",\n                    \"operationId\": \"post__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"anyOf\": [\n                                            {\"$ref\": \"#/components/schemas/Foo\"},\n                                            {\"type\": \"null\"},\n                                        ],\n                                        \"title\": \"Foo\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\"$ref\": \"#/components/schemas/Foo\"}\n                                )\n                            }\n                        }\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Foo\": {\n                    \"properties\": {},\n                    \"additionalProperties\": False,\n                    \"type\": \"object\",\n                    \"title\": \"Foo\",\n                },\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_additional_properties_bool.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 47,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_properties_bool.py:class:Config:chunk1",
    "text": "class Config:\n            extra = \"forbid\"",
    "repo": "fastapi",
    "path": "tests\\test_additional_properties_bool.py",
    "type": "class",
    "name": "Config",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_properties_bool.py:class:FooBaseModel:chunk1",
    "text": "class FooBaseModel(BaseModel):\n    if PYDANTIC_V2:\n        model_config = ConfigDict(extra=\"forbid\")\n    else:\n\n        class Config:\n            extra = \"forbid\"",
    "repo": "fastapi",
    "path": "tests\\test_additional_properties_bool.py",
    "type": "class",
    "name": "FooBaseModel",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_properties_bool.py:class:Foo:chunk1",
    "text": "class Foo(FooBaseModel):\n    pass",
    "repo": "fastapi",
    "path": "tests\\test_additional_properties_bool.py",
    "type": "class",
    "name": "Foo",
    "loc": 19,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_responses_bad.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    with pytest.raises(ValueError):\n        client.get(\"/openapi.json\")",
    "repo": "fastapi",
    "path": "tests\\test_additional_responses_bad.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 38,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_responses_custom_model_in_callback.py:function:callback_route:chunk1",
    "text": "def callback_route():\n    pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_additional_responses_custom_model_in_callback.py",
    "type": "function",
    "name": "callback_route",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_responses_custom_model_in_callback.py:function:main_route:chunk1",
    "text": "def main_route(callback_url: HttpUrl):\n    pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_additional_responses_custom_model_in_callback.py",
    "type": "function",
    "name": "main_route",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_responses_custom_model_in_callback.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"post\": {\n                    \"summary\": \"Main Route\",\n                    \"operationId\": \"main_route__post\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": IsDict(\n                                {\n                                    \"title\": \"Callback Url\",\n                                    \"minLength\": 1,\n                                    \"type\": \"string\",\n                                    \"format\": \"uri\",\n                                }\n                            )\n                            # TODO: remove when deprecating Pydantic v1\n                            | IsDict(\n                                {\n                                    \"title\": \"Callback Url\",\n                                    \"maxLength\": 2083,\n                                    \"minLength\": 1,\n                                    \"type\": \"string\",\n                                    \"format\": \"uri\",\n                                }\n                            ),\n                            \"name\": \"callback_url\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"callbacks\": {\n                        \"callback_route\": {\n                            \"{$callback_url}/callback/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback Route\",\n                                    \"operationId\": \"callback_route__callback_url__callback__get\",\n                                    \"responses\": {\n                                        \"400\": {\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/CustomModel\"\n                                                    }\n                                                }\n                                            },\n                                            \"description\": \"Bad Request\",\n                                        },\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        }\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"CustomModel\": {\n                    \"title\": \"CustomModel\",\n                    \"required\": [\"a\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"a\": {\"title\": \"A\", \"type\": \"integer\"}},\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_additional_responses_custom_model_in_callback.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 32,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_responses_custom_model_in_callback.py:class:CustomModel:chunk1",
    "text": "class CustomModel(BaseModel):\n    a: int",
    "repo": "fastapi",
    "path": "tests\\test_additional_responses_custom_model_in_callback.py",
    "type": "class",
    "name": "CustomModel",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_responses_custom_validationerror.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/a/{id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"422\": {\n                            \"description\": \"Error\",\n                            \"content\": {\n                                \"application/vnd.api+json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/vnd.api+json\": {\"schema\": {}}},\n                        },\n                    },\n                    \"summary\": \"A\",\n                    \"operationId\": \"a_a__id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Id\"},\n                            \"name\": \"id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Error\": {\n                    \"title\": \"Error\",\n                    \"required\": [\"status\", \"title\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"status\": {\"title\": \"Status\", \"type\": \"string\"},\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                    },\n                },\n                \"JsonApiError\": {\n                    \"title\": \"JsonApiError\",\n                    \"required\": [\"errors\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"errors\": {\n                            \"title\": \"Errors\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/Error\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_additional_responses_custom_validationerror.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_responses_custom_validationerror.py:class:JsonApiResponse:chunk1",
    "text": "class JsonApiResponse(JSONResponse):\n    media_type = \"application/vnd.api+json\"",
    "repo": "fastapi",
    "path": "tests\\test_additional_responses_custom_validationerror.py",
    "type": "class",
    "name": "JsonApiResponse",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_responses_custom_validationerror.py:class:Error:chunk1",
    "text": "class Error(BaseModel):\n    status: str\n    title: str",
    "repo": "fastapi",
    "path": "tests\\test_additional_responses_custom_validationerror.py",
    "type": "class",
    "name": "Error",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_responses_custom_validationerror.py:class:JsonApiError:chunk1",
    "text": "class JsonApiError(BaseModel):\n    errors: typing.List[Error]",
    "repo": "fastapi",
    "path": "tests\\test_additional_responses_custom_validationerror.py",
    "type": "class",
    "name": "JsonApiError",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_responses_default_validationerror.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/a/{id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                    },\n                    \"summary\": \"A\",\n                    \"operationId\": \"a_a__id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Id\"},\n                            \"name\": \"id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_additional_responses_default_validationerror.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_responses_response_class.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/a\": {\n                \"get\": {\n                    \"responses\": {\n                        \"500\": {\n                            \"description\": \"Error\",\n                            \"content\": {\n                                \"application/vnd.api+json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/vnd.api+json\": {\"schema\": {}}},\n                        },\n                    },\n                    \"summary\": \"A\",\n                    \"operationId\": \"a_a_get\",\n                }\n            },\n            \"/b\": {\n                \"get\": {\n                    \"responses\": {\n                        \"500\": {\n                            \"description\": \"Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Error\"}\n                                }\n                            },\n                        },\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                    },\n                    \"summary\": \"B\",\n                    \"operationId\": \"b_b_get\",\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Error\": {\n                    \"title\": \"Error\",\n                    \"required\": [\"status\", \"title\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"status\": {\"title\": \"Status\", \"type\": \"string\"},\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                    },\n                },\n                \"JsonApiError\": {\n                    \"title\": \"JsonApiError\",\n                    \"required\": [\"errors\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"errors\": {\n                            \"title\": \"Errors\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/Error\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_additional_responses_response_class.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 41,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_responses_response_class.py:class:JsonApiResponse:chunk1",
    "text": "class JsonApiResponse(JSONResponse):\n    media_type = \"application/vnd.api+json\"",
    "repo": "fastapi",
    "path": "tests\\test_additional_responses_response_class.py",
    "type": "class",
    "name": "JsonApiResponse",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_responses_response_class.py:class:Error:chunk1",
    "text": "class Error(BaseModel):\n    status: str\n    title: str",
    "repo": "fastapi",
    "path": "tests\\test_additional_responses_response_class.py",
    "type": "class",
    "name": "Error",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_responses_response_class.py:class:JsonApiError:chunk1",
    "text": "class JsonApiError(BaseModel):\n    errors: typing.List[Error]",
    "repo": "fastapi",
    "path": "tests\\test_additional_responses_response_class.py",
    "type": "class",
    "name": "JsonApiError",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_responses_router.py:function:test_a:chunk1",
    "text": "def test_a():\n    response = client.get(\"/a\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"a\"",
    "repo": "fastapi",
    "path": "tests\\test_additional_responses_router.py",
    "type": "function",
    "name": "test_a",
    "loc": 60,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_responses_router.py:function:test_b:chunk1",
    "text": "def test_b():\n    response = client.get(\"/b\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"b\"",
    "repo": "fastapi",
    "path": "tests\\test_additional_responses_router.py",
    "type": "function",
    "name": "test_b",
    "loc": 66,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_responses_router.py:function:test_c:chunk1",
    "text": "def test_c():\n    response = client.get(\"/c\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"c\"",
    "repo": "fastapi",
    "path": "tests\\test_additional_responses_router.py",
    "type": "function",
    "name": "test_c",
    "loc": 72,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_responses_router.py:function:test_d:chunk1",
    "text": "def test_d():\n    response = client.get(\"/d\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"d\"",
    "repo": "fastapi",
    "path": "tests\\test_additional_responses_router.py",
    "type": "function",
    "name": "test_d",
    "loc": 78,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_responses_router.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/a\": {\n                \"get\": {\n                    \"responses\": {\n                        \"501\": {\"description\": \"Error 1\"},\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                    },\n                    \"summary\": \"A\",\n                    \"operationId\": \"a_a_get\",\n                }\n            },\n            \"/b\": {\n                \"get\": {\n                    \"responses\": {\n                        \"502\": {\"description\": \"Error 2\"},\n                        \"4XX\": {\"description\": \"Error with range, upper\"},\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                    },\n                    \"summary\": \"B\",\n                    \"operationId\": \"b_b_get\",\n                }\n            },\n            \"/c\": {\n                \"get\": {\n                    \"responses\": {\n                        \"400\": {\"description\": \"Error with str\"},\n                        \"5XX\": {\"description\": \"Error with range, lower\"},\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"default\": {\"description\": \"A default response\"},\n                    },\n                    \"summary\": \"C\",\n                    \"operationId\": \"c_c_get\",\n                }\n            },\n            \"/d\": {\n                \"get\": {\n                    \"responses\": {\n                        \"400\": {\"description\": \"Error with str\"},\n                        \"5XX\": {\n                            \"description\": \"Server Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/ResponseModel\"\n                                    }\n                                }\n                            },\n                        },\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"default\": {\n                            \"description\": \"Default Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/ResponseModel\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"D\",\n                    \"operationId\": \"d_d_get\",\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ResponseModel\": {\n                    \"title\": \"ResponseModel\",\n                    \"required\": [\"message\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"message\": {\"title\": \"Message\", \"type\": \"string\"}},\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_additional_responses_router.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 84,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_responses_router.py:class:ResponseModel:chunk1",
    "text": "class ResponseModel(BaseModel):\n    message: str",
    "repo": "fastapi",
    "path": "tests\\test_additional_responses_router.py",
    "type": "class",
    "name": "ResponseModel",
    "loc": 6,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_response_extra.py:function:read_item:chunk1",
    "text": "def read_item():\n    return {\"id\": \"foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_additional_response_extra.py",
    "type": "function",
    "name": "read_item",
    "loc": 12,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_response_extra.py:function:test_path_operation:chunk1",
    "text": "def test_path_operation():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"id\": \"foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_additional_response_extra.py",
    "type": "function",
    "name": "test_path_operation",
    "loc": 23,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_additional_response_extra.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__get\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_additional_response_extra.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 29,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_allow_inf_nan_in_enforcing.py:function:test_allow_inf_nan_param_true:chunk1",
    "text": "def test_allow_inf_nan_param_true(value: str, code: int):\n    response = client.post(f\"/?x={value}\")\n    assert response.status_code == code, response.text",
    "repo": "fastapi",
    "path": "tests\\test_allow_inf_nan_in_enforcing.py",
    "type": "function",
    "name": "test_allow_inf_nan_param_true",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_allow_inf_nan_in_enforcing.py:function:test_allow_inf_nan_param_false:chunk1",
    "text": "def test_allow_inf_nan_param_false(value: str, code: int):\n    response = client.post(f\"/?y={value}\")\n    assert response.status_code == code, response.text",
    "repo": "fastapi",
    "path": "tests\\test_allow_inf_nan_in_enforcing.py",
    "type": "function",
    "name": "test_allow_inf_nan_param_false",
    "loc": 49,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_allow_inf_nan_in_enforcing.py:function:test_allow_inf_nan_param_default:chunk1",
    "text": "def test_allow_inf_nan_param_default(value: str, code: int):\n    response = client.post(f\"/?z={value}\")\n    assert response.status_code == code, response.text",
    "repo": "fastapi",
    "path": "tests\\test_allow_inf_nan_in_enforcing.py",
    "type": "function",
    "name": "test_allow_inf_nan_param_default",
    "loc": 65,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_allow_inf_nan_in_enforcing.py:function:test_allow_inf_nan_body:chunk1",
    "text": "def test_allow_inf_nan_body(value: str, code: int):\n    response = client.post(\"/\", json=value)\n    assert response.status_code == code, response.text",
    "repo": "fastapi",
    "path": "tests\\test_allow_inf_nan_in_enforcing.py",
    "type": "function",
    "name": "test_allow_inf_nan_body",
    "loc": 81,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ambiguous_params.py:function:test_no_annotated_defaults:chunk1",
    "text": "def test_no_annotated_defaults():\n    with pytest.raises(\n        AssertionError, match=\"Path parameters cannot have a default value\"\n    ):\n\n        @app.get(\"/items/{item_id}/\")\n        async def get_item(item_id: Annotated[int, Path(default=1)]):\n            pass  # pragma: nocover\n\n    with pytest.raises(\n        AssertionError,\n        match=(\n            \"`Query` default value cannot be set in `Annotated` for 'item_id'. Set the\"\n            \" default value with `=` instead.\"\n        ),\n    ):\n\n        @app.get(\"/\")\n        async def get(item_id: Annotated[int, Query(default=1)]):\n            pass  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_ambiguous_params.py",
    "type": "function",
    "name": "test_no_annotated_defaults",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ambiguous_params.py:function:test_multiple_annotations:chunk1",
    "text": "def test_multiple_annotations():\n    async def dep():\n        pass  # pragma: nocover\n\n    @app.get(\"/multi-query\")\n    async def get(foo: Annotated[int, Query(gt=2), Query(lt=10)]):\n        return foo\n\n    with pytest.raises(\n        AssertionError,\n        match=(\n            \"Cannot specify `Depends` in `Annotated` and default value\"\n            \" together for 'foo'\"\n        ),\n    ):\n\n        @app.get(\"/\")\n        async def get2(foo: Annotated[int, Depends(dep)] = Depends(dep)):\n            pass  # pragma: nocover\n\n    with pytest.raises(\n        AssertionError,\n        match=(\n            \"Cannot specify a FastAPI annotation in `Annotated` and `Depends` as a\"\n            \" default value together for 'foo'\"\n        ),\n    ):\n\n        @app.get(\"/\")\n        async def get3(foo: Annotated[int, Query(min_length=1)] = Depends(dep)):\n            pass  # pragma: nocover\n\n    client = TestClient(app)\n    response = client.get(\"/multi-query\", params={\"foo\": \"5\"})\n    assert response.status_code == 200\n    assert response.json() == 5\n\n    response = client.get(\"/multi-query\", params={\"foo\": \"123\"})\n    assert response.status_code == 422\n\n    if PYDANTIC_V2:\n        response = client.get(\"/multi-query\", params={\"foo\": \"1\"})\n        assert response.status_code == 422",
    "repo": "fastapi",
    "path": "tests\\test_ambiguous_params.py",
    "type": "function",
    "name": "test_multiple_annotations",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_annotated.py:function:test_get:chunk1",
    "text": "def test_get(path, expected_status, expected_response):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response",
    "repo": "fastapi",
    "path": "tests\\test_annotated.py",
    "type": "function",
    "name": "test_get",
    "loc": 91,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_annotated.py:function:test_multiple_path:chunk1",
    "text": "def test_multiple_path():\n    app = FastAPI()\n\n    @app.get(\"/test1\")\n    @app.get(\"/test2\")\n    async def test(var: Annotated[str, Query()] = \"bar\"):\n        return {\"foo\": var}\n\n    client = TestClient(app)\n    response = client.get(\"/test1\")\n    assert response.status_code == 200\n    assert response.json() == {\"foo\": \"bar\"}\n\n    response = client.get(\"/test1\", params={\"var\": \"baz\"})\n    assert response.status_code == 200\n    assert response.json() == {\"foo\": \"baz\"}\n\n    response = client.get(\"/test2\")\n    assert response.status_code == 200\n    assert response.json() == {\"foo\": \"bar\"}\n\n    response = client.get(\"/test2\", params={\"var\": \"baz\"})\n    assert response.status_code == 200\n    assert response.json() == {\"foo\": \"baz\"}",
    "repo": "fastapi",
    "path": "tests\\test_annotated.py",
    "type": "function",
    "name": "test_multiple_path",
    "loc": 97,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_annotated.py:function:test_nested_router:chunk1",
    "text": "def test_nested_router():\n    app = FastAPI()\n\n    router = APIRouter(prefix=\"/nested\")\n\n    @router.get(\"/test\")\n    async def test(var: Annotated[str, Query()] = \"bar\"):\n        return {\"foo\": var}\n\n    app.include_router(router)\n\n    client = TestClient(app)\n\n    response = client.get(\"/nested/test\")\n    assert response.status_code == 200\n    assert response.json() == {\"foo\": \"bar\"}",
    "repo": "fastapi",
    "path": "tests\\test_annotated.py",
    "type": "function",
    "name": "test_nested_router",
    "loc": 123,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_annotated.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/default\": {\n                \"get\": {\n                    \"summary\": \"Default\",\n                    \"operationId\": \"default_default_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Foo\",\n                                \"type\": \"string\",\n                                \"default\": \"foo\",\n                            },\n                            \"name\": \"foo\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/required\": {\n                \"get\": {\n                    \"summary\": \"Required\",\n                    \"operationId\": \"required_required_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Foo\",\n                                \"minLength\": 1,\n                                \"type\": \"string\",\n                            },\n                            \"name\": \"foo\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/multiple\": {\n                \"get\": {\n                    \"summary\": \"Multiple\",\n                    \"operationId\": \"multiple_multiple_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Foo\",\n                                \"minLength\": 1,\n                                \"type\": \"string\",\n                            },\n                            \"name\": \"foo\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/unrelated\": {\n                \"get\": {\n                    \"summary\": \"Unrelated\",\n                    \"operationId\": \"unrelated_unrelated_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Foo\", \"type\": \"string\"},\n                            \"name\": \"foo\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_annotated.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 141,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_application.py:function:test_get_path:chunk1",
    "text": "def test_get_path(path, expected_status, expected_response):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response",
    "repo": "fastapi",
    "path": "tests\\test_application.py",
    "type": "function",
    "name": "test_get_path",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_application.py:function:test_swagger_ui:chunk1",
    "text": "def test_swagger_ui():\n    response = client.get(\"/docs\")\n    assert response.status_code == 200, response.text\n    assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n    assert \"swagger-ui-dist\" in response.text\n    assert (\n        \"oauth2RedirectUrl: window.location.origin + '/docs/oauth2-redirect'\"\n        in response.text\n    )",
    "repo": "fastapi",
    "path": "tests\\test_application.py",
    "type": "function",
    "name": "test_swagger_ui",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_application.py:function:test_swagger_ui_oauth2_redirect:chunk1",
    "text": "def test_swagger_ui_oauth2_redirect():\n    response = client.get(\"/docs/oauth2-redirect\")\n    assert response.status_code == 200, response.text\n    assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n    assert \"window.opener.swaggerUIRedirectOauth2\" in response.text",
    "repo": "fastapi",
    "path": "tests\\test_application.py",
    "type": "function",
    "name": "test_swagger_ui_oauth2_redirect",
    "loc": 35,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_application.py:function:test_redoc:chunk1",
    "text": "def test_redoc():\n    response = client.get(\"/redoc\")\n    assert response.status_code == 200, response.text\n    assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n    assert \"redoc@next\" in response.text",
    "repo": "fastapi",
    "path": "tests\\test_application.py",
    "type": "function",
    "name": "test_redoc",
    "loc": 42,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_application.py:function:test_enum_status_code_response:chunk1",
    "text": "def test_enum_status_code_response():\n    response = client.get(\"/enum-status-code\")\n    assert response.status_code == 201, response.text\n    assert response.json() == \"foo bar\"",
    "repo": "fastapi",
    "path": "tests\\test_application.py",
    "type": "function",
    "name": "test_enum_status_code_response",
    "loc": 49,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_application.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/api_route\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Non Operation\",\n                    \"operationId\": \"non_operation_api_route_get\",\n                }\n            },\n            \"/non_decorated_route\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Non Decorated Route\",\n                    \"operationId\": \"non_decorated_route_non_decorated_route_get\",\n                }\n            },\n            \"/text\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Get Text\",\n                    \"operationId\": \"get_text_text_get\",\n                }\n            },\n            \"/path/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Id\",\n                    \"operationId\": \"get_id_path__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/str/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Str Id\",\n                    \"operationId\": \"get_str_id_path_str__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/int/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Int Id\",\n                    \"operationId\": \"get_int_id_path_int__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/float/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Float Id\",\n                    \"operationId\": \"get_float_id_path_float__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"number\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/bool/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Bool Id\",\n                    \"operationId\": \"get_bool_id_path_bool__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"boolean\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Id\",\n                    \"operationId\": \"get_path_param_id_path_param__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                            \"required\": True,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Item Id\",\n                                }\n                            )\n                            # TODO: remove when deprecating Pydantic v1\n                            | IsDict({\"title\": \"Item Id\", \"type\": \"string\"}),\n                        }\n                    ],\n                }\n            },\n            \"/path/param-minlength/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Min Length\",\n                    \"operationId\": \"get_path_param_min_length_path_param_minlength__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"minLength\": 3,\n                                \"type\": \"string\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-maxlength/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Max Length\",\n                    \"operationId\": \"get_path_param_max_length_path_param_maxlength__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"maxLength\": 3,\n                                \"type\": \"string\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-min_maxlength/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Min Max Length\",\n                    \"operationId\": \"get_path_param_min_max_length_path_param_min_maxlength__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"maxLength\": 3,\n                                \"minLength\": 2,\n                                \"type\": \"string\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-gt/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Gt\",\n                    \"operationId\": \"get_path_param_gt_path_param_gt__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"exclusiveMinimum\": 3.0,\n                                \"type\": \"number\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-gt0/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Gt0\",\n                    \"operationId\": \"get_path_param_gt0_path_param_gt0__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"exclusiveMinimum\": 0.0,\n                                \"type\": \"number\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-ge/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Ge\",\n                    \"operationId\": \"get_path_param_ge_path_param_ge__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"minimum\": 3.0,\n                                \"type\": \"number\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-lt/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Lt\",\n                    \"operationId\": \"get_path_param_lt_path_param_lt__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"exclusiveMaximum\": 3.0,\n                                \"type\": \"number\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-lt0/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Lt0\",\n                    \"operationId\": \"get_path_param_lt0_path_param_lt0__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"exclusiveMaximum\": 0.0,\n                                \"type\": \"number\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-le/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Le\",\n                    \"operationId\": \"get_path_param_le_path_param_le__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"maximum\": 3.0,\n                                \"type\": \"number\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-lt-gt/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Lt Gt\",\n                    \"operationId\": \"get_path_param_lt_gt_path_param_lt_gt__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"exclusiveMaximum\": 3.0,\n                                \"exclusiveMinimum\": 1.0,\n                                \"type\": \"number\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-le-ge/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Le Ge\",\n                    \"operationId\": \"get_path_param_le_ge_path_param_le_ge__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"maximum\": 3.0,\n                                \"minimum\": 1.0,\n                                \"type\": \"number\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-lt-int/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Lt Int\",\n                    \"operationId\": \"get_path_param_lt_int_path_param_lt_int__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"exclusiveMaximum\": 3.0,\n                                \"type\": \"integer\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-gt-int/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Gt Int\",\n                    \"operationId\": \"get_path_param_gt_int_path_param_gt_int__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"exclusiveMinimum\": 3.0,\n                                \"type\": \"integer\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-le-int/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Le Int\",\n                    \"operationId\": \"get_path_param_le_int_path_param_le_int__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"maximum\": 3.0,\n                                \"type\": \"integer\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-ge-int/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Ge Int\",\n                    \"operationId\": \"get_path_param_ge_int_path_param_ge_int__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"minimum\": 3.0,\n                                \"type\": \"integer\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-lt-gt-int/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Lt Gt Int\",\n                    \"operationId\": \"get_path_param_lt_gt_int_path_param_lt_gt_int__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"exclusiveMaximum\": 3.0,\n                                \"exclusiveMinimum\": 1.0,\n                                \"type\": \"integer\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-le-ge-int/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Le Ge Int\",\n                    \"operationId\": \"get_path_param_le_ge_int_path_param_le_ge_int__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"maximum\": 3.0,\n                                \"minimum\": 1.0,\n                                \"type\": \"integer\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/query\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Query\",\n                    \"operationId\": \"get_query_query_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Query\"},\n                            \"name\": \"query\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            },\n            \"/query/optional\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Query Optional\",\n                    \"operationId\": \"get_query_optional_query_optional_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\"title\": \"Query\"},\n                            \"name\": \"query\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            },\n            \"/query/int\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Query Type\",\n                    \"operationId\": \"get_query_type_query_int_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Query\", \"type\": \"integer\"},\n                            \"name\": \"query\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            },\n            \"/query/int/optional\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Query Type Optional\",\n                    \"operationId\": \"get_query_type_optional_query_int_optional_get\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"query\",\n                            \"in\": \"query\",\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Query\",\n                                }\n                            )\n                            # TODO: remove when deprecating Pydantic v1\n                            | IsDict({\"title\": \"Query\", \"type\": \"integer\"}),\n                        }\n                    ],\n                }\n            },\n            \"/query/int/default\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Query Type Int Default\",\n                    \"operationId\": \"get_query_type_int_default_query_int_default_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Query\",\n                                \"type\": \"integer\",\n                                \"default\": 10,\n                            },\n                            \"name\": \"query\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            },\n            \"/query/param\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Query Param\",\n                    \"operationId\": \"get_query_param_query_param_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\"title\": \"Query\"},\n                            \"name\": \"query\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            },\n            \"/query/param-required\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Query Param Required\",\n                    \"operationId\": \"get_query_param_required_query_param_required_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Query\"},\n                            \"name\": \"query\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            },\n            \"/query/param-required/int\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Query Param Required Type\",\n                    \"operationId\": \"get_query_param_required_type_query_param_required_int_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Query\", \"type\": \"integer\"},\n                            \"name\": \"query\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            },\n            \"/enum-status-code\": {\n                \"get\": {\n                    \"responses\": {\n                        \"201\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                    },\n                    \"summary\": \"Get Enum Status Code\",\n                    \"operationId\": \"get_enum_status_code_enum_status_code_get\",\n                }\n            },\n            \"/query/frozenset\": {\n                \"get\": {\n                    \"summary\": \"Get Query Type Frozenset\",\n                    \"operationId\": \"get_query_type_frozenset_query_frozenset_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Query\",\n                                \"uniqueItems\": True,\n                                \"type\": \"array\",\n                                \"items\": {\"type\": \"integer\"},\n                            },\n                            \"name\": \"query\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/query/list\": {\n                \"get\": {\n                    \"summary\": \"Get Query List\",\n                    \"operationId\": \"get_query_list_query_list_get\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"device_ids\",\n                            \"in\": \"query\",\n                            \"required\": True,\n                            \"schema\": {\n                                \"type\": \"array\",\n                                \"items\": {\"type\": \"integer\"},\n                                \"title\": \"Device Ids\",\n                            },\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"type\": \"array\",\n                                        \"items\": {\"type\": \"integer\"},\n                                        \"title\": \"Response Get Query List Query List Get\",\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/query/list-default\": {\n                \"get\": {\n                    \"summary\": \"Get Query List Default\",\n                    \"operationId\": \"get_query_list_default_query_list_default_get\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"device_ids\",\n                            \"in\": \"query\",\n                            \"required\": False,\n                            \"schema\": {\n                                \"type\": \"array\",\n                                \"items\": {\"type\": \"integer\"},\n                                \"default\": [],\n                                \"title\": \"Device Ids\",\n                            },\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"type\": \"array\",\n                                        \"items\": {\"type\": \"integer\"},\n                                        \"title\": \"Response Get Query List Default Query List Default Get\",\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_application.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 55,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_callable_endpoint.py:function:main:chunk1",
    "text": "def main(some_arg, q: Optional[str] = None):\n    return {\"some_arg\": some_arg, \"q\": q}",
    "repo": "fastapi",
    "path": "tests\\test_callable_endpoint.py",
    "type": "function",
    "name": "main",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_callable_endpoint.py:function:test_partial:chunk1",
    "text": "def test_partial():\n    response = client.get(\"/?q=bar\")\n    data = response.json()\n    assert data == {\"some_arg\": \"foo\", \"q\": \"bar\"}",
    "repo": "fastapi",
    "path": "tests\\test_callable_endpoint.py",
    "type": "function",
    "name": "test_partial",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_compat.py:function:test_model_field_default_required:chunk1",
    "text": "def test_model_field_default_required():\n    # For coverage\n    field_info = FieldInfo(annotation=str)\n    field = ModelField(name=\"foo\", field_info=field_info)\n    assert field.default is Undefined",
    "repo": "fastapi",
    "path": "tests\\test_compat.py",
    "type": "function",
    "name": "test_model_field_default_required",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_compat.py:function:test_upload_file_dummy_with_info_plain_validator_function:chunk1",
    "text": "def test_upload_file_dummy_with_info_plain_validator_function():\n    # For coverage\n    assert UploadFile.__get_pydantic_core_schema__(str, lambda x: None) == {}",
    "repo": "fastapi",
    "path": "tests\\test_compat.py",
    "type": "function",
    "name": "test_upload_file_dummy_with_info_plain_validator_function",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_compat.py:function:test_union_scalar_list:chunk1",
    "text": "def test_union_scalar_list():\n    # For coverage\n    # TODO: there might not be a current valid code path that uses this, it would\n    # potentially enable query parameters defined as both a scalar and a list\n    # but that would require more refactors, also not sure it's really useful\n    from fastapi._compat import is_pv1_scalar_field\n\n    field_info = FieldInfo()\n    field = ModelField(\n        name=\"foo\",\n        field_info=field_info,\n        type_=Union[str, List[int]],\n        class_validators={},\n        model_config=BaseConfig,\n    )\n    assert not is_pv1_scalar_field(field)",
    "repo": "fastapi",
    "path": "tests\\test_compat.py",
    "type": "function",
    "name": "test_union_scalar_list",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_compat.py:function:test_get_model_config:chunk1",
    "text": "def test_get_model_config():\n    # For coverage in Pydantic v2\n    class Foo(BaseModel):\n        model_config = ConfigDict(from_attributes=True)\n\n    foo = Foo()\n    config = _get_model_config(foo)\n    assert config == {\"from_attributes\": True}",
    "repo": "fastapi",
    "path": "tests\\test_compat.py",
    "type": "function",
    "name": "test_get_model_config",
    "loc": 55,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_compat.py:function:test_complex:chunk1",
    "text": "def test_complex():\n    app = FastAPI()\n\n    @app.post(\"/\")\n    def foo(foo: Union[str, List[int]]):\n        return foo\n\n    client = TestClient(app)\n\n    response = client.post(\"/\", json=\"bar\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"bar\"\n\n    response2 = client.post(\"/\", json=[1, 2])\n    assert response2.status_code == 200, response2.text\n    assert response2.json() == [1, 2]",
    "repo": "fastapi",
    "path": "tests\\test_compat.py",
    "type": "function",
    "name": "test_complex",
    "loc": 65,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_compat.py:function:foo:chunk1",
    "text": "def foo(foo: Union[str, List[int]]):\n        return foo",
    "repo": "fastapi",
    "path": "tests\\test_compat.py",
    "type": "function",
    "name": "foo",
    "loc": 69,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_compat.py:function:test_is_bytes_sequence_annotation_union:chunk1",
    "text": "def test_is_bytes_sequence_annotation_union():\n    # For coverage\n    # TODO: in theory this would allow declaring types that could be lists of bytes\n    # to be read from files and other types, but I'm not even sure it's a good idea\n    # to support it as a first class \"feature\"\n    assert is_bytes_sequence_annotation(Union[List[str], List[bytes]])",
    "repo": "fastapi",
    "path": "tests\\test_compat.py",
    "type": "function",
    "name": "test_is_bytes_sequence_annotation_union",
    "loc": 83,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_compat.py:function:test_is_uploadfile_sequence_annotation:chunk1",
    "text": "def test_is_uploadfile_sequence_annotation():\n    # For coverage\n    # TODO: in theory this would allow declaring types that could be lists of UploadFile\n    # and other types, but I'm not even sure it's a good idea to support it as a first\n    # class \"feature\"\n    assert is_uploadfile_sequence_annotation(Union[List[str], List[UploadFile]])",
    "repo": "fastapi",
    "path": "tests\\test_compat.py",
    "type": "function",
    "name": "test_is_uploadfile_sequence_annotation",
    "loc": 91,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_compat.py:function:test_is_pv1_scalar_field:chunk1",
    "text": "def test_is_pv1_scalar_field():\n    # For coverage\n    class Model(BaseModel):\n        foo: Union[str, Dict[str, Any]]\n\n    fields = get_model_fields(Model)\n    assert not is_scalar_field(fields[0])",
    "repo": "fastapi",
    "path": "tests\\test_compat.py",
    "type": "function",
    "name": "test_is_pv1_scalar_field",
    "loc": 99,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_compat.py:function:test_get_model_fields_cached:chunk1",
    "text": "def test_get_model_fields_cached():\n    class Model(BaseModel):\n        foo: str\n\n    non_cached_fields = get_model_fields(Model)\n    non_cached_fields2 = get_model_fields(Model)\n    cached_fields = get_cached_model_fields(Model)\n    cached_fields2 = get_cached_model_fields(Model)\n    for f1, f2 in zip(cached_fields, cached_fields2):\n        assert f1 is f2\n\n    assert non_cached_fields is not non_cached_fields2\n    assert cached_fields is cached_fields2",
    "repo": "fastapi",
    "path": "tests\\test_compat.py",
    "type": "function",
    "name": "test_get_model_fields_cached",
    "loc": 108,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_compat.py:class:Foo:chunk1",
    "text": "class Foo(BaseModel):\n        model_config = ConfigDict(from_attributes=True)",
    "repo": "fastapi",
    "path": "tests\\test_compat.py",
    "type": "class",
    "name": "Foo",
    "loc": 57,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_compat.py:class:Model:chunk1",
    "text": "class Model(BaseModel):\n        foo: Union[str, Dict[str, Any]]",
    "repo": "fastapi",
    "path": "tests\\test_compat.py",
    "type": "class",
    "name": "Model",
    "loc": 101,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_compat.py:class:Model:chunk1",
    "text": "class Model(BaseModel):\n        foo: str",
    "repo": "fastapi",
    "path": "tests\\test_compat.py",
    "type": "class",
    "name": "Model",
    "loc": 109,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_computed_fields.py:function:get_client:chunk1",
    "text": "def get_client():\n    app = FastAPI()\n\n    from pydantic import BaseModel, computed_field\n\n    class Rectangle(BaseModel):\n        width: int\n        length: int\n\n        @computed_field\n        @property\n        def area(self) -> int:\n            return self.width * self.length\n\n    @app.get(\"/\")\n    def read_root() -> Rectangle:\n        return Rectangle(width=3, length=4)\n\n    @app.get(\"/responses\", responses={200: {\"model\": Rectangle}})\n    def read_responses() -> Rectangle:\n        return Rectangle(width=3, length=4)\n\n    client = TestClient(app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_computed_fields.py",
    "type": "function",
    "name": "get_client",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_computed_fields.py:function:read_root:chunk1",
    "text": "def read_root() -> Rectangle:\n        return Rectangle(width=3, length=4)",
    "repo": "fastapi",
    "path": "tests\\test_computed_fields.py",
    "type": "function",
    "name": "read_root",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_computed_fields.py:function:read_responses:chunk1",
    "text": "def read_responses() -> Rectangle:\n        return Rectangle(width=3, length=4)",
    "repo": "fastapi",
    "path": "tests\\test_computed_fields.py",
    "type": "function",
    "name": "read_responses",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_computed_fields.py:function:test_get:chunk1",
    "text": "def test_get(client: TestClient, path: str):\n    response = client.get(path)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"width\": 3, \"length\": 4, \"area\": 12}",
    "repo": "fastapi",
    "path": "tests\\test_computed_fields.py",
    "type": "function",
    "name": "test_get",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_computed_fields.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"get\": {\n                    \"summary\": \"Read Root\",\n                    \"operationId\": \"read_root__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Rectangle\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/responses\": {\n                \"get\": {\n                    \"summary\": \"Read Responses\",\n                    \"operationId\": \"read_responses_responses_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Rectangle\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Rectangle\": {\n                    \"properties\": {\n                        \"width\": {\"type\": \"integer\", \"title\": \"Width\"},\n                        \"length\": {\"type\": \"integer\", \"title\": \"Length\"},\n                        \"area\": {\"type\": \"integer\", \"title\": \"Area\", \"readOnly\": True},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"width\", \"length\", \"area\"],\n                    \"title\": \"Rectangle\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_computed_fields.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 44,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_computed_fields.py:class:Rectangle:chunk1",
    "text": "class Rectangle(BaseModel):\n        width: int\n        length: int\n\n        @computed_field\n        @property\n        def area(self) -> int:\n            return self.width * self.length",
    "repo": "fastapi",
    "path": "tests\\test_computed_fields.py",
    "type": "class",
    "name": "Rectangle",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_custom_middleware_exception.py:function:run_middleware:chunk1",
    "text": "def run_middleware(file: UploadFile = File(..., description=\"Big File\")):\n    return {\"message\": \"OK\"}",
    "repo": "fastapi",
    "path": "tests\\test_custom_middleware_exception.py",
    "type": "function",
    "name": "run_middleware",
    "loc": 58,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_custom_middleware_exception.py:function:test_custom_middleware_exception:chunk1",
    "text": "def test_custom_middleware_exception(tmp_path: Path):\n    default_pydantic_max_size = 2**16\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"x\" * (default_pydantic_max_size + 1))\n\n    with client:\n        with open(path, \"rb\") as file:\n            response = client.post(\"/middleware\", files={\"file\": file})\n        assert response.status_code == 422, response.text\n        assert response.json() == {\n            \"detail\": {\n                \"name\": \"ContentSizeLimitExceeded\",\n                \"code\": 999,\n                \"message\": \"File limit exceeded\",\n            }\n        }",
    "repo": "fastapi",
    "path": "tests\\test_custom_middleware_exception.py",
    "type": "function",
    "name": "test_custom_middleware_exception",
    "loc": 69,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_custom_middleware_exception.py:function:test_custom_middleware_exception_not_raised:chunk1",
    "text": "def test_custom_middleware_exception_not_raised(tmp_path: Path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    with client:\n        with open(path, \"rb\") as file:\n            response = client.post(\"/middleware\", files={\"file\": file})\n        assert response.status_code == 200, response.text\n        assert response.json() == {\"message\": \"OK\"}",
    "repo": "fastapi",
    "path": "tests\\test_custom_middleware_exception.py",
    "type": "function",
    "name": "test_custom_middleware_exception_not_raised",
    "loc": 87,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_custom_middleware_exception.py:class:ContentSizeLimitMiddleware:chunk1",
    "text": "class ContentSizeLimitMiddleware:\n    \"\"\"Content size limiting middleware for ASGI applications\n    Args:\n      app (ASGI application): ASGI application\n      max_content_size (optional): the maximum content size allowed in bytes, None for no limit\n    \"\"\"\n\n    def __init__(self, app: APIRouter, max_content_size: Optional[int] = None):\n        self.app = app\n        self.max_content_size = max_content_size\n\n    def receive_wrapper(self, receive):\n        received = 0\n\n        async def inner():\n            nonlocal received\n            message = await receive()\n            if message[\"type\"] != \"http.request\":\n                return message  # pragma: no cover\n\n            body_len = len(message.get(\"body\", b\"\"))\n            received += body_len\n            if received > self.max_content_size:\n                raise HTTPException(\n                    422,\n                    detail={\n                        \"name\": \"ContentSizeLimitExceeded\",\n                        \"code\": 999,\n                        \"message\": \"File limit exceeded\",\n                    },\n                )\n            return message\n\n        return inner\n\n    async def __call__(self, scope, receive, send):\n        if scope[\"type\"] != \"http\" or self.max_content_size is None:\n            await self.app(scope, receive, send)\n            return\n\n        wrapper = self.receive_wrapper(receive)\n        await self.app(scope, wrapper, send)",
    "repo": "fastapi",
    "path": "tests\\test_custom_middleware_exception.py",
    "type": "class",
    "name": "ContentSizeLimitMiddleware",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_custom_route_class.py:function:get_a:chunk1",
    "text": "def get_a():\n    return {\"msg\": \"A\"}",
    "repo": "fastapi",
    "path": "tests\\test_custom_route_class.py",
    "type": "function",
    "name": "get_a",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_custom_route_class.py:function:get_b:chunk1",
    "text": "def get_b():\n    return {\"msg\": \"B\"}",
    "repo": "fastapi",
    "path": "tests\\test_custom_route_class.py",
    "type": "function",
    "name": "get_b",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_custom_route_class.py:function:get_c:chunk1",
    "text": "def get_c():\n    return {\"msg\": \"C\"}",
    "repo": "fastapi",
    "path": "tests\\test_custom_route_class.py",
    "type": "function",
    "name": "get_c",
    "loc": 38,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_custom_route_class.py:function:test_get_path:chunk1",
    "text": "def test_get_path(path, expected_status, expected_response):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response",
    "repo": "fastapi",
    "path": "tests\\test_custom_route_class.py",
    "type": "function",
    "name": "test_get_path",
    "loc": 58,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_custom_route_class.py:function:test_route_classes:chunk1",
    "text": "def test_route_classes():\n    routes = {}\n    for r in app.router.routes:\n        assert isinstance(r, Route)\n        routes[r.path] = r\n    assert getattr(routes[\"/a/\"], \"x_type\") == \"A\"  # noqa: B009\n    assert getattr(routes[\"/a/b/\"], \"x_type\") == \"B\"  # noqa: B009\n    assert getattr(routes[\"/a/b/c/\"], \"x_type\") == \"C\"  # noqa: B009",
    "repo": "fastapi",
    "path": "tests\\test_custom_route_class.py",
    "type": "function",
    "name": "test_route_classes",
    "loc": 64,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_custom_route_class.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/a/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Get A\",\n                    \"operationId\": \"get_a_a__get\",\n                }\n            },\n            \"/a/b/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Get B\",\n                    \"operationId\": \"get_b_a_b__get\",\n                }\n            },\n            \"/a/b/c/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Get C\",\n                    \"operationId\": \"get_c_a_b_c__get\",\n                }\n            },\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_custom_route_class.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 74,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_custom_route_class.py:class:APIRouteA:chunk1",
    "text": "class APIRouteA(APIRoute):\n    x_type = \"A\"",
    "repo": "fastapi",
    "path": "tests\\test_custom_route_class.py",
    "type": "class",
    "name": "APIRouteA",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_custom_route_class.py:class:APIRouteB:chunk1",
    "text": "class APIRouteB(APIRoute):\n    x_type = \"B\"",
    "repo": "fastapi",
    "path": "tests\\test_custom_route_class.py",
    "type": "class",
    "name": "APIRouteB",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_custom_route_class.py:class:APIRouteC:chunk1",
    "text": "class APIRouteC(APIRoute):\n    x_type = \"C\"",
    "repo": "fastapi",
    "path": "tests\\test_custom_route_class.py",
    "type": "class",
    "name": "APIRouteC",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_custom_schema_fields.py:function:foo:chunk1",
    "text": "def foo():\n    return {\"name\": \"Foo item\"}",
    "repo": "fastapi",
    "path": "tests\\test_custom_schema_fields.py",
    "type": "function",
    "name": "foo",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_custom_schema_fields.py:function:test_custom_response_schema:chunk1",
    "text": "def test_custom_response_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json()[\"components\"][\"schemas\"][\"Item\"] == item_schema",
    "repo": "fastapi",
    "path": "tests\\test_custom_schema_fields.py",
    "type": "function",
    "name": "test_custom_response_schema",
    "loc": 50,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_custom_schema_fields.py:function:test_response:chunk1",
    "text": "def test_response():\n    # For coverage\n    response = client.get(\"/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo item\"}",
    "repo": "fastapi",
    "path": "tests\\test_custom_schema_fields.py",
    "type": "function",
    "name": "test_response",
    "loc": 56,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_custom_schema_fields.py:class:Config:chunk1",
    "text": "class Config:\n            schema_extra = {\n                \"x-something-internal\": {\"level\": 4},\n            }",
    "repo": "fastapi",
    "path": "tests\\test_custom_schema_fields.py",
    "type": "class",
    "name": "Config",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_custom_schema_fields.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n\n    if PYDANTIC_V2:\n        model_config = {\n            \"json_schema_extra\": {\n                \"x-something-internal\": {\"level\": 4},\n            }\n        }\n    else:\n\n        class Config:\n            schema_extra = {\n                \"x-something-internal\": {\"level\": 4},\n            }",
    "repo": "fastapi",
    "path": "tests\\test_custom_schema_fields.py",
    "type": "class",
    "name": "Item",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_custom_swagger_ui_redirect.py:function:test_swagger_ui:chunk1",
    "text": "def test_swagger_ui():\n    response = client.get(\"/docs\")\n    assert response.status_code == 200, response.text\n    assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n    assert \"swagger-ui-dist\" in response.text\n    print(client.base_url)\n    assert (\n        f\"oauth2RedirectUrl: window.location.origin + '{swagger_ui_oauth2_redirect_url}'\"\n        in response.text\n    )",
    "repo": "fastapi",
    "path": "tests\\test_custom_swagger_ui_redirect.py",
    "type": "function",
    "name": "test_swagger_ui",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_custom_swagger_ui_redirect.py:function:test_swagger_ui_oauth2_redirect:chunk1",
    "text": "def test_swagger_ui_oauth2_redirect():\n    response = client.get(swagger_ui_oauth2_redirect_url)\n    assert response.status_code == 200, response.text\n    assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n    assert \"window.opener.swaggerUIRedirectOauth2\" in response.text",
    "repo": "fastapi",
    "path": "tests\\test_custom_swagger_ui_redirect.py",
    "type": "function",
    "name": "test_swagger_ui_oauth2_redirect",
    "loc": 29,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_custom_swagger_ui_redirect.py:function:test_response:chunk1",
    "text": "def test_response():\n    response = client.get(\"/items/\")\n    assert response.json() == {\"id\": \"foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_custom_swagger_ui_redirect.py",
    "type": "function",
    "name": "test_response",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_datastructures.py:function:test_upload_file_invalid:chunk1",
    "text": "def test_upload_file_invalid():\n    with pytest.raises(ValueError):\n        UploadFile.validate(\"not a Starlette UploadFile\")",
    "repo": "fastapi",
    "path": "tests\\test_datastructures.py",
    "type": "function",
    "name": "test_upload_file_invalid",
    "loc": 12,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_datastructures.py:function:test_upload_file_invalid_pydantic_v2:chunk1",
    "text": "def test_upload_file_invalid_pydantic_v2():\n    with pytest.raises(ValueError):\n        UploadFile._validate(\"not a Starlette UploadFile\", {})",
    "repo": "fastapi",
    "path": "tests\\test_datastructures.py",
    "type": "function",
    "name": "test_upload_file_invalid_pydantic_v2",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_datastructures.py:function:test_default_placeholder_equals:chunk1",
    "text": "def test_default_placeholder_equals():\n    placeholder_1 = Default(\"a\")\n    placeholder_2 = Default(\"a\")\n    assert placeholder_1 == placeholder_2\n    assert placeholder_1.value == placeholder_2.value",
    "repo": "fastapi",
    "path": "tests\\test_datastructures.py",
    "type": "function",
    "name": "test_default_placeholder_equals",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_datastructures.py:function:test_default_placeholder_bool:chunk1",
    "text": "def test_default_placeholder_bool():\n    placeholder_a = Default(\"a\")\n    placeholder_b = Default(\"\")\n    assert placeholder_a\n    assert not placeholder_b",
    "repo": "fastapi",
    "path": "tests\\test_datastructures.py",
    "type": "function",
    "name": "test_default_placeholder_bool",
    "loc": 29,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_datastructures.py:function:test_upload_file_is_closed:chunk1",
    "text": "def test_upload_file_is_closed(tmp_path: Path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n    app = FastAPI()\n\n    testing_file_store: List[UploadFile] = []\n\n    @app.post(\"/uploadfile/\")\n    def create_upload_file(file: UploadFile):\n        testing_file_store.append(file)\n        return {\"filename\": file.filename}\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file:\n        response = client.post(\"/uploadfile/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filename\": \"test.txt\"}\n\n    assert testing_file_store\n    assert testing_file_store[0].file.closed",
    "repo": "fastapi",
    "path": "tests\\test_datastructures.py",
    "type": "function",
    "name": "test_upload_file_is_closed",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_datastructures.py:function:create_upload_file:chunk1",
    "text": "def create_upload_file(file: UploadFile):\n        testing_file_store.append(file)\n        return {\"filename\": file.filename}",
    "repo": "fastapi",
    "path": "tests\\test_datastructures.py",
    "type": "function",
    "name": "create_upload_file",
    "loc": 44,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_datetime_custom_encoder.py:function:test_pydanticv2:chunk1",
    "text": "def test_pydanticv2():\n    from pydantic import field_serializer\n\n    class ModelWithDatetimeField(BaseModel):\n        dt_field: datetime\n\n        @field_serializer(\"dt_field\")\n        def serialize_datetime(self, dt_field: datetime):\n            return dt_field.replace(microsecond=0, tzinfo=timezone.utc).isoformat()\n\n    app = FastAPI()\n    model = ModelWithDatetimeField(dt_field=datetime(2019, 1, 1, 8))\n\n    @app.get(\"/model\", response_model=ModelWithDatetimeField)\n    def get_model():\n        return model\n\n    client = TestClient(app)\n    with client:\n        response = client.get(\"/model\")\n    assert response.json() == {\"dt_field\": \"2019-01-01T08:00:00+00:00\"}",
    "repo": "fastapi",
    "path": "tests\\test_datetime_custom_encoder.py",
    "type": "function",
    "name": "test_pydanticv2",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_datetime_custom_encoder.py:function:get_model:chunk1",
    "text": "def get_model():\n        return model",
    "repo": "fastapi",
    "path": "tests\\test_datetime_custom_encoder.py",
    "type": "function",
    "name": "get_model",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_datetime_custom_encoder.py:function:test_pydanticv1:chunk1",
    "text": "def test_pydanticv1():\n    class ModelWithDatetimeField(BaseModel):\n        dt_field: datetime\n\n        class Config:\n            json_encoders = {\n                datetime: lambda dt: dt.replace(\n                    microsecond=0, tzinfo=timezone.utc\n                ).isoformat()\n            }\n\n    app = FastAPI()\n    model = ModelWithDatetimeField(dt_field=datetime(2019, 1, 1, 8))\n\n    @app.get(\"/model\", response_model=ModelWithDatetimeField)\n    def get_model():\n        return model\n\n    client = TestClient(app)\n    with client:\n        response = client.get(\"/model\")\n    assert response.json() == {\"dt_field\": \"2019-01-01T08:00:00+00:00\"}",
    "repo": "fastapi",
    "path": "tests\\test_datetime_custom_encoder.py",
    "type": "function",
    "name": "test_pydanticv1",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_datetime_custom_encoder.py:function:get_model:chunk1",
    "text": "def get_model():\n        return model",
    "repo": "fastapi",
    "path": "tests\\test_datetime_custom_encoder.py",
    "type": "function",
    "name": "get_model",
    "loc": 51,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_datetime_custom_encoder.py:class:ModelWithDatetimeField:chunk1",
    "text": "class ModelWithDatetimeField(BaseModel):\n        dt_field: datetime\n\n        @field_serializer(\"dt_field\")\n        def serialize_datetime(self, dt_field: datetime):\n            return dt_field.replace(microsecond=0, tzinfo=timezone.utc).isoformat()",
    "repo": "fastapi",
    "path": "tests\\test_datetime_custom_encoder.py",
    "type": "class",
    "name": "ModelWithDatetimeField",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_datetime_custom_encoder.py:class:Config:chunk1",
    "text": "class Config:\n            json_encoders = {\n                datetime: lambda dt: dt.replace(\n                    microsecond=0, tzinfo=timezone.utc\n                ).isoformat()\n            }",
    "repo": "fastapi",
    "path": "tests\\test_datetime_custom_encoder.py",
    "type": "class",
    "name": "Config",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_datetime_custom_encoder.py:class:ModelWithDatetimeField:chunk1",
    "text": "class ModelWithDatetimeField(BaseModel):\n        dt_field: datetime\n\n        class Config:\n            json_encoders = {\n                datetime: lambda dt: dt.replace(\n                    microsecond=0, tzinfo=timezone.utc\n                ).isoformat()\n            }",
    "repo": "fastapi",
    "path": "tests\\test_datetime_custom_encoder.py",
    "type": "class",
    "name": "ModelWithDatetimeField",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:get_root:chunk1",
    "text": "def get_root():\n    return {\"msg\": \"Hello World\"}",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "get_root",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:get_path_override:chunk1",
    "text": "def get_path_override():\n    return \"Hello World\"",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "get_path_override",
    "loc": 35,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:get_a:chunk1",
    "text": "def get_a():\n    return {\"msg\": \"Hello A\"}",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "get_a",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:get_a_path_override:chunk1",
    "text": "def get_a_path_override():\n    return \"Hello A\"",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "get_a_path_override",
    "loc": 45,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:get_a_a:chunk1",
    "text": "def get_a_a():\n    return {\"msg\": \"Hello A A\"}",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "get_a_a",
    "loc": 50,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:get_a_a_path_override:chunk1",
    "text": "def get_a_a_path_override():\n    return \"Hello A A\"",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "get_a_a_path_override",
    "loc": 55,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:get_a_b:chunk1",
    "text": "def get_a_b():\n    return \"Hello A B\"",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "get_a_b",
    "loc": 60,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:get_a_b_path_override:chunk1",
    "text": "def get_a_b_path_override():\n    return \"Hello A B\"",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "get_a_b_path_override",
    "loc": 65,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:get_b:chunk1",
    "text": "def get_b():\n    return \"Hello B\"",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "get_b",
    "loc": 70,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:get_b_path_override:chunk1",
    "text": "def get_b_path_override():\n    return \"Hello B\"",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "get_b_path_override",
    "loc": 75,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:get_b_a:chunk1",
    "text": "def get_b_a():\n    return \"Hello B A\"",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "get_b_a",
    "loc": 80,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:get_b_a_path_override:chunk1",
    "text": "def get_b_a_path_override():\n    return \"Hello B A\"",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "get_b_a_path_override",
    "loc": 85,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:get_b_a_c:chunk1",
    "text": "def get_b_a_c():\n    return \"Hello B A C\"",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "get_b_a_c",
    "loc": 90,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:get_b_a_c_path_override:chunk1",
    "text": "def get_b_a_c_path_override():\n    return {\"msg\": \"Hello B A C\"}",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "get_b_a_c_path_override",
    "loc": 95,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:test_app:chunk1",
    "text": "def test_app():\n    with client:\n        response = client.get(\"/\")\n    assert response.json() == {\"msg\": \"Hello World\"}\n    assert response.headers[\"content-type\"] == orjson_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "test_app",
    "loc": 121,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:test_app_override:chunk1",
    "text": "def test_app_override():\n    with client:\n        response = client.get(\"/override\")\n    assert response.content == b\"Hello World\"\n    assert response.headers[\"content-type\"] == text_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "test_app_override",
    "loc": 128,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:test_router_a:chunk1",
    "text": "def test_router_a():\n    with client:\n        response = client.get(\"/a\")\n    assert response.json() == {\"msg\": \"Hello A\"}\n    assert response.headers[\"content-type\"] == orjson_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "test_router_a",
    "loc": 135,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:test_router_a_override:chunk1",
    "text": "def test_router_a_override():\n    with client:\n        response = client.get(\"/a/override\")\n    assert response.content == b\"Hello A\"\n    assert response.headers[\"content-type\"] == text_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "test_router_a_override",
    "loc": 142,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:test_router_a_a:chunk1",
    "text": "def test_router_a_a():\n    with client:\n        response = client.get(\"/a/a\")\n    assert response.json() == {\"msg\": \"Hello A A\"}\n    assert response.headers[\"content-type\"] == orjson_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "test_router_a_a",
    "loc": 149,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:test_router_a_a_override:chunk1",
    "text": "def test_router_a_a_override():\n    with client:\n        response = client.get(\"/a/a/override\")\n    assert response.content == b\"Hello A A\"\n    assert response.headers[\"content-type\"] == text_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "test_router_a_a_override",
    "loc": 156,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:test_router_a_b:chunk1",
    "text": "def test_router_a_b():\n    with client:\n        response = client.get(\"/a/b\")\n    assert response.content == b\"Hello A B\"\n    assert response.headers[\"content-type\"] == text_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "test_router_a_b",
    "loc": 163,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:test_router_a_b_override:chunk1",
    "text": "def test_router_a_b_override():\n    with client:\n        response = client.get(\"/a/b/override\")\n    assert response.content == b\"Hello A B\"\n    assert response.headers[\"content-type\"] == html_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "test_router_a_b_override",
    "loc": 170,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:test_router_b:chunk1",
    "text": "def test_router_b():\n    with client:\n        response = client.get(\"/b\")\n    assert response.content == b\"Hello B\"\n    assert response.headers[\"content-type\"] == text_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "test_router_b",
    "loc": 177,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:test_router_b_override:chunk1",
    "text": "def test_router_b_override():\n    with client:\n        response = client.get(\"/b/override\")\n    assert response.content == b\"Hello B\"\n    assert response.headers[\"content-type\"] == html_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "test_router_b_override",
    "loc": 184,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:test_router_b_a:chunk1",
    "text": "def test_router_b_a():\n    with client:\n        response = client.get(\"/b/a\")\n    assert response.content == b\"Hello B A\"\n    assert response.headers[\"content-type\"] == text_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "test_router_b_a",
    "loc": 191,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:test_router_b_a_override:chunk1",
    "text": "def test_router_b_a_override():\n    with client:\n        response = client.get(\"/b/a/override\")\n    assert response.content == b\"Hello B A\"\n    assert response.headers[\"content-type\"] == html_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "test_router_b_a_override",
    "loc": 198,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:test_router_b_a_c:chunk1",
    "text": "def test_router_b_a_c():\n    with client:\n        response = client.get(\"/b/a/c\")\n    assert response.content == b\"Hello B A C\"\n    assert response.headers[\"content-type\"] == html_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "test_router_b_a_c",
    "loc": 205,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:function:test_router_b_a_c_override:chunk1",
    "text": "def test_router_b_a_c_override():\n    with client:\n        response = client.get(\"/b/a/c/override\")\n    assert response.json() == {\"msg\": \"Hello B A C\"}\n    assert response.headers[\"content-type\"] == override_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "function",
    "name": "test_router_b_a_c_override",
    "loc": 212,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:class:ORJSONResponse:chunk1",
    "text": "class ORJSONResponse(JSONResponse):\n    media_type = \"application/x-orjson\"\n\n    def render(self, content: Any) -> bytes:\n        return orjson.dumps(content)",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "class",
    "name": "ORJSONResponse",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class.py:class:OverrideResponse:chunk1",
    "text": "class OverrideResponse(JSONResponse):\n    media_type = \"application/x-override\"",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class.py",
    "type": "class",
    "name": "OverrideResponse",
    "loc": 16,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:get_root:chunk1",
    "text": "def get_root():\n    return {\"msg\": \"Hello World\"}",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "get_root",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:get_path_override:chunk1",
    "text": "def get_path_override():\n    return \"Hello World\"",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "get_path_override",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:get_a:chunk1",
    "text": "def get_a():\n    return {\"msg\": \"Hello A\"}",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "get_a",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:get_a_path_override:chunk1",
    "text": "def get_a_path_override():\n    return \"Hello A\"",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "get_a_path_override",
    "loc": 35,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:get_a_a:chunk1",
    "text": "def get_a_a():\n    return {\"msg\": \"Hello A A\"}",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "get_a_a",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:get_a_a_path_override:chunk1",
    "text": "def get_a_a_path_override():\n    return \"Hello A A\"",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "get_a_a_path_override",
    "loc": 45,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:get_a_b:chunk1",
    "text": "def get_a_b():\n    return \"Hello A B\"",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "get_a_b",
    "loc": 50,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:get_a_b_path_override:chunk1",
    "text": "def get_a_b_path_override():\n    return \"Hello A B\"",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "get_a_b_path_override",
    "loc": 55,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:get_b:chunk1",
    "text": "def get_b():\n    return \"Hello B\"",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "get_b",
    "loc": 60,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:get_b_path_override:chunk1",
    "text": "def get_b_path_override():\n    return \"Hello B\"",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "get_b_path_override",
    "loc": 65,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:get_b_a:chunk1",
    "text": "def get_b_a():\n    return \"Hello B A\"",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "get_b_a",
    "loc": 70,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:get_b_a_path_override:chunk1",
    "text": "def get_b_a_path_override():\n    return \"Hello B A\"",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "get_b_a_path_override",
    "loc": 75,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:get_b_a_c:chunk1",
    "text": "def get_b_a_c():\n    return \"Hello B A C\"",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "get_b_a_c",
    "loc": 80,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:get_b_a_c_path_override:chunk1",
    "text": "def get_b_a_c_path_override():\n    return {\"msg\": \"Hello B A C\"}",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "get_b_a_c_path_override",
    "loc": 85,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:test_app:chunk1",
    "text": "def test_app():\n    with client:\n        response = client.get(\"/\")\n    assert response.json() == {\"msg\": \"Hello World\"}\n    assert response.headers[\"content-type\"] == json_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "test_app",
    "loc": 111,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:test_app_override:chunk1",
    "text": "def test_app_override():\n    with client:\n        response = client.get(\"/override\")\n    assert response.content == b\"Hello World\"\n    assert response.headers[\"content-type\"] == text_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "test_app_override",
    "loc": 118,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:test_router_a:chunk1",
    "text": "def test_router_a():\n    with client:\n        response = client.get(\"/a\")\n    assert response.json() == {\"msg\": \"Hello A\"}\n    assert response.headers[\"content-type\"] == json_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "test_router_a",
    "loc": 125,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:test_router_a_override:chunk1",
    "text": "def test_router_a_override():\n    with client:\n        response = client.get(\"/a/override\")\n    assert response.content == b\"Hello A\"\n    assert response.headers[\"content-type\"] == text_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "test_router_a_override",
    "loc": 132,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:test_router_a_a:chunk1",
    "text": "def test_router_a_a():\n    with client:\n        response = client.get(\"/a/a\")\n    assert response.json() == {\"msg\": \"Hello A A\"}\n    assert response.headers[\"content-type\"] == json_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "test_router_a_a",
    "loc": 139,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:test_router_a_a_override:chunk1",
    "text": "def test_router_a_a_override():\n    with client:\n        response = client.get(\"/a/a/override\")\n    assert response.content == b\"Hello A A\"\n    assert response.headers[\"content-type\"] == text_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "test_router_a_a_override",
    "loc": 146,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:test_router_a_b:chunk1",
    "text": "def test_router_a_b():\n    with client:\n        response = client.get(\"/a/b\")\n    assert response.content == b\"Hello A B\"\n    assert response.headers[\"content-type\"] == text_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "test_router_a_b",
    "loc": 153,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:test_router_a_b_override:chunk1",
    "text": "def test_router_a_b_override():\n    with client:\n        response = client.get(\"/a/b/override\")\n    assert response.content == b\"Hello A B\"\n    assert response.headers[\"content-type\"] == html_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "test_router_a_b_override",
    "loc": 160,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:test_router_b:chunk1",
    "text": "def test_router_b():\n    with client:\n        response = client.get(\"/b\")\n    assert response.content == b\"Hello B\"\n    assert response.headers[\"content-type\"] == text_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "test_router_b",
    "loc": 167,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:test_router_b_override:chunk1",
    "text": "def test_router_b_override():\n    with client:\n        response = client.get(\"/b/override\")\n    assert response.content == b\"Hello B\"\n    assert response.headers[\"content-type\"] == html_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "test_router_b_override",
    "loc": 174,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:test_router_b_a:chunk1",
    "text": "def test_router_b_a():\n    with client:\n        response = client.get(\"/b/a\")\n    assert response.content == b\"Hello B A\"\n    assert response.headers[\"content-type\"] == text_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "test_router_b_a",
    "loc": 181,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:test_router_b_a_override:chunk1",
    "text": "def test_router_b_a_override():\n    with client:\n        response = client.get(\"/b/a/override\")\n    assert response.content == b\"Hello B A\"\n    assert response.headers[\"content-type\"] == html_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "test_router_b_a_override",
    "loc": 188,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:test_router_b_a_c:chunk1",
    "text": "def test_router_b_a_c():\n    with client:\n        response = client.get(\"/b/a/c\")\n    assert response.content == b\"Hello B A C\"\n    assert response.headers[\"content-type\"] == html_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "test_router_b_a_c",
    "loc": 195,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:function:test_router_b_a_c_override:chunk1",
    "text": "def test_router_b_a_c_override():\n    with client:\n        response = client.get(\"/b/a/c/override\")\n    assert response.json() == {\"msg\": \"Hello B A C\"}\n    assert response.headers[\"content-type\"] == override_type",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "function",
    "name": "test_router_b_a_c_override",
    "loc": 202,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_default_response_class_router.py:class:OverrideResponse:chunk1",
    "text": "class OverrideResponse(JSONResponse):\n    media_type = \"application/x-override\"",
    "repo": "fastapi",
    "path": "tests\\test_default_response_class_router.py",
    "type": "class",
    "name": "OverrideResponse",
    "loc": 6,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_cache.py:function:test_normal_counter:chunk1",
    "text": "def test_normal_counter():\n    counter_holder[\"counter\"] = 0\n    response = client.get(\"/counter/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"counter\": 1}\n    response = client.get(\"/counter/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"counter\": 2}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_cache.py",
    "type": "function",
    "name": "test_normal_counter",
    "loc": 54,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_cache.py:function:test_sub_counter:chunk1",
    "text": "def test_sub_counter():\n    counter_holder[\"counter\"] = 0\n    response = client.get(\"/sub-counter/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"counter\": 1, \"subcounter\": 1}\n    response = client.get(\"/sub-counter/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"counter\": 2, \"subcounter\": 2}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_cache.py",
    "type": "function",
    "name": "test_sub_counter",
    "loc": 64,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_cache.py:function:test_sub_counter_no_cache:chunk1",
    "text": "def test_sub_counter_no_cache():\n    counter_holder[\"counter\"] = 0\n    response = client.get(\"/sub-counter-no-cache/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"counter\": 2, \"subcounter\": 1}\n    response = client.get(\"/sub-counter-no-cache/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"counter\": 4, \"subcounter\": 3}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_cache.py",
    "type": "function",
    "name": "test_sub_counter_no_cache",
    "loc": 74,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_cache.py:function:test_security_cache:chunk1",
    "text": "def test_security_cache():\n    counter_holder[\"counter\"] = 0\n    response = client.get(\"/scope-counter/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"counter\": 1, \"scope_counter_1\": 2, \"scope_counter_2\": 2}\n    response = client.get(\"/scope-counter/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"counter\": 3, \"scope_counter_1\": 4, \"scope_counter_2\": 4}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_cache.py",
    "type": "function",
    "name": "test_security_cache",
    "loc": 84,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_class.py:function:test_class_dependency:chunk1",
    "text": "def test_class_dependency(route, value):\n    response = client.get(route, params={\"value\": value})\n    assert response.status_code == 200, response.text\n    assert response.json() == value",
    "repo": "fastapi",
    "path": "tests\\test_dependency_class.py",
    "type": "function",
    "name": "test_class_dependency",
    "loc": 119,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_class.py:class:CallableDependency:chunk1",
    "text": "class CallableDependency:\n    def __call__(self, value: str) -> str:\n        return value",
    "repo": "fastapi",
    "path": "tests\\test_dependency_class.py",
    "type": "class",
    "name": "CallableDependency",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_class.py:class:CallableGenDependency:chunk1",
    "text": "class CallableGenDependency:\n    def __call__(self, value: str) -> Generator[str, None, None]:\n        yield value",
    "repo": "fastapi",
    "path": "tests\\test_dependency_class.py",
    "type": "class",
    "name": "CallableGenDependency",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_class.py:class:AsyncCallableDependency:chunk1",
    "text": "class AsyncCallableDependency:\n    async def __call__(self, value: str) -> str:\n        return value",
    "repo": "fastapi",
    "path": "tests\\test_dependency_class.py",
    "type": "class",
    "name": "AsyncCallableDependency",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_class.py:class:AsyncCallableGenDependency:chunk1",
    "text": "class AsyncCallableGenDependency:\n    async def __call__(self, value: str) -> AsyncGenerator[str, None]:\n        yield value",
    "repo": "fastapi",
    "path": "tests\\test_dependency_class.py",
    "type": "class",
    "name": "AsyncCallableGenDependency",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_class.py:class:MethodsDependency:chunk1",
    "text": "class MethodsDependency:\n    def synchronous(self, value: str) -> str:\n        return value\n\n    async def asynchronous(self, value: str) -> str:\n        return value\n\n    def synchronous_gen(self, value: str) -> Generator[str, None, None]:\n        yield value\n\n    async def asynchronous_gen(self, value: str) -> AsyncGenerator[str, None]:\n        yield value",
    "repo": "fastapi",
    "path": "tests\\test_dependency_class.py",
    "type": "class",
    "name": "MethodsDependency",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:generator_state:chunk1",
    "text": "def generator_state(state: Dict[str, str] = Depends(get_state)):\n    state[\"/sync\"] = \"generator started\"\n    yield state[\"/sync\"]\n    state[\"/sync\"] = \"generator completed\"",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "generator_state",
    "loc": 46,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:generator_state_try:chunk1",
    "text": "def generator_state_try(state: Dict[str, str] = Depends(get_state)):\n    state[\"/sync_raise\"] = \"generator raise started\"\n    try:\n        yield state[\"/sync_raise\"]\n    except SyncDependencyError:\n        errors.append(\"/sync_raise\")\n        raise\n    finally:\n        state[\"/sync_raise\"] = \"generator raise finalized\"",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "generator_state_try",
    "loc": 63,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:get_sync_async:chunk1",
    "text": "def get_sync_async(state: str = Depends(asyncgen_state)):\n    return state",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "get_sync_async",
    "loc": 149,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:get_sync_sync:chunk1",
    "text": "def get_sync_sync(state: str = Depends(generator_state)):\n    return state",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "get_sync_sync",
    "loc": 154,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:get_sync_async_raise:chunk1",
    "text": "def get_sync_async_raise(state: str = Depends(asyncgen_state_try)):\n    assert state == \"asyncgen raise started\"\n    raise AsyncDependencyError()",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "get_sync_async_raise",
    "loc": 159,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:get_sync_sync_raise:chunk1",
    "text": "def get_sync_sync_raise(state: str = Depends(generator_state_try)):\n    assert state == \"generator raise started\"\n    raise SyncDependencyError()",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "get_sync_sync_raise",
    "loc": 165,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:get_sync_async_raise_other:chunk1",
    "text": "def get_sync_async_raise_other(state: str = Depends(asyncgen_state_try)):\n    assert state == \"asyncgen raise started\"\n    raise OtherDependencyError()",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "get_sync_async_raise_other",
    "loc": 171,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:get_sync_sync_raise_other:chunk1",
    "text": "def get_sync_sync_raise_other(state: str = Depends(generator_state_try)):\n    assert state == \"generator raise started\"\n    raise OtherDependencyError()",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "get_sync_sync_raise_other",
    "loc": 177,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:get_sync_context_b:chunk1",
    "text": "def get_sync_context_b(state: dict = Depends(context_b)):\n    return state",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "get_sync_context_b",
    "loc": 183,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:get_sync_context_b_raise:chunk1",
    "text": "def get_sync_context_b_raise(state: dict = Depends(context_b)):\n    assert state[\"context_b\"] == \"started b\"\n    assert state[\"context_a\"] == \"started a\"\n    raise OtherDependencyError()",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "get_sync_context_b_raise",
    "loc": 188,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:test_async_state:chunk1",
    "text": "def test_async_state():\n    assert state[\"/async\"] == \"asyncgen not started\"\n    response = client.get(\"/async\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"asyncgen started\"\n    assert state[\"/async\"] == \"asyncgen completed\"",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "test_async_state",
    "loc": 217,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:test_sync_state:chunk1",
    "text": "def test_sync_state():\n    assert state[\"/sync\"] == \"generator not started\"\n    response = client.get(\"/sync\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"generator started\"\n    assert state[\"/sync\"] == \"generator completed\"",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "test_sync_state",
    "loc": 225,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:test_async_raise_other:chunk1",
    "text": "def test_async_raise_other():\n    assert state[\"/async_raise\"] == \"asyncgen raise not started\"\n    with pytest.raises(OtherDependencyError):\n        client.get(\"/async_raise_other\")\n    assert state[\"/async_raise\"] == \"asyncgen raise finalized\"\n    assert \"/async_raise\" not in errors",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "test_async_raise_other",
    "loc": 233,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:test_sync_raise_other:chunk1",
    "text": "def test_sync_raise_other():\n    assert state[\"/sync_raise\"] == \"generator raise not started\"\n    with pytest.raises(OtherDependencyError):\n        client.get(\"/sync_raise_other\")\n    assert state[\"/sync_raise\"] == \"generator raise finalized\"\n    assert \"/sync_raise\" not in errors",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "test_sync_raise_other",
    "loc": 241,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:test_async_raise_raises:chunk1",
    "text": "def test_async_raise_raises():\n    with pytest.raises(AsyncDependencyError):\n        client.get(\"/async_raise\")\n    assert state[\"/async_raise\"] == \"asyncgen raise finalized\"\n    assert \"/async_raise\" in errors\n    errors.clear()",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "test_async_raise_raises",
    "loc": 249,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:test_async_raise_server_error:chunk1",
    "text": "def test_async_raise_server_error():\n    client = TestClient(app, raise_server_exceptions=False)\n    response = client.get(\"/async_raise\")\n    assert response.status_code == 500, response.text\n    assert state[\"/async_raise\"] == \"asyncgen raise finalized\"\n    assert \"/async_raise\" in errors\n    errors.clear()",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "test_async_raise_server_error",
    "loc": 257,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:test_context_b:chunk1",
    "text": "def test_context_b():\n    response = client.get(\"/context_b\")\n    data = response.json()\n    assert data[\"context_b\"] == \"started b\"\n    assert data[\"context_a\"] == \"started a\"\n    assert state[\"context_b\"] == \"finished b with a: started a\"\n    assert state[\"context_a\"] == \"finished a\"",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "test_context_b",
    "loc": 266,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:test_context_b_raise:chunk1",
    "text": "def test_context_b_raise():\n    with pytest.raises(OtherDependencyError):\n        client.get(\"/context_b_raise\")\n    assert state[\"context_b\"] == \"finished b with a: started a\"\n    assert state[\"context_a\"] == \"finished a\"",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "test_context_b_raise",
    "loc": 275,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:test_background_tasks:chunk1",
    "text": "def test_background_tasks():\n    response = client.get(\"/context_b_bg\")\n    data = response.json()\n    assert data[\"context_b\"] == \"started b\"\n    assert data[\"context_a\"] == \"started a\"\n    assert data[\"bg\"] == \"not set\"\n    middleware_state = json.loads(response.headers[\"x-state\"])\n    assert middleware_state[\"context_b\"] == \"finished b with a: started a\"\n    assert middleware_state[\"context_a\"] == \"finished a\"\n    assert middleware_state[\"bg\"] == \"not set\"\n    assert state[\"context_b\"] == \"finished b with a: started a\"\n    assert state[\"context_a\"] == \"finished a\"\n    assert state[\"bg\"] == \"bg set - b: finished b with a: started a - a: finished a\"",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "test_background_tasks",
    "loc": 282,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:test_sync_raise_raises:chunk1",
    "text": "def test_sync_raise_raises():\n    with pytest.raises(SyncDependencyError):\n        client.get(\"/sync_raise\")\n    assert state[\"/sync_raise\"] == \"generator raise finalized\"\n    assert \"/sync_raise\" in errors\n    errors.clear()",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "test_sync_raise_raises",
    "loc": 297,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:test_sync_raise_server_error:chunk1",
    "text": "def test_sync_raise_server_error():\n    client = TestClient(app, raise_server_exceptions=False)\n    response = client.get(\"/sync_raise\")\n    assert response.status_code == 500, response.text\n    assert state[\"/sync_raise\"] == \"generator raise finalized\"\n    assert \"/sync_raise\" in errors\n    errors.clear()",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "test_sync_raise_server_error",
    "loc": 305,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:test_sync_async_state:chunk1",
    "text": "def test_sync_async_state():\n    response = client.get(\"/sync_async\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"asyncgen started\"\n    assert state[\"/async\"] == \"asyncgen completed\"",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "test_sync_async_state",
    "loc": 314,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:test_sync_sync_state:chunk1",
    "text": "def test_sync_sync_state():\n    response = client.get(\"/sync_sync\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"generator started\"\n    assert state[\"/sync\"] == \"generator completed\"",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "test_sync_sync_state",
    "loc": 321,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:test_sync_async_raise_other:chunk1",
    "text": "def test_sync_async_raise_other():\n    with pytest.raises(OtherDependencyError):\n        client.get(\"/sync_async_raise_other\")\n    assert state[\"/async_raise\"] == \"asyncgen raise finalized\"\n    assert \"/async_raise\" not in errors",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "test_sync_async_raise_other",
    "loc": 328,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:test_sync_sync_raise_other:chunk1",
    "text": "def test_sync_sync_raise_other():\n    with pytest.raises(OtherDependencyError):\n        client.get(\"/sync_sync_raise_other\")\n    assert state[\"/sync_raise\"] == \"generator raise finalized\"\n    assert \"/sync_raise\" not in errors",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "test_sync_sync_raise_other",
    "loc": 335,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:test_sync_async_raise_raises:chunk1",
    "text": "def test_sync_async_raise_raises():\n    with pytest.raises(AsyncDependencyError):\n        client.get(\"/sync_async_raise\")\n    assert state[\"/async_raise\"] == \"asyncgen raise finalized\"\n    assert \"/async_raise\" in errors\n    errors.clear()",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "test_sync_async_raise_raises",
    "loc": 342,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:test_sync_async_raise_server_error:chunk1",
    "text": "def test_sync_async_raise_server_error():\n    client = TestClient(app, raise_server_exceptions=False)\n    response = client.get(\"/sync_async_raise\")\n    assert response.status_code == 500, response.text\n    assert state[\"/async_raise\"] == \"asyncgen raise finalized\"\n    assert \"/async_raise\" in errors\n    errors.clear()",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "test_sync_async_raise_server_error",
    "loc": 350,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:test_sync_sync_raise_raises:chunk1",
    "text": "def test_sync_sync_raise_raises():\n    with pytest.raises(SyncDependencyError):\n        client.get(\"/sync_sync_raise\")\n    assert state[\"/sync_raise\"] == \"generator raise finalized\"\n    assert \"/sync_raise\" in errors\n    errors.clear()",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "test_sync_sync_raise_raises",
    "loc": 359,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:test_sync_sync_raise_server_error:chunk1",
    "text": "def test_sync_sync_raise_server_error():\n    client = TestClient(app, raise_server_exceptions=False)\n    response = client.get(\"/sync_sync_raise\")\n    assert response.status_code == 500, response.text\n    assert state[\"/sync_raise\"] == \"generator raise finalized\"\n    assert \"/sync_raise\" in errors\n    errors.clear()",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "test_sync_sync_raise_server_error",
    "loc": 367,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:test_sync_context_b:chunk1",
    "text": "def test_sync_context_b():\n    response = client.get(\"/sync_context_b\")\n    data = response.json()\n    assert data[\"context_b\"] == \"started b\"\n    assert data[\"context_a\"] == \"started a\"\n    assert state[\"context_b\"] == \"finished b with a: started a\"\n    assert state[\"context_a\"] == \"finished a\"",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "test_sync_context_b",
    "loc": 376,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:test_sync_context_b_raise:chunk1",
    "text": "def test_sync_context_b_raise():\n    with pytest.raises(OtherDependencyError):\n        client.get(\"/sync_context_b_raise\")\n    assert state[\"context_b\"] == \"finished b with a: started a\"\n    assert state[\"context_a\"] == \"finished a\"",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "test_sync_context_b_raise",
    "loc": 385,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:function:test_sync_background_tasks:chunk1",
    "text": "def test_sync_background_tasks():\n    response = client.get(\"/sync_context_b_bg\")\n    data = response.json()\n    assert data[\"context_b\"] == \"started b\"\n    assert data[\"context_a\"] == \"started a\"\n    assert data[\"sync_bg\"] == \"not set\"\n    assert state[\"context_b\"] == \"finished b with a: started a\"\n    assert state[\"context_a\"] == \"finished a\"\n    assert (\n        state[\"sync_bg\"]\n        == \"sync_bg set - b: finished b with a: started a - a: finished a\"\n    )",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "function",
    "name": "test_sync_background_tasks",
    "loc": 392,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:class:AsyncDependencyError:chunk1",
    "text": "class AsyncDependencyError(Exception):\n    pass",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "class",
    "name": "AsyncDependencyError",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:class:SyncDependencyError:chunk1",
    "text": "class SyncDependencyError(Exception):\n    pass",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "class",
    "name": "SyncDependencyError",
    "loc": 32,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextmanager.py:class:OtherDependencyError:chunk1",
    "text": "class OtherDependencyError(Exception):\n    pass",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextmanager.py",
    "type": "class",
    "name": "OtherDependencyError",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextvars.py:function:get_user:chunk1",
    "text": "def get_user():\n    request_state = legacy_request_state_context_var.get()\n    assert request_state\n    return request_state[\"user\"]",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextvars.py",
    "type": "function",
    "name": "get_user",
    "loc": 31,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_contextvars.py:function:test_dependency_contextvars:chunk1",
    "text": "def test_dependency_contextvars():\n    \"\"\"\n    Check that custom middlewares don't affect the contextvar context for dependencies.\n\n    The code before yield and the code after yield should be run in the same contextvar\n    context, so that request_state_context_var.reset(contextvar_token).\n\n    If they are run in a different context, that raises an error.\n    \"\"\"\n    response = client.get(\"/user\")\n    assert response.json() == \"deadpond\"\n    assert response.headers[\"custom\"] == \"foo\"",
    "repo": "fastapi",
    "path": "tests\\test_dependency_contextvars.py",
    "type": "function",
    "name": "test_dependency_contextvars",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_duplicates.py:function:duplicate_dependency:chunk1",
    "text": "def duplicate_dependency(item: Item):\n    return item",
    "repo": "fastapi",
    "path": "tests\\test_dependency_duplicates.py",
    "type": "function",
    "name": "duplicate_dependency",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_duplicates.py:function:dependency:chunk1",
    "text": "def dependency(item2: Item):\n    return item2",
    "repo": "fastapi",
    "path": "tests\\test_dependency_duplicates.py",
    "type": "function",
    "name": "dependency",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_duplicates.py:function:sub_duplicate_dependency:chunk1",
    "text": "def sub_duplicate_dependency(\n    item: Item, sub_item: Item = Depends(duplicate_dependency)\n):\n    return [item, sub_item]",
    "repo": "fastapi",
    "path": "tests\\test_dependency_duplicates.py",
    "type": "function",
    "name": "sub_duplicate_dependency",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_duplicates.py:function:test_no_duplicates_invalid:chunk1",
    "text": "def test_no_duplicates_invalid():\n    response = client.post(\"/no-duplicates\", json={\"item\": {\"data\": \"myitem\"}})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"item2\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"item2\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_dependency_duplicates.py",
    "type": "function",
    "name": "test_no_duplicates_invalid",
    "loc": 48,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_duplicates.py:function:test_no_duplicates:chunk1",
    "text": "def test_no_duplicates():\n    response = client.post(\n        \"/no-duplicates\",\n        json={\"item\": {\"data\": \"myitem\"}, \"item2\": {\"data\": \"myitem2\"}},\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"data\": \"myitem\"}, {\"data\": \"myitem2\"}]",
    "repo": "fastapi",
    "path": "tests\\test_dependency_duplicates.py",
    "type": "function",
    "name": "test_no_duplicates",
    "loc": 76,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_duplicates.py:function:test_duplicates:chunk1",
    "text": "def test_duplicates():\n    response = client.post(\"/with-duplicates\", json={\"data\": \"myitem\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"data\": \"myitem\"}, {\"data\": \"myitem\"}]",
    "repo": "fastapi",
    "path": "tests\\test_dependency_duplicates.py",
    "type": "function",
    "name": "test_duplicates",
    "loc": 85,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_duplicates.py:function:test_sub_duplicates:chunk1",
    "text": "def test_sub_duplicates():\n    response = client.post(\"/with-duplicates-sub\", json={\"data\": \"myitem\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\"data\": \"myitem\"},\n        [{\"data\": \"myitem\"}, {\"data\": \"myitem\"}],\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_dependency_duplicates.py",
    "type": "function",
    "name": "test_sub_duplicates",
    "loc": 91,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_duplicates.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/with-duplicates\": {\n                \"post\": {\n                    \"summary\": \"With Duplicates\",\n                    \"operationId\": \"with_duplicates_with_duplicates_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/no-duplicates\": {\n                \"post\": {\n                    \"summary\": \"No Duplicates\",\n                    \"operationId\": \"no_duplicates_no_duplicates_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_no_duplicates_no_duplicates_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/with-duplicates-sub\": {\n                \"post\": {\n                    \"summary\": \"No Duplicates Sub\",\n                    \"operationId\": \"no_duplicates_sub_with_duplicates_sub_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_no_duplicates_no_duplicates_post\": {\n                    \"title\": \"Body_no_duplicates_no_duplicates_post\",\n                    \"required\": [\"item\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"data\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"data\": {\"title\": \"Data\", \"type\": \"string\"}},\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_dependency_duplicates.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 100,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_duplicates.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    data: str",
    "repo": "fastapi",
    "path": "tests\\test_dependency_duplicates.py",
    "type": "class",
    "name": "Item",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_normal_exceptions.py:function:put_invalid_user:chunk1",
    "text": "def put_invalid_user(\n    user_id: str, name: str = Body(), db: dict = Depends(get_database)\n):\n    db[user_id] = name\n    raise HTTPException(status_code=400, detail=\"Invalid user\")",
    "repo": "fastapi",
    "path": "tests\\test_dependency_normal_exceptions.py",
    "type": "function",
    "name": "put_invalid_user",
    "loc": 29,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_normal_exceptions.py:function:put_user:chunk1",
    "text": "def put_user(user_id: str, name: str = Body(), db: dict = Depends(get_database)):\n    db[user_id] = name\n    return {\"message\": \"OK\"}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_normal_exceptions.py",
    "type": "function",
    "name": "put_user",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_normal_exceptions.py:function:reset_state_and_db:chunk1",
    "text": "def reset_state_and_db():\n    global fake_database\n    global state\n    fake_database = initial_fake_database.copy()\n    state = initial_state.copy()",
    "repo": "fastapi",
    "path": "tests\\test_dependency_normal_exceptions.py",
    "type": "function",
    "name": "reset_state_and_db",
    "loc": 43,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_normal_exceptions.py:function:test_dependency_gets_exception:chunk1",
    "text": "def test_dependency_gets_exception():\n    assert state[\"except\"] is False\n    assert state[\"finally\"] is False\n    response = client.put(\"/invalid-user/rick\", json=\"Morty\")\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Invalid user\"}\n    assert state[\"except\"] is True\n    assert state[\"finally\"] is True\n    assert fake_database[\"rick\"] == \"Rick Sanchez\"",
    "repo": "fastapi",
    "path": "tests\\test_dependency_normal_exceptions.py",
    "type": "function",
    "name": "test_dependency_gets_exception",
    "loc": 53,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_normal_exceptions.py:function:test_dependency_no_exception:chunk1",
    "text": "def test_dependency_no_exception():\n    assert state[\"except\"] is False\n    assert state[\"finally\"] is False\n    response = client.put(\"/user/rick\", json=\"Morty\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"OK\"}\n    assert state[\"except\"] is False\n    assert state[\"finally\"] is True\n    assert fake_database[\"rick\"] == \"Morty\"",
    "repo": "fastapi",
    "path": "tests\\test_dependency_normal_exceptions.py",
    "type": "function",
    "name": "test_dependency_no_exception",
    "loc": 64,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_main_depends:chunk1",
    "text": "def test_main_depends():\n    response = client.get(\"/main-depends/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"q\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"q\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_main_depends",
    "loc": 54,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_main_depends_q_foo:chunk1",
    "text": "def test_main_depends_q_foo():\n    response = client.get(\"/main-depends/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"in\": \"main-depends\",\n        \"params\": {\"q\": \"foo\", \"skip\": 0, \"limit\": 100},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_main_depends_q_foo",
    "loc": 82,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_main_depends_q_foo_skip_100_limit_200:chunk1",
    "text": "def test_main_depends_q_foo_skip_100_limit_200():\n    response = client.get(\"/main-depends/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"in\": \"main-depends\",\n        \"params\": {\"q\": \"foo\", \"skip\": 100, \"limit\": 200},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_main_depends_q_foo_skip_100_limit_200",
    "loc": 91,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_decorator_depends:chunk1",
    "text": "def test_decorator_depends():\n    response = client.get(\"/decorator-depends/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"q\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"q\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_decorator_depends",
    "loc": 100,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_decorator_depends_q_foo:chunk1",
    "text": "def test_decorator_depends_q_foo():\n    response = client.get(\"/decorator-depends/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\"in\": \"decorator-depends\"}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_decorator_depends_q_foo",
    "loc": 128,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_decorator_depends_q_foo_skip_100_limit_200:chunk1",
    "text": "def test_decorator_depends_q_foo_skip_100_limit_200():\n    response = client.get(\"/decorator-depends/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\"in\": \"decorator-depends\"}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_decorator_depends_q_foo_skip_100_limit_200",
    "loc": 134,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_router_depends:chunk1",
    "text": "def test_router_depends():\n    response = client.get(\"/router-depends/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"q\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"q\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_router_depends",
    "loc": 140,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_router_depends_q_foo:chunk1",
    "text": "def test_router_depends_q_foo():\n    response = client.get(\"/router-depends/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"in\": \"router-depends\",\n        \"params\": {\"q\": \"foo\", \"skip\": 0, \"limit\": 100},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_router_depends_q_foo",
    "loc": 168,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_router_depends_q_foo_skip_100_limit_200:chunk1",
    "text": "def test_router_depends_q_foo_skip_100_limit_200():\n    response = client.get(\"/router-depends/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"in\": \"router-depends\",\n        \"params\": {\"q\": \"foo\", \"skip\": 100, \"limit\": 200},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_router_depends_q_foo_skip_100_limit_200",
    "loc": 177,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_router_decorator_depends:chunk1",
    "text": "def test_router_decorator_depends():\n    response = client.get(\"/router-decorator-depends/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"q\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"q\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_router_decorator_depends",
    "loc": 186,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_router_decorator_depends_q_foo:chunk1",
    "text": "def test_router_decorator_depends_q_foo():\n    response = client.get(\"/router-decorator-depends/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\"in\": \"router-decorator-depends\"}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_router_decorator_depends_q_foo",
    "loc": 214,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_router_decorator_depends_q_foo_skip_100_limit_200:chunk1",
    "text": "def test_router_decorator_depends_q_foo_skip_100_limit_200():\n    response = client.get(\"/router-decorator-depends/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\"in\": \"router-decorator-depends\"}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_router_decorator_depends_q_foo_skip_100_limit_200",
    "loc": 220,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_override_simple:chunk1",
    "text": "def test_override_simple(url, status_code, expected):\n    app.dependency_overrides[common_parameters] = overrider_dependency_simple\n    response = client.get(url)\n    assert response.status_code == status_code\n    assert response.json() == expected\n    app.dependency_overrides = {}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_override_simple",
    "loc": 263,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_override_with_sub_main_depends:chunk1",
    "text": "def test_override_with_sub_main_depends():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/main-depends/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n    app.dependency_overrides = {}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_override_with_sub_main_depends",
    "loc": 271,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_override_with_sub__main_depends_q_foo:chunk1",
    "text": "def test_override_with_sub__main_depends_q_foo():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/main-depends/?q=foo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n    app.dependency_overrides = {}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_override_with_sub__main_depends_q_foo",
    "loc": 301,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_override_with_sub_main_depends_k_bar:chunk1",
    "text": "def test_override_with_sub_main_depends_k_bar():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/main-depends/?k=bar\")\n    assert response.status_code == 200\n    assert response.json() == {\"in\": \"main-depends\", \"params\": {\"k\": \"bar\"}}\n    app.dependency_overrides = {}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_override_with_sub_main_depends_k_bar",
    "loc": 331,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_override_with_sub_decorator_depends:chunk1",
    "text": "def test_override_with_sub_decorator_depends():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/decorator-depends/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n    app.dependency_overrides = {}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_override_with_sub_decorator_depends",
    "loc": 339,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_override_with_sub_decorator_depends_q_foo:chunk1",
    "text": "def test_override_with_sub_decorator_depends_q_foo():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/decorator-depends/?q=foo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n    app.dependency_overrides = {}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_override_with_sub_decorator_depends_q_foo",
    "loc": 369,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_override_with_sub_decorator_depends_k_bar:chunk1",
    "text": "def test_override_with_sub_decorator_depends_k_bar():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/decorator-depends/?k=bar\")\n    assert response.status_code == 200\n    assert response.json() == {\"in\": \"decorator-depends\"}\n    app.dependency_overrides = {}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_override_with_sub_decorator_depends_k_bar",
    "loc": 399,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_override_with_sub_router_depends:chunk1",
    "text": "def test_override_with_sub_router_depends():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/router-depends/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n    app.dependency_overrides = {}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_override_with_sub_router_depends",
    "loc": 407,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_override_with_sub_router_depends_q_foo:chunk1",
    "text": "def test_override_with_sub_router_depends_q_foo():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/router-depends/?q=foo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n    app.dependency_overrides = {}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_override_with_sub_router_depends_q_foo",
    "loc": 437,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_override_with_sub_router_depends_k_bar:chunk1",
    "text": "def test_override_with_sub_router_depends_k_bar():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/router-depends/?k=bar\")\n    assert response.status_code == 200\n    assert response.json() == {\"in\": \"router-depends\", \"params\": {\"k\": \"bar\"}}\n    app.dependency_overrides = {}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_override_with_sub_router_depends_k_bar",
    "loc": 467,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_override_with_sub_router_decorator_depends:chunk1",
    "text": "def test_override_with_sub_router_decorator_depends():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/router-decorator-depends/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n    app.dependency_overrides = {}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_override_with_sub_router_decorator_depends",
    "loc": 475,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_override_with_sub_router_decorator_depends_q_foo:chunk1",
    "text": "def test_override_with_sub_router_decorator_depends_q_foo():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/router-decorator-depends/?q=foo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n    app.dependency_overrides = {}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_override_with_sub_router_decorator_depends_q_foo",
    "loc": 505,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_overrides.py:function:test_override_with_sub_router_decorator_depends_k_bar:chunk1",
    "text": "def test_override_with_sub_router_decorator_depends_k_bar():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/router-decorator-depends/?k=bar\")\n    assert response.status_code == 200\n    assert response.json() == {\"in\": \"router-decorator-depends\"}\n    app.dependency_overrides = {}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_overrides.py",
    "type": "function",
    "name": "test_override_with_sub_router_decorator_depends_k_bar",
    "loc": 535,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_security_overrides.py:function:get_user:chunk1",
    "text": "def get_user(required_scopes: SecurityScopes):\n    return \"john\", required_scopes.scopes",
    "repo": "fastapi",
    "path": "tests\\test_dependency_security_overrides.py",
    "type": "function",
    "name": "get_user",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_security_overrides.py:function:get_user_override:chunk1",
    "text": "def get_user_override(required_scopes: SecurityScopes):\n    return \"alice\", required_scopes.scopes",
    "repo": "fastapi",
    "path": "tests\\test_dependency_security_overrides.py",
    "type": "function",
    "name": "get_user_override",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_security_overrides.py:function:get_data:chunk1",
    "text": "def get_data():\n    return [1, 2, 3]",
    "repo": "fastapi",
    "path": "tests\\test_dependency_security_overrides.py",
    "type": "function",
    "name": "get_data",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_security_overrides.py:function:get_data_override:chunk1",
    "text": "def get_data_override():\n    return [3, 4, 5]",
    "repo": "fastapi",
    "path": "tests\\test_dependency_security_overrides.py",
    "type": "function",
    "name": "get_data_override",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_security_overrides.py:function:read_user:chunk1",
    "text": "def read_user(\n    user_data: Tuple[str, List[str]] = Security(get_user, scopes=[\"foo\", \"bar\"]),\n    data: List[int] = Depends(get_data),\n):\n    return {\"user\": user_data[0], \"scopes\": user_data[1], \"data\": data}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_security_overrides.py",
    "type": "function",
    "name": "read_user",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_security_overrides.py:function:test_normal:chunk1",
    "text": "def test_normal():\n    response = client.get(\"/user\")\n    assert response.json() == {\n        \"user\": \"john\",\n        \"scopes\": [\"foo\", \"bar\"],\n        \"data\": [1, 2, 3],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_dependency_security_overrides.py",
    "type": "function",
    "name": "test_normal",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_security_overrides.py:function:test_override_data:chunk1",
    "text": "def test_override_data():\n    app.dependency_overrides[get_data] = get_data_override\n    response = client.get(\"/user\")\n    assert response.json() == {\n        \"user\": \"john\",\n        \"scopes\": [\"foo\", \"bar\"],\n        \"data\": [3, 4, 5],\n    }\n    app.dependency_overrides = {}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_security_overrides.py",
    "type": "function",
    "name": "test_override_data",
    "loc": 46,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_dependency_security_overrides.py:function:test_override_security:chunk1",
    "text": "def test_override_security():\n    app.dependency_overrides[get_user] = get_user_override\n    response = client.get(\"/user\")\n    assert response.json() == {\n        \"user\": \"alice\",\n        \"scopes\": [\"foo\", \"bar\"],\n        \"data\": [1, 2, 3],\n    }\n    app.dependency_overrides = {}",
    "repo": "fastapi",
    "path": "tests\\test_dependency_security_overrides.py",
    "type": "function",
    "name": "test_override_security",
    "loc": 57,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_deprecated_openapi_prefix.py:function:read_main:chunk1",
    "text": "def read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}",
    "repo": "fastapi",
    "path": "tests\\test_deprecated_openapi_prefix.py",
    "type": "function",
    "name": "read_main",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_deprecated_openapi_prefix.py:function:test_main:chunk1",
    "text": "def test_main():\n    response = client.get(\"/app\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello World\", \"root_path\": \"/api/v1\"}",
    "repo": "fastapi",
    "path": "tests\\test_deprecated_openapi_prefix.py",
    "type": "function",
    "name": "test_main",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_deprecated_openapi_prefix.py:function:test_openapi:chunk1",
    "text": "def test_openapi():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/app\": {\n                \"get\": {\n                    \"summary\": \"Read Main\",\n                    \"operationId\": \"read_main_app_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n        \"servers\": [{\"url\": \"/api/v1\"}],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_deprecated_openapi_prefix.py",
    "type": "function",
    "name": "test_openapi",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_duplicate_models_openapi.py:function:f:chunk1",
    "text": "def f():\n    return {\"c\": {}, \"d\": {\"a\": {}}}",
    "repo": "fastapi",
    "path": "tests\\test_duplicate_models_openapi.py",
    "type": "function",
    "name": "f",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_duplicate_models_openapi.py:function:test_get_api_route:chunk1",
    "text": "def test_get_api_route():\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"c\": {}, \"d\": {\"a\": {}}}",
    "repo": "fastapi",
    "path": "tests\\test_duplicate_models_openapi.py",
    "type": "function",
    "name": "test_get_api_route",
    "loc": 29,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_duplicate_models_openapi.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"get\": {\n                    \"summary\": \"F\",\n                    \"operationId\": \"f__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Model3\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Model\": {\"title\": \"Model\", \"type\": \"object\", \"properties\": {}},\n                \"Model2\": {\n                    \"title\": \"Model2\",\n                    \"required\": [\"a\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"a\": {\"$ref\": \"#/components/schemas/Model\"}},\n                },\n                \"Model3\": {\n                    \"title\": \"Model3\",\n                    \"required\": [\"c\", \"d\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"c\": {\"$ref\": \"#/components/schemas/Model\"},\n                        \"d\": {\"$ref\": \"#/components/schemas/Model2\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_duplicate_models_openapi.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 35,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_duplicate_models_openapi.py:class:Model:chunk1",
    "text": "class Model(BaseModel):\n    pass",
    "repo": "fastapi",
    "path": "tests\\test_duplicate_models_openapi.py",
    "type": "class",
    "name": "Model",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_duplicate_models_openapi.py:class:Model2:chunk1",
    "text": "class Model2(BaseModel):\n    a: Model",
    "repo": "fastapi",
    "path": "tests\\test_duplicate_models_openapi.py",
    "type": "class",
    "name": "Model2",
    "loc": 12,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_duplicate_models_openapi.py:class:Model3:chunk1",
    "text": "class Model3(BaseModel):\n    c: Model\n    d: Model2",
    "repo": "fastapi",
    "path": "tests\\test_duplicate_models_openapi.py",
    "type": "class",
    "name": "Model3",
    "loc": 16,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_empty_router.py:function:get_empty:chunk1",
    "text": "def get_empty():\n    return [\"OK\"]",
    "repo": "fastapi",
    "path": "tests\\test_empty_router.py",
    "type": "function",
    "name": "get_empty",
    "loc": 12,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_empty_router.py:function:test_use_empty:chunk1",
    "text": "def test_use_empty():\n    with client:\n        response = client.get(\"/prefix\")\n        assert response.status_code == 200, response.text\n        assert response.json() == [\"OK\"]\n\n        response = client.get(\"/prefix/\")\n        assert response.status_code == 200, response.text\n        assert response.json() == [\"OK\"]",
    "repo": "fastapi",
    "path": "tests\\test_empty_router.py",
    "type": "function",
    "name": "test_use_empty",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_empty_router.py:function:test_include_empty:chunk1",
    "text": "def test_include_empty():\n    # if both include and router.path are empty - it should raise exception\n    with pytest.raises(FastAPIError):\n        app.include_router(router)",
    "repo": "fastapi",
    "path": "tests\\test_empty_router.py",
    "type": "function",
    "name": "test_include_empty",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_enforce_once_required_parameter.py:function:_get_client_key:chunk1",
    "text": "def _get_client_key(client_id: str = Query(...)) -> str:\n    return f\"{client_id}_key\"",
    "repo": "fastapi",
    "path": "tests\\test_enforce_once_required_parameter.py",
    "type": "function",
    "name": "_get_client_key",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_enforce_once_required_parameter.py:function:_get_client_tag:chunk1",
    "text": "def _get_client_tag(client_id: Optional[str] = Query(None)) -> Optional[str]:\n    if client_id is None:\n        return None\n    return f\"{client_id}_tag\"",
    "repo": "fastapi",
    "path": "tests\\test_enforce_once_required_parameter.py",
    "type": "function",
    "name": "_get_client_tag",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_enforce_once_required_parameter.py:function:foo_handler:chunk1",
    "text": "def foo_handler(\n    client_key: str = Depends(_get_client_key),\n    client_tag: Optional[str] = Depends(_get_client_tag),\n):\n    return {\"client_id\": client_key, \"client_tag\": client_tag}",
    "repo": "fastapi",
    "path": "tests\\test_enforce_once_required_parameter.py",
    "type": "function",
    "name": "foo_handler",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_enforce_once_required_parameter.py:function:test_schema:chunk1",
    "text": "def test_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == status.HTTP_200_OK\n    actual_schema = response.json()\n    assert actual_schema == expected_schema",
    "repo": "fastapi",
    "path": "tests\\test_enforce_once_required_parameter.py",
    "type": "function",
    "name": "test_schema",
    "loc": 96,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_enforce_once_required_parameter.py:function:test_get_invalid:chunk1",
    "text": "def test_get_invalid():\n    response = client.get(\"/foo\")\n    assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY",
    "repo": "fastapi",
    "path": "tests\\test_enforce_once_required_parameter.py",
    "type": "function",
    "name": "test_get_invalid",
    "loc": 103,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_enforce_once_required_parameter.py:function:test_get_valid:chunk1",
    "text": "def test_get_valid():\n    response = client.get(\"/foo\", params={\"client_id\": \"bar\"})\n    assert response.status_code == 200\n    assert response.json() == {\"client_id\": \"bar_key\", \"client_tag\": \"bar_tag\"}",
    "repo": "fastapi",
    "path": "tests\\test_enforce_once_required_parameter.py",
    "type": "function",
    "name": "test_get_valid",
    "loc": 108,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_exception_handlers.py:function:http_exception_handler:chunk1",
    "text": "def http_exception_handler(request, exception):\n    return JSONResponse({\"exception\": \"http-exception\"})",
    "repo": "fastapi",
    "path": "tests\\test_exception_handlers.py",
    "type": "function",
    "name": "http_exception_handler",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_exception_handlers.py:function:request_validation_exception_handler:chunk1",
    "text": "def request_validation_exception_handler(request, exception):\n    return JSONResponse({\"exception\": \"request-validation\"})",
    "repo": "fastapi",
    "path": "tests\\test_exception_handlers.py",
    "type": "function",
    "name": "request_validation_exception_handler",
    "loc": 12,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_exception_handlers.py:function:server_error_exception_handler:chunk1",
    "text": "def server_error_exception_handler(request, exception):\n    return JSONResponse(status_code=500, content={\"exception\": \"server-error\"})",
    "repo": "fastapi",
    "path": "tests\\test_exception_handlers.py",
    "type": "function",
    "name": "server_error_exception_handler",
    "loc": 16,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_exception_handlers.py:function:raise_value_error:chunk1",
    "text": "def raise_value_error():\n    raise ValueError()",
    "repo": "fastapi",
    "path": "tests\\test_exception_handlers.py",
    "type": "function",
    "name": "raise_value_error",
    "loc": 31,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_exception_handlers.py:function:dependency_with_yield:chunk1",
    "text": "def dependency_with_yield():\n    yield raise_value_error()",
    "repo": "fastapi",
    "path": "tests\\test_exception_handlers.py",
    "type": "function",
    "name": "dependency_with_yield",
    "loc": 35,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_exception_handlers.py:function:with_yield:chunk1",
    "text": "def with_yield(): ...",
    "repo": "fastapi",
    "path": "tests\\test_exception_handlers.py",
    "type": "function",
    "name": "with_yield",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_exception_handlers.py:function:route_with_http_exception:chunk1",
    "text": "def route_with_http_exception():\n    raise HTTPException(status_code=400)",
    "repo": "fastapi",
    "path": "tests\\test_exception_handlers.py",
    "type": "function",
    "name": "route_with_http_exception",
    "loc": 44,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_exception_handlers.py:function:route_with_request_validation_exception:chunk1",
    "text": "def route_with_request_validation_exception(param: int):\n    pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_exception_handlers.py",
    "type": "function",
    "name": "route_with_request_validation_exception",
    "loc": 49,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_exception_handlers.py:function:route_with_server_error:chunk1",
    "text": "def route_with_server_error():\n    raise RuntimeError(\"Oops!\")",
    "repo": "fastapi",
    "path": "tests\\test_exception_handlers.py",
    "type": "function",
    "name": "route_with_server_error",
    "loc": 54,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_exception_handlers.py:function:test_override_http_exception:chunk1",
    "text": "def test_override_http_exception():\n    response = client.get(\"/http-exception\")\n    assert response.status_code == 200\n    assert response.json() == {\"exception\": \"http-exception\"}",
    "repo": "fastapi",
    "path": "tests\\test_exception_handlers.py",
    "type": "function",
    "name": "test_override_http_exception",
    "loc": 58,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_exception_handlers.py:function:test_override_request_validation_exception:chunk1",
    "text": "def test_override_request_validation_exception():\n    response = client.get(\"/request-validation/invalid\")\n    assert response.status_code == 200\n    assert response.json() == {\"exception\": \"request-validation\"}",
    "repo": "fastapi",
    "path": "tests\\test_exception_handlers.py",
    "type": "function",
    "name": "test_override_request_validation_exception",
    "loc": 64,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_exception_handlers.py:function:test_override_server_error_exception_raises:chunk1",
    "text": "def test_override_server_error_exception_raises():\n    with pytest.raises(RuntimeError):\n        client.get(\"/server-error\")",
    "repo": "fastapi",
    "path": "tests\\test_exception_handlers.py",
    "type": "function",
    "name": "test_override_server_error_exception_raises",
    "loc": 70,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_exception_handlers.py:function:test_override_server_error_exception_response:chunk1",
    "text": "def test_override_server_error_exception_response():\n    client = TestClient(app, raise_server_exceptions=False)\n    response = client.get(\"/server-error\")\n    assert response.status_code == 500\n    assert response.json() == {\"exception\": \"server-error\"}",
    "repo": "fastapi",
    "path": "tests\\test_exception_handlers.py",
    "type": "function",
    "name": "test_override_server_error_exception_response",
    "loc": 75,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_exception_handlers.py:function:test_traceback_for_dependency_with_yield:chunk1",
    "text": "def test_traceback_for_dependency_with_yield():\n    client = TestClient(app, raise_server_exceptions=True)\n    with pytest.raises(ValueError) as exc_info:\n        client.get(\"/dependency-with-yield\")\n    last_frame = exc_info.traceback[-1]\n    assert str(last_frame.path) == __file__\n    assert last_frame.lineno == raise_value_error.__code__.co_firstlineno",
    "repo": "fastapi",
    "path": "tests\\test_exception_handlers.py",
    "type": "function",
    "name": "test_traceback_for_dependency_with_yield",
    "loc": 82,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_extra_routes.py:function:get_items:chunk1",
    "text": "def get_items(item_id: str):\n    return {\"item_id\": item_id}",
    "repo": "fastapi",
    "path": "tests\\test_extra_routes.py",
    "type": "function",
    "name": "get_items",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_extra_routes.py:function:get_not_decorated:chunk1",
    "text": "def get_not_decorated(item_id: str):\n    return {\"item_id\": item_id}",
    "repo": "fastapi",
    "path": "tests\\test_extra_routes.py",
    "type": "function",
    "name": "get_not_decorated",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_extra_routes.py:function:delete_item:chunk1",
    "text": "def delete_item(item_id: str, item: Item):\n    return {\"item_id\": item_id, \"item\": item}",
    "repo": "fastapi",
    "path": "tests\\test_extra_routes.py",
    "type": "function",
    "name": "delete_item",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_extra_routes.py:function:head_item:chunk1",
    "text": "def head_item(item_id: str):\n    return JSONResponse(None, headers={\"x-fastapi-item-id\": item_id})",
    "repo": "fastapi",
    "path": "tests\\test_extra_routes.py",
    "type": "function",
    "name": "head_item",
    "loc": 35,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_extra_routes.py:function:options_item:chunk1",
    "text": "def options_item(item_id: str):\n    return JSONResponse(None, headers={\"x-fastapi-item-id\": item_id})",
    "repo": "fastapi",
    "path": "tests\\test_extra_routes.py",
    "type": "function",
    "name": "options_item",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_extra_routes.py:function:patch_item:chunk1",
    "text": "def patch_item(item_id: str, item: Item):\n    return {\"item_id\": item_id, \"item\": item}",
    "repo": "fastapi",
    "path": "tests\\test_extra_routes.py",
    "type": "function",
    "name": "patch_item",
    "loc": 45,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_extra_routes.py:function:trace_item:chunk1",
    "text": "def trace_item(item_id: str):\n    return JSONResponse(None, media_type=\"message/http\")",
    "repo": "fastapi",
    "path": "tests\\test_extra_routes.py",
    "type": "function",
    "name": "trace_item",
    "loc": 50,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_extra_routes.py:function:test_get_api_route:chunk1",
    "text": "def test_get_api_route():\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": \"foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_extra_routes.py",
    "type": "function",
    "name": "test_get_api_route",
    "loc": 57,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_extra_routes.py:function:test_get_api_route_not_decorated:chunk1",
    "text": "def test_get_api_route_not_decorated():\n    response = client.get(\"/items-not-decorated/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": \"foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_extra_routes.py",
    "type": "function",
    "name": "test_get_api_route_not_decorated",
    "loc": 63,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_extra_routes.py:function:test_delete:chunk1",
    "text": "def test_delete():\n    response = client.request(\"DELETE\", \"/items/foo\", json={\"name\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": \"foo\", \"item\": {\"name\": \"Foo\", \"price\": None}}",
    "repo": "fastapi",
    "path": "tests\\test_extra_routes.py",
    "type": "function",
    "name": "test_delete",
    "loc": 69,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_extra_routes.py:function:test_head:chunk1",
    "text": "def test_head():\n    response = client.head(\"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.headers[\"x-fastapi-item-id\"] == \"foo\"",
    "repo": "fastapi",
    "path": "tests\\test_extra_routes.py",
    "type": "function",
    "name": "test_head",
    "loc": 75,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_extra_routes.py:function:test_options:chunk1",
    "text": "def test_options():\n    response = client.options(\"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.headers[\"x-fastapi-item-id\"] == \"foo\"",
    "repo": "fastapi",
    "path": "tests\\test_extra_routes.py",
    "type": "function",
    "name": "test_options",
    "loc": 81,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_extra_routes.py:function:test_patch:chunk1",
    "text": "def test_patch():\n    response = client.patch(\"/items/foo\", json={\"name\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": \"foo\", \"item\": {\"name\": \"Foo\", \"price\": None}}",
    "repo": "fastapi",
    "path": "tests\\test_extra_routes.py",
    "type": "function",
    "name": "test_patch",
    "loc": 87,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_extra_routes.py:function:test_trace:chunk1",
    "text": "def test_trace():\n    response = client.request(\"trace\", \"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.headers[\"content-type\"] == \"message/http\"",
    "repo": "fastapi",
    "path": "tests\\test_extra_routes.py",
    "type": "function",
    "name": "test_trace",
    "loc": 93,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_extra_routes.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Items\",\n                    \"operationId\": \"get_items_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                },\n                \"delete\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Delete Item\",\n                    \"operationId\": \"delete_item_items__item_id__delete\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                },\n                \"options\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Options Item\",\n                    \"operationId\": \"options_item_items__item_id__options\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                },\n                \"head\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Head Item\",\n                    \"operationId\": \"head_item_items__item_id__head\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                },\n                \"patch\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Patch Item\",\n                    \"operationId\": \"patch_item_items__item_id__patch\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                },\n                \"trace\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Trace Item\",\n                    \"operationId\": \"trace_item_items__item_id__trace\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                },\n            },\n            \"/items-not-decorated/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Not Decorated\",\n                    \"operationId\": \"get_not_decorated_items_not_decorated__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": IsDict(\n                            {\n                                \"title\": \"Price\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        # TODO: remove when deprecating Pydantic v1\n                        | IsDict({\"title\": \"Price\", \"type\": \"number\"}),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_extra_routes.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 99,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_extra_routes.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    price: Optional[float] = None",
    "repo": "fastapi",
    "path": "tests\\test_extra_routes.py",
    "type": "class",
    "name": "Item",
    "loc": 12,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_fastapi_cli.py:function:test_fastapi_cli:chunk1",
    "text": "def test_fastapi_cli():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"fastapi\",\n            \"dev\",\n            \"non_existent_file.py\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert result.returncode == 1, result.stdout\n    assert \"Path does not exist non_existent_file.py\" in result.stdout",
    "repo": "fastapi",
    "path": "tests\\test_fastapi_cli.py",
    "type": "function",
    "name": "test_fastapi_cli",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_fastapi_cli.py:function:test_fastapi_cli_not_installed:chunk1",
    "text": "def test_fastapi_cli_not_installed():\n    with patch.object(fastapi.cli, \"cli_main\", None):\n        with pytest.raises(RuntimeError) as exc_info:\n            fastapi.cli.main()\n        assert \"To use the fastapi command, please install\" in str(exc_info.value)",
    "repo": "fastapi",
    "path": "tests\\test_fastapi_cli.py",
    "type": "function",
    "name": "test_fastapi_cli_not_installed",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_filter_pydantic_sub_model_pv2.py:function:get_client:chunk1",
    "text": "def get_client():\n    from pydantic import BaseModel, ValidationInfo, field_validator\n\n    app = FastAPI()\n\n    class ModelB(BaseModel):\n        username: str\n\n    class ModelC(ModelB):\n        password: str\n\n    class ModelA(BaseModel):\n        name: str\n        description: Optional[str] = None\n        foo: ModelB\n\n        @field_validator(\"name\")\n        def lower_username(cls, name: str, info: ValidationInfo):\n            if not name.endswith(\"A\"):\n                raise ValueError(\"name must end in A\")\n            return name\n\n    async def get_model_c() -> ModelC:\n        return ModelC(username=\"test-user\", password=\"test-password\")\n\n    @app.get(\"/model/{name}\", response_model=ModelA)\n    async def get_model_a(name: str, model_c=Depends(get_model_c)):\n        return {\"name\": name, \"description\": \"model-a-desc\", \"foo\": model_c}\n\n    client = TestClient(app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_filter_pydantic_sub_model_pv2.py",
    "type": "function",
    "name": "get_client",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_filter_pydantic_sub_model_pv2.py:function:test_filter_sub_model:chunk1",
    "text": "def test_filter_sub_model(client: TestClient):\n    response = client.get(\"/model/modelA\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"modelA\",\n        \"description\": \"model-a-desc\",\n        \"foo\": {\"username\": \"test-user\"},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_filter_pydantic_sub_model_pv2.py",
    "type": "function",
    "name": "test_filter_sub_model",
    "loc": 47,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_filter_pydantic_sub_model_pv2.py:function:test_validator_is_cloned:chunk1",
    "text": "def test_validator_is_cloned(client: TestClient):\n    with pytest.raises(ResponseValidationError) as err:\n        client.get(\"/model/modelX\")\n    assert err.value.errors() == [\n        IsDict(\n            {\n                \"type\": \"value_error\",\n                \"loc\": (\"response\", \"name\"),\n                \"msg\": \"Value error, name must end in A\",\n                \"input\": \"modelX\",\n                \"ctx\": {\"error\": HasRepr(\"ValueError('name must end in A')\")},\n            }\n        )\n        | IsDict(\n            # TODO remove when deprecating Pydantic v1\n            {\n                \"loc\": (\"response\", \"name\"),\n                \"msg\": \"name must end in A\",\n                \"type\": \"value_error\",\n            }\n        )\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_filter_pydantic_sub_model_pv2.py",
    "type": "function",
    "name": "test_validator_is_cloned",
    "loc": 58,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_filter_pydantic_sub_model_pv2.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/model/{name}\": {\n                \"get\": {\n                    \"summary\": \"Get Model A\",\n                    \"operationId\": \"get_model_a_model__name__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Name\", \"type\": \"string\"},\n                            \"name\": \"name\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/ModelA\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ModelA\": {\n                    \"title\": \"ModelA\",\n                    \"required\": IsOneOf(\n                        [\"name\", \"description\", \"foo\"],\n                        # TODO remove when deprecating Pydantic v1\n                        [\"name\", \"foo\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        |\n                        # TODO remove when deprecating Pydantic v1\n                        IsDict({\"title\": \"Description\", \"type\": \"string\"}),\n                        \"foo\": {\"$ref\": \"#/components/schemas/ModelB\"},\n                    },\n                },\n                \"ModelB\": {\n                    \"title\": \"ModelB\",\n                    \"required\": [\"username\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"username\": {\"title\": \"Username\", \"type\": \"string\"}},\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_filter_pydantic_sub_model_pv2.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 83,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_filter_pydantic_sub_model_pv2.py:class:ModelB:chunk1",
    "text": "class ModelB(BaseModel):\n        username: str",
    "repo": "fastapi",
    "path": "tests\\test_filter_pydantic_sub_model_pv2.py",
    "type": "class",
    "name": "ModelB",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_filter_pydantic_sub_model_pv2.py:class:ModelC:chunk1",
    "text": "class ModelC(ModelB):\n        password: str",
    "repo": "fastapi",
    "path": "tests\\test_filter_pydantic_sub_model_pv2.py",
    "type": "class",
    "name": "ModelC",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_filter_pydantic_sub_model_pv2.py:class:ModelA:chunk1",
    "text": "class ModelA(BaseModel):\n        name: str\n        description: Optional[str] = None\n        foo: ModelB\n\n        @field_validator(\"name\")\n        def lower_username(cls, name: str, info: ValidationInfo):\n            if not name.endswith(\"A\"):\n                raise ValueError(\"name must end in A\")\n            return name",
    "repo": "fastapi",
    "path": "tests\\test_filter_pydantic_sub_model_pv2.py",
    "type": "class",
    "name": "ModelA",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_forms_from_non_typing_sequences.py:function:post_form_param_list:chunk1",
    "text": "def post_form_param_list(items: list = Form()):\n    return items",
    "repo": "fastapi",
    "path": "tests\\test_forms_from_non_typing_sequences.py",
    "type": "function",
    "name": "post_form_param_list",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_forms_from_non_typing_sequences.py:function:post_form_param_set:chunk1",
    "text": "def post_form_param_set(items: set = Form()):\n    return items",
    "repo": "fastapi",
    "path": "tests\\test_forms_from_non_typing_sequences.py",
    "type": "function",
    "name": "post_form_param_set",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_forms_from_non_typing_sequences.py:function:post_form_param_tuple:chunk1",
    "text": "def post_form_param_tuple(items: tuple = Form()):\n    return items",
    "repo": "fastapi",
    "path": "tests\\test_forms_from_non_typing_sequences.py",
    "type": "function",
    "name": "post_form_param_tuple",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_forms_from_non_typing_sequences.py:function:test_python_list_param_as_form:chunk1",
    "text": "def test_python_list_param_as_form():\n    response = client.post(\n        \"/form/python-list\", data={\"items\": [\"first\", \"second\", \"third\"]}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [\"first\", \"second\", \"third\"]",
    "repo": "fastapi",
    "path": "tests\\test_forms_from_non_typing_sequences.py",
    "type": "function",
    "name": "test_python_list_param_as_form",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_forms_from_non_typing_sequences.py:function:test_python_set_param_as_form:chunk1",
    "text": "def test_python_set_param_as_form():\n    response = client.post(\n        \"/form/python-set\", data={\"items\": [\"first\", \"second\", \"third\"]}\n    )\n    assert response.status_code == 200, response.text\n    assert set(response.json()) == {\"first\", \"second\", \"third\"}",
    "repo": "fastapi",
    "path": "tests\\test_forms_from_non_typing_sequences.py",
    "type": "function",
    "name": "test_python_set_param_as_form",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_forms_from_non_typing_sequences.py:function:test_python_tuple_param_as_form:chunk1",
    "text": "def test_python_tuple_param_as_form():\n    response = client.post(\n        \"/form/python-tuple\", data={\"items\": [\"first\", \"second\", \"third\"]}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [\"first\", \"second\", \"third\"]",
    "repo": "fastapi",
    "path": "tests\\test_forms_from_non_typing_sequences.py",
    "type": "function",
    "name": "test_python_tuple_param_as_form",
    "loc": 41,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_forms_single_model.py:function:post_form:chunk1",
    "text": "def post_form(user: Annotated[FormModel, Form()]):\n    return user",
    "repo": "fastapi",
    "path": "tests\\test_forms_single_model.py",
    "type": "function",
    "name": "post_form",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_forms_single_model.py:function:test_send_all_data:chunk1",
    "text": "def test_send_all_data():\n    response = client.post(\n        \"/form/\",\n        data={\n            \"username\": \"Rick\",\n            \"lastname\": \"Sanchez\",\n            \"age\": \"70\",\n            \"tags\": [\"plumbus\", \"citadel\"],\n            \"with\": \"something\",\n        },\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"username\": \"Rick\",\n        \"lastname\": \"Sanchez\",\n        \"age\": 70,\n        \"tags\": [\"plumbus\", \"citadel\"],\n        \"with\": \"something\",\n    }",
    "repo": "fastapi",
    "path": "tests\\test_forms_single_model.py",
    "type": "function",
    "name": "test_send_all_data",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_forms_single_model.py:function:test_defaults:chunk1",
    "text": "def test_defaults():\n    response = client.post(\"/form/\", data={\"username\": \"Rick\", \"lastname\": \"Sanchez\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"username\": \"Rick\",\n        \"lastname\": \"Sanchez\",\n        \"age\": None,\n        \"tags\": [\"foo\", \"bar\"],\n        \"with\": \"nothing\",\n    }",
    "repo": "fastapi",
    "path": "tests\\test_forms_single_model.py",
    "type": "function",
    "name": "test_defaults",
    "loc": 49,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_forms_single_model.py:function:test_invalid_data:chunk1",
    "text": "def test_invalid_data():\n    response = client.post(\n        \"/form/\",\n        data={\n            \"username\": \"Rick\",\n            \"lastname\": \"Sanchez\",\n            \"age\": \"seventy\",\n            \"tags\": [\"plumbus\", \"citadel\"],\n        },\n    )\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"body\", \"age\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"seventy\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"age\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_forms_single_model.py",
    "type": "function",
    "name": "test_invalid_data",
    "loc": 61,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_forms_single_model.py:function:test_no_data:chunk1",
    "text": "def test_no_data():\n    response = client.post(\"/form/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"Field required\",\n                    \"input\": {\"tags\": [\"foo\", \"bar\"], \"with\": \"nothing\"},\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"lastname\"],\n                    \"msg\": \"Field required\",\n                    \"input\": {\"tags\": [\"foo\", \"bar\"], \"with\": \"nothing\"},\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"lastname\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_forms_single_model.py",
    "type": "function",
    "name": "test_no_data",
    "loc": 97,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_forms_single_model.py:class:FormModel:chunk1",
    "text": "class FormModel(BaseModel):\n    username: str\n    lastname: str\n    age: Optional[int] = None\n    tags: List[str] = [\"foo\", \"bar\"]\n    alias_with: str = Field(alias=\"with\", default=\"nothing\")",
    "repo": "fastapi",
    "path": "tests\\test_forms_single_model.py",
    "type": "class",
    "name": "FormModel",
    "loc": 12,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_forms_single_param.py:function:post_form:chunk1",
    "text": "def post_form(username: Annotated[str, Form()]):\n    return username",
    "repo": "fastapi",
    "path": "tests\\test_forms_single_param.py",
    "type": "function",
    "name": "post_form",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_forms_single_param.py:function:test_single_form_field:chunk1",
    "text": "def test_single_form_field():\n    response = client.post(\"/form/\", data={\"username\": \"Rick\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == \"Rick\"",
    "repo": "fastapi",
    "path": "tests\\test_forms_single_param.py",
    "type": "function",
    "name": "test_single_form_field",
    "loc": 16,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_forms_single_param.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/form/\": {\n                \"post\": {\n                    \"summary\": \"Post Form\",\n                    \"operationId\": \"post_form_form__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_post_form_form__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_post_form_form__post\": {\n                    \"properties\": {\"username\": {\"type\": \"string\", \"title\": \"Username\"}},\n                    \"type\": \"object\",\n                    \"required\": [\"username\"],\n                    \"title\": \"Body_post_form_form__post\",\n                },\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_forms_single_param.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:custom_generate_unique_id:chunk1",
    "text": "def custom_generate_unique_id(route: APIRoute):\n    return f\"foo_{route.name}\"",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "custom_generate_unique_id",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:custom_generate_unique_id2:chunk1",
    "text": "def custom_generate_unique_id2(route: APIRoute):\n    return f\"bar_{route.name}\"",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "custom_generate_unique_id2",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:custom_generate_unique_id3:chunk1",
    "text": "def custom_generate_unique_id3(route: APIRoute):\n    return f\"baz_{route.name}\"",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "custom_generate_unique_id3",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:test_top_level_generate_unique_id:chunk1",
    "text": "def test_top_level_generate_unique_id():\n    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n    router = APIRouter()\n\n    @app.post(\"/\", response_model=List[Item], responses={404: {\"model\": List[Message]}})\n    def post_root(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    @router.post(\n        \"/router\", response_model=List[Item], responses={404: {\"model\": List[Message]}}\n    )\n    def post_router(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    app.include_router(router)\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    data = response.json()\n    assert data == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"post\": {\n                    \"summary\": \"Post Root\",\n                    \"operationId\": \"foo_post_root\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_foo_post_root\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Foo Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Foo Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/router\": {\n                \"post\": {\n                    \"summary\": \"Post Router\",\n                    \"operationId\": \"foo_post_router\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_foo_post_router\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Foo Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Foo Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_foo_post_root\": {\n                    \"title\": \"Body_foo_post_root\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"Body_foo_post_router\": {\n                    \"title\": \"Body_foo_post_router\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                    },\n                },\n                \"Message\": {\n                    \"title\": \"Message\",\n                    \"required\": [\"title\", \"description\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "test_top_level_generate_unique_id",
    "loc": 32,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:post_root:chunk1",
    "text": "def post_root(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "post_root",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:post_router:chunk1",
    "text": "def post_router(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "post_router",
    "loc": 43,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:test_router_overrides_generate_unique_id:chunk1",
    "text": "def test_router_overrides_generate_unique_id():\n    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n    router = APIRouter(generate_unique_id_function=custom_generate_unique_id2)\n\n    @app.post(\"/\", response_model=List[Item], responses={404: {\"model\": List[Message]}})\n    def post_root(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    @router.post(\n        \"/router\", response_model=List[Item], responses={404: {\"model\": List[Message]}}\n    )\n    def post_router(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    app.include_router(router)\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    data = response.json()\n    assert data == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"post\": {\n                    \"summary\": \"Post Root\",\n                    \"operationId\": \"foo_post_root\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_foo_post_root\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Foo Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Foo Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/router\": {\n                \"post\": {\n                    \"summary\": \"Post Router\",\n                    \"operationId\": \"bar_post_router\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_bar_post_router\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Bar Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Bar Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_bar_post_router\": {\n                    \"title\": \"Body_bar_post_router\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"Body_foo_post_root\": {\n                    \"title\": \"Body_foo_post_root\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                    },\n                },\n                \"Message\": {\n                    \"title\": \"Message\",\n                    \"required\": [\"title\", \"description\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "test_router_overrides_generate_unique_id",
    "loc": 233,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:post_root:chunk1",
    "text": "def post_root(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "post_root",
    "loc": 238,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:post_router:chunk1",
    "text": "def post_router(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "post_router",
    "loc": 244,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:test_router_include_overrides_generate_unique_id:chunk1",
    "text": "def test_router_include_overrides_generate_unique_id():\n    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n    router = APIRouter(generate_unique_id_function=custom_generate_unique_id2)\n\n    @app.post(\"/\", response_model=List[Item], responses={404: {\"model\": List[Message]}})\n    def post_root(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    @router.post(\n        \"/router\", response_model=List[Item], responses={404: {\"model\": List[Message]}}\n    )\n    def post_router(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    app.include_router(router, generate_unique_id_function=custom_generate_unique_id3)\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    data = response.json()\n    assert data == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"post\": {\n                    \"summary\": \"Post Root\",\n                    \"operationId\": \"foo_post_root\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_foo_post_root\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Foo Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Foo Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/router\": {\n                \"post\": {\n                    \"summary\": \"Post Router\",\n                    \"operationId\": \"bar_post_router\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_bar_post_router\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Bar Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Bar Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_bar_post_router\": {\n                    \"title\": \"Body_bar_post_router\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"Body_foo_post_root\": {\n                    \"title\": \"Body_foo_post_root\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                    },\n                },\n                \"Message\": {\n                    \"title\": \"Message\",\n                    \"required\": [\"title\", \"description\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "test_router_include_overrides_generate_unique_id",
    "loc": 434,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:post_root:chunk1",
    "text": "def post_root(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "post_root",
    "loc": 439,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:post_router:chunk1",
    "text": "def post_router(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "post_router",
    "loc": 445,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:test_subrouter_top_level_include_overrides_generate_unique_id:chunk1",
    "text": "def test_subrouter_top_level_include_overrides_generate_unique_id():\n    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n    router = APIRouter()\n    sub_router = APIRouter(generate_unique_id_function=custom_generate_unique_id2)\n\n    @app.post(\"/\", response_model=List[Item], responses={404: {\"model\": List[Message]}})\n    def post_root(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    @router.post(\n        \"/router\", response_model=List[Item], responses={404: {\"model\": List[Message]}}\n    )\n    def post_router(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    @sub_router.post(\n        \"/subrouter\",\n        response_model=List[Item],\n        responses={404: {\"model\": List[Message]}},\n    )\n    def post_subrouter(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    router.include_router(sub_router)\n    app.include_router(router, generate_unique_id_function=custom_generate_unique_id3)\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    data = response.json()\n    assert data == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"post\": {\n                    \"summary\": \"Post Root\",\n                    \"operationId\": \"foo_post_root\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_foo_post_root\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Foo Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Foo Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/router\": {\n                \"post\": {\n                    \"summary\": \"Post Router\",\n                    \"operationId\": \"baz_post_router\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_baz_post_router\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Baz Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Baz Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/subrouter\": {\n                \"post\": {\n                    \"summary\": \"Post Subrouter\",\n                    \"operationId\": \"bar_post_subrouter\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_bar_post_subrouter\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Bar Post Subrouter\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Bar Post Subrouter\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_bar_post_subrouter\": {\n                    \"title\": \"Body_bar_post_subrouter\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"Body_baz_post_router\": {\n                    \"title\": \"Body_baz_post_router\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"Body_foo_post_root\": {\n                    \"title\": \"Body_foo_post_root\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                    },\n                },\n                \"Message\": {\n                    \"title\": \"Message\",\n                    \"required\": [\"title\", \"description\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "test_subrouter_top_level_include_overrides_generate_unique_id",
    "loc": 635,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:post_root:chunk1",
    "text": "def post_root(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "post_root",
    "loc": 641,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:post_router:chunk1",
    "text": "def post_router(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "post_router",
    "loc": 647,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:post_subrouter:chunk1",
    "text": "def post_subrouter(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "post_subrouter",
    "loc": 655,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:test_router_path_operation_overrides_generate_unique_id:chunk1",
    "text": "def test_router_path_operation_overrides_generate_unique_id():\n    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n    router = APIRouter(generate_unique_id_function=custom_generate_unique_id2)\n\n    @app.post(\"/\", response_model=List[Item], responses={404: {\"model\": List[Message]}})\n    def post_root(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    @router.post(\n        \"/router\",\n        response_model=List[Item],\n        responses={404: {\"model\": List[Message]}},\n        generate_unique_id_function=custom_generate_unique_id3,\n    )\n    def post_router(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    app.include_router(router)\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    data = response.json()\n    assert data == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"post\": {\n                    \"summary\": \"Post Root\",\n                    \"operationId\": \"foo_post_root\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_foo_post_root\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Foo Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Foo Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/router\": {\n                \"post\": {\n                    \"summary\": \"Post Router\",\n                    \"operationId\": \"baz_post_router\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_baz_post_router\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Baz Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Baz Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_baz_post_router\": {\n                    \"title\": \"Body_baz_post_router\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"Body_foo_post_root\": {\n                    \"title\": \"Body_foo_post_root\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                    },\n                },\n                \"Message\": {\n                    \"title\": \"Message\",\n                    \"required\": [\"title\", \"description\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "test_router_path_operation_overrides_generate_unique_id",
    "loc": 909,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:post_root:chunk1",
    "text": "def post_root(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "post_root",
    "loc": 914,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:post_router:chunk1",
    "text": "def post_router(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "post_router",
    "loc": 923,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:test_app_path_operation_overrides_generate_unique_id:chunk1",
    "text": "def test_app_path_operation_overrides_generate_unique_id():\n    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n    router = APIRouter(generate_unique_id_function=custom_generate_unique_id2)\n\n    @app.post(\n        \"/\",\n        response_model=List[Item],\n        responses={404: {\"model\": List[Message]}},\n        generate_unique_id_function=custom_generate_unique_id3,\n    )\n    def post_root(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    @router.post(\n        \"/router\",\n        response_model=List[Item],\n        responses={404: {\"model\": List[Message]}},\n    )\n    def post_router(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    app.include_router(router)\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    data = response.json()\n    assert data == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"post\": {\n                    \"summary\": \"Post Root\",\n                    \"operationId\": \"baz_post_root\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_baz_post_root\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Baz Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Baz Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/router\": {\n                \"post\": {\n                    \"summary\": \"Post Router\",\n                    \"operationId\": \"bar_post_router\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_bar_post_router\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Bar Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Bar Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_bar_post_router\": {\n                    \"title\": \"Body_bar_post_router\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"Body_baz_post_root\": {\n                    \"title\": \"Body_baz_post_root\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                    },\n                },\n                \"Message\": {\n                    \"title\": \"Message\",\n                    \"required\": [\"title\", \"description\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "test_app_path_operation_overrides_generate_unique_id",
    "loc": 1113,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:post_root:chunk1",
    "text": "def post_root(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "post_root",
    "loc": 1123,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:post_router:chunk1",
    "text": "def post_router(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "post_router",
    "loc": 1131,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:test_callback_override_generate_unique_id:chunk1",
    "text": "def test_callback_override_generate_unique_id():\n    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n    callback_router = APIRouter(generate_unique_id_function=custom_generate_unique_id2)\n\n    @callback_router.post(\n        \"/post-callback\",\n        response_model=List[Item],\n        responses={404: {\"model\": List[Message]}},\n        generate_unique_id_function=custom_generate_unique_id3,\n    )\n    def post_callback(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    @app.post(\n        \"/\",\n        response_model=List[Item],\n        responses={404: {\"model\": List[Message]}},\n        generate_unique_id_function=custom_generate_unique_id3,\n        callbacks=callback_router.routes,\n    )\n    def post_root(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    @app.post(\n        \"/tocallback\",\n        response_model=List[Item],\n        responses={404: {\"model\": List[Message]}},\n    )\n    def post_with_callback(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    data = response.json()\n    assert data == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"post\": {\n                    \"summary\": \"Post Root\",\n                    \"operationId\": \"baz_post_root\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_baz_post_root\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Baz Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Baz Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"callbacks\": {\n                        \"post_callback\": {\n                            \"/post-callback\": {\n                                \"post\": {\n                                    \"summary\": \"Post Callback\",\n                                    \"operationId\": \"baz_post_callback\",\n                                    \"requestBody\": {\n                                        \"content\": {\n                                            \"application/json\": {\n                                                \"schema\": {\n                                                    \"$ref\": \"#/components/schemas/Body_baz_post_callback\"\n                                                }\n                                            }\n                                        },\n                                        \"required\": True,\n                                    },\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"title\": \"Response Baz Post Callback\",\n                                                        \"type\": \"array\",\n                                                        \"items\": {\n                                                            \"$ref\": \"#/components/schemas/Item\"\n                                                        },\n                                                    }\n                                                }\n                                            },\n                                        },\n                                        \"404\": {\n                                            \"description\": \"Not Found\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"title\": \"Response 404 Baz Post Callback\",\n                                                        \"type\": \"array\",\n                                                        \"items\": {\n                                                            \"$ref\": \"#/components/schemas/Message\"\n                                                        },\n                                                    }\n                                                }\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        }\n                    },\n                }\n            },\n            \"/tocallback\": {\n                \"post\": {\n                    \"summary\": \"Post With Callback\",\n                    \"operationId\": \"foo_post_with_callback\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_foo_post_with_callback\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Foo Post With Callback\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Foo Post With Callback\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_baz_post_callback\": {\n                    \"title\": \"Body_baz_post_callback\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"Body_baz_post_root\": {\n                    \"title\": \"Body_baz_post_root\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"Body_foo_post_with_callback\": {\n                    \"title\": \"Body_foo_post_with_callback\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                    },\n                },\n                \"Message\": {\n                    \"title\": \"Message\",\n                    \"required\": [\"title\", \"description\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "test_callback_override_generate_unique_id",
    "loc": 1321,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:post_callback:chunk1",
    "text": "def post_callback(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "post_callback",
    "loc": 1331,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:post_root:chunk1",
    "text": "def post_root(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "post_root",
    "loc": 1341,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:post_with_callback:chunk1",
    "text": "def post_with_callback(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "post_with_callback",
    "loc": 1349,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:test_warn_duplicate_operation_id:chunk1",
    "text": "def test_warn_duplicate_operation_id():\n    def broken_operation_id(route: APIRoute):\n        return \"foo\"\n\n    app = FastAPI(generate_unique_id_function=broken_operation_id)\n\n    @app.post(\"/\")\n    def post_root(item1: Item):\n        return item1  # pragma: nocover\n\n    @app.post(\"/second\")\n    def post_second(item1: Item):\n        return item1  # pragma: nocover\n\n    @app.post(\"/third\")\n    def post_third(item1: Item):\n        return item1  # pragma: nocover\n\n    client = TestClient(app)\n    with warnings.catch_warnings(record=True) as w:\n        warnings.simplefilter(\"always\")\n        client.get(\"/openapi.json\")\n        assert len(w) >= 2\n        duplicate_warnings = [\n            warning for warning in w if issubclass(warning.category, UserWarning)\n        ]\n        assert len(duplicate_warnings) > 0\n        assert \"Duplicate Operation ID\" in str(duplicate_warnings[0].message)",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "test_warn_duplicate_operation_id",
    "loc": 1607,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:broken_operation_id:chunk1",
    "text": "def broken_operation_id(route: APIRoute):\n        return \"foo\"",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "broken_operation_id",
    "loc": 1608,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:post_root:chunk1",
    "text": "def post_root(item1: Item):\n        return item1  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "post_root",
    "loc": 1614,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:post_second:chunk1",
    "text": "def post_second(item1: Item):\n        return item1  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "post_second",
    "loc": 1618,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:function:post_third:chunk1",
    "text": "def post_third(item1: Item):\n        return item1  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "function",
    "name": "post_third",
    "loc": 1622,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    price: float",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "class",
    "name": "Item",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generate_unique_id_function.py:class:Message:chunk1",
    "text": "class Message(BaseModel):\n    title: str\n    description: str",
    "repo": "fastapi",
    "path": "tests\\test_generate_unique_id_function.py",
    "type": "class",
    "name": "Message",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generic_parameterless_depends.py:function:test_generic_parameterless_depends:chunk1",
    "text": "def test_generic_parameterless_depends():\n    response = client.get(\"/a\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"cls\": \"A\"}\n\n    response = client.get(\"/b\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"cls\": \"B\"}",
    "repo": "fastapi",
    "path": "tests\\test_generic_parameterless_depends.py",
    "type": "function",
    "name": "test_generic_parameterless_depends",
    "loc": 35,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generic_parameterless_depends.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"openapi\": \"3.1.0\",\n        \"paths\": {\n            \"/a\": {\n                \"get\": {\n                    \"operationId\": \"a_a_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                            \"description\": \"Successful \" \"Response\",\n                        }\n                    },\n                    \"summary\": \"A\",\n                }\n            },\n            \"/b\": {\n                \"get\": {\n                    \"operationId\": \"b_b_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                            \"description\": \"Successful \" \"Response\",\n                        }\n                    },\n                    \"summary\": \"B\",\n                }\n            },\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_generic_parameterless_depends.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 45,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generic_parameterless_depends.py:class:A:chunk1",
    "text": "class A:\n    pass",
    "repo": "fastapi",
    "path": "tests\\test_generic_parameterless_depends.py",
    "type": "class",
    "name": "A",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_generic_parameterless_depends.py:class:B:chunk1",
    "text": "class B:\n    pass",
    "repo": "fastapi",
    "path": "tests\\test_generic_parameterless_depends.py",
    "type": "class",
    "name": "B",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_get_request_body.py:function:test_get_with_body:chunk1",
    "text": "def test_get_with_body():\n    body = {\"name\": \"Foo\", \"description\": \"Some description\", \"price\": 5.5}\n    response = client.request(\"GET\", \"/product\", json=body)\n    assert response.json() == body",
    "repo": "fastapi",
    "path": "tests\\test_get_request_body.py",
    "type": "function",
    "name": "test_get_with_body",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_get_request_body.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/product\": {\n                \"get\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_product_get\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Product\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Product\": {\n                    \"title\": \"Product\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_get_request_body.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_get_request_body.py:class:Product:chunk1",
    "text": "class Product(BaseModel):\n    name: str\n    description: str = None  # type: ignore\n    price: float",
    "repo": "fastapi",
    "path": "tests\\test_get_request_body.py",
    "type": "class",
    "name": "Product",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_http_connection_injection.py:function:test_value_extracting_by_http:chunk1",
    "text": "def test_value_extracting_by_http():\n    response = client.get(\"/http\")\n    assert response.status_code == 200\n    assert response.json() == 42",
    "repo": "fastapi",
    "path": "tests\\test_http_connection_injection.py",
    "type": "function",
    "name": "test_value_extracting_by_http",
    "loc": 31,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_http_connection_injection.py:function:test_value_extracting_by_ws:chunk1",
    "text": "def test_value_extracting_by_ws():\n    with client.websocket_connect(\"/ws\") as websocket:\n        assert websocket.receive_json() == 42",
    "repo": "fastapi",
    "path": "tests\\test_http_connection_injection.py",
    "type": "function",
    "name": "test_value_extracting_by_ws",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_include_route.py:function:read_items:chunk1",
    "text": "def read_items(request: Request):\n    return JSONResponse({\"hello\": \"world\"})",
    "repo": "fastapi",
    "path": "tests\\test_include_route.py",
    "type": "function",
    "name": "read_items",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_include_route.py:function:test_sub_router:chunk1",
    "text": "def test_sub_router():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"hello\": \"world\"}",
    "repo": "fastapi",
    "path": "tests\\test_include_route.py",
    "type": "function",
    "name": "test_sub_router",
    "loc": 19,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_include_router_defaults_overrides.py:function:test_level1_override:chunk1",
    "text": "def test_level1_override():\n    response = client.get(\"/override1?level1=foo\")\n    assert response.json() == \"foo\"\n    assert response.headers[\"content-type\"] == \"application/x-level-1\"\n    assert \"x-level0\" in response.headers\n    assert \"x-level1\" in response.headers\n    assert \"x-level2\" not in response.headers\n    assert \"x-level3\" not in response.headers\n    assert \"x-level4\" not in response.headers\n    assert \"x-level5\" not in response.headers",
    "repo": "fastapi",
    "path": "tests\\test_include_router_defaults_overrides.py",
    "type": "function",
    "name": "test_level1_override",
    "loc": 346,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_include_router_defaults_overrides.py:function:test_level1_default:chunk1",
    "text": "def test_level1_default():\n    response = client.get(\"/default1?level1=foo\")\n    assert response.json() == \"foo\"\n    assert response.headers[\"content-type\"] == \"application/x-level-0\"\n    assert \"x-level0\" in response.headers\n    assert \"x-level1\" not in response.headers\n    assert \"x-level2\" not in response.headers\n    assert \"x-level3\" not in response.headers\n    assert \"x-level4\" not in response.headers\n    assert \"x-level5\" not in response.headers",
    "repo": "fastapi",
    "path": "tests\\test_include_router_defaults_overrides.py",
    "type": "function",
    "name": "test_level1_default",
    "loc": 358,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_include_router_defaults_overrides.py:function:test_paths_level3:chunk1",
    "text": "def test_paths_level3(override1, override2, override3):\n    url = \"\"\n    content_type_level = \"0\"\n    if override1:\n        url += \"/level1\"\n        content_type_level = \"1\"\n    if override2:\n        url += \"/level2\"\n        content_type_level = \"2\"\n    if override3:\n        url += \"/override3\"\n        content_type_level = \"3\"\n    else:\n        url += \"/default3\"\n    url += \"?level3=foo\"\n    response = client.get(url)\n    assert response.json() == \"foo\"\n    assert (\n        response.headers[\"content-type\"] == f\"application/x-level-{content_type_level}\"\n    )\n    assert \"x-level0\" in response.headers\n    assert not override1 or \"x-level1\" in response.headers\n    assert not override2 or \"x-level2\" in response.headers\n    assert not override3 or \"x-level3\" in response.headers",
    "repo": "fastapi",
    "path": "tests\\test_include_router_defaults_overrides.py",
    "type": "function",
    "name": "test_paths_level3",
    "loc": 373,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_include_router_defaults_overrides.py:function:test_paths_level5:chunk1",
    "text": "def test_paths_level5(override1, override2, override3, override4, override5):\n    url = \"\"\n    content_type_level = \"0\"\n    if override1:\n        url += \"/level1\"\n        content_type_level = \"1\"\n    if override2:\n        url += \"/level2\"\n        content_type_level = \"2\"\n    if override3:\n        url += \"/level3\"\n        content_type_level = \"3\"\n    if override4:\n        url += \"/level4\"\n        content_type_level = \"4\"\n    if override5:\n        url += \"/override5\"\n        content_type_level = \"5\"\n    else:\n        url += \"/default5\"\n    url += \"?level5=foo\"\n    response = client.get(url)\n    assert response.json() == \"foo\"\n    assert (\n        response.headers[\"content-type\"] == f\"application/x-level-{content_type_level}\"\n    )\n    assert \"x-level0\" in response.headers\n    assert not override1 or \"x-level1\" in response.headers\n    assert not override2 or \"x-level2\" in response.headers\n    assert not override3 or \"x-level3\" in response.headers\n    assert not override4 or \"x-level4\" in response.headers\n    assert not override5 or \"x-level5\" in response.headers",
    "repo": "fastapi",
    "path": "tests\\test_include_router_defaults_overrides.py",
    "type": "function",
    "name": "test_paths_level5",
    "loc": 404,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_include_router_defaults_overrides.py:function:test_openapi:chunk1",
    "text": "def test_openapi():\n    client = TestClient(app)\n    with warnings.catch_warnings(record=True) as w:\n        warnings.simplefilter(\"always\")\n        response = client.get(\"/openapi.json\")\n        assert issubclass(w[-1].category, UserWarning)\n        assert \"Duplicate Operation ID\" in str(w[-1].message)\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/override1\": {\n                \"get\": {\n                    \"tags\": [\"path1a\", \"path1b\"],\n                    \"summary\": \"Path1 Override\",\n                    \"operationId\": \"path1_override_override1_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n                            \"name\": \"level1\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-1\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/default1\": {\n                \"get\": {\n                    \"summary\": \"Path1 Default\",\n                    \"operationId\": \"path1_default_default1_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n                            \"name\": \"level1\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-0\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        }\n                    },\n                }\n            },\n            \"/level1/level2/override3\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level2a\",\n                        \"level2b\",\n                        \"path3a\",\n                        \"path3b\",\n                    ],\n                    \"summary\": \"Path3 Override Router2 Override\",\n                    \"operationId\": \"path3_override_router2_override_level1_level2_override3_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n                            \"name\": \"level3\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-3\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level2/default3\": {\n                \"get\": {\n                    \"tags\": [\"level1a\", \"level1b\", \"level2a\", \"level2b\"],\n                    \"summary\": \"Path3 Default Router2 Override\",\n                    \"operationId\": \"path3_default_router2_override_level1_level2_default3_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n                            \"name\": \"level3\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-2\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level2/level3/level4/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level2a\",\n                        \"level2b\",\n                        \"level3a\",\n                        \"level3b\",\n                        \"level4a\",\n                        \"level4b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Override\",\n                    \"operationId\": \"path5_override_router4_override_level1_level2_level3_level4_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level2/level3/level4/default5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level2a\",\n                        \"level2b\",\n                        \"level3a\",\n                        \"level3b\",\n                        \"level4a\",\n                        \"level4b\",\n                    ],\n                    \"summary\": \"Path5 Default Router4 Override\",\n                    \"operationId\": \"path5_default_router4_override_level1_level2_level3_level4_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-4\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level2/level3/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level2a\",\n                        \"level2b\",\n                        \"level3a\",\n                        \"level3b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Default\",\n                    \"operationId\": \"path5_override_router4_default_level1_level2_level3_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level2/level3/default5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level2a\",\n                        \"level2b\",\n                        \"level3a\",\n                        \"level3b\",\n                    ],\n                    \"summary\": \"Path5 Default Router4 Default\",\n                    \"operationId\": \"path5_default_router4_default_level1_level2_level3_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-3\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback",
    "repo": "fastapi",
    "path": "tests\\test_include_router_defaults_overrides.py",
    "type": "function",
    "name": "test_openapi",
    "loc": 438,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_include_router_defaults_overrides.py:function:test_openapi:chunk2",
    "text": "\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level2/level4/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level2a\",\n                        \"level2b\",\n                        \"level4a\",\n                        \"level4b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Override\",\n                    \"operationId\": \"path5_override_router4_override_level1_level2_level4_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level2/level4/default5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level2a\",\n                        \"level2b\",\n                        \"level4a\",\n                        \"level4b\",\n                    ],\n                    \"summary\": \"Path5 Default Router4 Override\",\n                    \"operationId\": \"path5_default_router4_override_level1_level2_level4_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-4\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level2/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level2a\",\n                        \"level2b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Default\",\n                    \"operationId\": \"path5_override_router4_default_level1_level2_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level2/default5\": {\n                \"get\": {\n                    \"tags\": [\"level1a\", \"level1b\", \"level2a\", \"level2b\"],\n                    \"summary\": \"Path5 Default Router4 Default\",\n                    \"operationId\": \"path5_default_router4_default_level1_level2_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-2\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/override3\": {\n                \"get\": {\n                    \"tags\": [\"level1a\", \"level1b\", \"path3a\", \"path3b\"],\n                    \"summary\": \"Path3 Override Router2 Default\",\n                    \"operationId\": \"path3_override_router2_default_level1_override3_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n                            \"name\": \"level3\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-3\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/default3\": {\n                \"get\": {\n                    \"tags\": [\"level1a\", \"level1b\"],\n                    \"summary\": \"Path3 Default Router2 Default\",\n                    \"operationId\": \"path3_default_router2_default_level1_default3_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n                            \"name\": \"level3\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-1\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                }\n            },\n            \"/level1/level3/level4/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level3a\",\n                        \"level3b\",\n                        \"level4a\",\n                        \"level4b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Override\",\n                    \"operationId\": \"path5_override_router4_override_level1_level3_level4_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level3/level4/default5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level3a\",\n                        \"level3b\",\n                        \"level4a\",\n                        \"level4b\",\n                    ],\n                    \"summary\": \"Path5 Default Router4 Override\",\n                    \"operationId\": \"path5_default_router4_override_level1_level3_level4_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-4\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                               ",
    "repo": "fastapi",
    "path": "tests\\test_include_router_defaults_overrides.py",
    "type": "function",
    "name": "test_openapi",
    "loc": 438,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_include_router_defaults_overrides.py:function:test_openapi:chunk3",
    "text": "_default_router4_override_level1_level3_level4_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-4\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level3/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level3a\",\n                        \"level3b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Default\",\n                    \"operationId\": \"path5_override_router4_default_level1_level3_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level3/default5\": {\n                \"get\": {\n                    \"tags\": [\"level1a\", \"level1b\", \"level3a\", \"level3b\"],\n                    \"summary\": \"Path5 Default Router4 Default\",\n                    \"operationId\": \"path5_default_router4_default_level1_level3_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-3\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                }\n            },\n            \"/level1/level4/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level4a\",\n                        \"level4b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Override\",\n                    \"operationId\": \"path5_override_router4_override_level1_level4_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level4/default5\": {\n                \"get\": {\n                    \"tags\": [\"level1a\", \"level1b\", \"level4a\", \"level4b\"],\n                    \"summary\": \"Path5 Default Router4 Override\",\n                    \"operationId\": \"path5_default_router4_override_level1_level4_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-4\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/override5\": {\n                \"get\": {\n                    \"tags\": [\"level1a\", \"level1b\", \"path5a\", \"path5b\"],\n                    \"summary\": \"Path5 Override Router4 Default\",\n                    \"operationId\": \"path5_override_router4_default_level1_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/default5\": {\n                \"get\": {\n                    \"tags\": [\"level1a\", \"level1b\"],\n                    \"summary\": \"Path5 Default Router4 Default\",\n                    \"operationId\": \"path5_default_router4_default_level1_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-1\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                }\n            },\n            \"/level2/override3\": {\n                \"get\": {\n                    \"tags\": [\"level2a\", \"level2b\", \"path3a\", \"path3b\"],\n                    \"summary\": \"Path3 Override Router2 Override\",\n                    \"operationId\": \"path3_override_router2_override_level2_override3_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n                            \"name\": \"level3\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-3\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level2/default3\": {\n                \"get\": {\n                    \"tags\": [\"level2a\", \"level2b\"],\n                    \"summary\": \"Path3 Default Router2 Override\",\n                    \"operationId\": \"path3_default_router2_override_level2_default3_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n                            \"name\": \"level3\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-2\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level2/level3/level4/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level2a\",\n                        \"level2b\",\n                        \"level3a\",\n                        \"level3b\",\n                        \"level4a\",\n                        \"level4b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Override\",\n                    \"operationId\": \"path5_override_router4_override_level2_level3_level4_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\":",
    "repo": "fastapi",
    "path": "tests\\test_include_router_defaults_overrides.py",
    "type": "function",
    "name": "test_openapi",
    "loc": 438,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_include_router_defaults_overrides.py:function:test_openapi:chunk4",
    "text": "                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level2/level3/level4/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level2a\",\n                        \"level2b\",\n                        \"level3a\",\n                        \"level3b\",\n                        \"level4a\",\n                        \"level4b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Override\",\n                    \"operationId\": \"path5_override_router4_override_level2_level3_level4_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level2/level3/level4/default5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level2a\",\n                        \"level2b\",\n                        \"level3a\",\n                        \"level3b\",\n                        \"level4a\",\n                        \"level4b\",\n                    ],\n                    \"summary\": \"Path5 Default Router4 Override\",\n                    \"operationId\": \"path5_default_router4_override_level2_level3_level4_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-4\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level2/level3/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level2a\",\n                        \"level2b\",\n                        \"level3a\",\n                        \"level3b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Default\",\n                    \"operationId\": \"path5_override_router4_default_level2_level3_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level2/level3/default5\": {\n                \"get\": {\n                    \"tags\": [\"level2a\", \"level2b\", \"level3a\", \"level3b\"],\n                    \"summary\": \"Path5 Default Router4 Default\",\n                    \"operationId\": \"path5_default_router4_default_level2_level3_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-3\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level2/level4/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level2a\",\n                        \"level2b\",\n                        \"level4a\",\n                        \"level4b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Override\",\n                    \"operationId\": \"path5_override_router4_override_level2_level4_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level2/level4/default5\": {\n                \"get\": {\n                    \"tags\": [\"level2a\", \"level2b\", \"level4a\", \"level4b\"],\n                    \"summary\": \"Path5 Default Router4 Override\",\n                    \"operationId\": \"path5_default_router4_override_level2_level4_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-4\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level2/override5\": {\n                \"get\": {\n                    \"tags\": [\"level2a\", \"level2b\", \"path5a\", \"path5b\"],\n                    \"summary\": \"Path5 Override Router4 Default\",\n                    \"operationId\": \"path5_override_router4_default_level2_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level2/default5\": {\n                \"get\": {\n                    \"tags\": [\"level2a\", \"level2b\"],\n                    \"summary\": \"Path5 Default Router4 Default\",\n                    \"operationId\": \"path5_default_router4_default_level2_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-2\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/override3\": {\n                \"get\": {\n                    \"tags\": [\"path3a\", \"path3b\"],\n                    \"summary\": \"Path3 Override Router2 Default\",\n                    \"operationId\": \"path3_override_router2_default_override3_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n                            \"name\": \"level3\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level",
    "repo": "fastapi",
    "path": "tests\\test_include_router_defaults_overrides.py",
    "type": "function",
    "name": "test_openapi",
    "loc": 438,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_include_router_defaults_overrides.py:function:test_openapi:chunk5",
    "text": "                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/override3\": {\n                \"get\": {\n                    \"tags\": [\"path3a\", \"path3b\"],\n                    \"summary\": \"Path3 Override Router2 Default\",\n                    \"operationId\": \"path3_override_router2_default_override3_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n                            \"name\": \"level3\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-3\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/default3\": {\n                \"get\": {\n                    \"summary\": \"Path3 Default Router2 Default\",\n                    \"operationId\": \"path3_default_router2_default_default3_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n                            \"name\": \"level3\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-0\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        }\n                    },\n                }\n            },\n            \"/level3/level4/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level3a\",\n                        \"level3b\",\n                        \"level4a\",\n                        \"level4b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Override\",\n                    \"operationId\": \"path5_override_router4_override_level3_level4_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level3/level4/default5\": {\n                \"get\": {\n                    \"tags\": [\"level3a\", \"level3b\", \"level4a\", \"level4b\"],\n                    \"summary\": \"Path5 Default Router4 Override\",\n                    \"operationId\": \"path5_default_router4_override_level3_level4_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-4\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level3/override5\": {\n                \"get\": {\n                    \"tags\": [\"level3a\", \"level3b\", \"path5a\", \"path5b\"],\n                    \"summary\": \"Path5 Override Router4 Default\",\n                    \"operationId\": \"path5_override_router4_default_level3_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level3/default5\": {\n                \"get\": {\n                    \"tags\": [\"level3a\", \"level3b\"],\n                    \"summary\": \"Path5 Default Router4 Default\",\n                    \"operationId\": \"path5_default_router4_default_level3_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-3\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                }\n            },\n            \"/level4/override5\": {\n                \"get\": {\n                    \"tags\": [\"level4a\", \"level4b\", \"path5a\", \"path5b\"],\n                    \"summary\": \"Path5 Override Router4 Override\",\n                    \"operationId\": \"path5_override_router4_override_level4_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level4/default5\": {\n                \"get\": {\n                    \"tags\": [\"level4a\", \"level4b\"],\n                    \"summary\": \"Path5 Default Router4 Override\",\n                    \"operationId\": \"path5_default_router4_override_level4_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-4\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/override5\": {\n                \"get\": {\n                    \"tags\": [\"path5a\", \"path5b\"],\n                    \"summary\": \"Path5 Override Router4 Default\",\n                    \"operationId\": \"path5_override_router4_default_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/default5\": {\n                \"get\": {\n                    \"summary\": \"Path5 Default Router4 Default\",\n                    \"operationId\": \"path5_default_router4_default_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-0\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        }\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_include_router_defaults_overrides.py",
    "type": "function",
    "name": "test_openapi",
    "loc": 438,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_include_router_defaults_overrides.py:class:ResponseLevel0:chunk1",
    "text": "class ResponseLevel0(JSONResponse):\n    media_type = \"application/x-level-0\"",
    "repo": "fastapi",
    "path": "tests\\test_include_router_defaults_overrides.py",
    "type": "class",
    "name": "ResponseLevel0",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_include_router_defaults_overrides.py:class:ResponseLevel1:chunk1",
    "text": "class ResponseLevel1(JSONResponse):\n    media_type = \"application/x-level-1\"",
    "repo": "fastapi",
    "path": "tests\\test_include_router_defaults_overrides.py",
    "type": "class",
    "name": "ResponseLevel1",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_include_router_defaults_overrides.py:class:ResponseLevel2:chunk1",
    "text": "class ResponseLevel2(JSONResponse):\n    media_type = \"application/x-level-2\"",
    "repo": "fastapi",
    "path": "tests\\test_include_router_defaults_overrides.py",
    "type": "class",
    "name": "ResponseLevel2",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_include_router_defaults_overrides.py:class:ResponseLevel3:chunk1",
    "text": "class ResponseLevel3(JSONResponse):\n    media_type = \"application/x-level-3\"",
    "repo": "fastapi",
    "path": "tests\\test_include_router_defaults_overrides.py",
    "type": "class",
    "name": "ResponseLevel3",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_include_router_defaults_overrides.py:class:ResponseLevel4:chunk1",
    "text": "class ResponseLevel4(JSONResponse):\n    media_type = \"application/x-level-4\"",
    "repo": "fastapi",
    "path": "tests\\test_include_router_defaults_overrides.py",
    "type": "class",
    "name": "ResponseLevel4",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_include_router_defaults_overrides.py:class:ResponseLevel5:chunk1",
    "text": "class ResponseLevel5(JSONResponse):\n    media_type = \"application/x-level-5\"",
    "repo": "fastapi",
    "path": "tests\\test_include_router_defaults_overrides.py",
    "type": "class",
    "name": "ResponseLevel5",
    "loc": 29,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_infer_param_optionality.py:function:get_users:chunk1",
    "text": "def get_users():\n    return [{\"user_id\": \"u1\"}, {\"user_id\": \"u2\"}]",
    "repo": "fastapi",
    "path": "tests\\test_infer_param_optionality.py",
    "type": "function",
    "name": "get_users",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_infer_param_optionality.py:function:get_user:chunk1",
    "text": "def get_user(user_id: str):\n    return {\"user_id\": user_id}",
    "repo": "fastapi",
    "path": "tests\\test_infer_param_optionality.py",
    "type": "function",
    "name": "get_user",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_infer_param_optionality.py:function:get_items:chunk1",
    "text": "def get_items(user_id: Optional[str] = None):\n    if user_id is None:\n        return [{\"item_id\": \"i1\", \"user_id\": \"u1\"}, {\"item_id\": \"i2\", \"user_id\": \"u2\"}]\n    else:\n        return [{\"item_id\": \"i2\", \"user_id\": user_id}]",
    "repo": "fastapi",
    "path": "tests\\test_infer_param_optionality.py",
    "type": "function",
    "name": "get_items",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_infer_param_optionality.py:function:get_item:chunk1",
    "text": "def get_item(item_id: str, user_id: Optional[str] = None):\n    if user_id is None:\n        return {\"item_id\": item_id}\n    else:\n        return {\"item_id\": item_id, \"user_id\": user_id}",
    "repo": "fastapi",
    "path": "tests\\test_infer_param_optionality.py",
    "type": "function",
    "name": "get_item",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_infer_param_optionality.py:function:test_get_users:chunk1",
    "text": "def test_get_users():\n    \"\"\"Check that /users returns expected data\"\"\"\n    response = client.get(\"/users\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"user_id\": \"u1\"}, {\"user_id\": \"u2\"}]",
    "repo": "fastapi",
    "path": "tests\\test_infer_param_optionality.py",
    "type": "function",
    "name": "test_get_users",
    "loc": 49,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_infer_param_optionality.py:function:test_get_user:chunk1",
    "text": "def test_get_user():\n    \"\"\"Check that /users/{user_id} returns expected data\"\"\"\n    response = client.get(\"/users/abc123\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"user_id\": \"abc123\"}",
    "repo": "fastapi",
    "path": "tests\\test_infer_param_optionality.py",
    "type": "function",
    "name": "test_get_user",
    "loc": 56,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_infer_param_optionality.py:function:test_get_items_1:chunk1",
    "text": "def test_get_items_1():\n    \"\"\"Check that /items returns expected data\"\"\"\n    response = client.get(\"/items\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\"item_id\": \"i1\", \"user_id\": \"u1\"},\n        {\"item_id\": \"i2\", \"user_id\": \"u2\"},\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_infer_param_optionality.py",
    "type": "function",
    "name": "test_get_items_1",
    "loc": 63,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_infer_param_optionality.py:function:test_get_items_2:chunk1",
    "text": "def test_get_items_2():\n    \"\"\"Check that /items returns expected data with user_id specified\"\"\"\n    response = client.get(\"/items?user_id=abc123\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item_id\": \"i2\", \"user_id\": \"abc123\"}]",
    "repo": "fastapi",
    "path": "tests\\test_infer_param_optionality.py",
    "type": "function",
    "name": "test_get_items_2",
    "loc": 73,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_infer_param_optionality.py:function:test_get_item_1:chunk1",
    "text": "def test_get_item_1():\n    \"\"\"Check that /items/{item_id} returns expected data\"\"\"\n    response = client.get(\"/items/item01\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": \"item01\"}",
    "repo": "fastapi",
    "path": "tests\\test_infer_param_optionality.py",
    "type": "function",
    "name": "test_get_item_1",
    "loc": 80,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_infer_param_optionality.py:function:test_get_item_2:chunk1",
    "text": "def test_get_item_2():\n    \"\"\"Check that /items/{item_id} returns expected data with user_id specified\"\"\"\n    response = client.get(\"/items/item01?user_id=abc123\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": \"item01\", \"user_id\": \"abc123\"}",
    "repo": "fastapi",
    "path": "tests\\test_infer_param_optionality.py",
    "type": "function",
    "name": "test_get_item_2",
    "loc": 87,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_infer_param_optionality.py:function:test_get_users_items:chunk1",
    "text": "def test_get_users_items():\n    \"\"\"Check that /users/{user_id}/items returns expected data\"\"\"\n    response = client.get(\"/users/abc123/items\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item_id\": \"i2\", \"user_id\": \"abc123\"}]",
    "repo": "fastapi",
    "path": "tests\\test_infer_param_optionality.py",
    "type": "function",
    "name": "test_get_users_items",
    "loc": 94,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_infer_param_optionality.py:function:test_get_users_item:chunk1",
    "text": "def test_get_users_item():\n    \"\"\"Check that /users/{user_id}/items returns expected data\"\"\"\n    response = client.get(\"/users/abc123/items/item01\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": \"item01\", \"user_id\": \"abc123\"}",
    "repo": "fastapi",
    "path": "tests\\test_infer_param_optionality.py",
    "type": "function",
    "name": "test_get_users_item",
    "loc": 101,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_infer_param_optionality.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/\": {\n                \"get\": {\n                    \"summary\": \"Get Users\",\n                    \"operationId\": \"get_users_users__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/users/{user_id}\": {\n                \"get\": {\n                    \"summary\": \"Get User\",\n                    \"operationId\": \"get_user_users__user_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"User Id\", \"type\": \"string\"},\n                            \"name\": \"user_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Get Items\",\n                    \"operationId\": \"get_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"name\": \"user_id\",\n                            \"in\": \"query\",\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"User Id\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"User Id\", \"type\": \"string\"}\n                            ),\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"summary\": \"Get Item\",\n                    \"operationId\": \"get_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": False,\n                            \"name\": \"user_id\",\n                            \"in\": \"query\",\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"User Id\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"User Id\", \"type\": \"string\"}\n                            ),\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/users/{user_id}/items/\": {\n                \"get\": {\n                    \"summary\": \"Get Items\",\n                    \"operationId\": \"get_items_users__user_id__items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"name\": \"user_id\",\n                            \"in\": \"path\",\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"User Id\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"User Id\", \"type\": \"string\"}\n                            ),\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/users/{user_id}/items/{item_id}\": {\n                \"get\": {\n                    \"summary\": \"Get Item\",\n                    \"operationId\": \"get_item_users__user_id__items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": True,\n                            \"name\": \"user_id\",\n                            \"in\": \"path\",\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"User Id\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"User Id\", \"type\": \"string\"}\n                            ),\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_infer_param_optionality.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 108,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_inherited_custom_class.py:function:test_pydanticv2:chunk1",
    "text": "def test_pydanticv2():\n    from pydantic import field_serializer\n\n    app = FastAPI()\n\n    @app.get(\"/fast_uuid\")\n    def return_fast_uuid():\n        asyncpg_uuid = MyUuid(\"a10ff360-3b1e-4984-a26f-d3ab460bdb51\")\n        assert isinstance(asyncpg_uuid, uuid.UUID)\n        assert type(asyncpg_uuid) is not uuid.UUID\n        with pytest.raises(TypeError):\n            vars(asyncpg_uuid)\n        return {\"fast_uuid\": asyncpg_uuid}\n\n    class SomeCustomClass(BaseModel):\n        model_config = {\"arbitrary_types_allowed\": True}\n\n        a_uuid: MyUuid\n\n        @field_serializer(\"a_uuid\")\n        def serialize_a_uuid(self, v):\n            return str(v)\n\n    @app.get(\"/get_custom_class\")\n    def return_some_user():\n        # Test that the fix also works for custom pydantic classes\n        return SomeCustomClass(a_uuid=MyUuid(\"b8799909-f914-42de-91bc-95c819218d01\"))\n\n    client = TestClient(app)\n\n    with client:\n        response_simple = client.get(\"/fast_uuid\")\n        response_pydantic = client.get(\"/get_custom_class\")\n\n    assert response_simple.json() == {\n        \"fast_uuid\": \"a10ff360-3b1e-4984-a26f-d3ab460bdb51\"\n    }\n\n    assert response_pydantic.json() == {\n        \"a_uuid\": \"b8799909-f914-42de-91bc-95c819218d01\"\n    }",
    "repo": "fastapi",
    "path": "tests\\test_inherited_custom_class.py",
    "type": "function",
    "name": "test_pydanticv2",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_inherited_custom_class.py:function:return_fast_uuid:chunk1",
    "text": "def return_fast_uuid():\n        asyncpg_uuid = MyUuid(\"a10ff360-3b1e-4984-a26f-d3ab460bdb51\")\n        assert isinstance(asyncpg_uuid, uuid.UUID)\n        assert type(asyncpg_uuid) is not uuid.UUID\n        with pytest.raises(TypeError):\n            vars(asyncpg_uuid)\n        return {\"fast_uuid\": asyncpg_uuid}",
    "repo": "fastapi",
    "path": "tests\\test_inherited_custom_class.py",
    "type": "function",
    "name": "return_fast_uuid",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_inherited_custom_class.py:function:return_some_user:chunk1",
    "text": "def return_some_user():\n        # Test that the fix also works for custom pydantic classes\n        return SomeCustomClass(a_uuid=MyUuid(\"b8799909-f914-42de-91bc-95c819218d01\"))",
    "repo": "fastapi",
    "path": "tests\\test_inherited_custom_class.py",
    "type": "function",
    "name": "return_some_user",
    "loc": 54,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_inherited_custom_class.py:function:test_pydanticv1:chunk1",
    "text": "def test_pydanticv1():\n    app = FastAPI()\n\n    @app.get(\"/fast_uuid\")\n    def return_fast_uuid():\n        asyncpg_uuid = MyUuid(\"a10ff360-3b1e-4984-a26f-d3ab460bdb51\")\n        assert isinstance(asyncpg_uuid, uuid.UUID)\n        assert type(asyncpg_uuid) is not uuid.UUID\n        with pytest.raises(TypeError):\n            vars(asyncpg_uuid)\n        return {\"fast_uuid\": asyncpg_uuid}\n\n    class SomeCustomClass(BaseModel):\n        class Config:\n            arbitrary_types_allowed = True\n            json_encoders = {uuid.UUID: str}\n\n        a_uuid: MyUuid\n\n    @app.get(\"/get_custom_class\")\n    def return_some_user():\n        # Test that the fix also works for custom pydantic classes\n        return SomeCustomClass(a_uuid=MyUuid(\"b8799909-f914-42de-91bc-95c819218d01\"))\n\n    client = TestClient(app)\n\n    with client:\n        response_simple = client.get(\"/fast_uuid\")\n        response_pydantic = client.get(\"/get_custom_class\")\n\n    assert response_simple.json() == {\n        \"fast_uuid\": \"a10ff360-3b1e-4984-a26f-d3ab460bdb51\"\n    }\n\n    assert response_pydantic.json() == {\n        \"a_uuid\": \"b8799909-f914-42de-91bc-95c819218d01\"\n    }",
    "repo": "fastapi",
    "path": "tests\\test_inherited_custom_class.py",
    "type": "function",
    "name": "test_pydanticv1",
    "loc": 75,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_inherited_custom_class.py:function:return_fast_uuid:chunk1",
    "text": "def return_fast_uuid():\n        asyncpg_uuid = MyUuid(\"a10ff360-3b1e-4984-a26f-d3ab460bdb51\")\n        assert isinstance(asyncpg_uuid, uuid.UUID)\n        assert type(asyncpg_uuid) is not uuid.UUID\n        with pytest.raises(TypeError):\n            vars(asyncpg_uuid)\n        return {\"fast_uuid\": asyncpg_uuid}",
    "repo": "fastapi",
    "path": "tests\\test_inherited_custom_class.py",
    "type": "function",
    "name": "return_fast_uuid",
    "loc": 79,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_inherited_custom_class.py:function:return_some_user:chunk1",
    "text": "def return_some_user():\n        # Test that the fix also works for custom pydantic classes\n        return SomeCustomClass(a_uuid=MyUuid(\"b8799909-f914-42de-91bc-95c819218d01\"))",
    "repo": "fastapi",
    "path": "tests\\test_inherited_custom_class.py",
    "type": "function",
    "name": "return_some_user",
    "loc": 95,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_inherited_custom_class.py:class:MyUuid:chunk1",
    "text": "class MyUuid:\n    def __init__(self, uuid_string: str):\n        self.uuid = uuid_string\n\n    def __str__(self):\n        return self.uuid\n\n    @property  # type: ignore\n    def __class__(self):\n        return uuid.UUID\n\n    @property\n    def __dict__(self):\n        \"\"\"Spoof a missing __dict__ by raising TypeError, this is how\n        asyncpg.pgroto.pgproto.UUID behaves\"\"\"\n        raise TypeError(\"vars() argument must have __dict__ attribute\")",
    "repo": "fastapi",
    "path": "tests\\test_inherited_custom_class.py",
    "type": "class",
    "name": "MyUuid",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_inherited_custom_class.py:class:SomeCustomClass:chunk1",
    "text": "class SomeCustomClass(BaseModel):\n        model_config = {\"arbitrary_types_allowed\": True}\n\n        a_uuid: MyUuid\n\n        @field_serializer(\"a_uuid\")\n        def serialize_a_uuid(self, v):\n            return str(v)",
    "repo": "fastapi",
    "path": "tests\\test_inherited_custom_class.py",
    "type": "class",
    "name": "SomeCustomClass",
    "loc": 44,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_inherited_custom_class.py:class:Config:chunk1",
    "text": "class Config:\n            arbitrary_types_allowed = True\n            json_encoders = {uuid.UUID: str}",
    "repo": "fastapi",
    "path": "tests\\test_inherited_custom_class.py",
    "type": "class",
    "name": "Config",
    "loc": 88,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_inherited_custom_class.py:class:SomeCustomClass:chunk1",
    "text": "class SomeCustomClass(BaseModel):\n        class Config:\n            arbitrary_types_allowed = True\n            json_encoders = {uuid.UUID: str}\n\n        a_uuid: MyUuid",
    "repo": "fastapi",
    "path": "tests\\test_inherited_custom_class.py",
    "type": "class",
    "name": "SomeCustomClass",
    "loc": 87,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_path_param.py:function:test_invalid_sequence:chunk1",
    "text": "def test_invalid_sequence():\n    with pytest.raises(AssertionError):\n        app = FastAPI()\n\n        class Item(BaseModel):\n            title: str\n\n        @app.get(\"/items/{id}\")\n        def read_items(id: List[Item]):\n            pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_invalid_path_param.py",
    "type": "function",
    "name": "test_invalid_sequence",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_path_param.py:function:read_items:chunk1",
    "text": "def read_items(id: List[Item]):\n            pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_invalid_path_param.py",
    "type": "function",
    "name": "read_items",
    "loc": 16,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_path_param.py:function:test_invalid_tuple:chunk1",
    "text": "def test_invalid_tuple():\n    with pytest.raises(AssertionError):\n        app = FastAPI()\n\n        class Item(BaseModel):\n            title: str\n\n        @app.get(\"/items/{id}\")\n        def read_items(id: Tuple[Item, Item]):\n            pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_invalid_path_param.py",
    "type": "function",
    "name": "test_invalid_tuple",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_path_param.py:function:read_items:chunk1",
    "text": "def read_items(id: Tuple[Item, Item]):\n            pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_invalid_path_param.py",
    "type": "function",
    "name": "read_items",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_path_param.py:function:test_invalid_dict:chunk1",
    "text": "def test_invalid_dict():\n    with pytest.raises(AssertionError):\n        app = FastAPI()\n\n        class Item(BaseModel):\n            title: str\n\n        @app.get(\"/items/{id}\")\n        def read_items(id: Dict[str, Item]):\n            pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_invalid_path_param.py",
    "type": "function",
    "name": "test_invalid_dict",
    "loc": 32,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_path_param.py:function:read_items:chunk1",
    "text": "def read_items(id: Dict[str, Item]):\n            pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_invalid_path_param.py",
    "type": "function",
    "name": "read_items",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_path_param.py:function:test_invalid_simple_list:chunk1",
    "text": "def test_invalid_simple_list():\n    with pytest.raises(AssertionError):\n        app = FastAPI()\n\n        @app.get(\"/items/{id}\")\n        def read_items(id: list):\n            pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_invalid_path_param.py",
    "type": "function",
    "name": "test_invalid_simple_list",
    "loc": 44,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_path_param.py:function:read_items:chunk1",
    "text": "def read_items(id: list):\n            pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_invalid_path_param.py",
    "type": "function",
    "name": "read_items",
    "loc": 49,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_path_param.py:function:test_invalid_simple_tuple:chunk1",
    "text": "def test_invalid_simple_tuple():\n    with pytest.raises(AssertionError):\n        app = FastAPI()\n\n        @app.get(\"/items/{id}\")\n        def read_items(id: tuple):\n            pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_invalid_path_param.py",
    "type": "function",
    "name": "test_invalid_simple_tuple",
    "loc": 53,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_path_param.py:function:read_items:chunk1",
    "text": "def read_items(id: tuple):\n            pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_invalid_path_param.py",
    "type": "function",
    "name": "read_items",
    "loc": 58,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_path_param.py:function:test_invalid_simple_set:chunk1",
    "text": "def test_invalid_simple_set():\n    with pytest.raises(AssertionError):\n        app = FastAPI()\n\n        @app.get(\"/items/{id}\")\n        def read_items(id: set):\n            pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_invalid_path_param.py",
    "type": "function",
    "name": "test_invalid_simple_set",
    "loc": 62,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_path_param.py:function:read_items:chunk1",
    "text": "def read_items(id: set):\n            pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_invalid_path_param.py",
    "type": "function",
    "name": "read_items",
    "loc": 67,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_path_param.py:function:test_invalid_simple_dict:chunk1",
    "text": "def test_invalid_simple_dict():\n    with pytest.raises(AssertionError):\n        app = FastAPI()\n\n        @app.get(\"/items/{id}\")\n        def read_items(id: dict):\n            pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_invalid_path_param.py",
    "type": "function",
    "name": "test_invalid_simple_dict",
    "loc": 71,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_path_param.py:function:read_items:chunk1",
    "text": "def read_items(id: dict):\n            pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_invalid_path_param.py",
    "type": "function",
    "name": "read_items",
    "loc": 76,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_path_param.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n            title: str",
    "repo": "fastapi",
    "path": "tests\\test_invalid_path_param.py",
    "type": "class",
    "name": "Item",
    "loc": 12,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_path_param.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n            title: str",
    "repo": "fastapi",
    "path": "tests\\test_invalid_path_param.py",
    "type": "class",
    "name": "Item",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_path_param.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n            title: str",
    "repo": "fastapi",
    "path": "tests\\test_invalid_path_param.py",
    "type": "class",
    "name": "Item",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_sequence_param.py:function:test_invalid_sequence:chunk1",
    "text": "def test_invalid_sequence():\n    with pytest.raises(AssertionError):\n        app = FastAPI()\n\n        class Item(BaseModel):\n            title: str\n\n        @app.get(\"/items/\")\n        def read_items(q: List[Item] = Query(default=None)):\n            pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_invalid_sequence_param.py",
    "type": "function",
    "name": "test_invalid_sequence",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_sequence_param.py:function:read_items:chunk1",
    "text": "def read_items(q: List[Item] = Query(default=None)):\n            pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_invalid_sequence_param.py",
    "type": "function",
    "name": "read_items",
    "loc": 16,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_sequence_param.py:function:test_invalid_tuple:chunk1",
    "text": "def test_invalid_tuple():\n    with pytest.raises(AssertionError):\n        app = FastAPI()\n\n        class Item(BaseModel):\n            title: str\n\n        @app.get(\"/items/\")\n        def read_items(q: Tuple[Item, Item] = Query(default=None)):\n            pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_invalid_sequence_param.py",
    "type": "function",
    "name": "test_invalid_tuple",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_sequence_param.py:function:read_items:chunk1",
    "text": "def read_items(q: Tuple[Item, Item] = Query(default=None)):\n            pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_invalid_sequence_param.py",
    "type": "function",
    "name": "read_items",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_sequence_param.py:function:test_invalid_dict:chunk1",
    "text": "def test_invalid_dict():\n    with pytest.raises(AssertionError):\n        app = FastAPI()\n\n        class Item(BaseModel):\n            title: str\n\n        @app.get(\"/items/\")\n        def read_items(q: Dict[str, Item] = Query(default=None)):\n            pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_invalid_sequence_param.py",
    "type": "function",
    "name": "test_invalid_dict",
    "loc": 32,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_sequence_param.py:function:read_items:chunk1",
    "text": "def read_items(q: Dict[str, Item] = Query(default=None)):\n            pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_invalid_sequence_param.py",
    "type": "function",
    "name": "read_items",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_sequence_param.py:function:test_invalid_simple_dict:chunk1",
    "text": "def test_invalid_simple_dict():\n    with pytest.raises(AssertionError):\n        app = FastAPI()\n\n        class Item(BaseModel):\n            title: str\n\n        @app.get(\"/items/\")\n        def read_items(q: Optional[dict] = Query(default=None)):\n            pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_invalid_sequence_param.py",
    "type": "function",
    "name": "test_invalid_simple_dict",
    "loc": 44,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_sequence_param.py:function:read_items:chunk1",
    "text": "def read_items(q: Optional[dict] = Query(default=None)):\n            pass  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_invalid_sequence_param.py",
    "type": "function",
    "name": "read_items",
    "loc": 52,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_sequence_param.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n            title: str",
    "repo": "fastapi",
    "path": "tests\\test_invalid_sequence_param.py",
    "type": "class",
    "name": "Item",
    "loc": 12,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_sequence_param.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n            title: str",
    "repo": "fastapi",
    "path": "tests\\test_invalid_sequence_param.py",
    "type": "class",
    "name": "Item",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_sequence_param.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n            title: str",
    "repo": "fastapi",
    "path": "tests\\test_invalid_sequence_param.py",
    "type": "class",
    "name": "Item",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_invalid_sequence_param.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n            title: str",
    "repo": "fastapi",
    "path": "tests\\test_invalid_sequence_param.py",
    "type": "class",
    "name": "Item",
    "loc": 48,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:function:test_encode_dict:chunk1",
    "text": "def test_encode_dict():\n    pet = {\"name\": \"Firulais\", \"owner\": {\"name\": \"Foo\"}}\n    assert jsonable_encoder(pet) == {\"name\": \"Firulais\", \"owner\": {\"name\": \"Foo\"}}\n    assert jsonable_encoder(pet, include={\"name\"}) == {\"name\": \"Firulais\"}\n    assert jsonable_encoder(pet, exclude={\"owner\"}) == {\"name\": \"Firulais\"}\n    assert jsonable_encoder(pet, include={}) == {}\n    assert jsonable_encoder(pet, exclude={}) == {\n        \"name\": \"Firulais\",\n        \"owner\": {\"name\": \"Foo\"},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "function",
    "name": "test_encode_dict",
    "loc": 79,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:function:test_encode_class:chunk1",
    "text": "def test_encode_class():\n    person = Person(name=\"Foo\")\n    pet = Pet(owner=person, name=\"Firulais\")\n    assert jsonable_encoder(pet) == {\"name\": \"Firulais\", \"owner\": {\"name\": \"Foo\"}}\n    assert jsonable_encoder(pet, include={\"name\"}) == {\"name\": \"Firulais\"}\n    assert jsonable_encoder(pet, exclude={\"owner\"}) == {\"name\": \"Firulais\"}\n    assert jsonable_encoder(pet, include={}) == {}\n    assert jsonable_encoder(pet, exclude={}) == {\n        \"name\": \"Firulais\",\n        \"owner\": {\"name\": \"Foo\"},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "function",
    "name": "test_encode_class",
    "loc": 91,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:function:test_encode_dictable:chunk1",
    "text": "def test_encode_dictable():\n    person = DictablePerson(name=\"Foo\")\n    pet = DictablePet(owner=person, name=\"Firulais\")\n    assert jsonable_encoder(pet) == {\"name\": \"Firulais\", \"owner\": {\"name\": \"Foo\"}}\n    assert jsonable_encoder(pet, include={\"name\"}) == {\"name\": \"Firulais\"}\n    assert jsonable_encoder(pet, exclude={\"owner\"}) == {\"name\": \"Firulais\"}\n    assert jsonable_encoder(pet, include={}) == {}\n    assert jsonable_encoder(pet, exclude={}) == {\n        \"name\": \"Firulais\",\n        \"owner\": {\"name\": \"Foo\"},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "function",
    "name": "test_encode_dictable",
    "loc": 104,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:function:test_encode_dataclass:chunk1",
    "text": "def test_encode_dataclass():\n    item = Item(name=\"foo\", count=100)\n    assert jsonable_encoder(item) == {\"name\": \"foo\", \"count\": 100}\n    assert jsonable_encoder(item, include={\"name\"}) == {\"name\": \"foo\"}\n    assert jsonable_encoder(item, exclude={\"count\"}) == {\"name\": \"foo\"}\n    assert jsonable_encoder(item, include={}) == {}\n    assert jsonable_encoder(item, exclude={}) == {\"name\": \"foo\", \"count\": 100}",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "function",
    "name": "test_encode_dataclass",
    "loc": 117,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:function:test_encode_unsupported:chunk1",
    "text": "def test_encode_unsupported():\n    unserializable = Unserializable()\n    with pytest.raises(ValueError):\n        jsonable_encoder(unserializable)",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "function",
    "name": "test_encode_unsupported",
    "loc": 126,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:function:test_encode_custom_json_encoders_model_pydanticv2:chunk1",
    "text": "def test_encode_custom_json_encoders_model_pydanticv2():\n    from pydantic import field_serializer\n\n    class ModelWithCustomEncoder(BaseModel):\n        dt_field: datetime\n\n        @field_serializer(\"dt_field\")\n        def serialize_dt_field(self, dt):\n            return dt.replace(microsecond=0, tzinfo=timezone.utc).isoformat()\n\n    class ModelWithCustomEncoderSubclass(ModelWithCustomEncoder):\n        pass\n\n    model = ModelWithCustomEncoder(dt_field=datetime(2019, 1, 1, 8))\n    assert jsonable_encoder(model) == {\"dt_field\": \"2019-01-01T08:00:00+00:00\"}\n    subclass_model = ModelWithCustomEncoderSubclass(dt_field=datetime(2019, 1, 1, 8))\n    assert jsonable_encoder(subclass_model) == {\"dt_field\": \"2019-01-01T08:00:00+00:00\"}",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "function",
    "name": "test_encode_custom_json_encoders_model_pydanticv2",
    "loc": 133,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:function:test_encode_custom_json_encoders_model_pydanticv1:chunk1",
    "text": "def test_encode_custom_json_encoders_model_pydanticv1():\n    class ModelWithCustomEncoder(BaseModel):\n        dt_field: datetime\n\n        class Config:\n            json_encoders = {\n                datetime: lambda dt: dt.replace(\n                    microsecond=0, tzinfo=timezone.utc\n                ).isoformat()\n            }\n\n    class ModelWithCustomEncoderSubclass(ModelWithCustomEncoder):\n        class Config:\n            pass\n\n    model = ModelWithCustomEncoder(dt_field=datetime(2019, 1, 1, 8))\n    assert jsonable_encoder(model) == {\"dt_field\": \"2019-01-01T08:00:00+00:00\"}\n    subclass_model = ModelWithCustomEncoderSubclass(dt_field=datetime(2019, 1, 1, 8))\n    assert jsonable_encoder(subclass_model) == {\"dt_field\": \"2019-01-01T08:00:00+00:00\"}",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "function",
    "name": "test_encode_custom_json_encoders_model_pydanticv1",
    "loc": 154,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:function:test_encode_model_with_config:chunk1",
    "text": "def test_encode_model_with_config():\n    model = ModelWithConfig(role=RoleEnum.admin)\n    assert jsonable_encoder(model) == {\"role\": \"admin\"}",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "function",
    "name": "test_encode_model_with_config",
    "loc": 175,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:function:test_encode_model_with_alias_raises:chunk1",
    "text": "def test_encode_model_with_alias_raises():\n    with pytest.raises(ValidationError):\n        ModelWithAlias(foo=\"Bar\")",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "function",
    "name": "test_encode_model_with_alias_raises",
    "loc": 180,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:function:test_encode_model_with_alias:chunk1",
    "text": "def test_encode_model_with_alias():\n    model = ModelWithAlias(Foo=\"Bar\")\n    assert jsonable_encoder(model) == {\"Foo\": \"Bar\"}",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "function",
    "name": "test_encode_model_with_alias",
    "loc": 185,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:function:test_encode_model_with_default:chunk1",
    "text": "def test_encode_model_with_default():\n    model = ModelWithDefault(foo=\"foo\", bar=\"bar\")\n    assert jsonable_encoder(model) == {\"foo\": \"foo\", \"bar\": \"bar\", \"bla\": \"bla\"}\n    assert jsonable_encoder(model, exclude_unset=True) == {\"foo\": \"foo\", \"bar\": \"bar\"}\n    assert jsonable_encoder(model, exclude_defaults=True) == {\"foo\": \"foo\"}\n    assert jsonable_encoder(model, exclude_unset=True, exclude_defaults=True) == {\n        \"foo\": \"foo\"\n    }\n    assert jsonable_encoder(model, include={\"foo\"}) == {\"foo\": \"foo\"}\n    assert jsonable_encoder(model, exclude={\"bla\"}) == {\"foo\": \"foo\", \"bar\": \"bar\"}\n    assert jsonable_encoder(model, include={}) == {}\n    assert jsonable_encoder(model, exclude={}) == {\n        \"foo\": \"foo\",\n        \"bar\": \"bar\",\n        \"bla\": \"bla\",\n    }",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "function",
    "name": "test_encode_model_with_default",
    "loc": 190,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:function:test_custom_encoders:chunk1",
    "text": "def test_custom_encoders():\n    class safe_datetime(datetime):\n        pass\n\n    class MyModel(BaseModel):\n        dt_field: safe_datetime\n\n    instance = MyModel(dt_field=safe_datetime.now())\n\n    encoded_instance = jsonable_encoder(\n        instance, custom_encoder={safe_datetime: lambda o: o.isoformat()}\n    )\n    assert encoded_instance[\"dt_field\"] == instance.dt_field.isoformat()",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "function",
    "name": "test_custom_encoders",
    "loc": 209,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:function:test_custom_enum_encoders:chunk1",
    "text": "def test_custom_enum_encoders():\n    def custom_enum_encoder(v: Enum):\n        return v.value.lower()\n\n    class MyEnum(Enum):\n        ENUM_VAL_1 = \"ENUM_VAL_1\"\n\n    instance = MyEnum.ENUM_VAL_1\n\n    encoded_instance = jsonable_encoder(\n        instance, custom_encoder={MyEnum: custom_enum_encoder}\n    )\n    assert encoded_instance == custom_enum_encoder(instance)",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "function",
    "name": "test_custom_enum_encoders",
    "loc": 224,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:function:custom_enum_encoder:chunk1",
    "text": "def custom_enum_encoder(v: Enum):\n        return v.value.lower()",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "function",
    "name": "custom_enum_encoder",
    "loc": 225,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:function:test_encode_model_with_pure_path:chunk1",
    "text": "def test_encode_model_with_pure_path():\n    class ModelWithPath(BaseModel):\n        path: PurePath\n\n        if PYDANTIC_V2:\n            model_config = {\"arbitrary_types_allowed\": True}\n        else:\n\n            class Config:\n                arbitrary_types_allowed = True\n\n    test_path = PurePath(\"/foo\", \"bar\")\n    obj = ModelWithPath(path=test_path)\n    assert jsonable_encoder(obj) == {\"path\": str(test_path)}",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "function",
    "name": "test_encode_model_with_pure_path",
    "loc": 239,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:function:test_encode_model_with_pure_posix_path:chunk1",
    "text": "def test_encode_model_with_pure_posix_path():\n    class ModelWithPath(BaseModel):\n        path: PurePosixPath\n\n        if PYDANTIC_V2:\n            model_config = {\"arbitrary_types_allowed\": True}\n        else:\n\n            class Config:\n                arbitrary_types_allowed = True\n\n    obj = ModelWithPath(path=PurePosixPath(\"/foo\", \"bar\"))\n    assert jsonable_encoder(obj) == {\"path\": \"/foo/bar\"}",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "function",
    "name": "test_encode_model_with_pure_posix_path",
    "loc": 255,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:function:test_encode_model_with_pure_windows_path:chunk1",
    "text": "def test_encode_model_with_pure_windows_path():\n    class ModelWithPath(BaseModel):\n        path: PureWindowsPath\n\n        if PYDANTIC_V2:\n            model_config = {\"arbitrary_types_allowed\": True}\n        else:\n\n            class Config:\n                arbitrary_types_allowed = True\n\n    obj = ModelWithPath(path=PureWindowsPath(\"/foo\", \"bar\"))\n    assert jsonable_encoder(obj) == {\"path\": \"\\\\foo\\\\bar\"}",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "function",
    "name": "test_encode_model_with_pure_windows_path",
    "loc": 270,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:function:test_encode_root:chunk1",
    "text": "def test_encode_root():\n    class ModelWithRoot(BaseModel):\n        __root__: str\n\n    model = ModelWithRoot(__root__=\"Foo\")\n    assert jsonable_encoder(model) == \"Foo\"",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "function",
    "name": "test_encode_root",
    "loc": 286,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:function:test_decimal_encoder_float:chunk1",
    "text": "def test_decimal_encoder_float():\n    data = {\"value\": Decimal(1.23)}\n    assert jsonable_encoder(data) == {\"value\": 1.23}",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "function",
    "name": "test_decimal_encoder_float",
    "loc": 295,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:function:test_decimal_encoder_int:chunk1",
    "text": "def test_decimal_encoder_int():\n    data = {\"value\": Decimal(2)}\n    assert jsonable_encoder(data) == {\"value\": 2}",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "function",
    "name": "test_decimal_encoder_int",
    "loc": 301,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:function:test_encode_deque_encodes_child_models:chunk1",
    "text": "def test_encode_deque_encodes_child_models():\n    class Model(BaseModel):\n        test: str\n\n    dq = deque([Model(test=\"test\")])\n\n    assert jsonable_encoder(dq)[0][\"test\"] == \"test\"",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "function",
    "name": "test_encode_deque_encodes_child_models",
    "loc": 306,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:function:test_encode_pydantic_undefined:chunk1",
    "text": "def test_encode_pydantic_undefined():\n    data = {\"value\": Undefined}\n    assert jsonable_encoder(data) == {\"value\": None}",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "function",
    "name": "test_encode_pydantic_undefined",
    "loc": 316,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:Person:chunk1",
    "text": "class Person:\n    def __init__(self, name: str):\n        self.name = name",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "Person",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:Pet:chunk1",
    "text": "class Pet:\n    def __init__(self, owner: Person, name: str):\n        self.owner = owner\n        self.name = name",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "Pet",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:Item:chunk1",
    "text": "class Item:\n    name: str\n    count: int",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "Item",
    "loc": 29,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:DictablePerson:chunk1",
    "text": "class DictablePerson(Person):\n    def __iter__(self):\n        return ((k, v) for k, v in self.__dict__.items())",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "DictablePerson",
    "loc": 34,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:DictablePet:chunk1",
    "text": "class DictablePet(Pet):\n    def __iter__(self):\n        return ((k, v) for k, v in self.__dict__.items())",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "DictablePet",
    "loc": 39,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:Unserializable:chunk1",
    "text": "class Unserializable:\n    def __iter__(self):\n        raise NotImplementedError()\n\n    @property\n    def __dict__(self):\n        raise NotImplementedError()",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "Unserializable",
    "loc": 44,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:RoleEnum:chunk1",
    "text": "class RoleEnum(Enum):\n    admin = \"admin\"\n    normal = \"normal\"",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "RoleEnum",
    "loc": 53,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:Config:chunk1",
    "text": "class Config:\n            use_enum_values = True",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "Config",
    "loc": 65,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:ModelWithConfig:chunk1",
    "text": "class ModelWithConfig(BaseModel):\n    role: Optional[RoleEnum] = None\n\n    if PYDANTIC_V2:\n        model_config = {\"use_enum_values\": True}\n    else:\n\n        class Config:\n            use_enum_values = True",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "ModelWithConfig",
    "loc": 58,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:ModelWithAlias:chunk1",
    "text": "class ModelWithAlias(BaseModel):\n    foo: str = Field(alias=\"Foo\")",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "ModelWithAlias",
    "loc": 69,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:ModelWithDefault:chunk1",
    "text": "class ModelWithDefault(BaseModel):\n    foo: str = ...  # type: ignore\n    bar: str = \"bar\"\n    bla: str = \"bla\"",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "ModelWithDefault",
    "loc": 73,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:ModelWithCustomEncoder:chunk1",
    "text": "class ModelWithCustomEncoder(BaseModel):\n        dt_field: datetime\n\n        @field_serializer(\"dt_field\")\n        def serialize_dt_field(self, dt):\n            return dt.replace(microsecond=0, tzinfo=timezone.utc).isoformat()",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "ModelWithCustomEncoder",
    "loc": 136,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:ModelWithCustomEncoderSubclass:chunk1",
    "text": "class ModelWithCustomEncoderSubclass(ModelWithCustomEncoder):\n        pass",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "ModelWithCustomEncoderSubclass",
    "loc": 143,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:Config:chunk1",
    "text": "class Config:\n            json_encoders = {\n                datetime: lambda dt: dt.replace(\n                    microsecond=0, tzinfo=timezone.utc\n                ).isoformat()\n            }",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "Config",
    "loc": 158,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:ModelWithCustomEncoder:chunk1",
    "text": "class ModelWithCustomEncoder(BaseModel):\n        dt_field: datetime\n\n        class Config:\n            json_encoders = {\n                datetime: lambda dt: dt.replace(\n                    microsecond=0, tzinfo=timezone.utc\n                ).isoformat()\n            }",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "ModelWithCustomEncoder",
    "loc": 155,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:Config:chunk1",
    "text": "class Config:\n            pass",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "Config",
    "loc": 166,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:ModelWithCustomEncoderSubclass:chunk1",
    "text": "class ModelWithCustomEncoderSubclass(ModelWithCustomEncoder):\n        class Config:\n            pass",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "ModelWithCustomEncoderSubclass",
    "loc": 165,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:safe_datetime:chunk1",
    "text": "class safe_datetime(datetime):\n        pass",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "safe_datetime",
    "loc": 210,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:MyModel:chunk1",
    "text": "class MyModel(BaseModel):\n        dt_field: safe_datetime",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "MyModel",
    "loc": 213,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:MyEnum:chunk1",
    "text": "class MyEnum(Enum):\n        ENUM_VAL_1 = \"ENUM_VAL_1\"",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "MyEnum",
    "loc": 228,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:Config:chunk1",
    "text": "class Config:\n                arbitrary_types_allowed = True",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "Config",
    "loc": 247,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:ModelWithPath:chunk1",
    "text": "class ModelWithPath(BaseModel):\n        path: PurePath\n\n        if PYDANTIC_V2:\n            model_config = {\"arbitrary_types_allowed\": True}\n        else:\n\n            class Config:\n                arbitrary_types_allowed = True",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "ModelWithPath",
    "loc": 240,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:Config:chunk1",
    "text": "class Config:\n                arbitrary_types_allowed = True",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "Config",
    "loc": 263,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:ModelWithPath:chunk1",
    "text": "class ModelWithPath(BaseModel):\n        path: PurePosixPath\n\n        if PYDANTIC_V2:\n            model_config = {\"arbitrary_types_allowed\": True}\n        else:\n\n            class Config:\n                arbitrary_types_allowed = True",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "ModelWithPath",
    "loc": 256,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:Config:chunk1",
    "text": "class Config:\n                arbitrary_types_allowed = True",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "Config",
    "loc": 278,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:ModelWithPath:chunk1",
    "text": "class ModelWithPath(BaseModel):\n        path: PureWindowsPath\n\n        if PYDANTIC_V2:\n            model_config = {\"arbitrary_types_allowed\": True}\n        else:\n\n            class Config:\n                arbitrary_types_allowed = True",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "ModelWithPath",
    "loc": 271,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:ModelWithRoot:chunk1",
    "text": "class ModelWithRoot(BaseModel):\n        __root__: str",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "ModelWithRoot",
    "loc": 287,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_jsonable_encoder.py:class:Model:chunk1",
    "text": "class Model(BaseModel):\n        test: str",
    "repo": "fastapi",
    "path": "tests\\test_jsonable_encoder.py",
    "type": "class",
    "name": "Model",
    "loc": 307,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_local_docs.py:function:test_strings_in_generated_swagger:chunk1",
    "text": "def test_strings_in_generated_swagger():\n    sig = inspect.signature(get_swagger_ui_html)\n    swagger_js_url = sig.parameters.get(\"swagger_js_url\").default  # type: ignore\n    swagger_css_url = sig.parameters.get(\"swagger_css_url\").default  # type: ignore\n    swagger_favicon_url = sig.parameters.get(\"swagger_favicon_url\").default  # type: ignore\n    html = get_swagger_ui_html(openapi_url=\"/docs\", title=\"title\")\n    body_content = html.body.decode()\n    assert swagger_js_url in body_content\n    assert swagger_css_url in body_content\n    assert swagger_favicon_url in body_content",
    "repo": "fastapi",
    "path": "tests\\test_local_docs.py",
    "type": "function",
    "name": "test_strings_in_generated_swagger",
    "loc": 6,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_local_docs.py:function:test_strings_in_custom_swagger:chunk1",
    "text": "def test_strings_in_custom_swagger():\n    swagger_js_url = \"swagger_fake_file.js\"\n    swagger_css_url = \"swagger_fake_file.css\"\n    swagger_favicon_url = \"swagger_fake_file.png\"\n    html = get_swagger_ui_html(\n        openapi_url=\"/docs\",\n        title=\"title\",\n        swagger_js_url=swagger_js_url,\n        swagger_css_url=swagger_css_url,\n        swagger_favicon_url=swagger_favicon_url,\n    )\n    body_content = html.body.decode()\n    assert swagger_js_url in body_content\n    assert swagger_css_url in body_content\n    assert swagger_favicon_url in body_content",
    "repo": "fastapi",
    "path": "tests\\test_local_docs.py",
    "type": "function",
    "name": "test_strings_in_custom_swagger",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_local_docs.py:function:test_strings_in_generated_redoc:chunk1",
    "text": "def test_strings_in_generated_redoc():\n    sig = inspect.signature(get_redoc_html)\n    redoc_js_url = sig.parameters.get(\"redoc_js_url\").default  # type: ignore\n    redoc_favicon_url = sig.parameters.get(\"redoc_favicon_url\").default  # type: ignore\n    html = get_redoc_html(openapi_url=\"/docs\", title=\"title\")\n    body_content = html.body.decode()\n    assert redoc_js_url in body_content\n    assert redoc_favicon_url in body_content",
    "repo": "fastapi",
    "path": "tests\\test_local_docs.py",
    "type": "function",
    "name": "test_strings_in_generated_redoc",
    "loc": 35,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_local_docs.py:function:test_strings_in_custom_redoc:chunk1",
    "text": "def test_strings_in_custom_redoc():\n    redoc_js_url = \"fake_redoc_file.js\"\n    redoc_favicon_url = \"fake_redoc_file.png\"\n    html = get_redoc_html(\n        openapi_url=\"/docs\",\n        title=\"title\",\n        redoc_js_url=redoc_js_url,\n        redoc_favicon_url=redoc_favicon_url,\n    )\n    body_content = html.body.decode()\n    assert redoc_js_url in body_content\n    assert redoc_favicon_url in body_content",
    "repo": "fastapi",
    "path": "tests\\test_local_docs.py",
    "type": "function",
    "name": "test_strings_in_custom_redoc",
    "loc": 45,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_local_docs.py:function:test_google_fonts_in_generated_redoc:chunk1",
    "text": "def test_google_fonts_in_generated_redoc():\n    body_with_google_fonts = get_redoc_html(\n        openapi_url=\"/docs\", title=\"title\"\n    ).body.decode()\n    assert \"fonts.googleapis.com\" in body_with_google_fonts\n    body_without_google_fonts = get_redoc_html(\n        openapi_url=\"/docs\", title=\"title\", with_google_fonts=False\n    ).body.decode()\n    assert \"fonts.googleapis.com\" not in body_without_google_fonts",
    "repo": "fastapi",
    "path": "tests\\test_local_docs.py",
    "type": "function",
    "name": "test_google_fonts_in_generated_redoc",
    "loc": 59,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_multipart_installation.py:function:test_incorrect_multipart_installed_form:chunk1",
    "text": "def test_incorrect_multipart_installed_form(monkeypatch):\n    monkeypatch.setattr(\"python_multipart.__version__\", \"0.0.12\")\n    with warnings.catch_warnings(record=True):\n        warnings.simplefilter(\"always\")\n        monkeypatch.delattr(\"multipart.multipart.parse_options_header\", raising=False)\n    with pytest.raises(RuntimeError, match=multipart_incorrect_install_error):\n        app = FastAPI()\n\n        @app.post(\"/\")\n        async def root(username: str = Form()):\n            return username  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_multipart_installation.py",
    "type": "function",
    "name": "test_incorrect_multipart_installed_form",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_multipart_installation.py:function:test_incorrect_multipart_installed_file_upload:chunk1",
    "text": "def test_incorrect_multipart_installed_file_upload(monkeypatch):\n    monkeypatch.setattr(\"python_multipart.__version__\", \"0.0.12\")\n    with warnings.catch_warnings(record=True):\n        warnings.simplefilter(\"always\")\n        monkeypatch.delattr(\"multipart.multipart.parse_options_header\", raising=False)\n    with pytest.raises(RuntimeError, match=multipart_incorrect_install_error):\n        app = FastAPI()\n\n        @app.post(\"/\")\n        async def root(f: UploadFile = File()):\n            return f  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_multipart_installation.py",
    "type": "function",
    "name": "test_incorrect_multipart_installed_file_upload",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_multipart_installation.py:function:test_incorrect_multipart_installed_file_bytes:chunk1",
    "text": "def test_incorrect_multipart_installed_file_bytes(monkeypatch):\n    monkeypatch.setattr(\"python_multipart.__version__\", \"0.0.12\")\n    with warnings.catch_warnings(record=True):\n        warnings.simplefilter(\"always\")\n        monkeypatch.delattr(\"multipart.multipart.parse_options_header\", raising=False)\n    with pytest.raises(RuntimeError, match=multipart_incorrect_install_error):\n        app = FastAPI()\n\n        @app.post(\"/\")\n        async def root(f: bytes = File()):\n            return f  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_multipart_installation.py",
    "type": "function",
    "name": "test_incorrect_multipart_installed_file_bytes",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_multipart_installation.py:function:test_incorrect_multipart_installed_multi_form:chunk1",
    "text": "def test_incorrect_multipart_installed_multi_form(monkeypatch):\n    monkeypatch.setattr(\"python_multipart.__version__\", \"0.0.12\")\n    with warnings.catch_warnings(record=True):\n        warnings.simplefilter(\"always\")\n        monkeypatch.delattr(\"multipart.multipart.parse_options_header\", raising=False)\n    with pytest.raises(RuntimeError, match=multipart_incorrect_install_error):\n        app = FastAPI()\n\n        @app.post(\"/\")\n        async def root(username: str = Form(), password: str = Form()):\n            return username  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_multipart_installation.py",
    "type": "function",
    "name": "test_incorrect_multipart_installed_multi_form",
    "loc": 50,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_multipart_installation.py:function:test_incorrect_multipart_installed_form_file:chunk1",
    "text": "def test_incorrect_multipart_installed_form_file(monkeypatch):\n    monkeypatch.setattr(\"python_multipart.__version__\", \"0.0.12\")\n    with warnings.catch_warnings(record=True):\n        warnings.simplefilter(\"always\")\n        monkeypatch.delattr(\"multipart.multipart.parse_options_header\", raising=False)\n    with pytest.raises(RuntimeError, match=multipart_incorrect_install_error):\n        app = FastAPI()\n\n        @app.post(\"/\")\n        async def root(username: str = Form(), f: UploadFile = File()):\n            return username  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_multipart_installation.py",
    "type": "function",
    "name": "test_incorrect_multipart_installed_form_file",
    "loc": 63,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_multipart_installation.py:function:test_no_multipart_installed:chunk1",
    "text": "def test_no_multipart_installed(monkeypatch):\n    monkeypatch.setattr(\"python_multipart.__version__\", \"0.0.12\")\n    with warnings.catch_warnings(record=True):\n        warnings.simplefilter(\"always\")\n        monkeypatch.delattr(\"multipart.__version__\", raising=False)\n        with pytest.raises(RuntimeError, match=multipart_not_installed_error):\n            app = FastAPI()\n\n            @app.post(\"/\")\n            async def root(username: str = Form()):\n                return username  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_multipart_installation.py",
    "type": "function",
    "name": "test_no_multipart_installed",
    "loc": 76,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_multipart_installation.py:function:test_no_multipart_installed_file:chunk1",
    "text": "def test_no_multipart_installed_file(monkeypatch):\n    monkeypatch.setattr(\"python_multipart.__version__\", \"0.0.12\")\n    with warnings.catch_warnings(record=True):\n        warnings.simplefilter(\"always\")\n        monkeypatch.delattr(\"multipart.__version__\", raising=False)\n        with pytest.raises(RuntimeError, match=multipart_not_installed_error):\n            app = FastAPI()\n\n            @app.post(\"/\")\n            async def root(f: UploadFile = File()):\n                return f  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_multipart_installation.py",
    "type": "function",
    "name": "test_no_multipart_installed_file",
    "loc": 89,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_multipart_installation.py:function:test_no_multipart_installed_file_bytes:chunk1",
    "text": "def test_no_multipart_installed_file_bytes(monkeypatch):\n    monkeypatch.setattr(\"python_multipart.__version__\", \"0.0.12\")\n    with warnings.catch_warnings(record=True):\n        warnings.simplefilter(\"always\")\n        monkeypatch.delattr(\"multipart.__version__\", raising=False)\n        with pytest.raises(RuntimeError, match=multipart_not_installed_error):\n            app = FastAPI()\n\n            @app.post(\"/\")\n            async def root(f: bytes = File()):\n                return f  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_multipart_installation.py",
    "type": "function",
    "name": "test_no_multipart_installed_file_bytes",
    "loc": 102,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_multipart_installation.py:function:test_no_multipart_installed_multi_form:chunk1",
    "text": "def test_no_multipart_installed_multi_form(monkeypatch):\n    monkeypatch.setattr(\"python_multipart.__version__\", \"0.0.12\")\n    with warnings.catch_warnings(record=True):\n        warnings.simplefilter(\"always\")\n        monkeypatch.delattr(\"multipart.__version__\", raising=False)\n        with pytest.raises(RuntimeError, match=multipart_not_installed_error):\n            app = FastAPI()\n\n            @app.post(\"/\")\n            async def root(username: str = Form(), password: str = Form()):\n                return username  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_multipart_installation.py",
    "type": "function",
    "name": "test_no_multipart_installed_multi_form",
    "loc": 115,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_multipart_installation.py:function:test_no_multipart_installed_form_file:chunk1",
    "text": "def test_no_multipart_installed_form_file(monkeypatch):\n    monkeypatch.setattr(\"python_multipart.__version__\", \"0.0.12\")\n    with warnings.catch_warnings(record=True):\n        warnings.simplefilter(\"always\")\n        monkeypatch.delattr(\"multipart.__version__\", raising=False)\n        with pytest.raises(RuntimeError, match=multipart_not_installed_error):\n            app = FastAPI()\n\n            @app.post(\"/\")\n            async def root(username: str = Form(), f: UploadFile = File()):\n                return username  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_multipart_installation.py",
    "type": "function",
    "name": "test_no_multipart_installed_form_file",
    "loc": 128,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_multipart_installation.py:function:test_old_multipart_installed:chunk1",
    "text": "def test_old_multipart_installed(monkeypatch):\n    monkeypatch.setattr(\"python_multipart.__version__\", \"0.0.12\")\n    with warnings.catch_warnings(record=True):\n        warnings.simplefilter(\"always\")\n        app = FastAPI()\n\n        @app.post(\"/\")\n        async def root(username: str = Form()):\n            return username  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_multipart_installation.py",
    "type": "function",
    "name": "test_old_multipart_installed",
    "loc": 141,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_multi_body_errors.py:function:save_item_no_body:chunk1",
    "text": "def save_item_no_body(item: List[Item]):\n    return {\"item\": item}",
    "repo": "fastapi",
    "path": "tests\\test_multi_body_errors.py",
    "type": "function",
    "name": "save_item_no_body",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_multi_body_errors.py:function:test_put_correct_body:chunk1",
    "text": "def test_put_correct_body():\n    response = client.post(\"/items/\", json=[{\"name\": \"Foo\", \"age\": 5}])\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"item\": [\n            {\n                \"name\": \"Foo\",\n                \"age\": IsOneOf(\n                    5,\n                    # TODO: remove when deprecating Pydantic v1\n                    \"5\",\n                ),\n            }\n        ]\n    }",
    "repo": "fastapi",
    "path": "tests\\test_multi_body_errors.py",
    "type": "function",
    "name": "test_put_correct_body",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_multi_body_errors.py:function:test_jsonable_encoder_requiring_error:chunk1",
    "text": "def test_jsonable_encoder_requiring_error():\n    response = client.post(\"/items/\", json=[{\"name\": \"Foo\", \"age\": -1.0}])\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"greater_than\",\n                    \"loc\": [\"body\", 0, \"age\"],\n                    \"msg\": \"Input should be greater than 0\",\n                    \"input\": -1.0,\n                    \"ctx\": {\"gt\": 0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"ctx\": {\"limit_value\": 0.0},\n                    \"loc\": [\"body\", 0, \"age\"],\n                    \"msg\": \"ensure this value is greater than 0\",\n                    \"type\": \"value_error.number.not_gt\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_multi_body_errors.py",
    "type": "function",
    "name": "test_jsonable_encoder_requiring_error",
    "loc": 42,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_multi_body_errors.py:function:test_put_incorrect_body_multiple:chunk1",
    "text": "def test_put_incorrect_body_multiple():\n    response = client.post(\"/items/\", json=[{\"age\": \"five\"}, {\"age\": \"six\"}])\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", 0, \"name\"],\n                    \"msg\": \"Field required\",\n                    \"input\": {\"age\": \"five\"},\n                },\n                {\n                    \"type\": \"decimal_parsing\",\n                    \"loc\": [\"body\", 0, \"age\"],\n                    \"msg\": \"Input should be a valid decimal\",\n                    \"input\": \"five\",\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", 1, \"name\"],\n                    \"msg\": \"Field required\",\n                    \"input\": {\"age\": \"six\"},\n                },\n                {\n                    \"type\": \"decimal_parsing\",\n                    \"loc\": [\"body\", 1, \"age\"],\n                    \"msg\": \"Input should be a valid decimal\",\n                    \"input\": \"six\",\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", 0, \"name\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", 0, \"age\"],\n                    \"msg\": \"value is not a valid decimal\",\n                    \"type\": \"type_error.decimal\",\n                },\n                {\n                    \"loc\": [\"body\", 1, \"name\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", 1, \"age\"],\n                    \"msg\": \"value is not a valid decimal\",\n                    \"type\": \"type_error.decimal\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_multi_body_errors.py",
    "type": "function",
    "name": "test_put_incorrect_body_multiple",
    "loc": 72,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_multi_body_errors.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Save Item No Body\",\n                    \"operationId\": \"save_item_no_body_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"title\": \"Item\",\n                                    \"type\": \"array\",\n                                    \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"age\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"age\": IsDict(\n                            {\n                                \"title\": \"Age\",\n                                \"anyOf\": [\n                                    {\"exclusiveMinimum\": 0.0, \"type\": \"number\"},\n                                    {\"type\": \"string\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Age\",\n                                \"exclusiveMinimum\": 0.0,\n                                \"type\": \"number\",\n                            }\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_multi_body_errors.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 133,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_multi_body_errors.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    age: condecimal(gt=Decimal(0.0))  # type: ignore",
    "repo": "fastapi",
    "path": "tests\\test_multi_body_errors.py",
    "type": "class",
    "name": "Item",
    "loc": 12,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_multi_query_errors.py:function:read_items:chunk1",
    "text": "def read_items(q: List[int] = Query(default=None)):\n    return {\"q\": q}",
    "repo": "fastapi",
    "path": "tests\\test_multi_query_errors.py",
    "type": "function",
    "name": "read_items",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_multi_query_errors.py:function:test_multi_query:chunk1",
    "text": "def test_multi_query():\n    response = client.get(\"/items/?q=5&q=6\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [5, 6]}",
    "repo": "fastapi",
    "path": "tests\\test_multi_query_errors.py",
    "type": "function",
    "name": "test_multi_query",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_multi_query_errors.py:function:test_multi_query_incorrect:chunk1",
    "text": "def test_multi_query_incorrect():\n    response = client.get(\"/items/?q=five&q=six\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"query\", \"q\", 0],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"five\",\n                },\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"query\", \"q\", 1],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"six\",\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"q\", 0],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                },\n                {\n                    \"loc\": [\"query\", \"q\", 1],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_multi_query_errors.py",
    "type": "function",
    "name": "test_multi_query_incorrect",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_multi_query_errors.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Q\",\n                                \"type\": \"array\",\n                                \"items\": {\"type\": \"integer\"},\n                            },\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_multi_query_errors.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 63,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_no_swagger_ui_redirect.py:function:test_swagger_ui:chunk1",
    "text": "def test_swagger_ui():\n    response = client.get(\"/docs\")\n    assert response.status_code == 200, response.text\n    assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n    assert \"swagger-ui-dist\" in response.text\n    print(client.base_url)\n    assert \"oauth2RedirectUrl\" not in response.text",
    "repo": "fastapi",
    "path": "tests\\test_no_swagger_ui_redirect.py",
    "type": "function",
    "name": "test_swagger_ui",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_no_swagger_ui_redirect.py:function:test_swagger_ui_no_oauth2_redirect:chunk1",
    "text": "def test_swagger_ui_no_oauth2_redirect():\n    response = client.get(\"/docs/oauth2-redirect\")\n    assert response.status_code == 404, response.text",
    "repo": "fastapi",
    "path": "tests\\test_no_swagger_ui_redirect.py",
    "type": "function",
    "name": "test_swagger_ui_no_oauth2_redirect",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_no_swagger_ui_redirect.py:function:test_response:chunk1",
    "text": "def test_response():\n    response = client.get(\"/items/\")\n    assert response.json() == {\"id\": \"foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_no_swagger_ui_redirect.py",
    "type": "function",
    "name": "test_response",
    "loc": 29,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_examples.py:function:examples:chunk1",
    "text": "def examples(\n    item: Item = Body(\n        examples=[\n            {\"data\": \"Data in Body examples, example1\"},\n        ],\n        openapi_examples={\n            \"Example One\": {\n                \"summary\": \"Example One Summary\",\n                \"description\": \"Example One Description\",\n                \"value\": {\"data\": \"Data in Body examples, example1\"},\n            },\n            \"Example Two\": {\n                \"value\": {\"data\": \"Data in Body examples, example2\"},\n            },\n        },\n    ),\n):\n    return item",
    "repo": "fastapi",
    "path": "tests\\test_openapi_examples.py",
    "type": "function",
    "name": "examples",
    "loc": 16,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_examples.py:function:path_examples:chunk1",
    "text": "def path_examples(\n    item_id: str = Path(\n        examples=[\n            \"json_schema_item_1\",\n            \"json_schema_item_2\",\n        ],\n        openapi_examples={\n            \"Path One\": {\n                \"summary\": \"Path One Summary\",\n                \"description\": \"Path One Description\",\n                \"value\": \"item_1\",\n            },\n            \"Path Two\": {\n                \"value\": \"item_2\",\n            },\n        },\n    ),\n):\n    return item_id",
    "repo": "fastapi",
    "path": "tests\\test_openapi_examples.py",
    "type": "function",
    "name": "path_examples",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_examples.py:function:query_examples:chunk1",
    "text": "def query_examples(\n    data: Union[str, None] = Query(\n        default=None,\n        examples=[\n            \"json_schema_query1\",\n            \"json_schema_query2\",\n        ],\n        openapi_examples={\n            \"Query One\": {\n                \"summary\": \"Query One Summary\",\n                \"description\": \"Query One Description\",\n                \"value\": \"query1\",\n            },\n            \"Query Two\": {\n                \"value\": \"query2\",\n            },\n        },\n    ),\n):\n    return data",
    "repo": "fastapi",
    "path": "tests\\test_openapi_examples.py",
    "type": "function",
    "name": "query_examples",
    "loc": 59,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_examples.py:function:header_examples:chunk1",
    "text": "def header_examples(\n    data: Union[str, None] = Header(\n        default=None,\n        examples=[\n            \"json_schema_header1\",\n            \"json_schema_header2\",\n        ],\n        openapi_examples={\n            \"Header One\": {\n                \"summary\": \"Header One Summary\",\n                \"description\": \"Header One Description\",\n                \"value\": \"header1\",\n            },\n            \"Header Two\": {\n                \"value\": \"header2\",\n            },\n        },\n    ),\n):\n    return data",
    "repo": "fastapi",
    "path": "tests\\test_openapi_examples.py",
    "type": "function",
    "name": "header_examples",
    "loc": 82,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_examples.py:function:cookie_examples:chunk1",
    "text": "def cookie_examples(\n    data: Union[str, None] = Cookie(\n        default=None,\n        examples=[\"json_schema_cookie1\", \"json_schema_cookie2\"],\n        openapi_examples={\n            \"Cookie One\": {\n                \"summary\": \"Cookie One Summary\",\n                \"description\": \"Cookie One Description\",\n                \"value\": \"cookie1\",\n            },\n            \"Cookie Two\": {\n                \"value\": \"cookie2\",\n            },\n        },\n    ),\n):\n    return data",
    "repo": "fastapi",
    "path": "tests\\test_openapi_examples.py",
    "type": "function",
    "name": "cookie_examples",
    "loc": 105,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_examples.py:function:test_call_api:chunk1",
    "text": "def test_call_api():\n    response = client.post(\"/examples/\", json={\"data\": \"example1\"})\n    assert response.status_code == 200, response.text\n\n    response = client.get(\"/path_examples/foo\")\n    assert response.status_code == 200, response.text\n\n    response = client.get(\"/query_examples/\")\n    assert response.status_code == 200, response.text\n\n    response = client.get(\"/header_examples/\")\n    assert response.status_code == 200, response.text\n\n    response = client.get(\"/cookie_examples/\")\n    assert response.status_code == 200, response.text",
    "repo": "fastapi",
    "path": "tests\\test_openapi_examples.py",
    "type": "function",
    "name": "test_call_api",
    "loc": 127,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_examples.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/examples/\": {\n                \"post\": {\n                    \"summary\": \"Examples\",\n                    \"operationId\": \"examples_examples__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"$ref\": \"#/components/schemas/Item\",\n                                        \"examples\": [\n                                            {\"data\": \"Data in Body examples, example1\"}\n                                        ],\n                                    }\n                                )\n                                | IsDict(\n                                    {\n                                        # TODO: remove when deprecating Pydantic v1\n                                        \"allOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"}\n                                        ],\n                                        \"title\": \"Item\",\n                                        \"examples\": [\n                                            {\"data\": \"Data in Body examples, example1\"}\n                                        ],\n                                    }\n                                ),\n                                \"examples\": {\n                                    \"Example One\": {\n                                        \"summary\": \"Example One Summary\",\n                                        \"description\": \"Example One Description\",\n                                        \"value\": {\n                                            \"data\": \"Data in Body examples, example1\"\n                                        },\n                                    },\n                                    \"Example Two\": {\n                                        \"value\": {\n                                            \"data\": \"Data in Body examples, example2\"\n                                        }\n                                    },\n                                },\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/path_examples/{item_id}\": {\n                \"get\": {\n                    \"summary\": \"Path Examples\",\n                    \"operationId\": \"path_examples_path_examples__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                            \"required\": True,\n                            \"schema\": {\n                                \"type\": \"string\",\n                                \"examples\": [\n                                    \"json_schema_item_1\",\n                                    \"json_schema_item_2\",\n                                ],\n                                \"title\": \"Item Id\",\n                            },\n                            \"examples\": {\n                                \"Path One\": {\n                                    \"summary\": \"Path One Summary\",\n                                    \"description\": \"Path One Description\",\n                                    \"value\": \"item_1\",\n                                },\n                                \"Path Two\": {\"value\": \"item_2\"},\n                            },\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/query_examples/\": {\n                \"get\": {\n                    \"summary\": \"Query Examples\",\n                    \"operationId\": \"query_examples_query_examples__get\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"data\",\n                            \"in\": \"query\",\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"examples\": [\n                                        \"json_schema_query1\",\n                                        \"json_schema_query2\",\n                                    ],\n                                    \"title\": \"Data\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"examples\": [\n                                        \"json_schema_query1\",\n                                        \"json_schema_query2\",\n                                    ],\n                                    \"type\": \"string\",\n                                    \"title\": \"Data\",\n                                }\n                            ),\n                            \"examples\": {\n                                \"Query One\": {\n                                    \"summary\": \"Query One Summary\",\n                                    \"description\": \"Query One Description\",\n                                    \"value\": \"query1\",\n                                },\n                                \"Query Two\": {\"value\": \"query2\"},\n                            },\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/header_examples/\": {\n                \"get\": {\n                    \"summary\": \"Header Examples\",\n                    \"operationId\": \"header_examples_header_examples__get\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"data\",\n                            \"in\": \"header\",\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"examples\": [\n                                        \"json_schema_header1\",\n                                        \"json_schema_header2\",\n                                    ],\n                                    \"title\": \"Data\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"type\": \"string\",\n                                    \"examples\": [\n                                        \"json_schema_header1\",\n                                        \"json_schema_header2\",\n                                    ],\n                                    \"title\": \"Data\",\n                                }\n                            ),\n                            \"examples\": {\n                                \"Header One\": {\n                                    \"summary\": \"Header One Summary\",\n                                    \"description\": \"Header One Description\",\n                                    \"value\": \"header1\",\n                                },\n                                \"Header Two\": {\"value\": \"header2\"},\n                            },\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/cookie_examples/\": {\n                \"get\": {\n                    \"summary\": \"Cookie Examples\",\n                    \"operationId\": \"cookie_examples_cookie_examples__get\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"data\",\n                            \"in\": \"cookie\",\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"examples\": [\n                                        \"json_schema_cookie1\",\n                                        \"json_schema_cookie2\",\n                                    ],\n                                    \"title\": \"Data\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"type\": \"string\",\n                                    \"examples\": [\n                                        \"json_schema_cookie1\",\n                                        \"json_schema_cookie2\",\n                                    ],\n                                    \"title\": \"Data\",\n                                }\n                            ),\n                            \"examples\": {\n                                \"Cookie One\": {\n                                    \"summary\": \"Cookie One Summary\",\n                                    \"description\": \"Cookie One Description\",\n                                    \"value\": \"cookie1\",\n                                },\n                                \"Cookie Two\": {\"value\": \"cookie2\"},\n                            },\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Item\": {\n                    \"properties\": {\"data\": {\"type\": \"string\", \"title\": \"Data\"}},\n                    \"type\": \"object\",\n                    \"required\": [\"data\"],\n                    \"title\": \"Item\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_openapi_examples.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 144,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_examples.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    data: str",
    "repo": "fastapi",
    "path": "tests\\test_openapi_examples.py",
    "type": "class",
    "name": "Item",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_query_parameter_extension.py:function:route_with_extra_query_parameters:chunk1",
    "text": "def route_with_extra_query_parameters(standard_query_param: Optional[int] = 50):\n    return {}",
    "repo": "fastapi",
    "path": "tests\\test_openapi_query_parameter_extension.py",
    "type": "function",
    "name": "route_with_extra_query_parameters",
    "loc": 29,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_query_parameter_extension.py:function:test_get_route:chunk1",
    "text": "def test_get_route():\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {}",
    "repo": "fastapi",
    "path": "tests\\test_openapi_query_parameter_extension.py",
    "type": "function",
    "name": "test_get_route",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_query_parameter_extension.py:function:test_openapi:chunk1",
    "text": "def test_openapi():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"get\": {\n                    \"summary\": \"Route With Extra Query Parameters\",\n                    \"operationId\": \"route_with_extra_query_parameters__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}],\n                                    \"default\": 50,\n                                    \"title\": \"Standard Query Param\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Standard Query Param\",\n                                    \"type\": \"integer\",\n                                    \"default\": 50,\n                                }\n                            ),\n                            \"name\": \"standard_query_param\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\"title\": \"Extra Param 1\"},\n                            \"name\": \"extra_param_1\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Extra Param 2\"},\n                            \"name\": \"extra_param_2\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_openapi_query_parameter_extension.py",
    "type": "function",
    "name": "test_openapi",
    "loc": 42,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_route_extensions.py:function:route_with_extras:chunk1",
    "text": "def route_with_extras():\n    return {}",
    "repo": "fastapi",
    "path": "tests\\test_openapi_route_extensions.py",
    "type": "function",
    "name": "route_with_extras",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_route_extensions.py:function:test_get_route:chunk1",
    "text": "def test_get_route():\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {}",
    "repo": "fastapi",
    "path": "tests\\test_openapi_route_extensions.py",
    "type": "function",
    "name": "test_get_route",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_route_extensions.py:function:test_openapi:chunk1",
    "text": "def test_openapi():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                    },\n                    \"summary\": \"Route With Extras\",\n                    \"operationId\": \"route_with_extras__get\",\n                    \"x-custom-extension\": \"value\",\n                }\n            },\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_openapi_route_extensions.py",
    "type": "function",
    "name": "test_openapi",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_separate_input_output_schemas.py:function:get_app_client:chunk1",
    "text": "def get_app_client(separate_input_output_schemas: bool = True) -> TestClient:\n    app = FastAPI(separate_input_output_schemas=separate_input_output_schemas)\n\n    @app.post(\"/items/\", responses={402: {\"model\": Item}})\n    def create_item(item: Item) -> Item:\n        return item\n\n    @app.post(\"/items-list/\")\n    def create_item_list(item: List[Item]):\n        return item\n\n    @app.get(\"/items/\")\n    def read_items() -> List[Item]:\n        return [\n            Item(\n                name=\"Portal Gun\",\n                description=\"Device to travel through the multi-rick-verse\",\n                sub=SubItem(subname=\"subname\"),\n            ),\n            Item(name=\"Plumbus\"),\n        ]\n\n    client = TestClient(app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_openapi_separate_input_output_schemas.py",
    "type": "function",
    "name": "get_app_client",
    "loc": 26,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_separate_input_output_schemas.py:function:create_item:chunk1",
    "text": "def create_item(item: Item) -> Item:\n        return item",
    "repo": "fastapi",
    "path": "tests\\test_openapi_separate_input_output_schemas.py",
    "type": "function",
    "name": "create_item",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_separate_input_output_schemas.py:function:create_item_list:chunk1",
    "text": "def create_item_list(item: List[Item]):\n        return item",
    "repo": "fastapi",
    "path": "tests\\test_openapi_separate_input_output_schemas.py",
    "type": "function",
    "name": "create_item_list",
    "loc": 34,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_separate_input_output_schemas.py:function:read_items:chunk1",
    "text": "def read_items() -> List[Item]:\n        return [\n            Item(\n                name=\"Portal Gun\",\n                description=\"Device to travel through the multi-rick-verse\",\n                sub=SubItem(subname=\"subname\"),\n            ),\n            Item(name=\"Plumbus\"),\n        ]",
    "repo": "fastapi",
    "path": "tests\\test_openapi_separate_input_output_schemas.py",
    "type": "function",
    "name": "read_items",
    "loc": 38,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_separate_input_output_schemas.py:function:test_create_item:chunk1",
    "text": "def test_create_item():\n    client = get_app_client()\n    client_no = get_app_client(separate_input_output_schemas=False)\n    response = client.post(\"/items/\", json={\"name\": \"Plumbus\"})\n    response2 = client_no.post(\"/items/\", json={\"name\": \"Plumbus\"})\n    assert response.status_code == response2.status_code == 200, response.text\n    assert (\n        response.json()\n        == response2.json()\n        == {\"name\": \"Plumbus\", \"description\": None, \"sub\": None}\n    )",
    "repo": "fastapi",
    "path": "tests\\test_openapi_separate_input_output_schemas.py",
    "type": "function",
    "name": "test_create_item",
    "loc": 52,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_separate_input_output_schemas.py:function:test_create_item_with_sub:chunk1",
    "text": "def test_create_item_with_sub():\n    client = get_app_client()\n    client_no = get_app_client(separate_input_output_schemas=False)\n    data = {\n        \"name\": \"Plumbus\",\n        \"sub\": {\"subname\": \"SubPlumbus\", \"sub_description\": \"Sub WTF\"},\n    }\n    response = client.post(\"/items/\", json=data)\n    response2 = client_no.post(\"/items/\", json=data)\n    assert response.status_code == response2.status_code == 200, response.text\n    assert (\n        response.json()\n        == response2.json()\n        == {\n            \"name\": \"Plumbus\",\n            \"description\": None,\n            \"sub\": {\"subname\": \"SubPlumbus\", \"sub_description\": \"Sub WTF\", \"tags\": []},\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_openapi_separate_input_output_schemas.py",
    "type": "function",
    "name": "test_create_item_with_sub",
    "loc": 65,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_separate_input_output_schemas.py:function:test_create_item_list:chunk1",
    "text": "def test_create_item_list():\n    client = get_app_client()\n    client_no = get_app_client(separate_input_output_schemas=False)\n    data = [\n        {\"name\": \"Plumbus\"},\n        {\n            \"name\": \"Portal Gun\",\n            \"description\": \"Device to travel through the multi-rick-verse\",\n        },\n    ]\n    response = client.post(\"/items-list/\", json=data)\n    response2 = client_no.post(\"/items-list/\", json=data)\n    assert response.status_code == response2.status_code == 200, response.text\n    assert (\n        response.json()\n        == response2.json()\n        == [\n            {\"name\": \"Plumbus\", \"description\": None, \"sub\": None},\n            {\n                \"name\": \"Portal Gun\",\n                \"description\": \"Device to travel through the multi-rick-verse\",\n                \"sub\": None,\n            },\n        ]\n    )",
    "repo": "fastapi",
    "path": "tests\\test_openapi_separate_input_output_schemas.py",
    "type": "function",
    "name": "test_create_item_list",
    "loc": 86,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_separate_input_output_schemas.py:function:test_read_items:chunk1",
    "text": "def test_read_items():\n    client = get_app_client()\n    client_no = get_app_client(separate_input_output_schemas=False)\n    response = client.get(\"/items/\")\n    response2 = client_no.get(\"/items/\")\n    assert response.status_code == response2.status_code == 200, response.text\n    assert (\n        response.json()\n        == response2.json()\n        == [\n            {\n                \"name\": \"Portal Gun\",\n                \"description\": \"Device to travel through the multi-rick-verse\",\n                \"sub\": {\"subname\": \"subname\", \"sub_description\": None, \"tags\": []},\n            },\n            {\"name\": \"Plumbus\", \"description\": None, \"sub\": None},\n        ]\n    )",
    "repo": "fastapi",
    "path": "tests\\test_openapi_separate_input_output_schemas.py",
    "type": "function",
    "name": "test_read_items",
    "loc": 113,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_separate_input_output_schemas.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    client = get_app_client()\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Item-Output\"\n                                        },\n                                        \"type\": \"array\",\n                                        \"title\": \"Response Read Items Items  Get\",\n                                    }\n                                }\n                            },\n                        }\n                    },\n                },\n                \"post\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item-Input\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/Item-Output\"\n                                    }\n                                }\n                            },\n                        },\n                        \"402\": {\n                            \"description\": \"Payment Required\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/Item-Output\"\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                },\n            },\n            \"/items-list/\": {\n                \"post\": {\n                    \"summary\": \"Create Item List\",\n                    \"operationId\": \"create_item_list_items_list__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/Item-Input\"\n                                    },\n                                    \"type\": \"array\",\n                                    \"title\": \"Item\",\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Item-Input\": {\n                    \"properties\": {\n                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                        \"sub\": {\n                            \"anyOf\": [\n                                {\"$ref\": \"#/components/schemas/SubItem-Input\"},\n                                {\"type\": \"null\"},\n                            ]\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"name\"],\n                    \"title\": \"Item\",\n                },\n                \"Item-Output\": {\n                    \"properties\": {\n                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                        \"sub\": {\n                            \"anyOf\": [\n                                {\"$ref\": \"#/components/schemas/SubItem-Output\"},\n                                {\"type\": \"null\"},\n                            ]\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"name\", \"description\", \"sub\"],\n                    \"title\": \"Item\",\n                },\n                \"SubItem-Input\": {\n                    \"properties\": {\n                        \"subname\": {\"type\": \"string\", \"title\": \"Subname\"},\n                        \"sub_description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Sub Description\",\n                        },\n                        \"tags\": {\n                            \"items\": {\"type\": \"string\"},\n                            \"type\": \"array\",\n                            \"title\": \"Tags\",\n                            \"default\": [],\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"subname\"],\n                    \"title\": \"SubItem\",\n                },\n                \"SubItem-Output\": {\n                    \"properties\": {\n                        \"subname\": {\"type\": \"string\", \"title\": \"Subname\"},\n                        \"sub_description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Sub Description\",\n                        },\n                        \"tags\": {\n                            \"items\": {\"type\": \"string\"},\n                            \"type\": \"array\",\n                            \"title\": \"Tags\",\n                            \"default\": [],\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"subname\", \"sub_description\", \"tags\"],\n                    \"title\": \"SubItem\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_openapi_separate_input_output_schemas.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 134,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_separate_input_output_schemas.py:function:test_openapi_schema_no_separate:chunk1",
    "text": "def test_openapi_schema_no_separate():\n    client = get_app_client(separate_input_output_schemas=False)\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                        \"type\": \"array\",\n                                        \"title\": \"Response Read Items Items  Get\",\n                                    }\n                                }\n                            },\n                        }\n                    },\n                },\n                \"post\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"402\": {\n                            \"description\": \"Payment Required\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                },\n            },\n            \"/items-list/\": {\n                \"post\": {\n                    \"summary\": \"Create Item List\",\n                    \"operationId\": \"create_item_list_items_list__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    \"type\": \"array\",\n                                    \"title\": \"Item\",\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Item\": {\n                    \"properties\": {\n                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                        \"sub\": {\n                            \"anyOf\": [\n                                {\"$ref\": \"#/components/schemas/SubItem\"},\n                                {\"type\": \"null\"},\n                            ]\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"name\"],\n                    \"title\": \"Item\",\n                },\n                \"SubItem\": {\n                    \"properties\": {\n                        \"subname\": {\"type\": \"string\", \"title\": \"Subname\"},\n                        \"sub_description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Sub Description\",\n                        },\n                        \"tags\": {\n                            \"items\": {\"type\": \"string\"},\n                            \"type\": \"array\",\n                            \"title\": \"Tags\",\n                            \"default\": [],\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"subname\"],\n                    \"title\": \"SubItem\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_openapi_separate_input_output_schemas.py",
    "type": "function",
    "name": "test_openapi_schema_no_separate",
    "loc": 352,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_separate_input_output_schemas.py:class:SubItem:chunk1",
    "text": "class SubItem(BaseModel):\n    subname: str\n    sub_description: Optional[str] = None\n    tags: List[str] = []\n    if PYDANTIC_V2:\n        model_config = {\"json_schema_serialization_defaults_required\": True}",
    "repo": "fastapi",
    "path": "tests\\test_openapi_separate_input_output_schemas.py",
    "type": "class",
    "name": "SubItem",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_separate_input_output_schemas.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n    sub: Optional[SubItem] = None\n    if PYDANTIC_V2:\n        model_config = {\"json_schema_serialization_defaults_required\": True}",
    "repo": "fastapi",
    "path": "tests\\test_openapi_separate_input_output_schemas.py",
    "type": "class",
    "name": "Item",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_servers.py:function:foo:chunk1",
    "text": "def foo():\n    return {\"message\": \"Hello World\"}",
    "repo": "fastapi",
    "path": "tests\\test_openapi_servers.py",
    "type": "function",
    "name": "foo",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_servers.py:function:test_app:chunk1",
    "text": "def test_app():\n    response = client.get(\"/foo\")\n    assert response.status_code == 200, response.text",
    "repo": "fastapi",
    "path": "tests\\test_openapi_servers.py",
    "type": "function",
    "name": "test_app",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_openapi_servers.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"servers\": [\n            {\"url\": \"/\", \"description\": \"Default, relative server\"},\n            {\n                \"url\": IsOneOf(\n                    \"http://staging.localhost.tiangolo.com:8000/\",\n                    # TODO: remove when deprecating Pydantic v1\n                    \"http://staging.localhost.tiangolo.com:8000\",\n                ),\n                \"description\": \"Staging but actually localhost still\",\n            },\n            {\n                \"url\": IsOneOf(\n                    \"https://prod.example.com/\",\n                    # TODO: remove when deprecating Pydantic v1\n                    \"https://prod.example.com\",\n                )\n            },\n        ],\n        \"paths\": {\n            \"/foo\": {\n                \"get\": {\n                    \"summary\": \"Foo\",\n                    \"operationId\": \"foo_foo_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_openapi_servers.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_operations_signatures.py:function:test_signatures_consistency:chunk1",
    "text": "def test_signatures_consistency():\n    base_sig = inspect.signature(APIRouter.get)\n    for method_name in method_names:\n        router_method = getattr(APIRouter, method_name)\n        app_method = getattr(FastAPI, method_name)\n        router_sig = inspect.signature(router_method)\n        app_sig = inspect.signature(app_method)\n        param: inspect.Parameter\n        for key, param in base_sig.parameters.items():\n            router_param: inspect.Parameter = router_sig.parameters[key]\n            app_param: inspect.Parameter = app_sig.parameters[key]\n            assert param.annotation == router_param.annotation\n            assert param.annotation == app_param.annotation\n            assert param.default == router_param.default\n            assert param.default == app_param.default",
    "repo": "fastapi",
    "path": "tests\\test_operations_signatures.py",
    "type": "function",
    "name": "test_signatures_consistency",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_orjson_response_class.py:function:get_orjson_non_str_keys:chunk1",
    "text": "def get_orjson_non_str_keys():\n    key = quoted_name(value=\"msg\", quote=False)\n    return {key: \"Hello World\", 1: 1}",
    "repo": "fastapi",
    "path": "tests\\test_orjson_response_class.py",
    "type": "function",
    "name": "get_orjson_non_str_keys",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_orjson_response_class.py:function:test_orjson_non_str_keys:chunk1",
    "text": "def test_orjson_non_str_keys():\n    with client:\n        response = client.get(\"/orjson_non_str_keys\")\n    assert response.json() == {\"msg\": \"Hello World\", \"1\": 1}",
    "repo": "fastapi",
    "path": "tests\\test_orjson_response_class.py",
    "type": "function",
    "name": "test_orjson_non_str_keys",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:get_user:chunk1",
    "text": "def get_user():\n    return {}  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "get_user",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_param_repr_str:chunk1",
    "text": "def test_param_repr_str():\n    assert repr(Param(\"teststr\")) == \"Param(teststr)\"",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_param_repr_str",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_param_repr_none:chunk1",
    "text": "def test_param_repr_none():\n    assert repr(Param(None)) == \"Param(None)\"",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_param_repr_none",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_param_repr_ellipsis:chunk1",
    "text": "def test_param_repr_ellipsis():\n    assert repr(Param(...)) == IsOneOf(\n        \"Param(PydanticUndefined)\",\n        # TODO: remove when deprecating Pydantic v1\n        \"Param(Ellipsis)\",\n    )",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_param_repr_ellipsis",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_param_repr_number:chunk1",
    "text": "def test_param_repr_number():\n    assert repr(Param(1)) == \"Param(1)\"",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_param_repr_number",
    "loc": 29,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_param_repr_list:chunk1",
    "text": "def test_param_repr_list():\n    assert repr(Param([])) == \"Param([])\"",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_param_repr_list",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_path_repr:chunk1",
    "text": "def test_path_repr():\n    assert repr(Path()) == IsOneOf(\n        \"Path(PydanticUndefined)\",\n        # TODO: remove when deprecating Pydantic v1\n        \"Path(Ellipsis)\",\n    )\n    assert repr(Path(...)) == IsOneOf(\n        \"Path(PydanticUndefined)\",\n        # TODO: remove when deprecating Pydantic v1\n        \"Path(Ellipsis)\",\n    )",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_path_repr",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_query_repr_str:chunk1",
    "text": "def test_query_repr_str():\n    assert repr(Query(\"teststr\")) == \"Query(teststr)\"",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_query_repr_str",
    "loc": 50,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_query_repr_none:chunk1",
    "text": "def test_query_repr_none():\n    assert repr(Query(None)) == \"Query(None)\"",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_query_repr_none",
    "loc": 54,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_query_repr_ellipsis:chunk1",
    "text": "def test_query_repr_ellipsis():\n    assert repr(Query(...)) == IsOneOf(\n        \"Query(PydanticUndefined)\",\n        # TODO: remove when deprecating Pydantic v1\n        \"Query(Ellipsis)\",\n    )",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_query_repr_ellipsis",
    "loc": 58,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_query_repr_number:chunk1",
    "text": "def test_query_repr_number():\n    assert repr(Query(1)) == \"Query(1)\"",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_query_repr_number",
    "loc": 66,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_query_repr_list:chunk1",
    "text": "def test_query_repr_list():\n    assert repr(Query([])) == \"Query([])\"",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_query_repr_list",
    "loc": 70,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_header_repr_str:chunk1",
    "text": "def test_header_repr_str():\n    assert repr(Header(\"teststr\")) == \"Header(teststr)\"",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_header_repr_str",
    "loc": 74,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_header_repr_none:chunk1",
    "text": "def test_header_repr_none():\n    assert repr(Header(None)) == \"Header(None)\"",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_header_repr_none",
    "loc": 78,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_header_repr_ellipsis:chunk1",
    "text": "def test_header_repr_ellipsis():\n    assert repr(Header(...)) == IsOneOf(\n        \"Header(PydanticUndefined)\",\n        # TODO: remove when deprecating Pydantic v1\n        \"Header(Ellipsis)\",\n    )",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_header_repr_ellipsis",
    "loc": 82,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_header_repr_number:chunk1",
    "text": "def test_header_repr_number():\n    assert repr(Header(1)) == \"Header(1)\"",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_header_repr_number",
    "loc": 90,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_header_repr_list:chunk1",
    "text": "def test_header_repr_list():\n    assert repr(Header([])) == \"Header([])\"",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_header_repr_list",
    "loc": 94,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_cookie_repr_str:chunk1",
    "text": "def test_cookie_repr_str():\n    assert repr(Cookie(\"teststr\")) == \"Cookie(teststr)\"",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_cookie_repr_str",
    "loc": 98,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_cookie_repr_none:chunk1",
    "text": "def test_cookie_repr_none():\n    assert repr(Cookie(None)) == \"Cookie(None)\"",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_cookie_repr_none",
    "loc": 102,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_cookie_repr_ellipsis:chunk1",
    "text": "def test_cookie_repr_ellipsis():\n    assert repr(Cookie(...)) == IsOneOf(\n        \"Cookie(PydanticUndefined)\",\n        # TODO: remove when deprecating Pydantic v1\n        \"Cookie(Ellipsis)\",\n    )",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_cookie_repr_ellipsis",
    "loc": 106,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_cookie_repr_number:chunk1",
    "text": "def test_cookie_repr_number():\n    assert repr(Cookie(1)) == \"Cookie(1)\"",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_cookie_repr_number",
    "loc": 114,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_cookie_repr_list:chunk1",
    "text": "def test_cookie_repr_list():\n    assert repr(Cookie([])) == \"Cookie([])\"",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_cookie_repr_list",
    "loc": 118,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_body_repr_str:chunk1",
    "text": "def test_body_repr_str():\n    assert repr(Body(\"teststr\")) == \"Body(teststr)\"",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_body_repr_str",
    "loc": 122,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_body_repr_none:chunk1",
    "text": "def test_body_repr_none():\n    assert repr(Body(None)) == \"Body(None)\"",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_body_repr_none",
    "loc": 126,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_body_repr_ellipsis:chunk1",
    "text": "def test_body_repr_ellipsis():\n    assert repr(Body(...)) == IsOneOf(\n        \"Body(PydanticUndefined)\",\n        # TODO: remove when deprecating Pydantic v1\n        \"Body(Ellipsis)\",\n    )",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_body_repr_ellipsis",
    "loc": 130,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_body_repr_number:chunk1",
    "text": "def test_body_repr_number():\n    assert repr(Body(1)) == \"Body(1)\"",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_body_repr_number",
    "loc": 138,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_body_repr_list:chunk1",
    "text": "def test_body_repr_list():\n    assert repr(Body([])) == \"Body([])\"",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_body_repr_list",
    "loc": 142,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_params_repr.py:function:test_depends_repr:chunk1",
    "text": "def test_depends_repr():\n    assert repr(Depends()) == \"Depends(NoneType)\"\n    assert repr(Depends(get_user)) == \"Depends(get_user)\"\n    assert repr(Depends(use_cache=False)) == \"Depends(NoneType, use_cache=False)\"\n    assert (\n        repr(Depends(get_user, use_cache=False)) == \"Depends(get_user, use_cache=False)\"\n    )",
    "repo": "fastapi",
    "path": "tests\\test_params_repr.py",
    "type": "function",
    "name": "test_depends_repr",
    "loc": 146,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_param_class.py:function:read_items:chunk1",
    "text": "def read_items(q: Optional[str] = Param(default=None)):  # type: ignore\n    return {\"q\": q}",
    "repo": "fastapi",
    "path": "tests\\test_param_class.py",
    "type": "function",
    "name": "read_items",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_param_class.py:function:test_default_param_query_none:chunk1",
    "text": "def test_default_param_query_none():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": None}",
    "repo": "fastapi",
    "path": "tests\\test_param_class.py",
    "type": "function",
    "name": "test_default_param_query_none",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_param_class.py:function:test_default_param_query:chunk1",
    "text": "def test_default_param_query():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": \"foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_param_class.py",
    "type": "function",
    "name": "test_default_param_query",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_param_include_in_schema.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == openapi_schema",
    "repo": "fastapi",
    "path": "tests\\test_param_include_in_schema.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 161,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_param_include_in_schema.py:function:test_hidden_cookie:chunk1",
    "text": "def test_hidden_cookie(path, cookies, expected_status, expected_response):\n    client = TestClient(app, cookies=cookies)\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response",
    "repo": "fastapi",
    "path": "tests\\test_param_include_in_schema.py",
    "type": "function",
    "name": "test_hidden_cookie",
    "loc": 185,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_param_include_in_schema.py:function:test_hidden_header:chunk1",
    "text": "def test_hidden_header(path, headers, expected_status, expected_response):\n    client = TestClient(app)\n    response = client.get(path, headers=headers)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response",
    "repo": "fastapi",
    "path": "tests\\test_param_include_in_schema.py",
    "type": "function",
    "name": "test_hidden_header",
    "loc": 209,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_param_include_in_schema.py:function:test_hidden_path:chunk1",
    "text": "def test_hidden_path():\n    client = TestClient(app)\n    response = client.get(\"/hidden_path/hidden_path\")\n    assert response.status_code == 200\n    assert response.json() == {\"hidden_path\": \"hidden_path\"}",
    "repo": "fastapi",
    "path": "tests\\test_param_include_in_schema.py",
    "type": "function",
    "name": "test_hidden_path",
    "loc": 216,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_param_include_in_schema.py:function:test_hidden_query:chunk1",
    "text": "def test_hidden_query(path, expected_status, expected_response):\n    client = TestClient(app)\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response",
    "repo": "fastapi",
    "path": "tests\\test_param_include_in_schema.py",
    "type": "function",
    "name": "test_hidden_query",
    "loc": 238,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_param_in_path_and_dependency.py:function:test_read_users:chunk1",
    "text": "def test_read_users():\n    response = client.get(\"/users/42\")\n    assert response.status_code == 200, response.text",
    "repo": "fastapi",
    "path": "tests\\test_param_in_path_and_dependency.py",
    "type": "function",
    "name": "test_read_users",
    "loc": 19,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_param_in_path_and_dependency.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    data = response.json()\n    assert data == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/{user_id}\": {\n                \"get\": {\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__user_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n                            \"name\": \"user_id\",\n                            \"in\": \"path\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_param_in_path_and_dependency.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_text_get:chunk1",
    "text": "def test_text_get():\n    response = client.get(\"/text\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"Hello World\"",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_text_get",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_nonexistent:chunk1",
    "text": "def test_nonexistent():\n    response = client.get(\"/nonexistent\")\n    assert response.status_code == 404, response.text\n    assert response.json() == {\"detail\": \"Not Found\"}",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_nonexistent",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_foobar:chunk1",
    "text": "def test_path_foobar():\n    response = client.get(\"/path/foobar\")\n    assert response.status_code == 200\n    assert response.json() == \"foobar\"",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_foobar",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_str_foobar:chunk1",
    "text": "def test_path_str_foobar():\n    response = client.get(\"/path/str/foobar\")\n    assert response.status_code == 200\n    assert response.json() == \"foobar\"",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_str_foobar",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_str_42:chunk1",
    "text": "def test_path_str_42():\n    response = client.get(\"/path/str/42\")\n    assert response.status_code == 200\n    assert response.json() == \"42\"",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_str_42",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_str_True:chunk1",
    "text": "def test_path_str_True():\n    response = client.get(\"/path/str/True\")\n    assert response.status_code == 200\n    assert response.json() == \"True\"",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_str_True",
    "loc": 39,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_int_foobar:chunk1",
    "text": "def test_path_int_foobar():\n    response = client.get(\"/path/int/foobar\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"foobar\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_int_foobar",
    "loc": 45,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_int_True:chunk1",
    "text": "def test_path_int_True():\n    response = client.get(\"/path/int/True\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"True\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_int_True",
    "loc": 73,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_int_42:chunk1",
    "text": "def test_path_int_42():\n    response = client.get(\"/path/int/42\")\n    assert response.status_code == 200\n    assert response.json() == 42",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_int_42",
    "loc": 101,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_int_42_5:chunk1",
    "text": "def test_path_int_42_5():\n    response = client.get(\"/path/int/42.5\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"42.5\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_int_42_5",
    "loc": 107,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_float_foobar:chunk1",
    "text": "def test_path_float_foobar():\n    response = client.get(\"/path/float/foobar\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"float_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid number, unable to parse string as a number\",\n                    \"input\": \"foobar\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid float\",\n                    \"type\": \"type_error.float\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_float_foobar",
    "loc": 135,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_float_True:chunk1",
    "text": "def test_path_float_True():\n    response = client.get(\"/path/float/True\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"float_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid number, unable to parse string as a number\",\n                    \"input\": \"True\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid float\",\n                    \"type\": \"type_error.float\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_float_True",
    "loc": 163,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_float_42:chunk1",
    "text": "def test_path_float_42():\n    response = client.get(\"/path/float/42\")\n    assert response.status_code == 200\n    assert response.json() == 42",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_float_42",
    "loc": 191,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_float_42_5:chunk1",
    "text": "def test_path_float_42_5():\n    response = client.get(\"/path/float/42.5\")\n    assert response.status_code == 200\n    assert response.json() == 42.5",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_float_42_5",
    "loc": 197,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_bool_foobar:chunk1",
    "text": "def test_path_bool_foobar():\n    response = client.get(\"/path/bool/foobar\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"bool_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid boolean, unable to interpret input\",\n                    \"input\": \"foobar\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value could not be parsed to a boolean\",\n                    \"type\": \"type_error.bool\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_bool_foobar",
    "loc": 203,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_bool_True:chunk1",
    "text": "def test_path_bool_True():\n    response = client.get(\"/path/bool/True\")\n    assert response.status_code == 200\n    assert response.json() is True",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_bool_True",
    "loc": 231,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_bool_42:chunk1",
    "text": "def test_path_bool_42():\n    response = client.get(\"/path/bool/42\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"bool_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid boolean, unable to interpret input\",\n                    \"input\": \"42\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value could not be parsed to a boolean\",\n                    \"type\": \"type_error.bool\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_bool_42",
    "loc": 237,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_bool_42_5:chunk1",
    "text": "def test_path_bool_42_5():\n    response = client.get(\"/path/bool/42.5\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"bool_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid boolean, unable to interpret input\",\n                    \"input\": \"42.5\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value could not be parsed to a boolean\",\n                    \"type\": \"type_error.bool\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_bool_42_5",
    "loc": 265,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_bool_1:chunk1",
    "text": "def test_path_bool_1():\n    response = client.get(\"/path/bool/1\")\n    assert response.status_code == 200\n    assert response.json() is True",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_bool_1",
    "loc": 293,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_bool_0:chunk1",
    "text": "def test_path_bool_0():\n    response = client.get(\"/path/bool/0\")\n    assert response.status_code == 200\n    assert response.json() is False",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_bool_0",
    "loc": 299,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_bool_true:chunk1",
    "text": "def test_path_bool_true():\n    response = client.get(\"/path/bool/true\")\n    assert response.status_code == 200\n    assert response.json() is True",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_bool_true",
    "loc": 305,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_bool_False:chunk1",
    "text": "def test_path_bool_False():\n    response = client.get(\"/path/bool/False\")\n    assert response.status_code == 200\n    assert response.json() is False",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_bool_False",
    "loc": 311,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_bool_false:chunk1",
    "text": "def test_path_bool_false():\n    response = client.get(\"/path/bool/false\")\n    assert response.status_code == 200\n    assert response.json() is False",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_bool_false",
    "loc": 317,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_foo:chunk1",
    "text": "def test_path_param_foo():\n    response = client.get(\"/path/param/foo\")\n    assert response.status_code == 200\n    assert response.json() == \"foo\"",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_foo",
    "loc": 323,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_minlength_foo:chunk1",
    "text": "def test_path_param_minlength_foo():\n    response = client.get(\"/path/param-minlength/foo\")\n    assert response.status_code == 200\n    assert response.json() == \"foo\"",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_minlength_foo",
    "loc": 329,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_minlength_fo:chunk1",
    "text": "def test_path_param_minlength_fo():\n    response = client.get(\"/path/param-minlength/fo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_too_short\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"String should have at least 3 characters\",\n                    \"input\": \"fo\",\n                    \"ctx\": {\"min_length\": 3},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value has at least 3 characters\",\n                    \"type\": \"value_error.any_str.min_length\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_minlength_fo",
    "loc": 335,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_maxlength_foo:chunk1",
    "text": "def test_path_param_maxlength_foo():\n    response = client.get(\"/path/param-maxlength/foo\")\n    assert response.status_code == 200\n    assert response.json() == \"foo\"",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_maxlength_foo",
    "loc": 365,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_maxlength_foobar:chunk1",
    "text": "def test_path_param_maxlength_foobar():\n    response = client.get(\"/path/param-maxlength/foobar\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_too_long\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"String should have at most 3 characters\",\n                    \"input\": \"foobar\",\n                    \"ctx\": {\"max_length\": 3},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value has at most 3 characters\",\n                    \"type\": \"value_error.any_str.max_length\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_maxlength_foobar",
    "loc": 371,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_min_maxlength_foo:chunk1",
    "text": "def test_path_param_min_maxlength_foo():\n    response = client.get(\"/path/param-min_maxlength/foo\")\n    assert response.status_code == 200\n    assert response.json() == \"foo\"",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_min_maxlength_foo",
    "loc": 401,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_min_maxlength_foobar:chunk1",
    "text": "def test_path_param_min_maxlength_foobar():\n    response = client.get(\"/path/param-min_maxlength/foobar\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_too_long\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"String should have at most 3 characters\",\n                    \"input\": \"foobar\",\n                    \"ctx\": {\"max_length\": 3},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value has at most 3 characters\",\n                    \"type\": \"value_error.any_str.max_length\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_min_maxlength_foobar",
    "loc": 407,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_min_maxlength_f:chunk1",
    "text": "def test_path_param_min_maxlength_f():\n    response = client.get(\"/path/param-min_maxlength/f\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_too_short\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"String should have at least 2 characters\",\n                    \"input\": \"f\",\n                    \"ctx\": {\"min_length\": 2},\n                }\n            ]\n        }\n    ) | IsDict(\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value has at least 2 characters\",\n                    \"type\": \"value_error.any_str.min_length\",\n                    \"ctx\": {\"limit_value\": 2},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_min_maxlength_f",
    "loc": 437,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_gt_42:chunk1",
    "text": "def test_path_param_gt_42():\n    response = client.get(\"/path/param-gt/42\")\n    assert response.status_code == 200\n    assert response.json() == 42",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_gt_42",
    "loc": 466,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_gt_2:chunk1",
    "text": "def test_path_param_gt_2():\n    response = client.get(\"/path/param-gt/2\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"greater_than\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be greater than 3\",\n                    \"input\": \"2\",\n                    \"ctx\": {\"gt\": 3.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is greater than 3\",\n                    \"type\": \"value_error.number.not_gt\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_gt_2",
    "loc": 472,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_gt0_0_05:chunk1",
    "text": "def test_path_param_gt0_0_05():\n    response = client.get(\"/path/param-gt0/0.05\")\n    assert response.status_code == 200\n    assert response.json() == 0.05",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_gt0_0_05",
    "loc": 502,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_gt0_0:chunk1",
    "text": "def test_path_param_gt0_0():\n    response = client.get(\"/path/param-gt0/0\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"greater_than\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be greater than 0\",\n                    \"input\": \"0\",\n                    \"ctx\": {\"gt\": 0.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is greater than 0\",\n                    \"type\": \"value_error.number.not_gt\",\n                    \"ctx\": {\"limit_value\": 0},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_gt0_0",
    "loc": 508,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_ge_42:chunk1",
    "text": "def test_path_param_ge_42():\n    response = client.get(\"/path/param-ge/42\")\n    assert response.status_code == 200\n    assert response.json() == 42",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_ge_42",
    "loc": 538,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_ge_3:chunk1",
    "text": "def test_path_param_ge_3():\n    response = client.get(\"/path/param-ge/3\")\n    assert response.status_code == 200\n    assert response.json() == 3",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_ge_3",
    "loc": 544,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_ge_2:chunk1",
    "text": "def test_path_param_ge_2():\n    response = client.get(\"/path/param-ge/2\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"greater_than_equal\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be greater than or equal to 3\",\n                    \"input\": \"2\",\n                    \"ctx\": {\"ge\": 3.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is greater than or equal to 3\",\n                    \"type\": \"value_error.number.not_ge\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_ge_2",
    "loc": 550,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_lt_42:chunk1",
    "text": "def test_path_param_lt_42():\n    response = client.get(\"/path/param-lt/42\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"less_than\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be less than 3\",\n                    \"input\": \"42\",\n                    \"ctx\": {\"lt\": 3.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is less than 3\",\n                    \"type\": \"value_error.number.not_lt\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_lt_42",
    "loc": 580,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_lt_2:chunk1",
    "text": "def test_path_param_lt_2():\n    response = client.get(\"/path/param-lt/2\")\n    assert response.status_code == 200\n    assert response.json() == 2",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_lt_2",
    "loc": 610,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_lt0__1:chunk1",
    "text": "def test_path_param_lt0__1():\n    response = client.get(\"/path/param-lt0/-1\")\n    assert response.status_code == 200\n    assert response.json() == -1",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_lt0__1",
    "loc": 616,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_lt0_0:chunk1",
    "text": "def test_path_param_lt0_0():\n    response = client.get(\"/path/param-lt0/0\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"less_than\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be less than 0\",\n                    \"input\": \"0\",\n                    \"ctx\": {\"lt\": 0.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is less than 0\",\n                    \"type\": \"value_error.number.not_lt\",\n                    \"ctx\": {\"limit_value\": 0},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_lt0_0",
    "loc": 622,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_le_42:chunk1",
    "text": "def test_path_param_le_42():\n    response = client.get(\"/path/param-le/42\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"less_than_equal\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be less than or equal to 3\",\n                    \"input\": \"42\",\n                    \"ctx\": {\"le\": 3.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is less than or equal to 3\",\n                    \"type\": \"value_error.number.not_le\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_le_42",
    "loc": 652,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_le_3:chunk1",
    "text": "def test_path_param_le_3():\n    response = client.get(\"/path/param-le/3\")\n    assert response.status_code == 200\n    assert response.json() == 3",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_le_3",
    "loc": 682,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_le_2:chunk1",
    "text": "def test_path_param_le_2():\n    response = client.get(\"/path/param-le/2\")\n    assert response.status_code == 200\n    assert response.json() == 2",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_le_2",
    "loc": 688,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_lt_gt_2:chunk1",
    "text": "def test_path_param_lt_gt_2():\n    response = client.get(\"/path/param-lt-gt/2\")\n    assert response.status_code == 200\n    assert response.json() == 2",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_lt_gt_2",
    "loc": 694,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_lt_gt_4:chunk1",
    "text": "def test_path_param_lt_gt_4():\n    response = client.get(\"/path/param-lt-gt/4\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"less_than\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be less than 3\",\n                    \"input\": \"4\",\n                    \"ctx\": {\"lt\": 3.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is less than 3\",\n                    \"type\": \"value_error.number.not_lt\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_lt_gt_4",
    "loc": 700,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_lt_gt_0:chunk1",
    "text": "def test_path_param_lt_gt_0():\n    response = client.get(\"/path/param-lt-gt/0\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"greater_than\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be greater than 1\",\n                    \"input\": \"0\",\n                    \"ctx\": {\"gt\": 1.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is greater than 1\",\n                    \"type\": \"value_error.number.not_gt\",\n                    \"ctx\": {\"limit_value\": 1},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_lt_gt_0",
    "loc": 730,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_le_ge_2:chunk1",
    "text": "def test_path_param_le_ge_2():\n    response = client.get(\"/path/param-le-ge/2\")\n    assert response.status_code == 200\n    assert response.json() == 2",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_le_ge_2",
    "loc": 760,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_le_ge_1:chunk1",
    "text": "def test_path_param_le_ge_1():\n    response = client.get(\"/path/param-le-ge/1\")\n    assert response.status_code == 200",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_le_ge_1",
    "loc": 766,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_le_ge_3:chunk1",
    "text": "def test_path_param_le_ge_3():\n    response = client.get(\"/path/param-le-ge/3\")\n    assert response.status_code == 200\n    assert response.json() == 3",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_le_ge_3",
    "loc": 771,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_le_ge_4:chunk1",
    "text": "def test_path_param_le_ge_4():\n    response = client.get(\"/path/param-le-ge/4\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"less_than_equal\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be less than or equal to 3\",\n                    \"input\": \"4\",\n                    \"ctx\": {\"le\": 3.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is less than or equal to 3\",\n                    \"type\": \"value_error.number.not_le\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_le_ge_4",
    "loc": 777,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_lt_int_2:chunk1",
    "text": "def test_path_param_lt_int_2():\n    response = client.get(\"/path/param-lt-int/2\")\n    assert response.status_code == 200\n    assert response.json() == 2",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_lt_int_2",
    "loc": 807,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_lt_int_42:chunk1",
    "text": "def test_path_param_lt_int_42():\n    response = client.get(\"/path/param-lt-int/42\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"less_than\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be less than 3\",\n                    \"input\": \"42\",\n                    \"ctx\": {\"lt\": 3},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is less than 3\",\n                    \"type\": \"value_error.number.not_lt\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_lt_int_42",
    "loc": 813,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_lt_int_2_7:chunk1",
    "text": "def test_path_param_lt_int_2_7():\n    response = client.get(\"/path/param-lt-int/2.7\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"2.7\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_lt_int_2_7",
    "loc": 843,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_gt_int_42:chunk1",
    "text": "def test_path_param_gt_int_42():\n    response = client.get(\"/path/param-gt-int/42\")\n    assert response.status_code == 200\n    assert response.json() == 42",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_gt_int_42",
    "loc": 871,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_gt_int_2:chunk1",
    "text": "def test_path_param_gt_int_2():\n    response = client.get(\"/path/param-gt-int/2\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"greater_than\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be greater than 3\",\n                    \"input\": \"2\",\n                    \"ctx\": {\"gt\": 3},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is greater than 3\",\n                    \"type\": \"value_error.number.not_gt\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_gt_int_2",
    "loc": 877,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_gt_int_2_7:chunk1",
    "text": "def test_path_param_gt_int_2_7():\n    response = client.get(\"/path/param-gt-int/2.7\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"2.7\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_gt_int_2_7",
    "loc": 907,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_le_int_42:chunk1",
    "text": "def test_path_param_le_int_42():\n    response = client.get(\"/path/param-le-int/42\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"less_than_equal\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be less than or equal to 3\",\n                    \"input\": \"42\",\n                    \"ctx\": {\"le\": 3},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is less than or equal to 3\",\n                    \"type\": \"value_error.number.not_le\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_le_int_42",
    "loc": 935,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_le_int_3:chunk1",
    "text": "def test_path_param_le_int_3():\n    response = client.get(\"/path/param-le-int/3\")\n    assert response.status_code == 200\n    assert response.json() == 3",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_le_int_3",
    "loc": 965,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_le_int_2:chunk1",
    "text": "def test_path_param_le_int_2():\n    response = client.get(\"/path/param-le-int/2\")\n    assert response.status_code == 200\n    assert response.json() == 2",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_le_int_2",
    "loc": 971,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_le_int_2_7:chunk1",
    "text": "def test_path_param_le_int_2_7():\n    response = client.get(\"/path/param-le-int/2.7\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"2.7\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_le_int_2_7",
    "loc": 977,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_ge_int_42:chunk1",
    "text": "def test_path_param_ge_int_42():\n    response = client.get(\"/path/param-ge-int/42\")\n    assert response.status_code == 200\n    assert response.json() == 42",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_ge_int_42",
    "loc": 1005,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_ge_int_3:chunk1",
    "text": "def test_path_param_ge_int_3():\n    response = client.get(\"/path/param-ge-int/3\")\n    assert response.status_code == 200\n    assert response.json() == 3",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_ge_int_3",
    "loc": 1011,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_ge_int_2:chunk1",
    "text": "def test_path_param_ge_int_2():\n    response = client.get(\"/path/param-ge-int/2\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"greater_than_equal\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be greater than or equal to 3\",\n                    \"input\": \"2\",\n                    \"ctx\": {\"ge\": 3},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is greater than or equal to 3\",\n                    \"type\": \"value_error.number.not_ge\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_ge_int_2",
    "loc": 1017,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_ge_int_2_7:chunk1",
    "text": "def test_path_param_ge_int_2_7():\n    response = client.get(\"/path/param-ge-int/2.7\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"2.7\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_ge_int_2_7",
    "loc": 1047,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_lt_gt_int_2:chunk1",
    "text": "def test_path_param_lt_gt_int_2():\n    response = client.get(\"/path/param-lt-gt-int/2\")\n    assert response.status_code == 200\n    assert response.json() == 2",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_lt_gt_int_2",
    "loc": 1075,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_lt_gt_int_4:chunk1",
    "text": "def test_path_param_lt_gt_int_4():\n    response = client.get(\"/path/param-lt-gt-int/4\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"less_than\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be less than 3\",\n                    \"input\": \"4\",\n                    \"ctx\": {\"lt\": 3},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is less than 3\",\n                    \"type\": \"value_error.number.not_lt\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_lt_gt_int_4",
    "loc": 1081,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_lt_gt_int_0:chunk1",
    "text": "def test_path_param_lt_gt_int_0():\n    response = client.get(\"/path/param-lt-gt-int/0\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"greater_than\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be greater than 1\",\n                    \"input\": \"0\",\n                    \"ctx\": {\"gt\": 1},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is greater than 1\",\n                    \"type\": \"value_error.number.not_gt\",\n                    \"ctx\": {\"limit_value\": 1},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_lt_gt_int_0",
    "loc": 1111,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_lt_gt_int_2_7:chunk1",
    "text": "def test_path_param_lt_gt_int_2_7():\n    response = client.get(\"/path/param-lt-gt-int/2.7\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"2.7\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_lt_gt_int_2_7",
    "loc": 1141,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_le_ge_int_2:chunk1",
    "text": "def test_path_param_le_ge_int_2():\n    response = client.get(\"/path/param-le-ge-int/2\")\n    assert response.status_code == 200\n    assert response.json() == 2",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_le_ge_int_2",
    "loc": 1169,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_le_ge_int_1:chunk1",
    "text": "def test_path_param_le_ge_int_1():\n    response = client.get(\"/path/param-le-ge-int/1\")\n    assert response.status_code == 200\n    assert response.json() == 1",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_le_ge_int_1",
    "loc": 1175,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_le_ge_int_3:chunk1",
    "text": "def test_path_param_le_ge_int_3():\n    response = client.get(\"/path/param-le-ge-int/3\")\n    assert response.status_code == 200\n    assert response.json() == 3",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_le_ge_int_3",
    "loc": 1181,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_le_ge_int_4:chunk1",
    "text": "def test_path_param_le_ge_int_4():\n    response = client.get(\"/path/param-le-ge-int/4\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"less_than_equal\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be less than or equal to 3\",\n                    \"input\": \"4\",\n                    \"ctx\": {\"le\": 3},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is less than or equal to 3\",\n                    \"type\": \"value_error.number.not_le\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_le_ge_int_4",
    "loc": 1187,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_path.py:function:test_path_param_le_ge_int_2_7:chunk1",
    "text": "def test_path_param_le_ge_int_2_7():\n    response = client.get(\"/path/param-le-ge-int/2.7\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"2.7\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_path.py",
    "type": "function",
    "name": "test_path_param_le_ge_int_2_7",
    "loc": 1217,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_put_no_body.py:function:save_item_no_body:chunk1",
    "text": "def save_item_no_body(item_id: str):\n    return {\"item_id\": item_id}",
    "repo": "fastapi",
    "path": "tests\\test_put_no_body.py",
    "type": "function",
    "name": "save_item_no_body",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_put_no_body.py:function:test_put_no_body:chunk1",
    "text": "def test_put_no_body():\n    response = client.put(\"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": \"foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_put_no_body.py",
    "type": "function",
    "name": "test_put_no_body",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_put_no_body.py:function:test_put_no_body_with_body:chunk1",
    "text": "def test_put_no_body_with_body():\n    response = client.put(\"/items/foo\", json={\"name\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": \"foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_put_no_body.py",
    "type": "function",
    "name": "test_put_no_body_with_body",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_put_no_body.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Save Item No Body\",\n                    \"operationId\": \"save_item_no_body_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_put_no_body.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query:chunk1",
    "text": "def test_query():\n    response = client.get(\"/query\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_query_baz:chunk1",
    "text": "def test_query_query_baz():\n    response = client.get(\"/query?query=baz\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar baz\"",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_query_baz",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_not_declared_baz:chunk1",
    "text": "def test_query_not_declared_baz():\n    response = client.get(\"/query?not_declared=baz\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_not_declared_baz",
    "loc": 43,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_optional:chunk1",
    "text": "def test_query_optional():\n    response = client.get(\"/query/optional\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar\"",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_optional",
    "loc": 71,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_optional_query_baz:chunk1",
    "text": "def test_query_optional_query_baz():\n    response = client.get(\"/query/optional?query=baz\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar baz\"",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_optional_query_baz",
    "loc": 77,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_optional_not_declared_baz:chunk1",
    "text": "def test_query_optional_not_declared_baz():\n    response = client.get(\"/query/optional?not_declared=baz\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar\"",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_optional_not_declared_baz",
    "loc": 83,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_int:chunk1",
    "text": "def test_query_int():\n    response = client.get(\"/query/int\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_int",
    "loc": 89,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_int_query_42:chunk1",
    "text": "def test_query_int_query_42():\n    response = client.get(\"/query/int?query=42\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar 42\"",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_int_query_42",
    "loc": 117,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_int_query_42_5:chunk1",
    "text": "def test_query_int_query_42_5():\n    response = client.get(\"/query/int?query=42.5\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"42.5\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_int_query_42_5",
    "loc": 123,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_int_query_baz:chunk1",
    "text": "def test_query_int_query_baz():\n    response = client.get(\"/query/int?query=baz\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"baz\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_int_query_baz",
    "loc": 151,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_int_not_declared_baz:chunk1",
    "text": "def test_query_int_not_declared_baz():\n    response = client.get(\"/query/int?not_declared=baz\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_int_not_declared_baz",
    "loc": 179,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_int_optional:chunk1",
    "text": "def test_query_int_optional():\n    response = client.get(\"/query/int/optional\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar\"",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_int_optional",
    "loc": 207,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_int_optional_query_50:chunk1",
    "text": "def test_query_int_optional_query_50():\n    response = client.get(\"/query/int/optional?query=50\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar 50\"",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_int_optional_query_50",
    "loc": 213,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_int_optional_query_foo:chunk1",
    "text": "def test_query_int_optional_query_foo():\n    response = client.get(\"/query/int/optional?query=foo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"foo\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_int_optional_query_foo",
    "loc": 219,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_int_default:chunk1",
    "text": "def test_query_int_default():\n    response = client.get(\"/query/int/default\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar 10\"",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_int_default",
    "loc": 247,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_int_default_query_50:chunk1",
    "text": "def test_query_int_default_query_50():\n    response = client.get(\"/query/int/default?query=50\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar 50\"",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_int_default_query_50",
    "loc": 253,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_int_default_query_foo:chunk1",
    "text": "def test_query_int_default_query_foo():\n    response = client.get(\"/query/int/default?query=foo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"foo\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_int_default_query_foo",
    "loc": 259,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_param:chunk1",
    "text": "def test_query_param():\n    response = client.get(\"/query/param\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar\"",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_param",
    "loc": 287,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_param_query_50:chunk1",
    "text": "def test_query_param_query_50():\n    response = client.get(\"/query/param?query=50\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar 50\"",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_param_query_50",
    "loc": 293,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_param_required:chunk1",
    "text": "def test_query_param_required():\n    response = client.get(\"/query/param-required\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_param_required",
    "loc": 299,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_param_required_query_50:chunk1",
    "text": "def test_query_param_required_query_50():\n    response = client.get(\"/query/param-required?query=50\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar 50\"",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_param_required_query_50",
    "loc": 327,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_param_required_int:chunk1",
    "text": "def test_query_param_required_int():\n    response = client.get(\"/query/param-required/int\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_param_required_int",
    "loc": 333,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_param_required_int_query_50:chunk1",
    "text": "def test_query_param_required_int_query_50():\n    response = client.get(\"/query/param-required/int?query=50\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar 50\"",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_param_required_int_query_50",
    "loc": 361,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_param_required_int_query_foo:chunk1",
    "text": "def test_query_param_required_int_query_foo():\n    response = client.get(\"/query/param-required/int?query=foo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"foo\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_param_required_int_query_foo",
    "loc": 367,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_frozenset_query_1_query_1_query_2:chunk1",
    "text": "def test_query_frozenset_query_1_query_1_query_2():\n    response = client.get(\"/query/frozenset/?query=1&query=1&query=2\")\n    assert response.status_code == 200\n    assert response.json() == \"1,2\"",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_frozenset_query_1_query_1_query_2",
    "loc": 395,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_list:chunk1",
    "text": "def test_query_list():\n    response = client.get(\"/query/list/?device_ids=1&device_ids=2\")\n    assert response.status_code == 200\n    assert response.json() == [1, 2]",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_list",
    "loc": 401,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_list_empty:chunk1",
    "text": "def test_query_list_empty():\n    response = client.get(\"/query/list/\")\n    assert response.status_code == 422",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_list_empty",
    "loc": 407,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_list_default:chunk1",
    "text": "def test_query_list_default():\n    response = client.get(\"/query/list-default/?device_ids=1&device_ids=2\")\n    assert response.status_code == 200\n    assert response.json() == [1, 2]",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_list_default",
    "loc": 412,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_query.py:function:test_query_list_default_empty:chunk1",
    "text": "def test_query_list_default_empty():\n    response = client.get(\"/query/list-default/\")\n    assert response.status_code == 200\n    assert response.json() == []",
    "repo": "fastapi",
    "path": "tests\\test_query.py",
    "type": "function",
    "name": "test_query_list_default_empty",
    "loc": 418,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_read_with_orm_mode.py:function:test_read_with_orm_mode:chunk1",
    "text": "def test_read_with_orm_mode() -> None:\n    class PersonBase(BaseModel):\n        name: str\n        lastname: str\n\n    class Person(PersonBase):\n        @property\n        def full_name(self) -> str:\n            return f\"{self.name} {self.lastname}\"\n\n        model_config = ConfigDict(from_attributes=True)\n\n    class PersonCreate(PersonBase):\n        pass\n\n    class PersonRead(PersonBase):\n        full_name: str\n\n        model_config = {\"from_attributes\": True}\n\n    app = FastAPI()\n\n    @app.post(\"/people/\", response_model=PersonRead)\n    def create_person(person: PersonCreate) -> Any:\n        db_person = Person.model_validate(person)\n        return db_person\n\n    client = TestClient(app)\n\n    person_data = {\"name\": \"Dive\", \"lastname\": \"Wilson\"}\n    response = client.post(\"/people/\", json=person_data)\n    data = response.json()\n    assert response.status_code == 200, response.text\n    assert data[\"name\"] == person_data[\"name\"]\n    assert data[\"lastname\"] == person_data[\"lastname\"]\n    assert data[\"full_name\"] == person_data[\"name\"] + \" \" + person_data[\"lastname\"]",
    "repo": "fastapi",
    "path": "tests\\test_read_with_orm_mode.py",
    "type": "function",
    "name": "test_read_with_orm_mode",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_read_with_orm_mode.py:function:create_person:chunk1",
    "text": "def create_person(person: PersonCreate) -> Any:\n        db_person = Person.model_validate(person)\n        return db_person",
    "repo": "fastapi",
    "path": "tests\\test_read_with_orm_mode.py",
    "type": "function",
    "name": "create_person",
    "loc": 34,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_read_with_orm_mode.py:function:test_read_with_orm_mode_pv1:chunk1",
    "text": "def test_read_with_orm_mode_pv1() -> None:\n    class PersonBase(BaseModel):\n        name: str\n        lastname: str\n\n    class Person(PersonBase):\n        @property\n        def full_name(self) -> str:\n            return f\"{self.name} {self.lastname}\"\n\n        class Config:\n            orm_mode = True\n            read_with_orm_mode = True\n\n    class PersonCreate(PersonBase):\n        pass\n\n    class PersonRead(PersonBase):\n        full_name: str\n\n        class Config:\n            orm_mode = True\n\n    app = FastAPI()\n\n    @app.post(\"/people/\", response_model=PersonRead)\n    def create_person(person: PersonCreate) -> Any:\n        db_person = Person.from_orm(person)\n        return db_person\n\n    client = TestClient(app)\n\n    person_data = {\"name\": \"Dive\", \"lastname\": \"Wilson\"}\n    response = client.post(\"/people/\", json=person_data)\n    data = response.json()\n    assert response.status_code == 200, response.text\n    assert data[\"name\"] == person_data[\"name\"]\n    assert data[\"lastname\"] == person_data[\"lastname\"]\n    assert data[\"full_name\"] == person_data[\"name\"] + \" \" + person_data[\"lastname\"]",
    "repo": "fastapi",
    "path": "tests\\test_read_with_orm_mode.py",
    "type": "function",
    "name": "test_read_with_orm_mode_pv1",
    "loc": 50,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_read_with_orm_mode.py:function:create_person:chunk1",
    "text": "def create_person(person: PersonCreate) -> Any:\n        db_person = Person.from_orm(person)\n        return db_person",
    "repo": "fastapi",
    "path": "tests\\test_read_with_orm_mode.py",
    "type": "function",
    "name": "create_person",
    "loc": 76,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_read_with_orm_mode.py:class:PersonBase:chunk1",
    "text": "class PersonBase(BaseModel):\n        name: str\n        lastname: str",
    "repo": "fastapi",
    "path": "tests\\test_read_with_orm_mode.py",
    "type": "class",
    "name": "PersonBase",
    "loc": 12,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_read_with_orm_mode.py:class:Person:chunk1",
    "text": "class Person(PersonBase):\n        @property\n        def full_name(self) -> str:\n            return f\"{self.name} {self.lastname}\"\n\n        model_config = ConfigDict(from_attributes=True)",
    "repo": "fastapi",
    "path": "tests\\test_read_with_orm_mode.py",
    "type": "class",
    "name": "Person",
    "loc": 16,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_read_with_orm_mode.py:class:PersonCreate:chunk1",
    "text": "class PersonCreate(PersonBase):\n        pass",
    "repo": "fastapi",
    "path": "tests\\test_read_with_orm_mode.py",
    "type": "class",
    "name": "PersonCreate",
    "loc": 23,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_read_with_orm_mode.py:class:PersonRead:chunk1",
    "text": "class PersonRead(PersonBase):\n        full_name: str\n\n        model_config = {\"from_attributes\": True}",
    "repo": "fastapi",
    "path": "tests\\test_read_with_orm_mode.py",
    "type": "class",
    "name": "PersonRead",
    "loc": 26,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_read_with_orm_mode.py:class:PersonBase:chunk1",
    "text": "class PersonBase(BaseModel):\n        name: str\n        lastname: str",
    "repo": "fastapi",
    "path": "tests\\test_read_with_orm_mode.py",
    "type": "class",
    "name": "PersonBase",
    "loc": 51,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_read_with_orm_mode.py:class:Config:chunk1",
    "text": "class Config:\n            orm_mode = True\n            read_with_orm_mode = True",
    "repo": "fastapi",
    "path": "tests\\test_read_with_orm_mode.py",
    "type": "class",
    "name": "Config",
    "loc": 60,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_read_with_orm_mode.py:class:Person:chunk1",
    "text": "class Person(PersonBase):\n        @property\n        def full_name(self) -> str:\n            return f\"{self.name} {self.lastname}\"\n\n        class Config:\n            orm_mode = True\n            read_with_orm_mode = True",
    "repo": "fastapi",
    "path": "tests\\test_read_with_orm_mode.py",
    "type": "class",
    "name": "Person",
    "loc": 55,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_read_with_orm_mode.py:class:PersonCreate:chunk1",
    "text": "class PersonCreate(PersonBase):\n        pass",
    "repo": "fastapi",
    "path": "tests\\test_read_with_orm_mode.py",
    "type": "class",
    "name": "PersonCreate",
    "loc": 64,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_read_with_orm_mode.py:class:Config:chunk1",
    "text": "class Config:\n            orm_mode = True",
    "repo": "fastapi",
    "path": "tests\\test_read_with_orm_mode.py",
    "type": "class",
    "name": "Config",
    "loc": 70,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_read_with_orm_mode.py:class:PersonRead:chunk1",
    "text": "class PersonRead(PersonBase):\n        full_name: str\n\n        class Config:\n            orm_mode = True",
    "repo": "fastapi",
    "path": "tests\\test_read_with_orm_mode.py",
    "type": "class",
    "name": "PersonRead",
    "loc": 67,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_regex_deprecated_body.py:function:get_client:chunk1",
    "text": "def get_client():\n    app = FastAPI()\n    with pytest.warns(DeprecationWarning):\n\n        @app.post(\"/items/\")\n        async def read_items(\n            q: Annotated[str | None, Form(regex=\"^fixedquery$\")] = None,\n        ):\n            if q:\n                return f\"Hello {q}\"\n            else:\n                return \"Hello World\"\n\n    client = TestClient(app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_regex_deprecated_body.py",
    "type": "function",
    "name": "get_client",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_regex_deprecated_body.py:function:test_no_query:chunk1",
    "text": "def test_no_query():\n    client = get_client()\n    response = client.post(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == \"Hello World\"",
    "repo": "fastapi",
    "path": "tests\\test_regex_deprecated_body.py",
    "type": "function",
    "name": "test_no_query",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_regex_deprecated_body.py:function:test_q_fixedquery:chunk1",
    "text": "def test_q_fixedquery():\n    client = get_client()\n    response = client.post(\"/items/\", data={\"q\": \"fixedquery\"})\n    assert response.status_code == 200\n    assert response.json() == \"Hello fixedquery\"",
    "repo": "fastapi",
    "path": "tests\\test_regex_deprecated_body.py",
    "type": "function",
    "name": "test_q_fixedquery",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_regex_deprecated_body.py:function:test_query_nonregexquery:chunk1",
    "text": "def test_query_nonregexquery():\n    client = get_client()\n    response = client.post(\"/items/\", data={\"q\": \"nonregexquery\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_pattern_mismatch\",\n                    \"loc\": [\"body\", \"q\"],\n                    \"msg\": \"String should match pattern '^fixedquery$'\",\n                    \"input\": \"nonregexquery\",\n                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n                    \"loc\": [\"body\", \"q\"],\n                    \"msg\": 'string does not match regex \"^fixedquery$\"',\n                    \"type\": \"value_error.str.regex\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_regex_deprecated_body.py",
    "type": "function",
    "name": "test_query_nonregexquery",
    "loc": 44,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_regex_deprecated_body.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    client = get_client()\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    # insert_assert(response.json())\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/Body_read_items_items__post\"\n                                            }\n                                        ],\n                                        \"title\": \"Body\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"$ref\": \"#/components/schemas/Body_read_items_items__post\"\n                                    }\n                                )\n                            }\n                        }\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_read_items_items__post\": {\n                    \"properties\": {\n                        \"q\": IsDict(\n                            {\n                                \"anyOf\": [\n                                    {\"type\": \"string\", \"pattern\": \"^fixedquery$\"},\n                                    {\"type\": \"null\"},\n                                ],\n                                \"title\": \"Q\",\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"type\": \"string\", \"pattern\": \"^fixedquery$\", \"title\": \"Q\"}\n                        )\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"Body_read_items_items__post\",\n                },\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_regex_deprecated_body.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 76,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_regex_deprecated_params.py:function:get_client:chunk1",
    "text": "def get_client():\n    app = FastAPI()\n    with pytest.warns(DeprecationWarning):\n\n        @app.get(\"/items/\")\n        async def read_items(\n            q: Annotated[str | None, Query(regex=\"^fixedquery$\")] = None,\n        ):\n            if q:\n                return f\"Hello {q}\"\n            else:\n                return \"Hello World\"\n\n    client = TestClient(app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_regex_deprecated_params.py",
    "type": "function",
    "name": "get_client",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_regex_deprecated_params.py:function:test_query_params_str_validations_no_query:chunk1",
    "text": "def test_query_params_str_validations_no_query():\n    client = get_client()\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == \"Hello World\"",
    "repo": "fastapi",
    "path": "tests\\test_regex_deprecated_params.py",
    "type": "function",
    "name": "test_query_params_str_validations_no_query",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_regex_deprecated_params.py:function:test_query_params_str_validations_q_fixedquery:chunk1",
    "text": "def test_query_params_str_validations_q_fixedquery():\n    client = get_client()\n    response = client.get(\"/items/\", params={\"q\": \"fixedquery\"})\n    assert response.status_code == 200\n    assert response.json() == \"Hello fixedquery\"",
    "repo": "fastapi",
    "path": "tests\\test_regex_deprecated_params.py",
    "type": "function",
    "name": "test_query_params_str_validations_q_fixedquery",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_regex_deprecated_params.py:function:test_query_params_str_validations_item_query_nonregexquery:chunk1",
    "text": "def test_query_params_str_validations_item_query_nonregexquery():\n    client = get_client()\n    response = client.get(\"/items/\", params={\"q\": \"nonregexquery\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_pattern_mismatch\",\n                    \"loc\": [\"query\", \"q\"],\n                    \"msg\": \"String should match pattern '^fixedquery$'\",\n                    \"input\": \"nonregexquery\",\n                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n                    \"loc\": [\"query\", \"q\"],\n                    \"msg\": 'string does not match regex \"^fixedquery$\"',\n                    \"type\": \"value_error.str.regex\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_regex_deprecated_params.py",
    "type": "function",
    "name": "test_query_params_str_validations_item_query_nonregexquery",
    "loc": 44,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_regex_deprecated_params.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    client = get_client()\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    # insert_assert(response.json())\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [\n                                        {\"type\": \"string\", \"pattern\": \"^fixedquery$\"},\n                                        {\"type\": \"null\"},\n                                    ],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"type\": \"string\",\n                                    \"pattern\": \"^fixedquery$\",\n                                    \"title\": \"Q\",\n                                }\n                            ),\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_regex_deprecated_params.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 76,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_repeated_cookie_headers.py:function:set_cookie:chunk1",
    "text": "def set_cookie(*, response: Response):\n    response.set_cookie(\"cookie-name\", \"cookie-value\")\n    return {}",
    "repo": "fastapi",
    "path": "tests\\test_repeated_cookie_headers.py",
    "type": "function",
    "name": "set_cookie",
    "loc": 7,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_repeated_cookie_headers.py:function:set_indirect_cookie:chunk1",
    "text": "def set_indirect_cookie(*, dep: str = Depends(set_cookie)):\n    return dep",
    "repo": "fastapi",
    "path": "tests\\test_repeated_cookie_headers.py",
    "type": "function",
    "name": "set_indirect_cookie",
    "loc": 12,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_repeated_cookie_headers.py:function:get_direct_cookie:chunk1",
    "text": "def get_direct_cookie(dep: str = Depends(set_cookie)):\n    return {\"dep\": dep}",
    "repo": "fastapi",
    "path": "tests\\test_repeated_cookie_headers.py",
    "type": "function",
    "name": "get_direct_cookie",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_repeated_cookie_headers.py:function:get_indirect_cookie:chunk1",
    "text": "def get_indirect_cookie(dep: str = Depends(set_indirect_cookie)):\n    return {\"dep\": dep}",
    "repo": "fastapi",
    "path": "tests\\test_repeated_cookie_headers.py",
    "type": "function",
    "name": "get_indirect_cookie",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_repeated_cookie_headers.py:function:test_cookie_is_set_once:chunk1",
    "text": "def test_cookie_is_set_once():\n    direct_response = client.get(\"/directCookie\")\n    indirect_response = client.get(\"/indirectCookie\")\n    assert (\n        direct_response.headers[\"set-cookie\"] == indirect_response.headers[\"set-cookie\"]\n    )",
    "repo": "fastapi",
    "path": "tests\\test_repeated_cookie_headers.py",
    "type": "function",
    "name": "test_cookie_is_set_once",
    "loc": 29,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_repeated_dependency_schema.py:function:get_header:chunk1",
    "text": "def get_header(*, someheader: str = Header()):\n    return someheader",
    "repo": "fastapi",
    "path": "tests\\test_repeated_dependency_schema.py",
    "type": "function",
    "name": "get_header",
    "loc": 7,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_repeated_dependency_schema.py:function:get_something_else:chunk1",
    "text": "def get_something_else(*, someheader: str = Depends(get_header)):\n    return f\"{someheader}123\"",
    "repo": "fastapi",
    "path": "tests\\test_repeated_dependency_schema.py",
    "type": "function",
    "name": "get_something_else",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_repeated_dependency_schema.py:function:get_deps:chunk1",
    "text": "def get_deps(dep1: str = Depends(get_header), dep2: str = Depends(get_something_else)):\n    return {\"dep1\": dep1, \"dep2\": dep2}",
    "repo": "fastapi",
    "path": "tests\\test_repeated_dependency_schema.py",
    "type": "function",
    "name": "get_deps",
    "loc": 16,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_repeated_dependency_schema.py:function:test_schema:chunk1",
    "text": "def test_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == status.HTTP_200_OK\n    actual_schema = response.json()\n    assert actual_schema == schema\n    assert (\n        len(actual_schema[\"paths\"][\"/\"][\"get\"][\"parameters\"]) == 1\n    )  # primary goal of this test",
    "repo": "fastapi",
    "path": "tests\\test_repeated_dependency_schema.py",
    "type": "function",
    "name": "test_schema",
    "loc": 89,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_repeated_dependency_schema.py:function:test_response:chunk1",
    "text": "def test_response():\n    response = client.get(\"/\", headers={\"someheader\": \"hello\"})\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json() == {\"dep1\": \"hello\", \"dep2\": \"hello123\"}",
    "repo": "fastapi",
    "path": "tests\\test_repeated_dependency_schema.py",
    "type": "function",
    "name": "test_response",
    "loc": 99,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_repeated_parameter_alias.py:function:get_parameters_with_repeated_aliases:chunk1",
    "text": "def get_parameters_with_repeated_aliases(\n    path: str = Path(..., alias=\"repeated_alias\"),\n    query: str = Query(..., alias=\"repeated_alias\"),\n):\n    return {\"path\": path, \"query\": query}",
    "repo": "fastapi",
    "path": "tests\\test_repeated_parameter_alias.py",
    "type": "function",
    "name": "get_parameters_with_repeated_aliases",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_repeated_parameter_alias.py:function:test_get_parameters:chunk1",
    "text": "def test_get_parameters():\n    response = client.get(\"/test_path\", params={\"repeated_alias\": \"test_query\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"path\": \"test_path\", \"query\": \"test_query\"}",
    "repo": "fastapi",
    "path": "tests\\test_repeated_parameter_alias.py",
    "type": "function",
    "name": "test_get_parameters",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_repeated_parameter_alias.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == status.HTTP_200_OK\n    actual_schema = response.json()\n    assert actual_schema == {\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                        }\n                    },\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                    \"type\": \"object\",\n                },\n            }\n        },\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"openapi\": \"3.1.0\",\n        \"paths\": {\n            \"/{repeated_alias}\": {\n                \"get\": {\n                    \"operationId\": \"get_parameters_with_repeated_aliases__repeated_alias__get\",\n                    \"parameters\": [\n                        {\n                            \"in\": \"path\",\n                            \"name\": \"repeated_alias\",\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Repeated Alias\", \"type\": \"string\"},\n                        },\n                        {\n                            \"in\": \"query\",\n                            \"name\": \"repeated_alias\",\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Repeated Alias\", \"type\": \"string\"},\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                            \"description\": \"Successful Response\",\n                        },\n                        \"422\": {\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                            \"description\": \"Validation Error\",\n                        },\n                    },\n                    \"summary\": \"Get Parameters With Repeated Aliases\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_repeated_parameter_alias.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_reponse_set_reponse_code_empty.py:function:test_dependency_set_status_code:chunk1",
    "text": "def test_dependency_set_status_code():\n    response = client.delete(\"/1\")\n    assert response.status_code == 400 and response.content\n    assert response.json() == {\"msg\": \"Status overwritten\", \"id\": 1}",
    "repo": "fastapi",
    "path": "tests\\test_reponse_set_reponse_code_empty.py",
    "type": "function",
    "name": "test_dependency_set_status_code",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_reponse_set_reponse_code_empty.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/{id}\": {\n                \"delete\": {\n                    \"summary\": \"Delete Deployment\",\n                    \"operationId\": \"delete_deployment__id__delete\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Id\", \"type\": \"integer\"},\n                            \"name\": \"id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"204\": {\"description\": \"Successful Response\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_reponse_set_reponse_code_empty.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 31,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_request_body_parameters_media_type.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/products\": {\n                \"post\": {\n                    \"summary\": \"Create Product\",\n                    \"operationId\": \"create_product_products_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/vnd.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_product_products_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/shops\": {\n                \"post\": {\n                    \"summary\": \"Create Shop\",\n                    \"operationId\": \"create_shop_shops_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/vnd.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_shop_shops_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_product_products_post\": {\n                    \"title\": \"Body_create_product_products_post\",\n                    \"required\": [\"data\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"data\": {\"$ref\": \"#/components/schemas/Product\"}},\n                },\n                \"Body_create_shop_shops_post\": {\n                    \"title\": \"Body_create_shop_shops_post\",\n                    \"required\": [\"data\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"data\": {\"$ref\": \"#/components/schemas/Shop\"},\n                        \"included\": {\n                            \"title\": \"Included\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/Product\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Product\": {\n                    \"title\": \"Product\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                    },\n                },\n                \"Shop\": {\n                    \"title\": \"Shop\",\n                    \"required\": [\"name\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"name\": {\"title\": \"Name\", \"type\": \"string\"}},\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_request_body_parameters_media_type.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 39,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_request_body_parameters_media_type.py:class:Product:chunk1",
    "text": "class Product(BaseModel):\n    name: str\n    price: float",
    "repo": "fastapi",
    "path": "tests\\test_request_body_parameters_media_type.py",
    "type": "class",
    "name": "Product",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_request_body_parameters_media_type.py:class:Shop:chunk1",
    "text": "class Shop(BaseModel):\n    name: str",
    "repo": "fastapi",
    "path": "tests\\test_request_body_parameters_media_type.py",
    "type": "class",
    "name": "Shop",
    "loc": 19,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_required_noneable.py:function:read_query:chunk1",
    "text": "def read_query(q: Union[str, None]):\n    return q",
    "repo": "fastapi",
    "path": "tests\\test_required_noneable.py",
    "type": "function",
    "name": "read_query",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_required_noneable.py:function:read_explicit_query:chunk1",
    "text": "def read_explicit_query(q: Union[str, None] = Query()):\n    return q",
    "repo": "fastapi",
    "path": "tests\\test_required_noneable.py",
    "type": "function",
    "name": "read_explicit_query",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_required_noneable.py:function:send_body_embed:chunk1",
    "text": "def send_body_embed(b: Union[str, None] = Body(embed=True)):\n    return b",
    "repo": "fastapi",
    "path": "tests\\test_required_noneable.py",
    "type": "function",
    "name": "send_body_embed",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_required_noneable.py:function:test_required_nonable_query_invalid:chunk1",
    "text": "def test_required_nonable_query_invalid():\n    response = client.get(\"/query\")\n    assert response.status_code == 422",
    "repo": "fastapi",
    "path": "tests\\test_required_noneable.py",
    "type": "function",
    "name": "test_required_nonable_query_invalid",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_required_noneable.py:function:test_required_noneable_query_value:chunk1",
    "text": "def test_required_noneable_query_value():\n    response = client.get(\"/query\", params={\"q\": \"foo\"})\n    assert response.status_code == 200\n    assert response.json() == \"foo\"",
    "repo": "fastapi",
    "path": "tests\\test_required_noneable.py",
    "type": "function",
    "name": "test_required_noneable_query_value",
    "loc": 32,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_required_noneable.py:function:test_required_nonable_explicit_query_invalid:chunk1",
    "text": "def test_required_nonable_explicit_query_invalid():\n    response = client.get(\"/explicit-query\")\n    assert response.status_code == 422",
    "repo": "fastapi",
    "path": "tests\\test_required_noneable.py",
    "type": "function",
    "name": "test_required_nonable_explicit_query_invalid",
    "loc": 38,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_required_noneable.py:function:test_required_nonable_explicit_query_value:chunk1",
    "text": "def test_required_nonable_explicit_query_value():\n    response = client.get(\"/explicit-query\", params={\"q\": \"foo\"})\n    assert response.status_code == 200\n    assert response.json() == \"foo\"",
    "repo": "fastapi",
    "path": "tests\\test_required_noneable.py",
    "type": "function",
    "name": "test_required_nonable_explicit_query_value",
    "loc": 43,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_required_noneable.py:function:test_required_nonable_body_embed_no_content:chunk1",
    "text": "def test_required_nonable_body_embed_no_content():\n    response = client.post(\"/body-embed\")\n    assert response.status_code == 422",
    "repo": "fastapi",
    "path": "tests\\test_required_noneable.py",
    "type": "function",
    "name": "test_required_nonable_body_embed_no_content",
    "loc": 49,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_required_noneable.py:function:test_required_nonable_body_embed_invalid:chunk1",
    "text": "def test_required_nonable_body_embed_invalid():\n    response = client.post(\"/body-embed\", json={\"invalid\": \"invalid\"})\n    assert response.status_code == 422",
    "repo": "fastapi",
    "path": "tests\\test_required_noneable.py",
    "type": "function",
    "name": "test_required_nonable_body_embed_invalid",
    "loc": 54,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_required_noneable.py:function:test_required_noneable_body_embed_value:chunk1",
    "text": "def test_required_noneable_body_embed_value():\n    response = client.post(\"/body-embed\", json={\"b\": \"foo\"})\n    assert response.status_code == 200\n    assert response.json() == \"foo\"",
    "repo": "fastapi",
    "path": "tests\\test_required_noneable.py",
    "type": "function",
    "name": "test_required_noneable_body_embed_value",
    "loc": 59,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_by_alias.py:function:read_dict:chunk1",
    "text": "def read_dict():\n    return {\"alias\": \"Foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_by_alias.py",
    "type": "function",
    "name": "read_dict",
    "loc": 39,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_by_alias.py:function:read_model:chunk1",
    "text": "def read_model():\n    return Model(alias=\"Foo\")",
    "repo": "fastapi",
    "path": "tests\\test_response_by_alias.py",
    "type": "function",
    "name": "read_model",
    "loc": 44,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_by_alias.py:function:read_list:chunk1",
    "text": "def read_list():\n    return [{\"alias\": \"Foo\"}, {\"alias\": \"Bar\"}]",
    "repo": "fastapi",
    "path": "tests\\test_response_by_alias.py",
    "type": "function",
    "name": "read_list",
    "loc": 49,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_by_alias.py:function:by_alias_dict:chunk1",
    "text": "def by_alias_dict():\n    return {\"alias\": \"Foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_by_alias.py",
    "type": "function",
    "name": "by_alias_dict",
    "loc": 54,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_by_alias.py:function:by_alias_model:chunk1",
    "text": "def by_alias_model():\n    return Model(alias=\"Foo\")",
    "repo": "fastapi",
    "path": "tests\\test_response_by_alias.py",
    "type": "function",
    "name": "by_alias_model",
    "loc": 59,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_by_alias.py:function:by_alias_list:chunk1",
    "text": "def by_alias_list():\n    return [{\"alias\": \"Foo\"}, {\"alias\": \"Bar\"}]",
    "repo": "fastapi",
    "path": "tests\\test_response_by_alias.py",
    "type": "function",
    "name": "by_alias_list",
    "loc": 64,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_by_alias.py:function:no_alias_dict:chunk1",
    "text": "def no_alias_dict():\n    return {\"name\": \"Foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_by_alias.py",
    "type": "function",
    "name": "no_alias_dict",
    "loc": 69,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_by_alias.py:function:no_alias_model:chunk1",
    "text": "def no_alias_model():\n    return ModelNoAlias(name=\"Foo\")",
    "repo": "fastapi",
    "path": "tests\\test_response_by_alias.py",
    "type": "function",
    "name": "no_alias_model",
    "loc": 74,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_by_alias.py:function:no_alias_list:chunk1",
    "text": "def no_alias_list():\n    return [{\"name\": \"Foo\"}, {\"name\": \"Bar\"}]",
    "repo": "fastapi",
    "path": "tests\\test_response_by_alias.py",
    "type": "function",
    "name": "no_alias_list",
    "loc": 79,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_by_alias.py:function:test_read_dict:chunk1",
    "text": "def test_read_dict():\n    response = client.get(\"/dict\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_by_alias.py",
    "type": "function",
    "name": "test_read_dict",
    "loc": 86,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_by_alias.py:function:test_read_model:chunk1",
    "text": "def test_read_model():\n    response = client.get(\"/model\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_by_alias.py",
    "type": "function",
    "name": "test_read_model",
    "loc": 92,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_by_alias.py:function:test_read_list:chunk1",
    "text": "def test_read_list():\n    response = client.get(\"/list\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\"name\": \"Foo\"},\n        {\"name\": \"Bar\"},\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_response_by_alias.py",
    "type": "function",
    "name": "test_read_list",
    "loc": 98,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_by_alias.py:function:test_read_dict_by_alias:chunk1",
    "text": "def test_read_dict_by_alias():\n    response = client.get(\"/by-alias/dict\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"alias\": \"Foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_by_alias.py",
    "type": "function",
    "name": "test_read_dict_by_alias",
    "loc": 107,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_by_alias.py:function:test_read_model_by_alias:chunk1",
    "text": "def test_read_model_by_alias():\n    response = client.get(\"/by-alias/model\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"alias\": \"Foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_by_alias.py",
    "type": "function",
    "name": "test_read_model_by_alias",
    "loc": 113,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_by_alias.py:function:test_read_list_by_alias:chunk1",
    "text": "def test_read_list_by_alias():\n    response = client.get(\"/by-alias/list\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\"alias\": \"Foo\"},\n        {\"alias\": \"Bar\"},\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_response_by_alias.py",
    "type": "function",
    "name": "test_read_list_by_alias",
    "loc": 119,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_by_alias.py:function:test_read_dict_no_alias:chunk1",
    "text": "def test_read_dict_no_alias():\n    response = client.get(\"/no-alias/dict\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_by_alias.py",
    "type": "function",
    "name": "test_read_dict_no_alias",
    "loc": 128,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_by_alias.py:function:test_read_model_no_alias:chunk1",
    "text": "def test_read_model_no_alias():\n    response = client.get(\"/no-alias/model\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_by_alias.py",
    "type": "function",
    "name": "test_read_model_no_alias",
    "loc": 134,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_by_alias.py:function:test_read_list_no_alias:chunk1",
    "text": "def test_read_list_no_alias():\n    response = client.get(\"/no-alias/list\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\"name\": \"Foo\"},\n        {\"name\": \"Bar\"},\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_response_by_alias.py",
    "type": "function",
    "name": "test_read_list_no_alias",
    "loc": 140,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_by_alias.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/dict\": {\n                \"get\": {\n                    \"summary\": \"Read Dict\",\n                    \"operationId\": \"read_dict_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Model\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/model\": {\n                \"get\": {\n                    \"summary\": \"Read Model\",\n                    \"operationId\": \"read_model_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Model\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/list\": {\n                \"get\": {\n                    \"summary\": \"Read List\",\n                    \"operationId\": \"read_list_list_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read List List Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Model\"},\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/by-alias/dict\": {\n                \"get\": {\n                    \"summary\": \"By Alias Dict\",\n                    \"operationId\": \"by_alias_dict_by_alias_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Model\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/by-alias/model\": {\n                \"get\": {\n                    \"summary\": \"By Alias Model\",\n                    \"operationId\": \"by_alias_model_by_alias_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Model\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/by-alias/list\": {\n                \"get\": {\n                    \"summary\": \"By Alias List\",\n                    \"operationId\": \"by_alias_list_by_alias_list_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response By Alias List By Alias List Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Model\"},\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no-alias/dict\": {\n                \"get\": {\n                    \"summary\": \"No Alias Dict\",\n                    \"operationId\": \"no_alias_dict_no_alias_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/ModelNoAlias\"\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no-alias/model\": {\n                \"get\": {\n                    \"summary\": \"No Alias Model\",\n                    \"operationId\": \"no_alias_model_no_alias_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/ModelNoAlias\"\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no-alias/list\": {\n                \"get\": {\n                    \"summary\": \"No Alias List\",\n                    \"operationId\": \"no_alias_list_no_alias_list_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response No Alias List No Alias List Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/ModelNoAlias\"\n                                        },\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Model\": {\n                    \"title\": \"Model\",\n                    \"required\": [\"alias\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"alias\": {\"title\": \"Alias\", \"type\": \"string\"}},\n                },\n                \"ModelNoAlias\": {\n                    \"title\": \"ModelNoAlias\",\n                    \"required\": [\"name\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"name\": {\"title\": \"Name\", \"type\": \"string\"}},\n                    \"description\": \"response_model_by_alias=False is basically a quick hack, to support proper OpenAPI use another model with the correct field names\",\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_response_by_alias.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 149,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_by_alias.py:class:Model:chunk1",
    "text": "class Model(BaseModel):\n    name: str = Field(alias=\"alias\")",
    "repo": "fastapi",
    "path": "tests\\test_response_by_alias.py",
    "type": "class",
    "name": "Model",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_by_alias.py:class:Config:chunk1",
    "text": "class Config:\n            schema_extra = {\n                \"description\": (\n                    \"response_model_by_alias=False is basically a quick hack, to support \"\n                    \"proper OpenAPI use another model with the correct field names\"\n                )\n            }",
    "repo": "fastapi",
    "path": "tests\\test_response_by_alias.py",
    "type": "class",
    "name": "Config",
    "loc": 29,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_by_alias.py:class:ModelNoAlias:chunk1",
    "text": "class ModelNoAlias(BaseModel):\n    name: str\n\n    if PYDANTIC_V2:\n        model_config = ConfigDict(\n            json_schema_extra={\n                \"description\": (\n                    \"response_model_by_alias=False is basically a quick hack, to support \"\n                    \"proper OpenAPI use another model with the correct field names\"\n                )\n            }\n        )\n    else:\n\n        class Config:\n            schema_extra = {\n                \"description\": (\n                    \"response_model_by_alias=False is basically a quick hack, to support \"\n                    \"proper OpenAPI use another model with the correct field names\"\n                )\n            }",
    "repo": "fastapi",
    "path": "tests\\test_response_by_alias.py",
    "type": "class",
    "name": "ModelNoAlias",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_change_status_code.py:function:test_dependency_set_status_code:chunk1",
    "text": "def test_dependency_set_status_code():\n    response = client.get(\"/\")\n    assert response.status_code == 201, response.text\n    assert response.json() == {\"msg\": \"Hello World\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_change_status_code.py",
    "type": "function",
    "name": "test_dependency_set_status_code",
    "loc": 23,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_class_no_mediatype.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/a\": {\n                \"get\": {\n                    \"responses\": {\n                        \"500\": {\n                            \"description\": \"Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"200\": {\"description\": \"Successful Response\"},\n                    },\n                    \"summary\": \"A\",\n                    \"operationId\": \"a_a_get\",\n                }\n            },\n            \"/b\": {\n                \"get\": {\n                    \"responses\": {\n                        \"500\": {\n                            \"description\": \"Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Error\"}\n                                }\n                            },\n                        },\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                    },\n                    \"summary\": \"B\",\n                    \"operationId\": \"b_b_get\",\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Error\": {\n                    \"title\": \"Error\",\n                    \"required\": [\"status\", \"title\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"status\": {\"title\": \"Status\", \"type\": \"string\"},\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                    },\n                },\n                \"JsonApiError\": {\n                    \"title\": \"JsonApiError\",\n                    \"required\": [\"errors\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"errors\": {\n                            \"title\": \"Errors\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/Error\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_response_class_no_mediatype.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 41,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_class_no_mediatype.py:class:JsonApiResponse:chunk1",
    "text": "class JsonApiResponse(JSONResponse):\n    media_type = \"application/vnd.api+json\"",
    "repo": "fastapi",
    "path": "tests\\test_response_class_no_mediatype.py",
    "type": "class",
    "name": "JsonApiResponse",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_class_no_mediatype.py:class:Error:chunk1",
    "text": "class Error(BaseModel):\n    status: str\n    title: str",
    "repo": "fastapi",
    "path": "tests\\test_response_class_no_mediatype.py",
    "type": "class",
    "name": "Error",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_class_no_mediatype.py:class:JsonApiError:chunk1",
    "text": "class JsonApiError(BaseModel):\n    errors: typing.List[Error]",
    "repo": "fastapi",
    "path": "tests\\test_response_class_no_mediatype.py",
    "type": "class",
    "name": "JsonApiError",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_code_no_body.py:function:test_get_response:chunk1",
    "text": "def test_get_response():\n    response = client.get(\"/a\")\n    assert response.status_code == 204, response.text\n    assert \"content-length\" not in response.headers\n    assert response.content == b\"\"",
    "repo": "fastapi",
    "path": "tests\\test_response_code_no_body.py",
    "type": "function",
    "name": "test_get_response",
    "loc": 42,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_code_no_body.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/a\": {\n                \"get\": {\n                    \"responses\": {\n                        \"500\": {\n                            \"description\": \"Error\",\n                            \"content\": {\n                                \"application/vnd.api+json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"204\": {\"description\": \"Successful Response\"},\n                    },\n                    \"summary\": \"A\",\n                    \"operationId\": \"a_a_get\",\n                }\n            },\n            \"/b\": {\n                \"get\": {\n                    \"responses\": {\n                        \"204\": {\"description\": \"No Content\"},\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                    },\n                    \"summary\": \"B\",\n                    \"operationId\": \"b_b_get\",\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Error\": {\n                    \"title\": \"Error\",\n                    \"required\": [\"status\", \"title\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"status\": {\"title\": \"Status\", \"type\": \"string\"},\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                    },\n                },\n                \"JsonApiError\": {\n                    \"title\": \"JsonApiError\",\n                    \"required\": [\"errors\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"errors\": {\n                            \"title\": \"Errors\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/Error\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_response_code_no_body.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 49,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_code_no_body.py:class:JsonApiResponse:chunk1",
    "text": "class JsonApiResponse(JSONResponse):\n    media_type = \"application/vnd.api+json\"",
    "repo": "fastapi",
    "path": "tests\\test_response_code_no_body.py",
    "type": "class",
    "name": "JsonApiResponse",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_code_no_body.py:class:Error:chunk1",
    "text": "class Error(BaseModel):\n    status: str\n    title: str",
    "repo": "fastapi",
    "path": "tests\\test_response_code_no_body.py",
    "type": "class",
    "name": "Error",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_code_no_body.py:class:JsonApiError:chunk1",
    "text": "class JsonApiError(BaseModel):\n    errors: typing.List[Error]",
    "repo": "fastapi",
    "path": "tests\\test_response_code_no_body.py",
    "type": "class",
    "name": "JsonApiError",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:no_response_model_no_annotation_return_model:chunk1",
    "text": "def no_response_model_no_annotation_return_model():\n    return User(name=\"John\", surname=\"Doe\")",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "no_response_model_no_annotation_return_model",
    "loc": 32,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:no_response_model_no_annotation_return_dict:chunk1",
    "text": "def no_response_model_no_annotation_return_dict():\n    return {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "no_response_model_no_annotation_return_dict",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:response_model_no_annotation_return_same_model:chunk1",
    "text": "def response_model_no_annotation_return_same_model():\n    return User(name=\"John\", surname=\"Doe\")",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "response_model_no_annotation_return_same_model",
    "loc": 42,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:response_model_no_annotation_return_exact_dict:chunk1",
    "text": "def response_model_no_annotation_return_exact_dict():\n    return {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "response_model_no_annotation_return_exact_dict",
    "loc": 47,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:response_model_no_annotation_return_invalid_dict:chunk1",
    "text": "def response_model_no_annotation_return_invalid_dict():\n    return {\"name\": \"John\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "response_model_no_annotation_return_invalid_dict",
    "loc": 52,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:response_model_no_annotation_return_invalid_model:chunk1",
    "text": "def response_model_no_annotation_return_invalid_model():\n    return Item(name=\"Foo\", price=42.0)",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "response_model_no_annotation_return_invalid_model",
    "loc": 57,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:response_model_no_annotation_return_dict_with_extra_data:chunk1",
    "text": "def response_model_no_annotation_return_dict_with_extra_data():\n    return {\"name\": \"John\", \"surname\": \"Doe\", \"password_hash\": \"secret\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "response_model_no_annotation_return_dict_with_extra_data",
    "loc": 64,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:response_model_no_annotation_return_submodel_with_extra_data:chunk1",
    "text": "def response_model_no_annotation_return_submodel_with_extra_data():\n    return DBUser(name=\"John\", surname=\"Doe\", password_hash=\"secret\")",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "response_model_no_annotation_return_submodel_with_extra_data",
    "loc": 71,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:no_response_model_annotation_return_same_model:chunk1",
    "text": "def no_response_model_annotation_return_same_model() -> User:\n    return User(name=\"John\", surname=\"Doe\")",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "no_response_model_annotation_return_same_model",
    "loc": 76,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:no_response_model_annotation_return_exact_dict:chunk1",
    "text": "def no_response_model_annotation_return_exact_dict() -> User:\n    return {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "no_response_model_annotation_return_exact_dict",
    "loc": 81,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:no_response_model_annotation_return_invalid_dict:chunk1",
    "text": "def no_response_model_annotation_return_invalid_dict() -> User:\n    return {\"name\": \"John\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "no_response_model_annotation_return_invalid_dict",
    "loc": 86,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:no_response_model_annotation_return_invalid_model:chunk1",
    "text": "def no_response_model_annotation_return_invalid_model() -> User:\n    return Item(name=\"Foo\", price=42.0)",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "no_response_model_annotation_return_invalid_model",
    "loc": 91,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:no_response_model_annotation_return_dict_with_extra_data:chunk1",
    "text": "def no_response_model_annotation_return_dict_with_extra_data() -> User:\n    return {\"name\": \"John\", \"surname\": \"Doe\", \"password_hash\": \"secret\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "no_response_model_annotation_return_dict_with_extra_data",
    "loc": 96,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:no_response_model_annotation_return_submodel_with_extra_data:chunk1",
    "text": "def no_response_model_annotation_return_submodel_with_extra_data() -> User:\n    return DBUser(name=\"John\", surname=\"Doe\", password_hash=\"secret\")",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "no_response_model_annotation_return_submodel_with_extra_data",
    "loc": 101,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:response_model_none_annotation_return_same_model:chunk1",
    "text": "def response_model_none_annotation_return_same_model() -> User:\n    return User(name=\"John\", surname=\"Doe\")",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "response_model_none_annotation_return_same_model",
    "loc": 106,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:response_model_none_annotation_return_exact_dict:chunk1",
    "text": "def response_model_none_annotation_return_exact_dict() -> User:\n    return {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "response_model_none_annotation_return_exact_dict",
    "loc": 111,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:response_model_none_annotation_return_invalid_dict:chunk1",
    "text": "def response_model_none_annotation_return_invalid_dict() -> User:\n    return {\"name\": \"John\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "response_model_none_annotation_return_invalid_dict",
    "loc": 116,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:response_model_none_annotation_return_invalid_model:chunk1",
    "text": "def response_model_none_annotation_return_invalid_model() -> User:\n    return Item(name=\"Foo\", price=42.0)",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "response_model_none_annotation_return_invalid_model",
    "loc": 121,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:response_model_none_annotation_return_dict_with_extra_data:chunk1",
    "text": "def response_model_none_annotation_return_dict_with_extra_data() -> User:\n    return {\"name\": \"John\", \"surname\": \"Doe\", \"password_hash\": \"secret\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "response_model_none_annotation_return_dict_with_extra_data",
    "loc": 128,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:response_model_none_annotation_return_submodel_with_extra_data:chunk1",
    "text": "def response_model_none_annotation_return_submodel_with_extra_data() -> User:\n    return DBUser(name=\"John\", surname=\"Doe\", password_hash=\"secret\")",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "response_model_none_annotation_return_submodel_with_extra_data",
    "loc": 136,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:response_model_model1_annotation_model2_return_same_model:chunk1",
    "text": "def response_model_model1_annotation_model2_return_same_model() -> Item:\n    return User(name=\"John\", surname=\"Doe\")",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "response_model_model1_annotation_model2_return_same_model",
    "loc": 143,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:response_model_model1_annotation_model2_return_exact_dict:chunk1",
    "text": "def response_model_model1_annotation_model2_return_exact_dict() -> Item:\n    return {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "response_model_model1_annotation_model2_return_exact_dict",
    "loc": 150,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:response_model_model1_annotation_model2_return_invalid_dict:chunk1",
    "text": "def response_model_model1_annotation_model2_return_invalid_dict() -> Item:\n    return {\"name\": \"John\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "response_model_model1_annotation_model2_return_invalid_dict",
    "loc": 157,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:response_model_model1_annotation_model2_return_invalid_model:chunk1",
    "text": "def response_model_model1_annotation_model2_return_invalid_model() -> Item:\n    return Item(name=\"Foo\", price=42.0)",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "response_model_model1_annotation_model2_return_invalid_model",
    "loc": 164,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:response_model_model1_annotation_model2_return_dict_with_extra_data:chunk1",
    "text": "def response_model_model1_annotation_model2_return_dict_with_extra_data() -> Item:\n    return {\"name\": \"John\", \"surname\": \"Doe\", \"password_hash\": \"secret\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "response_model_model1_annotation_model2_return_dict_with_extra_data",
    "loc": 172,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:response_model_model1_annotation_model2_return_submodel_with_extra_data:chunk1",
    "text": "def response_model_model1_annotation_model2_return_submodel_with_extra_data() -> Item:\n    return DBUser(name=\"John\", surname=\"Doe\", password_hash=\"secret\")",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "response_model_model1_annotation_model2_return_submodel_with_extra_data",
    "loc": 180,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:response_model_filtering_model_annotation_submodel_return_submodel:chunk1",
    "text": "def response_model_filtering_model_annotation_submodel_return_submodel() -> DBUser:\n    return DBUser(name=\"John\", surname=\"Doe\", password_hash=\"secret\")",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "response_model_filtering_model_annotation_submodel_return_submodel",
    "loc": 188,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:response_model_list_of_model_no_annotation:chunk1",
    "text": "def response_model_list_of_model_no_annotation():\n    return [\n        DBUser(name=\"John\", surname=\"Doe\", password_hash=\"secret\"),\n        DBUser(name=\"Jane\", surname=\"Does\", password_hash=\"secret2\"),\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "response_model_list_of_model_no_annotation",
    "loc": 193,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:no_response_model_annotation_list_of_model:chunk1",
    "text": "def no_response_model_annotation_list_of_model() -> List[User]:\n    return [\n        DBUser(name=\"John\", surname=\"Doe\", password_hash=\"secret\"),\n        DBUser(name=\"Jane\", surname=\"Does\", password_hash=\"secret2\"),\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "no_response_model_annotation_list_of_model",
    "loc": 201,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:no_response_model_annotation_forward_ref_list_of_model:chunk1",
    "text": "def no_response_model_annotation_forward_ref_list_of_model() -> \"List[User]\":\n    return [\n        DBUser(name=\"John\", surname=\"Doe\", password_hash=\"secret\"),\n        DBUser(name=\"Jane\", surname=\"Does\", password_hash=\"secret2\"),\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "no_response_model_annotation_forward_ref_list_of_model",
    "loc": 209,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:response_model_union_no_annotation_return_model1:chunk1",
    "text": "def response_model_union_no_annotation_return_model1():\n    return DBUser(name=\"John\", surname=\"Doe\", password_hash=\"secret\")",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "response_model_union_no_annotation_return_model1",
    "loc": 220,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:response_model_union_no_annotation_return_model2:chunk1",
    "text": "def response_model_union_no_annotation_return_model2():\n    return Item(name=\"Foo\", price=42.0)",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "response_model_union_no_annotation_return_model2",
    "loc": 228,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:no_response_model_annotation_union_return_model1:chunk1",
    "text": "def no_response_model_annotation_union_return_model1() -> Union[User, Item]:\n    return DBUser(name=\"John\", surname=\"Doe\", password_hash=\"secret\")",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "no_response_model_annotation_union_return_model1",
    "loc": 233,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:no_response_model_annotation_union_return_model2:chunk1",
    "text": "def no_response_model_annotation_union_return_model2() -> Union[User, Item]:\n    return Item(name=\"Foo\", price=42.0)",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "no_response_model_annotation_union_return_model2",
    "loc": 238,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:no_response_model_annotation_response_class:chunk1",
    "text": "def no_response_model_annotation_response_class() -> Response:\n    return Response(content=\"Foo\")",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "no_response_model_annotation_response_class",
    "loc": 243,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:no_response_model_annotation_json_response_class:chunk1",
    "text": "def no_response_model_annotation_json_response_class() -> JSONResponse:\n    return JSONResponse(content={\"foo\": \"bar\"})",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "no_response_model_annotation_json_response_class",
    "loc": 248,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_no_response_model_no_annotation_return_model:chunk1",
    "text": "def test_no_response_model_no_annotation_return_model():\n    response = client.get(\"/no_response_model-no_annotation-return_model\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_no_response_model_no_annotation_return_model",
    "loc": 255,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_no_response_model_no_annotation_return_dict:chunk1",
    "text": "def test_no_response_model_no_annotation_return_dict():\n    response = client.get(\"/no_response_model-no_annotation-return_dict\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_no_response_model_no_annotation_return_dict",
    "loc": 261,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_response_model_no_annotation_return_same_model:chunk1",
    "text": "def test_response_model_no_annotation_return_same_model():\n    response = client.get(\"/response_model-no_annotation-return_same_model\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_response_model_no_annotation_return_same_model",
    "loc": 267,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_response_model_no_annotation_return_exact_dict:chunk1",
    "text": "def test_response_model_no_annotation_return_exact_dict():\n    response = client.get(\"/response_model-no_annotation-return_exact_dict\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_response_model_no_annotation_return_exact_dict",
    "loc": 273,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_response_model_no_annotation_return_invalid_dict:chunk1",
    "text": "def test_response_model_no_annotation_return_invalid_dict():\n    with pytest.raises(ResponseValidationError) as excinfo:\n        client.get(\"/response_model-no_annotation-return_invalid_dict\")\n    assert \"missing\" in str(excinfo.value)",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_response_model_no_annotation_return_invalid_dict",
    "loc": 279,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_response_model_no_annotation_return_invalid_model:chunk1",
    "text": "def test_response_model_no_annotation_return_invalid_model():\n    with pytest.raises(ResponseValidationError) as excinfo:\n        client.get(\"/response_model-no_annotation-return_invalid_model\")\n    assert \"missing\" in str(excinfo.value)",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_response_model_no_annotation_return_invalid_model",
    "loc": 285,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_response_model_no_annotation_return_dict_with_extra_data:chunk1",
    "text": "def test_response_model_no_annotation_return_dict_with_extra_data():\n    response = client.get(\"/response_model-no_annotation-return_dict_with_extra_data\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_response_model_no_annotation_return_dict_with_extra_data",
    "loc": 291,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_response_model_no_annotation_return_submodel_with_extra_data:chunk1",
    "text": "def test_response_model_no_annotation_return_submodel_with_extra_data():\n    response = client.get(\n        \"/response_model-no_annotation-return_submodel_with_extra_data\"\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_response_model_no_annotation_return_submodel_with_extra_data",
    "loc": 297,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_no_response_model_annotation_return_same_model:chunk1",
    "text": "def test_no_response_model_annotation_return_same_model():\n    response = client.get(\"/no_response_model-annotation-return_same_model\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_no_response_model_annotation_return_same_model",
    "loc": 305,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_no_response_model_annotation_return_exact_dict:chunk1",
    "text": "def test_no_response_model_annotation_return_exact_dict():\n    response = client.get(\"/no_response_model-annotation-return_exact_dict\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_no_response_model_annotation_return_exact_dict",
    "loc": 311,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_no_response_model_annotation_return_invalid_dict:chunk1",
    "text": "def test_no_response_model_annotation_return_invalid_dict():\n    with pytest.raises(ResponseValidationError) as excinfo:\n        client.get(\"/no_response_model-annotation-return_invalid_dict\")\n    assert \"missing\" in str(excinfo.value)",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_no_response_model_annotation_return_invalid_dict",
    "loc": 317,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_no_response_model_annotation_return_invalid_model:chunk1",
    "text": "def test_no_response_model_annotation_return_invalid_model():\n    with pytest.raises(ResponseValidationError) as excinfo:\n        client.get(\"/no_response_model-annotation-return_invalid_model\")\n    assert \"missing\" in str(excinfo.value)",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_no_response_model_annotation_return_invalid_model",
    "loc": 323,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_no_response_model_annotation_return_dict_with_extra_data:chunk1",
    "text": "def test_no_response_model_annotation_return_dict_with_extra_data():\n    response = client.get(\"/no_response_model-annotation-return_dict_with_extra_data\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_no_response_model_annotation_return_dict_with_extra_data",
    "loc": 329,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_no_response_model_annotation_return_submodel_with_extra_data:chunk1",
    "text": "def test_no_response_model_annotation_return_submodel_with_extra_data():\n    response = client.get(\n        \"/no_response_model-annotation-return_submodel_with_extra_data\"\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_no_response_model_annotation_return_submodel_with_extra_data",
    "loc": 335,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_response_model_none_annotation_return_same_model:chunk1",
    "text": "def test_response_model_none_annotation_return_same_model():\n    response = client.get(\"/response_model_none-annotation-return_same_model\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_response_model_none_annotation_return_same_model",
    "loc": 343,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_response_model_none_annotation_return_exact_dict:chunk1",
    "text": "def test_response_model_none_annotation_return_exact_dict():\n    response = client.get(\"/response_model_none-annotation-return_exact_dict\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_response_model_none_annotation_return_exact_dict",
    "loc": 349,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_response_model_none_annotation_return_invalid_dict:chunk1",
    "text": "def test_response_model_none_annotation_return_invalid_dict():\n    response = client.get(\"/response_model_none-annotation-return_invalid_dict\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_response_model_none_annotation_return_invalid_dict",
    "loc": 355,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_response_model_none_annotation_return_invalid_model:chunk1",
    "text": "def test_response_model_none_annotation_return_invalid_model():\n    response = client.get(\"/response_model_none-annotation-return_invalid_model\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo\", \"price\": 42.0}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_response_model_none_annotation_return_invalid_model",
    "loc": 361,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_response_model_none_annotation_return_dict_with_extra_data:chunk1",
    "text": "def test_response_model_none_annotation_return_dict_with_extra_data():\n    response = client.get(\"/response_model_none-annotation-return_dict_with_extra_data\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"John\",\n        \"surname\": \"Doe\",\n        \"password_hash\": \"secret\",\n    }",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_response_model_none_annotation_return_dict_with_extra_data",
    "loc": 367,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_response_model_none_annotation_return_submodel_with_extra_data:chunk1",
    "text": "def test_response_model_none_annotation_return_submodel_with_extra_data():\n    response = client.get(\n        \"/response_model_none-annotation-return_submodel_with_extra_data\"\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"John\",\n        \"surname\": \"Doe\",\n        \"password_hash\": \"secret\",\n    }",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_response_model_none_annotation_return_submodel_with_extra_data",
    "loc": 377,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_response_model_model1_annotation_model2_return_same_model:chunk1",
    "text": "def test_response_model_model1_annotation_model2_return_same_model():\n    response = client.get(\"/response_model_model1-annotation_model2-return_same_model\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_response_model_model1_annotation_model2_return_same_model",
    "loc": 389,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_response_model_model1_annotation_model2_return_exact_dict:chunk1",
    "text": "def test_response_model_model1_annotation_model2_return_exact_dict():\n    response = client.get(\"/response_model_model1-annotation_model2-return_exact_dict\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_response_model_model1_annotation_model2_return_exact_dict",
    "loc": 395,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_response_model_model1_annotation_model2_return_invalid_dict:chunk1",
    "text": "def test_response_model_model1_annotation_model2_return_invalid_dict():\n    with pytest.raises(ResponseValidationError) as excinfo:\n        client.get(\"/response_model_model1-annotation_model2-return_invalid_dict\")\n    assert \"missing\" in str(excinfo.value)",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_response_model_model1_annotation_model2_return_invalid_dict",
    "loc": 401,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_response_model_model1_annotation_model2_return_invalid_model:chunk1",
    "text": "def test_response_model_model1_annotation_model2_return_invalid_model():\n    with pytest.raises(ResponseValidationError) as excinfo:\n        client.get(\"/response_model_model1-annotation_model2-return_invalid_model\")\n    assert \"missing\" in str(excinfo.value)",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_response_model_model1_annotation_model2_return_invalid_model",
    "loc": 407,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_response_model_model1_annotation_model2_return_dict_with_extra_data:chunk1",
    "text": "def test_response_model_model1_annotation_model2_return_dict_with_extra_data():\n    response = client.get(\n        \"/response_model_model1-annotation_model2-return_dict_with_extra_data\"\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_response_model_model1_annotation_model2_return_dict_with_extra_data",
    "loc": 413,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_response_model_model1_annotation_model2_return_submodel_with_extra_data:chunk1",
    "text": "def test_response_model_model1_annotation_model2_return_submodel_with_extra_data():\n    response = client.get(\n        \"/response_model_model1-annotation_model2-return_submodel_with_extra_data\"\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_response_model_model1_annotation_model2_return_submodel_with_extra_data",
    "loc": 421,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_response_model_filtering_model_annotation_submodel_return_submodel:chunk1",
    "text": "def test_response_model_filtering_model_annotation_submodel_return_submodel():\n    response = client.get(\n        \"/response_model_filtering_model-annotation_submodel-return_submodel\"\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_response_model_filtering_model_annotation_submodel_return_submodel",
    "loc": 429,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_response_model_list_of_model_no_annotation:chunk1",
    "text": "def test_response_model_list_of_model_no_annotation():\n    response = client.get(\"/response_model_list_of_model-no_annotation\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\"name\": \"John\", \"surname\": \"Doe\"},\n        {\"name\": \"Jane\", \"surname\": \"Does\"},\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_response_model_list_of_model_no_annotation",
    "loc": 437,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_no_response_model_annotation_list_of_model:chunk1",
    "text": "def test_no_response_model_annotation_list_of_model():\n    response = client.get(\"/no_response_model-annotation_list_of_model\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\"name\": \"John\", \"surname\": \"Doe\"},\n        {\"name\": \"Jane\", \"surname\": \"Does\"},\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_no_response_model_annotation_list_of_model",
    "loc": 446,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_no_response_model_annotation_forward_ref_list_of_model:chunk1",
    "text": "def test_no_response_model_annotation_forward_ref_list_of_model():\n    response = client.get(\"/no_response_model-annotation_forward_ref_list_of_model\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\"name\": \"John\", \"surname\": \"Doe\"},\n        {\"name\": \"Jane\", \"surname\": \"Does\"},\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_no_response_model_annotation_forward_ref_list_of_model",
    "loc": 455,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_response_model_union_no_annotation_return_model1:chunk1",
    "text": "def test_response_model_union_no_annotation_return_model1():\n    response = client.get(\"/response_model_union-no_annotation-return_model1\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_response_model_union_no_annotation_return_model1",
    "loc": 464,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_response_model_union_no_annotation_return_model2:chunk1",
    "text": "def test_response_model_union_no_annotation_return_model2():\n    response = client.get(\"/response_model_union-no_annotation-return_model2\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo\", \"price\": 42.0}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_response_model_union_no_annotation_return_model2",
    "loc": 470,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_no_response_model_annotation_union_return_model1:chunk1",
    "text": "def test_no_response_model_annotation_union_return_model1():\n    response = client.get(\"/no_response_model-annotation_union-return_model1\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_no_response_model_annotation_union_return_model1",
    "loc": 476,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_no_response_model_annotation_union_return_model2:chunk1",
    "text": "def test_no_response_model_annotation_union_return_model2():\n    response = client.get(\"/no_response_model-annotation_union-return_model2\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo\", \"price\": 42.0}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_no_response_model_annotation_union_return_model2",
    "loc": 482,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_no_response_model_annotation_return_class:chunk1",
    "text": "def test_no_response_model_annotation_return_class():\n    response = client.get(\"/no_response_model-annotation_response_class\")\n    assert response.status_code == 200, response.text\n    assert response.text == \"Foo\"",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_no_response_model_annotation_return_class",
    "loc": 488,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_no_response_model_annotation_json_response_class:chunk1",
    "text": "def test_no_response_model_annotation_json_response_class():\n    response = client.get(\"/no_response_model-annotation_json_response_class\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"foo\": \"bar\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_no_response_model_annotation_json_response_class",
    "loc": 494,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_invalid_response_model_field:chunk1",
    "text": "def test_invalid_response_model_field():\n    app = FastAPI()\n    with pytest.raises(FastAPIError) as e:\n\n        @app.get(\"/\")\n        def read_root() -> Union[Response, None]:\n            return Response(content=\"Foo\")  # pragma: no cover\n\n    assert \"valid Pydantic field type\" in e.value.args[0]\n    assert \"parameter response_model=None\" in e.value.args[0]",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_invalid_response_model_field",
    "loc": 500,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:read_root:chunk1",
    "text": "def read_root() -> Union[Response, None]:\n            return Response(content=\"Foo\")  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "read_root",
    "loc": 505,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/no_response_model-no_annotation-return_model\": {\n                \"get\": {\n                    \"summary\": \"No Response Model No Annotation Return Model\",\n                    \"operationId\": \"no_response_model_no_annotation_return_model_no_response_model_no_annotation_return_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-no_annotation-return_dict\": {\n                \"get\": {\n                    \"summary\": \"No Response Model No Annotation Return Dict\",\n                    \"operationId\": \"no_response_model_no_annotation_return_dict_no_response_model_no_annotation_return_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/response_model-no_annotation-return_same_model\": {\n                \"get\": {\n                    \"summary\": \"Response Model No Annotation Return Same Model\",\n                    \"operationId\": \"response_model_no_annotation_return_same_model_response_model_no_annotation_return_same_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model-no_annotation-return_exact_dict\": {\n                \"get\": {\n                    \"summary\": \"Response Model No Annotation Return Exact Dict\",\n                    \"operationId\": \"response_model_no_annotation_return_exact_dict_response_model_no_annotation_return_exact_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model-no_annotation-return_invalid_dict\": {\n                \"get\": {\n                    \"summary\": \"Response Model No Annotation Return Invalid Dict\",\n                    \"operationId\": \"response_model_no_annotation_return_invalid_dict_response_model_no_annotation_return_invalid_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model-no_annotation-return_invalid_model\": {\n                \"get\": {\n                    \"summary\": \"Response Model No Annotation Return Invalid Model\",\n                    \"operationId\": \"response_model_no_annotation_return_invalid_model_response_model_no_annotation_return_invalid_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model-no_annotation-return_dict_with_extra_data\": {\n                \"get\": {\n                    \"summary\": \"Response Model No Annotation Return Dict With Extra Data\",\n                    \"operationId\": \"response_model_no_annotation_return_dict_with_extra_data_response_model_no_annotation_return_dict_with_extra_data_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model-no_annotation-return_submodel_with_extra_data\": {\n                \"get\": {\n                    \"summary\": \"Response Model No Annotation Return Submodel With Extra Data\",\n                    \"operationId\": \"response_model_no_annotation_return_submodel_with_extra_data_response_model_no_annotation_return_submodel_with_extra_data_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation-return_same_model\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation Return Same Model\",\n                    \"operationId\": \"no_response_model_annotation_return_same_model_no_response_model_annotation_return_same_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation-return_exact_dict\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation Return Exact Dict\",\n                    \"operationId\": \"no_response_model_annotation_return_exact_dict_no_response_model_annotation_return_exact_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation-return_invalid_dict\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation Return Invalid Dict\",\n                    \"operationId\": \"no_response_model_annotation_return_invalid_dict_no_response_model_annotation_return_invalid_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation-return_invalid_model\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation Return Invalid Model\",\n                    \"operationId\": \"no_response_model_annotation_return_invalid_model_no_response_model_annotation_return_invalid_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation-return_dict_with_extra_data\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation Return Dict With Extra Data\",\n                    \"operationId\": \"no_response_model_annotation_return_dict_with_extra_data_no_response_model_annotation_return_dict_with_extra_data_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation-return_submodel_with_extra_data\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation Return Submodel With Extra Data\",\n                    \"operationId\": \"no_response_model_annotation_return_submodel_with_extra_data_no_response_model_annotation_return_submodel_with_extra_data_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model_none-annotation-return_same_model\": {\n                \"get\": {\n                    \"summary\": \"Response Model None Annotation Return Same Model\",\n                    \"operationId\": \"response_model_none_annotation_return_same_model_response_model_none_annotation_return_same_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/response_model_none-annotation-return_exact_dict\": {\n                \"get\": {\n                    \"summary\": \"Response Model None Annotation Return Exact Dict\",\n                    \"operationId\": \"response_model_none_annotation_return_exact_dict_response_model_none_annotation_return_exact_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/response_model_none-annotation-return_invalid_dict\": {\n                \"get\": {\n                    \"summary\": \"Response Model None Annotation Return Invalid Dict\",\n                    \"operationId\": \"response_model_none_annotation_return_invalid_dict_response_model_none_annotation_return_invalid_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/response_model_none-annotation-return_invalid_model\": {\n                \"get\": {\n                    \"summary\": \"Response Model None Annotation Return Invalid Model\",\n                    \"operationId\": \"response_model_none_annotation_return_invalid_model_response_model_none_annotation_return_invalid_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/response_model_none-annotation-return_dict_with_extra_data\": {\n                \"get\": {\n                    \"summary\": \"Response Model None Annotation Return Dict With Extra Data\",\n                    \"operationId\": \"response_model_none_annotation_return_dict_with_extra_data_response_model_none_annotation_return_dict_with_extra_data_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/response_model_none-annotation-return_submodel_with_extra_data\": {\n                \"get\": {\n                    \"summary\": \"Response Model None Annotation Return Submodel With Extra Data\",\n                    \"operationId\": \"response_model_none_annotation_return_submodel_with_extra_data_response_model_none_annotation_return_submodel_with_extra_data_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/response_model_model1-annotation_model2-return_same_model\": {\n                \"get\": {\n                    \"summary\": \"Response Model Model1 Annotation Model2 Return Same Model\",\n                    \"operationId\": \"response_model_model1_annotation_model2_return_same_model_response_model_model1_annotation_model2_return_same_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model_model1-annotation_model2-return_exact_dict\": {\n                \"get\": {\n                    \"summary\": \"Response Model Model1 Annotation Model2 Return Exact Dict\",\n                    \"operationId\": \"response_model_model1_annotation_model2_return_exact_dict_response_model_model1_annotation_model2_return_exact_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model_model1-annotation_model2-return_invalid_dict\": {\n                \"get\": {\n                    \"summary\": \"Response Model Model1 Annotation Model2 Return Invalid Dict\",\n                    \"operationId\": \"response_model_model1_annotation_model2_return_invalid_dict_response_model_model1_annotation_model2_return_invalid_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model_model1-annotation_model2-return_invalid_model\": {\n                \"get\": {\n                    \"summary\": \"Response Model Model1 Annotation Model2 Return Invalid Model\",\n                    \"operationId\": \"response_model_model1_annotation_model2_return_invalid_model_response_model_model1_annotation_model2_return_invalid_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model_model1-annotation_model2-return_dict_with_extra_data\": {\n                \"get\": {\n                    \"summary\": \"Response Model Model1 Annotation Model2 Return Dict With Extra Data\",\n                    \"operationId\": \"response_model_model1_annotation_model2_return_dict_with_extra_data_response_model_model1_annotation_model2_return_dict_with_extra_data_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model_model1-annotation_model2-return_submodel_with_extra_data\": {\n                \"get\": {\n                    \"summary\": \"Response Model Model1 Annotation Model2 Return Submodel With Extra Data\",\n                    \"operationId\": \"response_model_model1_annotation_model2_return_submodel_with_extra_data_response_model_model1_annotation_model2_return_submodel_with_extra_data_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model_filtering_model-annotation_submodel-return_submodel\": {\n                \"get\": {\n                    \"summary\": \"Response Model Filtering Model Annotation Submodel Return Submodel\",\n                    \"operationId\": \"response_model_filtering_model_annotation_submodel_return_submodel_response_model_filtering_model_annotation_submodel_return_submodel_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model_list_of_model-no_annotation\": {\n                \"get\": {\n                    \"summary\": \"Response Model List Of Model No Annotation\",\n                    \"operationId\": \"response_model_list_of_model_no_annotation_response_model_list_of_model_no_annotation_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Response Model List Of Model No Annotation Response Model List Of Model No Annotation Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/User\"},\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation_list_of_model\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation List Of Model\",\n                    \"operationId\": \"no_response_model_annotation_list_of_model_no_response_model_annotation_list_of_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response No Response Model Annotation List Of Model No Response Model Annotation List Of Model Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/User\"},\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation_forward_ref_list_of_model\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation Forward Ref List Of Model\",\n                    \"operationId\": \"no_response_model_annotation_forward_ref_list_of_model_no_response_model_annotation_forward_ref_list_of_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response No Response Model Annotation Forward Ref List Of Model No Response Model Annotation Forward Ref List Of Model Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/User\"},\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model_union-no_annotation-return_model1\": {\n                \"get\": {\n                    \"summary\": \"Response Model Union No Annotation Return Model1\",\n                    \"operationId\": \"response_model_union_no_annotation_return_model1_response_model_union_no_annotation_return_model1_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Response Model Union No Annotation Return Model1 Response Model Union No Annotation Return Model1 Get\",\n                                        \"anyOf\": [\n                                            {\"$ref\": \"#/components/schemas/User\"},\n                                            {\"$ref\": \"#/components/schemas/Item\"},\n                                        ],\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model_union-no_annotation-return_model2\": {\n                \"get\": {\n                    \"summary\": \"Response Model Union No Annotation Return Model2\",\n                    \"operationId\": \"response_model_union_no_annotation_return_model2_response_model_union_no_annotation_return_model2_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Response Model Union No Annotation Return Model2 Response Model Union No Annotation Return Model2 Get\",\n                                        \"anyOf\": [\n                                            {\"$ref\": \"#/components/schemas/User\"},\n                                            {\"$ref\": \"#/components/schemas/Item\"},\n                                        ],\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation_union-return_model1\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation Union Return Model1\",\n                    \"operationId\": \"no_response_model_annotation_union_return_model1_no_response_model_annotation_union_return_model1_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response No Response Model Annotation Union Return Model1 No Response Model Annotation Union Return Model1 Get\",\n                                        \"anyOf\": [\n                                            {\"$ref\": \"#/components/schemas/User\"},\n                                            {\"$ref\": \"#/components/schemas/Item\"},\n                                        ],\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation_union-return_model2\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation Union Return Model2\",\n                    \"operationId\": \"no_response_model_annotation_union_return_model2_no_response_model_annotation_union_return_model2_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response No Response Model Annotation Union Return Model2 No Response Model Annotation Union Return Model2 Get\",\n                                        \"anyOf\": [\n                                            {\"$ref\": \"#/components/schemas/User\"},\n                                            {\"$ref\": \"#/components/schemas/Item\"},\n                                        ],\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation_response_class\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation Response Class\",\n                    \"operationId\": \"no_response_model_annotation_response_class_no_response_model_annotation_response_class_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation_json_response_class\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation Json Response Class\",\n                    \"operationId\": \"no_response_model_annotation_json_response_class_no_response_model_annotation_json_response_class_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                    },\n                },\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": [\"name\", \"surname\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"surname\": {\"title\": \"Surname\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 512,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:class:BaseUser:chunk1",
    "text": "class BaseUser(BaseModel):\n    name: str",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "class",
    "name": "BaseUser",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:class:User:chunk1",
    "text": "class User(BaseUser):\n    surname: str",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "class",
    "name": "User",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:class:DBUser:chunk1",
    "text": "class DBUser(User):\n    password_hash: str",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "class",
    "name": "DBUser",
    "loc": 19,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_as_return_annotation.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    price: float",
    "repo": "fastapi",
    "path": "tests\\test_response_model_as_return_annotation.py",
    "type": "class",
    "name": "Item",
    "loc": 23,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_data_filter.py:function:test_filter_top_level_model:chunk1",
    "text": "def test_filter_top_level_model():\n    response = client.post(\n        \"/users\", json={\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n    )\n    assert response.json() == {\"email\": \"johndoe@example.com\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_data_filter.py",
    "type": "function",
    "name": "test_filter_top_level_model",
    "loc": 61,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_data_filter.py:function:test_filter_second_level_model:chunk1",
    "text": "def test_filter_second_level_model():\n    response = client.get(\"/pets/1\")\n    assert response.json() == {\n        \"name\": \"Nibbler\",\n        \"owner\": {\"email\": \"johndoe@example.com\"},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_response_model_data_filter.py",
    "type": "function",
    "name": "test_filter_second_level_model",
    "loc": 68,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_data_filter.py:function:test_list_of_models:chunk1",
    "text": "def test_list_of_models():\n    response = client.get(\"/pets/\")\n    assert response.json() == [\n        {\"name\": \"Nibbler\", \"owner\": {\"email\": \"johndoe@example.com\"}},\n        {\"name\": \"Zoidberg\", \"owner\": {\"email\": \"johndoe@example.com\"}},\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_response_model_data_filter.py",
    "type": "function",
    "name": "test_list_of_models",
    "loc": 76,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_data_filter.py:class:UserBase:chunk1",
    "text": "class UserBase(BaseModel):\n    email: str",
    "repo": "fastapi",
    "path": "tests\\test_response_model_data_filter.py",
    "type": "class",
    "name": "UserBase",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_data_filter.py:class:UserCreate:chunk1",
    "text": "class UserCreate(UserBase):\n    password: str",
    "repo": "fastapi",
    "path": "tests\\test_response_model_data_filter.py",
    "type": "class",
    "name": "UserCreate",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_data_filter.py:class:UserDB:chunk1",
    "text": "class UserDB(UserBase):\n    hashed_password: str",
    "repo": "fastapi",
    "path": "tests\\test_response_model_data_filter.py",
    "type": "class",
    "name": "UserDB",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_data_filter.py:class:PetDB:chunk1",
    "text": "class PetDB(BaseModel):\n    name: str\n    owner: UserDB",
    "repo": "fastapi",
    "path": "tests\\test_response_model_data_filter.py",
    "type": "class",
    "name": "PetDB",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_data_filter.py:class:PetOut:chunk1",
    "text": "class PetOut(BaseModel):\n    name: str\n    owner: UserBase",
    "repo": "fastapi",
    "path": "tests\\test_response_model_data_filter.py",
    "type": "class",
    "name": "PetOut",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_data_filter_no_inheritance.py:function:test_filter_top_level_model:chunk1",
    "text": "def test_filter_top_level_model():\n    response = client.post(\n        \"/users\", json={\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n    )\n    assert response.json() == {\"email\": \"johndoe@example.com\"}",
    "repo": "fastapi",
    "path": "tests\\test_response_model_data_filter_no_inheritance.py",
    "type": "function",
    "name": "test_filter_top_level_model",
    "loc": 63,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_data_filter_no_inheritance.py:function:test_filter_second_level_model:chunk1",
    "text": "def test_filter_second_level_model():\n    response = client.get(\"/pets/1\")\n    assert response.json() == {\n        \"name\": \"Nibbler\",\n        \"owner\": {\"email\": \"johndoe@example.com\"},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_response_model_data_filter_no_inheritance.py",
    "type": "function",
    "name": "test_filter_second_level_model",
    "loc": 70,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_data_filter_no_inheritance.py:function:test_list_of_models:chunk1",
    "text": "def test_list_of_models():\n    response = client.get(\"/pets/\")\n    assert response.json() == [\n        {\"name\": \"Nibbler\", \"owner\": {\"email\": \"johndoe@example.com\"}},\n        {\"name\": \"Zoidberg\", \"owner\": {\"email\": \"johndoe@example.com\"}},\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_response_model_data_filter_no_inheritance.py",
    "type": "function",
    "name": "test_list_of_models",
    "loc": 78,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_data_filter_no_inheritance.py:class:UserCreate:chunk1",
    "text": "class UserCreate(BaseModel):\n    email: str\n    password: str",
    "repo": "fastapi",
    "path": "tests\\test_response_model_data_filter_no_inheritance.py",
    "type": "class",
    "name": "UserCreate",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_data_filter_no_inheritance.py:class:UserDB:chunk1",
    "text": "class UserDB(BaseModel):\n    email: str\n    hashed_password: str",
    "repo": "fastapi",
    "path": "tests\\test_response_model_data_filter_no_inheritance.py",
    "type": "class",
    "name": "UserDB",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_data_filter_no_inheritance.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    email: str",
    "repo": "fastapi",
    "path": "tests\\test_response_model_data_filter_no_inheritance.py",
    "type": "class",
    "name": "User",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_data_filter_no_inheritance.py:class:PetDB:chunk1",
    "text": "class PetDB(BaseModel):\n    name: str\n    owner: UserDB",
    "repo": "fastapi",
    "path": "tests\\test_response_model_data_filter_no_inheritance.py",
    "type": "class",
    "name": "PetDB",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_data_filter_no_inheritance.py:class:PetOut:chunk1",
    "text": "class PetOut(BaseModel):\n    name: str\n    owner: User",
    "repo": "fastapi",
    "path": "tests\\test_response_model_data_filter_no_inheritance.py",
    "type": "class",
    "name": "PetOut",
    "loc": 29,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_include_exclude.py:function:simple_include:chunk1",
    "text": "def simple_include():\n    return Model2(\n        ref=Model1(foo=\"simple_include model foo\", bar=\"simple_include model bar\"),\n        baz=\"simple_include model2 baz\",\n    )",
    "repo": "fastapi",
    "path": "tests\\test_response_model_include_exclude.py",
    "type": "function",
    "name": "simple_include",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_include_exclude.py:function:simple_include_dict:chunk1",
    "text": "def simple_include_dict():\n    return {\n        \"ref\": {\n            \"foo\": \"simple_include_dict model foo\",\n            \"bar\": \"simple_include_dict model bar\",\n        },\n        \"baz\": \"simple_include_dict model2 baz\",\n    }",
    "repo": "fastapi",
    "path": "tests\\test_response_model_include_exclude.py",
    "type": "function",
    "name": "simple_include_dict",
    "loc": 42,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_include_exclude.py:function:simple_exclude:chunk1",
    "text": "def simple_exclude():\n    return Model2(\n        ref=Model1(foo=\"simple_exclude model foo\", bar=\"simple_exclude model bar\"),\n        baz=\"simple_exclude model2 baz\",\n    )",
    "repo": "fastapi",
    "path": "tests\\test_response_model_include_exclude.py",
    "type": "function",
    "name": "simple_exclude",
    "loc": 57,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_include_exclude.py:function:simple_exclude_dict:chunk1",
    "text": "def simple_exclude_dict():\n    return {\n        \"ref\": {\n            \"foo\": \"simple_exclude_dict model foo\",\n            \"bar\": \"simple_exclude_dict model bar\",\n        },\n        \"baz\": \"simple_exclude_dict model2 baz\",\n    }",
    "repo": "fastapi",
    "path": "tests\\test_response_model_include_exclude.py",
    "type": "function",
    "name": "simple_exclude_dict",
    "loc": 69,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_include_exclude.py:function:mixed:chunk1",
    "text": "def mixed():\n    return Model3(\n        name=\"mixed model3 name\",\n        age=3,\n        ref2=Model2(\n            ref=Model1(foo=\"mixed model foo\", bar=\"mixed model bar\"),\n            baz=\"mixed model2 baz\",\n        ),\n    )",
    "repo": "fastapi",
    "path": "tests\\test_response_model_include_exclude.py",
    "type": "function",
    "name": "mixed",
    "loc": 85,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_include_exclude.py:function:mixed_dict:chunk1",
    "text": "def mixed_dict():\n    return {\n        \"name\": \"mixed_dict model3 name\",\n        \"age\": 3,\n        \"ref2\": {\n            \"ref\": {\"foo\": \"mixed_dict model foo\", \"bar\": \"mixed_dict model bar\"},\n            \"baz\": \"mixed_dict model2 baz\",\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_response_model_include_exclude.py",
    "type": "function",
    "name": "mixed_dict",
    "loc": 102,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_include_exclude.py:function:test_nested_include_simple:chunk1",
    "text": "def test_nested_include_simple():\n    response = client.get(\"/simple_include\")\n\n    assert response.status_code == 200, response.text\n\n    assert response.json() == {\n        \"baz\": \"simple_include model2 baz\",\n        \"ref\": {\"foo\": \"simple_include model foo\"},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_response_model_include_exclude.py",
    "type": "function",
    "name": "test_nested_include_simple",
    "loc": 116,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_include_exclude.py:function:test_nested_include_simple_dict:chunk1",
    "text": "def test_nested_include_simple_dict():\n    response = client.get(\"/simple_include_dict\")\n\n    assert response.status_code == 200, response.text\n\n    assert response.json() == {\n        \"baz\": \"simple_include_dict model2 baz\",\n        \"ref\": {\"foo\": \"simple_include_dict model foo\"},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_response_model_include_exclude.py",
    "type": "function",
    "name": "test_nested_include_simple_dict",
    "loc": 127,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_include_exclude.py:function:test_nested_exclude_simple:chunk1",
    "text": "def test_nested_exclude_simple():\n    response = client.get(\"/simple_exclude\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"baz\": \"simple_exclude model2 baz\",\n        \"ref\": {\"foo\": \"simple_exclude model foo\"},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_response_model_include_exclude.py",
    "type": "function",
    "name": "test_nested_exclude_simple",
    "loc": 138,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_include_exclude.py:function:test_nested_exclude_simple_dict:chunk1",
    "text": "def test_nested_exclude_simple_dict():\n    response = client.get(\"/simple_exclude_dict\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"baz\": \"simple_exclude_dict model2 baz\",\n        \"ref\": {\"foo\": \"simple_exclude_dict model foo\"},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_response_model_include_exclude.py",
    "type": "function",
    "name": "test_nested_exclude_simple_dict",
    "loc": 147,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_include_exclude.py:function:test_nested_include_mixed:chunk1",
    "text": "def test_nested_include_mixed():\n    response = client.get(\"/mixed\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"mixed model3 name\",\n        \"ref2\": {\n            \"ref\": {\"foo\": \"mixed model foo\", \"bar\": \"mixed model bar\"},\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_response_model_include_exclude.py",
    "type": "function",
    "name": "test_nested_include_mixed",
    "loc": 156,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_include_exclude.py:function:test_nested_include_mixed_dict:chunk1",
    "text": "def test_nested_include_mixed_dict():\n    response = client.get(\"/mixed_dict\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"mixed_dict model3 name\",\n        \"ref2\": {\n            \"ref\": {\"foo\": \"mixed_dict model foo\", \"bar\": \"mixed_dict model bar\"},\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_response_model_include_exclude.py",
    "type": "function",
    "name": "test_nested_include_mixed_dict",
    "loc": 167,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_include_exclude.py:class:Model1:chunk1",
    "text": "class Model1(BaseModel):\n    foo: str\n    bar: str",
    "repo": "fastapi",
    "path": "tests\\test_response_model_include_exclude.py",
    "type": "class",
    "name": "Model1",
    "loc": 6,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_include_exclude.py:class:Model2:chunk1",
    "text": "class Model2(BaseModel):\n    ref: Model1\n    baz: str",
    "repo": "fastapi",
    "path": "tests\\test_response_model_include_exclude.py",
    "type": "class",
    "name": "Model2",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_include_exclude.py:class:Model3:chunk1",
    "text": "class Model3(BaseModel):\n    name: str\n    age: int\n    ref2: Model2",
    "repo": "fastapi",
    "path": "tests\\test_response_model_include_exclude.py",
    "type": "class",
    "name": "Model3",
    "loc": 16,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_invalid.py:function:test_invalid_response_model_raises:chunk1",
    "text": "def test_invalid_response_model_raises():\n    with pytest.raises(FastAPIError):\n        app = FastAPI()\n\n        @app.get(\"/\", response_model=NonPydanticModel)\n        def read_root():\n            pass  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_response_model_invalid.py",
    "type": "function",
    "name": "test_invalid_response_model_raises",
    "loc": 12,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_invalid.py:function:read_root:chunk1",
    "text": "def read_root():\n            pass  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_response_model_invalid.py",
    "type": "function",
    "name": "read_root",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_invalid.py:function:test_invalid_response_model_sub_type_raises:chunk1",
    "text": "def test_invalid_response_model_sub_type_raises():\n    with pytest.raises(FastAPIError):\n        app = FastAPI()\n\n        @app.get(\"/\", response_model=List[NonPydanticModel])\n        def read_root():\n            pass  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_response_model_invalid.py",
    "type": "function",
    "name": "test_invalid_response_model_sub_type_raises",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_invalid.py:function:read_root:chunk1",
    "text": "def read_root():\n            pass  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_response_model_invalid.py",
    "type": "function",
    "name": "read_root",
    "loc": 26,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_invalid.py:function:test_invalid_response_model_in_responses_raises:chunk1",
    "text": "def test_invalid_response_model_in_responses_raises():\n    with pytest.raises(FastAPIError):\n        app = FastAPI()\n\n        @app.get(\"/\", responses={\"500\": {\"model\": NonPydanticModel}})\n        def read_root():\n            pass  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_response_model_invalid.py",
    "type": "function",
    "name": "test_invalid_response_model_in_responses_raises",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_invalid.py:function:read_root:chunk1",
    "text": "def read_root():\n            pass  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_response_model_invalid.py",
    "type": "function",
    "name": "read_root",
    "loc": 35,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_invalid.py:function:test_invalid_response_model_sub_type_in_responses_raises:chunk1",
    "text": "def test_invalid_response_model_sub_type_in_responses_raises():\n    with pytest.raises(FastAPIError):\n        app = FastAPI()\n\n        @app.get(\"/\", responses={\"500\": {\"model\": List[NonPydanticModel]}})\n        def read_root():\n            pass  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_response_model_invalid.py",
    "type": "function",
    "name": "test_invalid_response_model_sub_type_in_responses_raises",
    "loc": 39,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_invalid.py:function:read_root:chunk1",
    "text": "def read_root():\n            pass  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_response_model_invalid.py",
    "type": "function",
    "name": "read_root",
    "loc": 44,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_invalid.py:class:NonPydanticModel:chunk1",
    "text": "class NonPydanticModel:\n    pass",
    "repo": "fastapi",
    "path": "tests\\test_response_model_invalid.py",
    "type": "class",
    "name": "NonPydanticModel",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_sub_types.py:function:valid1:chunk1",
    "text": "def valid1():\n    pass",
    "repo": "fastapi",
    "path": "tests\\test_response_model_sub_types.py",
    "type": "function",
    "name": "valid1",
    "loc": 16,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_sub_types.py:function:valid2:chunk1",
    "text": "def valid2():\n    pass",
    "repo": "fastapi",
    "path": "tests\\test_response_model_sub_types.py",
    "type": "function",
    "name": "valid2",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_sub_types.py:function:valid3:chunk1",
    "text": "def valid3():\n    pass",
    "repo": "fastapi",
    "path": "tests\\test_response_model_sub_types.py",
    "type": "function",
    "name": "valid3",
    "loc": 26,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_sub_types.py:function:valid4:chunk1",
    "text": "def valid4():\n    pass",
    "repo": "fastapi",
    "path": "tests\\test_response_model_sub_types.py",
    "type": "function",
    "name": "valid4",
    "loc": 31,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_sub_types.py:function:test_path_operations:chunk1",
    "text": "def test_path_operations():\n    response = client.get(\"/valid1\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/valid2\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/valid3\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/valid4\")\n    assert response.status_code == 200, response.text",
    "repo": "fastapi",
    "path": "tests\\test_response_model_sub_types.py",
    "type": "function",
    "name": "test_path_operations",
    "loc": 38,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_sub_types.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/valid1\": {\n                \"get\": {\n                    \"summary\": \"Valid1\",\n                    \"operationId\": \"valid1_valid1_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"500\": {\n                            \"description\": \"Internal Server Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 500 Valid1 Valid1 Get\",\n                                        \"type\": \"integer\",\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/valid2\": {\n                \"get\": {\n                    \"summary\": \"Valid2\",\n                    \"operationId\": \"valid2_valid2_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"500\": {\n                            \"description\": \"Internal Server Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 500 Valid2 Valid2 Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"type\": \"integer\"},\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/valid3\": {\n                \"get\": {\n                    \"summary\": \"Valid3\",\n                    \"operationId\": \"valid3_valid3_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"500\": {\n                            \"description\": \"Internal Server Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Model\"}\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/valid4\": {\n                \"get\": {\n                    \"summary\": \"Valid4\",\n                    \"operationId\": \"valid4_valid4_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"500\": {\n                            \"description\": \"Internal Server Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 500 Valid4 Valid4 Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Model\"},\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Model\": {\n                    \"title\": \"Model\",\n                    \"required\": [\"name\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"name\": {\"title\": \"Name\", \"type\": \"string\"}},\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_response_model_sub_types.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 49,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_response_model_sub_types.py:class:Model:chunk1",
    "text": "class Model(BaseModel):\n    name: str",
    "repo": "fastapi",
    "path": "tests\\test_response_model_sub_types.py",
    "type": "class",
    "name": "Model",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_events.py:function:state:chunk1",
    "text": "def state() -> State:\n    return State()",
    "repo": "fastapi",
    "path": "tests\\test_router_events.py",
    "type": "function",
    "name": "state",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_events.py:function:test_router_events:chunk1",
    "text": "def test_router_events(state: State) -> None:\n    app = FastAPI()\n\n    @app.get(\"/\")\n    def main() -> Dict[str, str]:\n        return {\"message\": \"Hello World\"}\n\n    @app.on_event(\"startup\")\n    def app_startup() -> None:\n        state.app_startup = True\n\n    @app.on_event(\"shutdown\")\n    def app_shutdown() -> None:\n        state.app_shutdown = True\n\n    router = APIRouter()\n\n    @router.on_event(\"startup\")\n    def router_startup() -> None:\n        state.router_startup = True\n\n    @router.on_event(\"shutdown\")\n    def router_shutdown() -> None:\n        state.router_shutdown = True\n\n    sub_router = APIRouter()\n\n    @sub_router.on_event(\"startup\")\n    def sub_router_startup() -> None:\n        state.sub_router_startup = True\n\n    @sub_router.on_event(\"shutdown\")\n    def sub_router_shutdown() -> None:\n        state.sub_router_shutdown = True\n\n    router.include_router(sub_router)\n    app.include_router(router)\n\n    assert state.app_startup is False\n    assert state.router_startup is False\n    assert state.sub_router_startup is False\n    assert state.app_shutdown is False\n    assert state.router_shutdown is False\n    assert state.sub_router_shutdown is False\n    with TestClient(app) as client:\n        assert state.app_startup is True\n        assert state.router_startup is True\n        assert state.sub_router_startup is True\n        assert state.app_shutdown is False\n        assert state.router_shutdown is False\n        assert state.sub_router_shutdown is False\n        response = client.get(\"/\")\n        assert response.status_code == 200, response.text\n        assert response.json() == {\"message\": \"Hello World\"}\n    assert state.app_startup is True\n    assert state.router_startup is True\n    assert state.sub_router_startup is True\n    assert state.app_shutdown is True\n    assert state.router_shutdown is True\n    assert state.sub_router_shutdown is True",
    "repo": "fastapi",
    "path": "tests\\test_router_events.py",
    "type": "function",
    "name": "test_router_events",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_events.py:function:main:chunk1",
    "text": "def main() -> Dict[str, str]:\n        return {\"message\": \"Hello World\"}",
    "repo": "fastapi",
    "path": "tests\\test_router_events.py",
    "type": "function",
    "name": "main",
    "loc": 31,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_events.py:function:app_startup:chunk1",
    "text": "def app_startup() -> None:\n        state.app_startup = True",
    "repo": "fastapi",
    "path": "tests\\test_router_events.py",
    "type": "function",
    "name": "app_startup",
    "loc": 35,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_events.py:function:app_shutdown:chunk1",
    "text": "def app_shutdown() -> None:\n        state.app_shutdown = True",
    "repo": "fastapi",
    "path": "tests\\test_router_events.py",
    "type": "function",
    "name": "app_shutdown",
    "loc": 39,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_events.py:function:router_startup:chunk1",
    "text": "def router_startup() -> None:\n        state.router_startup = True",
    "repo": "fastapi",
    "path": "tests\\test_router_events.py",
    "type": "function",
    "name": "router_startup",
    "loc": 45,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_events.py:function:router_shutdown:chunk1",
    "text": "def router_shutdown() -> None:\n        state.router_shutdown = True",
    "repo": "fastapi",
    "path": "tests\\test_router_events.py",
    "type": "function",
    "name": "router_shutdown",
    "loc": 49,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_events.py:function:sub_router_startup:chunk1",
    "text": "def sub_router_startup() -> None:\n        state.sub_router_startup = True",
    "repo": "fastapi",
    "path": "tests\\test_router_events.py",
    "type": "function",
    "name": "sub_router_startup",
    "loc": 55,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_events.py:function:sub_router_shutdown:chunk1",
    "text": "def sub_router_shutdown() -> None:\n        state.sub_router_shutdown = True",
    "repo": "fastapi",
    "path": "tests\\test_router_events.py",
    "type": "function",
    "name": "sub_router_shutdown",
    "loc": 59,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_events.py:function:test_app_lifespan_state:chunk1",
    "text": "def test_app_lifespan_state(state: State) -> None:\n    @asynccontextmanager\n    async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]:\n        state.app_startup = True\n        yield\n        state.app_shutdown = True\n\n    app = FastAPI(lifespan=lifespan)\n\n    @app.get(\"/\")\n    def main() -> Dict[str, str]:\n        return {\"message\": \"Hello World\"}\n\n    assert state.app_startup is False\n    assert state.app_shutdown is False\n    with TestClient(app) as client:\n        assert state.app_startup is True\n        assert state.app_shutdown is False\n        response = client.get(\"/\")\n        assert response.status_code == 200, response.text\n        assert response.json() == {\"message\": \"Hello World\"}\n    assert state.app_startup is True\n    assert state.app_shutdown is True",
    "repo": "fastapi",
    "path": "tests\\test_router_events.py",
    "type": "function",
    "name": "test_app_lifespan_state",
    "loc": 89,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_events.py:function:main:chunk1",
    "text": "def main() -> Dict[str, str]:\n        return {\"message\": \"Hello World\"}",
    "repo": "fastapi",
    "path": "tests\\test_router_events.py",
    "type": "function",
    "name": "main",
    "loc": 99,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_events.py:function:test_router_nested_lifespan_state:chunk1",
    "text": "def test_router_nested_lifespan_state(state: State) -> None:\n    @asynccontextmanager\n    async def lifespan(app: FastAPI) -> AsyncGenerator[Dict[str, bool], None]:\n        state.app_startup = True\n        yield {\"app\": True}\n        state.app_shutdown = True\n\n    @asynccontextmanager\n    async def router_lifespan(app: FastAPI) -> AsyncGenerator[Dict[str, bool], None]:\n        state.router_startup = True\n        yield {\"router\": True}\n        state.router_shutdown = True\n\n    @asynccontextmanager\n    async def subrouter_lifespan(app: FastAPI) -> AsyncGenerator[Dict[str, bool], None]:\n        state.sub_router_startup = True\n        yield {\"sub_router\": True}\n        state.sub_router_shutdown = True\n\n    sub_router = APIRouter(lifespan=subrouter_lifespan)\n\n    router = APIRouter(lifespan=router_lifespan)\n    router.include_router(sub_router)\n\n    app = FastAPI(lifespan=lifespan)\n    app.include_router(router)\n\n    @app.get(\"/\")\n    def main(request: Request) -> Dict[str, str]:\n        assert request.state.app\n        assert request.state.router\n        assert request.state.sub_router\n        return {\"message\": \"Hello World\"}\n\n    assert state.app_startup is False\n    assert state.router_startup is False\n    assert state.sub_router_startup is False\n    assert state.app_shutdown is False\n    assert state.router_shutdown is False\n    assert state.sub_router_shutdown is False\n\n    with TestClient(app) as client:\n        assert state.app_startup is True\n        assert state.router_startup is True\n        assert state.sub_router_startup is True\n        assert state.app_shutdown is False\n        assert state.router_shutdown is False\n        assert state.sub_router_shutdown is False\n        response = client.get(\"/\")\n        assert response.status_code == 200, response.text\n        assert response.json() == {\"message\": \"Hello World\"}\n\n    assert state.app_startup is True\n    assert state.router_startup is True\n    assert state.sub_router_startup is True\n    assert state.app_shutdown is True\n    assert state.router_shutdown is True\n    assert state.sub_router_shutdown is True",
    "repo": "fastapi",
    "path": "tests\\test_router_events.py",
    "type": "function",
    "name": "test_router_nested_lifespan_state",
    "loc": 114,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_events.py:function:main:chunk1",
    "text": "def main(request: Request) -> Dict[str, str]:\n        assert request.state.app\n        assert request.state.router\n        assert request.state.sub_router\n        return {\"message\": \"Hello World\"}",
    "repo": "fastapi",
    "path": "tests\\test_router_events.py",
    "type": "function",
    "name": "main",
    "loc": 142,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_events.py:function:test_router_nested_lifespan_state_overriding_by_parent:chunk1",
    "text": "def test_router_nested_lifespan_state_overriding_by_parent() -> None:\n    @asynccontextmanager\n    async def lifespan(\n        app: FastAPI,\n    ) -> AsyncGenerator[Dict[str, Union[str, bool]], None]:\n        yield {\n            \"app_specific\": True,\n            \"overridden\": \"app\",\n        }\n\n    @asynccontextmanager\n    async def router_lifespan(\n        app: FastAPI,\n    ) -> AsyncGenerator[Dict[str, Union[str, bool]], None]:\n        yield {\n            \"router_specific\": True,\n            \"overridden\": \"router\",  # should override parent\n        }\n\n    router = APIRouter(lifespan=router_lifespan)\n    app = FastAPI(lifespan=lifespan)\n    app.include_router(router)\n\n    with TestClient(app) as client:\n        assert client.app_state == {\n            \"app_specific\": True,\n            \"router_specific\": True,\n            \"overridden\": \"app\",\n        }",
    "repo": "fastapi",
    "path": "tests\\test_router_events.py",
    "type": "function",
    "name": "test_router_nested_lifespan_state_overriding_by_parent",
    "loc": 174,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_events.py:function:test_merged_no_return_lifespans_return_none:chunk1",
    "text": "def test_merged_no_return_lifespans_return_none() -> None:\n    @asynccontextmanager\n    async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]:\n        yield\n\n    @asynccontextmanager\n    async def router_lifespan(app: FastAPI) -> AsyncGenerator[None, None]:\n        yield\n\n    router = APIRouter(lifespan=router_lifespan)\n    app = FastAPI(lifespan=lifespan)\n    app.include_router(router)\n\n    with TestClient(app) as client:\n        assert not client.app_state",
    "repo": "fastapi",
    "path": "tests\\test_router_events.py",
    "type": "function",
    "name": "test_merged_no_return_lifespans_return_none",
    "loc": 205,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_events.py:function:test_merged_mixed_state_lifespans:chunk1",
    "text": "def test_merged_mixed_state_lifespans() -> None:\n    @asynccontextmanager\n    async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]:\n        yield\n\n    @asynccontextmanager\n    async def router_lifespan(app: FastAPI) -> AsyncGenerator[Dict[str, bool], None]:\n        yield {\"router\": True}\n\n    @asynccontextmanager\n    async def sub_router_lifespan(app: FastAPI) -> AsyncGenerator[None, None]:\n        yield\n\n    sub_router = APIRouter(lifespan=sub_router_lifespan)\n    router = APIRouter(lifespan=router_lifespan)\n    app = FastAPI(lifespan=lifespan)\n    router.include_router(sub_router)\n    app.include_router(router)\n\n    with TestClient(app) as client:\n        assert client.app_state == {\"router\": True}",
    "repo": "fastapi",
    "path": "tests\\test_router_events.py",
    "type": "function",
    "name": "test_merged_mixed_state_lifespans",
    "loc": 222,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_events.py:class:State:chunk1",
    "text": "class State(BaseModel):\n    app_startup: bool = False\n    app_shutdown: bool = False\n    router_startup: bool = False\n    router_shutdown: bool = False\n    sub_router_startup: bool = False\n    sub_router_shutdown: bool = False",
    "repo": "fastapi",
    "path": "tests\\test_router_events.py",
    "type": "class",
    "name": "State",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_prefix_with_template.py:function:read_user:chunk1",
    "text": "def read_user(segment: str, id: str):\n    return {\"segment\": segment, \"id\": id}",
    "repo": "fastapi",
    "path": "tests\\test_router_prefix_with_template.py",
    "type": "function",
    "name": "read_user",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_prefix_with_template.py:function:test_get:chunk1",
    "text": "def test_get():\n    response = client.get(\"/seg/users/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"segment\": \"seg\", \"id\": \"foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_router_prefix_with_template.py",
    "type": "function",
    "name": "test_get",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_redirect_slashes.py:function:test_redirect_slashes_enabled:chunk1",
    "text": "def test_redirect_slashes_enabled():\n    app = FastAPI()\n    router = APIRouter()\n\n    @router.get(\"/hello/\")\n    def hello_page() -> str:\n        return \"Hello, World!\"\n\n    app.include_router(router)\n\n    client = TestClient(app)\n\n    response = client.get(\"/hello/\", follow_redirects=False)\n    assert response.status_code == 200\n\n    response = client.get(\"/hello\", follow_redirects=False)\n    assert response.status_code == 307",
    "repo": "fastapi",
    "path": "tests\\test_router_redirect_slashes.py",
    "type": "function",
    "name": "test_redirect_slashes_enabled",
    "loc": 5,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_redirect_slashes.py:function:hello_page:chunk1",
    "text": "def hello_page() -> str:\n        return \"Hello, World!\"",
    "repo": "fastapi",
    "path": "tests\\test_router_redirect_slashes.py",
    "type": "function",
    "name": "hello_page",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_redirect_slashes.py:function:test_redirect_slashes_disabled:chunk1",
    "text": "def test_redirect_slashes_disabled():\n    app = FastAPI(redirect_slashes=False)\n    router = APIRouter()\n\n    @router.get(\"/hello/\")\n    def hello_page() -> str:\n        return \"Hello, World!\"\n\n    app.include_router(router)\n\n    client = TestClient(app)\n\n    response = client.get(\"/hello/\", follow_redirects=False)\n    assert response.status_code == 200\n\n    response = client.get(\"/hello\", follow_redirects=False)\n    assert response.status_code == 404",
    "repo": "fastapi",
    "path": "tests\\test_router_redirect_slashes.py",
    "type": "function",
    "name": "test_redirect_slashes_disabled",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_router_redirect_slashes.py:function:hello_page:chunk1",
    "text": "def hello_page() -> str:\n        return \"Hello, World!\"",
    "repo": "fastapi",
    "path": "tests\\test_router_redirect_slashes.py",
    "type": "function",
    "name": "hello_page",
    "loc": 29,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_route_scope.py:function:test_get:chunk1",
    "text": "def test_get():\n    response = client.get(\"/users/rick\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"user_id\": \"rick\", \"path\": \"/users/{user_id}\"}",
    "repo": "fastapi",
    "path": "tests\\test_route_scope.py",
    "type": "function",
    "name": "test_get",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_route_scope.py:function:test_invalid_method_doesnt_match:chunk1",
    "text": "def test_invalid_method_doesnt_match():\n    response = client.post(\"/users/rick\")\n    assert response.status_code == 405, response.text",
    "repo": "fastapi",
    "path": "tests\\test_route_scope.py",
    "type": "function",
    "name": "test_invalid_method_doesnt_match",
    "loc": 31,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_route_scope.py:function:test_invalid_path_doesnt_match:chunk1",
    "text": "def test_invalid_path_doesnt_match():\n    response = client.post(\"/usersx/rick\")\n    assert response.status_code == 404, response.text",
    "repo": "fastapi",
    "path": "tests\\test_route_scope.py",
    "type": "function",
    "name": "test_invalid_path_doesnt_match",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_route_scope.py:function:test_websocket:chunk1",
    "text": "def test_websocket():\n    with client.websocket_connect(\"/items/portal-gun\") as websocket:\n        data = websocket.receive_json()\n        assert data == {\"item_id\": \"portal-gun\", \"path\": \"/items/{item_id}\"}",
    "repo": "fastapi",
    "path": "tests\\test_route_scope.py",
    "type": "function",
    "name": "test_websocket",
    "loc": 41,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_route_scope.py:function:test_websocket_invalid_path_doesnt_match:chunk1",
    "text": "def test_websocket_invalid_path_doesnt_match():\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/itemsx/portal-gun\"):\n            pass",
    "repo": "fastapi",
    "path": "tests\\test_route_scope.py",
    "type": "function",
    "name": "test_websocket_invalid_path_doesnt_match",
    "loc": 47,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_schema_extra_examples.py:function:create_app:chunk1",
    "text": "def create_app():\n    app = FastAPI()\n\n    class Item(BaseModel):\n        data: str\n\n        if PYDANTIC_V2:\n            model_config = ConfigDict(\n                json_schema_extra={\"example\": {\"data\": \"Data in schema_extra\"}}\n            )\n        else:\n\n            class Config:\n                schema_extra = {\"example\": {\"data\": \"Data in schema_extra\"}}\n\n    @app.post(\"/schema_extra/\")\n    def schema_extra(item: Item):\n        return item\n\n    with pytest.warns(DeprecationWarning):\n\n        @app.post(\"/example/\")\n        def example(item: Item = Body(example={\"data\": \"Data in Body example\"})):\n            return item\n\n    @app.post(\"/examples/\")\n    def examples(\n        item: Item = Body(\n            examples=[\n                {\"data\": \"Data in Body examples, example1\"},\n                {\"data\": \"Data in Body examples, example2\"},\n            ],\n        ),\n    ):\n        return item\n\n    with pytest.warns(DeprecationWarning):\n\n        @app.post(\"/example_examples/\")\n        def example_examples(\n            item: Item = Body(\n                example={\"data\": \"Overridden example\"},\n                examples=[\n                    {\"data\": \"examples example_examples 1\"},\n                    {\"data\": \"examples example_examples 2\"},\n                ],\n            ),\n        ):\n            return item\n\n    # TODO: enable these tests once/if Form(embed=False) is supported\n    # TODO: In that case, define if File() should support example/examples too\n    # @app.post(\"/form_example\")\n    # def form_example(firstname: str = Form(example=\"John\")):\n    #     return firstname\n\n    # @app.post(\"/form_examples\")\n    # def form_examples(\n    #     lastname: str = Form(\n    #         ...,\n    #         examples={\n    #             \"example1\": {\"summary\": \"last name summary\", \"value\": \"Doe\"},\n    #             \"example2\": {\"value\": \"Doesn't\"},\n    #         },\n    #     ),\n    # ):\n    #     return lastname\n\n    # @app.post(\"/form_example_examples\")\n    # def form_example_examples(\n    #     lastname: str = Form(\n    #         ...,\n    #         example=\"Doe overridden\",\n    #         examples={\n    #             \"example1\": {\"summary\": \"last name summary\", \"value\": \"Doe\"},\n    #             \"example2\": {\"value\": \"Doesn't\"},\n    #         },\n    #     ),\n    # ):\n    #     return lastname\n\n    with pytest.warns(DeprecationWarning):\n\n        @app.get(\"/path_example/{item_id}\")\n        def path_example(\n            item_id: str = Path(\n                example=\"item_1\",\n            ),\n        ):\n            return item_id\n\n    @app.get(\"/path_examples/{item_id}\")\n    def path_examples(\n        item_id: str = Path(\n            examples=[\"item_1\", \"item_2\"],\n        ),\n    ):\n        return item_id\n\n    with pytest.warns(DeprecationWarning):\n\n        @app.get(\"/path_example_examples/{item_id}\")\n        def path_example_examples(\n            item_id: str = Path(\n                example=\"item_overridden\",\n                examples=[\"item_1\", \"item_2\"],\n            ),\n        ):\n            return item_id\n\n    with pytest.warns(DeprecationWarning):\n\n        @app.get(\"/query_example/\")\n        def query_example(\n            data: Union[str, None] = Query(\n                default=None,\n                example=\"query1\",\n            ),\n        ):\n            return data\n\n    @app.get(\"/query_examples/\")\n    def query_examples(\n        data: Union[str, None] = Query(\n            default=None,\n            examples=[\"query1\", \"query2\"],\n        ),\n    ):\n        return data\n\n    with pytest.warns(DeprecationWarning):\n\n        @app.get(\"/query_example_examples/\")\n        def query_example_examples(\n            data: Union[str, None] = Query(\n                default=None,\n                example=\"query_overridden\",\n                examples=[\"query1\", \"query2\"],\n            ),\n        ):\n            return data\n\n    with pytest.warns(DeprecationWarning):\n\n        @app.get(\"/header_example/\")\n        def header_example(\n            data: Union[str, None] = Header(\n                default=None,\n                example=\"header1\",\n            ),\n        ):\n            return data\n\n    @app.get(\"/header_examples/\")\n    def header_examples(\n        data: Union[str, None] = Header(\n            default=None,\n            examples=[\n                \"header1\",\n                \"header2\",\n            ],\n        ),\n    ):\n        return data\n\n    with pytest.warns(DeprecationWarning):\n\n        @app.get(\"/header_example_examples/\")\n        def header_example_examples(\n            data: Union[str, None] = Header(\n                default=None,\n                example=\"header_overridden\",\n                examples=[\"header1\", \"header2\"],\n            ),\n        ):\n            return data\n\n    with pytest.warns(DeprecationWarning):\n\n        @app.get(\"/cookie_example/\")\n        def cookie_example(\n            data: Union[str, None] = Cookie(\n                default=None,\n                example=\"cookie1\",\n            ),\n        ):\n            return data\n\n    @app.get(\"/cookie_examples/\")\n    def cookie_examples(\n        data: Union[str, None] = Cookie(\n            default=None,\n            examples=[\"cookie1\", \"cookie2\"],\n        ),\n    ):\n        return data\n\n    with pytest.warns(DeprecationWarning):\n\n        @app.get(\"/cookie_example_examples/\")\n        def cookie_example_examples(\n            data: Union[str, None] = Cookie(\n                default=None,\n                example=\"cookie_overridden\",\n                examples=[\"cookie1\", \"cookie2\"],\n            ),\n        ):\n            return data\n\n    return app",
    "repo": "fastapi",
    "path": "tests\\test_schema_extra_examples.py",
    "type": "function",
    "name": "create_app",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_schema_extra_examples.py:function:schema_extra:chunk1",
    "text": "def schema_extra(item: Item):\n        return item",
    "repo": "fastapi",
    "path": "tests\\test_schema_extra_examples.py",
    "type": "function",
    "name": "schema_extra",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_schema_extra_examples.py:function:example:chunk1",
    "text": "def example(item: Item = Body(example={\"data\": \"Data in Body example\"})):\n            return item",
    "repo": "fastapi",
    "path": "tests\\test_schema_extra_examples.py",
    "type": "function",
    "name": "example",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_schema_extra_examples.py:function:examples:chunk1",
    "text": "def examples(\n        item: Item = Body(\n            examples=[\n                {\"data\": \"Data in Body examples, example1\"},\n                {\"data\": \"Data in Body examples, example2\"},\n            ],\n        ),\n    ):\n        return item",
    "repo": "fastapi",
    "path": "tests\\test_schema_extra_examples.py",
    "type": "function",
    "name": "examples",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_schema_extra_examples.py:function:example_examples:chunk1",
    "text": "def example_examples(\n            item: Item = Body(\n                example={\"data\": \"Overridden example\"},\n                examples=[\n                    {\"data\": \"examples example_examples 1\"},\n                    {\"data\": \"examples example_examples 2\"},\n                ],\n            ),\n        ):\n            return item",
    "repo": "fastapi",
    "path": "tests\\test_schema_extra_examples.py",
    "type": "function",
    "name": "example_examples",
    "loc": 50,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_schema_extra_examples.py:function:path_example:chunk1",
    "text": "def path_example(\n            item_id: str = Path(\n                example=\"item_1\",\n            ),\n        ):\n            return item_id",
    "repo": "fastapi",
    "path": "tests\\test_schema_extra_examples.py",
    "type": "function",
    "name": "path_example",
    "loc": 95,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_schema_extra_examples.py:function:path_examples:chunk1",
    "text": "def path_examples(\n        item_id: str = Path(\n            examples=[\"item_1\", \"item_2\"],\n        ),\n    ):\n        return item_id",
    "repo": "fastapi",
    "path": "tests\\test_schema_extra_examples.py",
    "type": "function",
    "name": "path_examples",
    "loc": 103,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_schema_extra_examples.py:function:path_example_examples:chunk1",
    "text": "def path_example_examples(\n            item_id: str = Path(\n                example=\"item_overridden\",\n                examples=[\"item_1\", \"item_2\"],\n            ),\n        ):\n            return item_id",
    "repo": "fastapi",
    "path": "tests\\test_schema_extra_examples.py",
    "type": "function",
    "name": "path_example_examples",
    "loc": 113,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_schema_extra_examples.py:function:query_example:chunk1",
    "text": "def query_example(\n            data: Union[str, None] = Query(\n                default=None,\n                example=\"query1\",\n            ),\n        ):\n            return data",
    "repo": "fastapi",
    "path": "tests\\test_schema_extra_examples.py",
    "type": "function",
    "name": "query_example",
    "loc": 124,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_schema_extra_examples.py:function:query_examples:chunk1",
    "text": "def query_examples(\n        data: Union[str, None] = Query(\n            default=None,\n            examples=[\"query1\", \"query2\"],\n        ),\n    ):\n        return data",
    "repo": "fastapi",
    "path": "tests\\test_schema_extra_examples.py",
    "type": "function",
    "name": "query_examples",
    "loc": 133,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_schema_extra_examples.py:function:query_example_examples:chunk1",
    "text": "def query_example_examples(\n            data: Union[str, None] = Query(\n                default=None,\n                example=\"query_overridden\",\n                examples=[\"query1\", \"query2\"],\n            ),\n        ):\n            return data",
    "repo": "fastapi",
    "path": "tests\\test_schema_extra_examples.py",
    "type": "function",
    "name": "query_example_examples",
    "loc": 144,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_schema_extra_examples.py:function:header_example:chunk1",
    "text": "def header_example(\n            data: Union[str, None] = Header(\n                default=None,\n                example=\"header1\",\n            ),\n        ):\n            return data",
    "repo": "fastapi",
    "path": "tests\\test_schema_extra_examples.py",
    "type": "function",
    "name": "header_example",
    "loc": 156,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_schema_extra_examples.py:function:header_examples:chunk1",
    "text": "def header_examples(\n        data: Union[str, None] = Header(\n            default=None,\n            examples=[\n                \"header1\",\n                \"header2\",\n            ],\n        ),\n    ):\n        return data",
    "repo": "fastapi",
    "path": "tests\\test_schema_extra_examples.py",
    "type": "function",
    "name": "header_examples",
    "loc": 165,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_schema_extra_examples.py:function:header_example_examples:chunk1",
    "text": "def header_example_examples(\n            data: Union[str, None] = Header(\n                default=None,\n                example=\"header_overridden\",\n                examples=[\"header1\", \"header2\"],\n            ),\n        ):\n            return data",
    "repo": "fastapi",
    "path": "tests\\test_schema_extra_examples.py",
    "type": "function",
    "name": "header_example_examples",
    "loc": 179,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_schema_extra_examples.py:function:cookie_example:chunk1",
    "text": "def cookie_example(\n            data: Union[str, None] = Cookie(\n                default=None,\n                example=\"cookie1\",\n            ),\n        ):\n            return data",
    "repo": "fastapi",
    "path": "tests\\test_schema_extra_examples.py",
    "type": "function",
    "name": "cookie_example",
    "loc": 191,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_schema_extra_examples.py:function:cookie_examples:chunk1",
    "text": "def cookie_examples(\n        data: Union[str, None] = Cookie(\n            default=None,\n            examples=[\"cookie1\", \"cookie2\"],\n        ),\n    ):\n        return data",
    "repo": "fastapi",
    "path": "tests\\test_schema_extra_examples.py",
    "type": "function",
    "name": "cookie_examples",
    "loc": 200,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_schema_extra_examples.py:function:cookie_example_examples:chunk1",
    "text": "def cookie_example_examples(\n            data: Union[str, None] = Cookie(\n                default=None,\n                example=\"cookie_overridden\",\n                examples=[\"cookie1\", \"cookie2\"],\n            ),\n        ):\n            return data",
    "repo": "fastapi",
    "path": "tests\\test_schema_extra_examples.py",
    "type": "function",
    "name": "cookie_example_examples",
    "loc": 211,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_schema_extra_examples.py:function:test_call_api:chunk1",
    "text": "def test_call_api():\n    app = create_app()\n    client = TestClient(app)\n    response = client.post(\"/schema_extra/\", json={\"data\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    response = client.post(\"/example/\", json={\"data\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    response = client.post(\"/examples/\", json={\"data\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    response = client.post(\"/example_examples/\", json={\"data\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    response = client.get(\"/path_example/foo\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/path_examples/foo\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/path_example_examples/foo\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/query_example/\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/query_examples/\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/query_example_examples/\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/header_example/\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/header_examples/\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/header_example_examples/\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/cookie_example/\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/cookie_examples/\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/cookie_example_examples/\")\n    assert response.status_code == 200, response.text",
    "repo": "fastapi",
    "path": "tests\\test_schema_extra_examples.py",
    "type": "function",
    "name": "test_call_api",
    "loc": 223,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_schema_extra_examples.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    \"\"\"\n    Test that example overrides work:\n\n    * pydantic model schema_extra is included\n    * Body(example={}) overrides schema_extra in pydantic model\n    * Body(examples{}) overrides Body(example={}) and schema_extra in pydantic model\n    \"\"\"\n    app = create_app()\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/schema_extra/\": {\n                \"post\": {\n                    \"summary\": \"Schema Extra\",\n                    \"operationId\": \"schema_extra_schema_extra__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/example/\": {\n                \"post\": {\n                    \"summary\": \"Example\",\n                    \"operationId\": \"example_example__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"},\n                                \"example\": {\"data\": \"Data in Body example\"},\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/examples/\": {\n                \"post\": {\n                    \"summary\": \"Examples\",\n                    \"operationId\": \"examples_examples__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"$ref\": \"#/components/schemas/Item\",\n                                        \"examples\": [\n                                            {\"data\": \"Data in Body examples, example1\"},\n                                            {\"data\": \"Data in Body examples, example2\"},\n                                        ],\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove this when deprecating Pydantic v1\n                                    {\n                                        \"allOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"}\n                                        ],\n                                        \"title\": \"Item\",\n                                        \"examples\": [\n                                            {\"data\": \"Data in Body examples, example1\"},\n                                            {\"data\": \"Data in Body examples, example2\"},\n                                        ],\n                                    }\n                                )\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/example_examples/\": {\n                \"post\": {\n                    \"summary\": \"Example Examples\",\n                    \"operationId\": \"example_examples_example_examples__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"$ref\": \"#/components/schemas/Item\",\n                                        \"examples\": [\n                                            {\"data\": \"examples example_examples 1\"},\n                                            {\"data\": \"examples example_examples 2\"},\n                                        ],\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove this when deprecating Pydantic v1\n                                    {\n                                        \"allOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"}\n                                        ],\n                                        \"title\": \"Item\",\n                                        \"examples\": [\n                                            {\"data\": \"examples example_examples 1\"},\n                                            {\"data\": \"examples example_examples 2\"},\n                                        ],\n                                    },\n                                ),\n                                \"example\": {\"data\": \"Overridden example\"},\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/path_example/{item_id}\": {\n                \"get\": {\n                    \"summary\": \"Path Example\",\n                    \"operationId\": \"path_example_path_example__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"example\": \"item_1\",\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/path_examples/{item_id}\": {\n                \"get\": {\n                    \"summary\": \"Path Examples\",\n                    \"operationId\": \"path_examples_path_examples__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"type\": \"string\",\n                                \"examples\": [\"item_1\", \"item_2\"],\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/path_example_examples/{item_id}\": {\n                \"get\": {\n                    \"summary\": \"Path Example Examples\",\n                    \"operationId\": \"path_example_examples_path_example_examples__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"type\": \"string\",\n                                \"examples\": [\"item_1\", \"item_2\"],\n                            },\n                            \"example\": \"item_overridden\",\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/query_example/\": {\n                \"get\": {\n                    \"summary\": \"Query Example\",\n                    \"operationId\": \"query_example_query_example__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Data\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: Remove this when deprecating Pydantic v1\n                                {\"title\": \"Data\", \"type\": \"string\"}\n                            ),\n                            \"example\": \"query1\",\n                            \"name\": \"data\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/query_examples/\": {\n                \"get\": {\n                    \"summary\": \"Query Examples\",\n                    \"operationId\": \"query_examples_query_examples__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Data\",\n                                    \"examples\": [\"query1\", \"query2\"],\n                                }\n                            )\n                            | IsDict(\n                                # TODO: Remove this when deprecating Pydantic v1\n                                {\n                                    \"type\": \"string\",\n                                    \"title\": \"Data\",\n                                    \"examples\": [\"query1\", \"query2\"],\n                                }\n                            ),\n                            \"name\": \"data\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/query_example_examples/\": {\n                \"get\": {\n                    \"summary\": \"Query Example Examples\",\n                    \"operationId\": \"query_example_examples_query_example_examples__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Data\",\n                                    \"examples\": [\"query1\", \"query2\"],\n                                }\n                            )\n                            | IsDict(\n                                # TODO: Remove this when deprecating Pydantic v1\n                                {\n                                    \"type\": \"string\",\n                                    \"title\": \"Data\",\n                                    \"examples\": [\"query1\", \"query2\"],\n                                }\n                            ),\n                            \"example\": \"query_overridden\",\n                            \"name\": \"data\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/header_example/\": {\n                \"get\": {\n                    \"summary\": \"Header Example\",\n                    \"operationId\": \"header_example_header_example__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Data\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: Remove this when deprecating Pydantic v1\n                                {\"title\": \"Data\", \"type\": \"string\"}\n                            ),\n                            \"example\": \"header1\",\n                            \"name\": \"data\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/header_examples/\": {\n                \"get\": {\n                    \"summary\": \"Header Examples\",\n                    \"operationId\": \"header_examples_header_examples__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Data\",\n                                    \"examples\": [\"header1\", \"header2\"],\n                                }\n                            )\n                            | IsDict(\n                                # TODO: Remove this when deprecating Pydantic v1\n                                {\n                                    \"type\": \"string\",\n                                    \"title\": \"Data\",\n                                    \"examples\": [\"header1\", \"header2\"],\n                                }\n                            ),\n                            \"name\": \"data\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/header_example_examples/\": {\n                \"get\": {\n                    \"summary\": \"Header Example Examples\",\n                    \"operationId\": \"header_example_examples_header_example_examples__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Data\",\n                                    \"examples\": [\"header1\", \"header2\"],\n                                }\n                            )\n                            | IsDict(\n                                # TODO: Remove this when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Data\",\n                                    \"type\": \"string\",\n                                    \"examples\": [\"header1\", \"header2\"],\n                                }\n                            ),\n                            \"example\": \"header_overridden\",\n                            \"name\": \"data\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/cookie_example/\": {\n                \"get\": {\n                    \"summary\": \"Cookie Example\",\n                    \"operationId\": \"cookie_example_cookie_example__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Data\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: Remove this when deprecating Pydantic v1\n                                {\"title\": \"Data\", \"type\": \"string\"}\n                            ),\n                            \"example\": \"cookie1\",\n                            \"name\": \"data\",\n                            \"in\": \"cookie\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/cookie_examples/\": {\n                \"get\": {\n                    \"summary\": \"Cookie Examples\",\n                    \"operationId\": \"cookie_examples_cookie_examples__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Data\",\n                                    \"examples\": [\"cookie1\", \"cookie2\"],\n                                }\n                            )\n                            | IsDict(\n                                # TODO: Remove this when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Data\",\n                                    \"type\": \"string\",\n                                    \"examples\": [\"cookie1\", \"cookie2\"],\n                                }\n                            ),\n                            \"name\": \"data\",\n                            \"in\": \"cookie\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/cookie_example_examples/\": {\n                \"get\": {\n                    \"summary\": \"Cookie Example Examples\",\n                    \"operationId\": \"cookie_example_examples_cookie_example_examples__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Data\",\n                                    \"examples\": [\"cookie1\", \"cookie2\"],\n                                }\n                            )\n                            | IsDict(\n                                # TODO: Remove this when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Data\",\n                                    \"type\": \"string\",\n                                    \"examples\": [\"cookie1\", \"cookie2\"],\n                                }\n                            ),\n                            \"example\": \"cookie_overridden\",\n                            \"name\": \"data\",\n                            \"in\": \"cookie\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"data\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"data\": {\"title\": \"Data\", \"type\": \"string\"}},\n                    \"example\": {\"data\": \"Data in schema_extra\"},\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_schema_extra_examples.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 260,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_schema_extra_examples.py:class:Config:chunk1",
    "text": "class Config:\n                schema_extra = {\"example\": {\"data\": \"Data in schema_extra\"}}",
    "repo": "fastapi",
    "path": "tests\\test_schema_extra_examples.py",
    "type": "class",
    "name": "Config",
    "loc": 23,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_schema_extra_examples.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n        data: str\n\n        if PYDANTIC_V2:\n            model_config = ConfigDict(\n                json_schema_extra={\"example\": {\"data\": \"Data in schema_extra\"}}\n            )\n        else:\n\n            class Config:\n                schema_extra = {\"example\": {\"data\": \"Data in schema_extra\"}}",
    "repo": "fastapi",
    "path": "tests\\test_schema_extra_examples.py",
    "type": "class",
    "name": "Item",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_cookie.py:function:get_current_user:chunk1",
    "text": "def get_current_user(oauth_header: str = Security(api_key)):\n    user = User(username=oauth_header)\n    return user",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_cookie.py",
    "type": "function",
    "name": "get_current_user",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_cookie.py:function:read_current_user:chunk1",
    "text": "def read_current_user(current_user: User = Depends(get_current_user)):\n    return current_user",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_cookie.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_cookie.py:function:test_security_api_key:chunk1",
    "text": "def test_security_api_key():\n    client = TestClient(app, cookies={\"key\": \"secret\"})\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"secret\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_cookie.py",
    "type": "function",
    "name": "test_security_api_key",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_cookie.py:function:test_security_api_key_no_key:chunk1",
    "text": "def test_security_api_key_no_key():\n    client = TestClient(app)\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_cookie.py",
    "type": "function",
    "name": "test_security_api_key_no_key",
    "loc": 32,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_cookie.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"APIKeyCookie\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"APIKeyCookie\": {\"type\": \"apiKey\", \"name\": \"key\", \"in\": \"cookie\"}\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_cookie.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 39,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_cookie.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_cookie.py",
    "type": "class",
    "name": "User",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_cookie_description.py:function:get_current_user:chunk1",
    "text": "def get_current_user(oauth_header: str = Security(api_key)):\n    user = User(username=oauth_header)\n    return user",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_cookie_description.py",
    "type": "function",
    "name": "get_current_user",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_cookie_description.py:function:read_current_user:chunk1",
    "text": "def read_current_user(current_user: User = Depends(get_current_user)):\n    return current_user",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_cookie_description.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_cookie_description.py:function:test_security_api_key:chunk1",
    "text": "def test_security_api_key():\n    client = TestClient(app, cookies={\"key\": \"secret\"})\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"secret\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_cookie_description.py",
    "type": "function",
    "name": "test_security_api_key",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_cookie_description.py:function:test_security_api_key_no_key:chunk1",
    "text": "def test_security_api_key_no_key():\n    client = TestClient(app)\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_cookie_description.py",
    "type": "function",
    "name": "test_security_api_key_no_key",
    "loc": 32,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_cookie_description.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"APIKeyCookie\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"APIKeyCookie\": {\n                    \"type\": \"apiKey\",\n                    \"name\": \"key\",\n                    \"in\": \"cookie\",\n                    \"description\": \"An API Cookie Key\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_cookie_description.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 39,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_cookie_description.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_cookie_description.py",
    "type": "class",
    "name": "User",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_cookie_optional.py:function:get_current_user:chunk1",
    "text": "def get_current_user(oauth_header: Optional[str] = Security(api_key)):\n    if oauth_header is None:\n        return None\n    user = User(username=oauth_header)\n    return user",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_cookie_optional.py",
    "type": "function",
    "name": "get_current_user",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_cookie_optional.py:function:read_current_user:chunk1",
    "text": "def read_current_user(current_user: User = Depends(get_current_user)):\n    if current_user is None:\n        return {\"msg\": \"Create an account first\"}\n    else:\n        return current_user",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_cookie_optional.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_cookie_optional.py:function:test_security_api_key:chunk1",
    "text": "def test_security_api_key():\n    client = TestClient(app, cookies={\"key\": \"secret\"})\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"secret\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_cookie_optional.py",
    "type": "function",
    "name": "test_security_api_key",
    "loc": 32,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_cookie_optional.py:function:test_security_api_key_no_key:chunk1",
    "text": "def test_security_api_key_no_key():\n    client = TestClient(app)\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_cookie_optional.py",
    "type": "function",
    "name": "test_security_api_key_no_key",
    "loc": 39,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_cookie_optional.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"APIKeyCookie\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"APIKeyCookie\": {\"type\": \"apiKey\", \"name\": \"key\", \"in\": \"cookie\"}\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_cookie_optional.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 46,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_cookie_optional.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_cookie_optional.py",
    "type": "class",
    "name": "User",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_header.py:function:get_current_user:chunk1",
    "text": "def get_current_user(oauth_header: str = Security(api_key)):\n    user = User(username=oauth_header)\n    return user",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_header.py",
    "type": "function",
    "name": "get_current_user",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_header.py:function:read_current_user:chunk1",
    "text": "def read_current_user(current_user: User = Depends(get_current_user)):\n    return current_user",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_header.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_header.py:function:test_security_api_key:chunk1",
    "text": "def test_security_api_key():\n    response = client.get(\"/users/me\", headers={\"key\": \"secret\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"secret\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_header.py",
    "type": "function",
    "name": "test_security_api_key",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_header.py:function:test_security_api_key_no_key:chunk1",
    "text": "def test_security_api_key_no_key():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_header.py",
    "type": "function",
    "name": "test_security_api_key_no_key",
    "loc": 34,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_header.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"APIKeyHeader\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"APIKeyHeader\": {\"type\": \"apiKey\", \"name\": \"key\", \"in\": \"header\"}\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_header.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_header.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_header.py",
    "type": "class",
    "name": "User",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_header_description.py:function:get_current_user:chunk1",
    "text": "def get_current_user(oauth_header: str = Security(api_key)):\n    user = User(username=oauth_header)\n    return user",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_header_description.py",
    "type": "function",
    "name": "get_current_user",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_header_description.py:function:read_current_user:chunk1",
    "text": "def read_current_user(current_user: User = Depends(get_current_user)):\n    return current_user",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_header_description.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_header_description.py:function:test_security_api_key:chunk1",
    "text": "def test_security_api_key():\n    response = client.get(\"/users/me\", headers={\"key\": \"secret\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"secret\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_header_description.py",
    "type": "function",
    "name": "test_security_api_key",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_header_description.py:function:test_security_api_key_no_key:chunk1",
    "text": "def test_security_api_key_no_key():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_header_description.py",
    "type": "function",
    "name": "test_security_api_key_no_key",
    "loc": 34,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_header_description.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"APIKeyHeader\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"APIKeyHeader\": {\n                    \"type\": \"apiKey\",\n                    \"name\": \"key\",\n                    \"in\": \"header\",\n                    \"description\": \"An API Key Header\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_header_description.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_header_description.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_header_description.py",
    "type": "class",
    "name": "User",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_header_optional.py:function:get_current_user:chunk1",
    "text": "def get_current_user(oauth_header: Optional[str] = Security(api_key)):\n    if oauth_header is None:\n        return None\n    user = User(username=oauth_header)\n    return user",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_header_optional.py",
    "type": "function",
    "name": "get_current_user",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_header_optional.py:function:read_current_user:chunk1",
    "text": "def read_current_user(current_user: Optional[User] = Depends(get_current_user)):\n    if current_user is None:\n        return {\"msg\": \"Create an account first\"}\n    return current_user",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_header_optional.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_header_optional.py:function:test_security_api_key:chunk1",
    "text": "def test_security_api_key():\n    response = client.get(\"/users/me\", headers={\"key\": \"secret\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"secret\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_header_optional.py",
    "type": "function",
    "name": "test_security_api_key",
    "loc": 34,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_header_optional.py:function:test_security_api_key_no_key:chunk1",
    "text": "def test_security_api_key_no_key():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_header_optional.py",
    "type": "function",
    "name": "test_security_api_key_no_key",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_header_optional.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"APIKeyHeader\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"APIKeyHeader\": {\"type\": \"apiKey\", \"name\": \"key\", \"in\": \"header\"}\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_header_optional.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 46,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_header_optional.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_header_optional.py",
    "type": "class",
    "name": "User",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_query.py:function:get_current_user:chunk1",
    "text": "def get_current_user(oauth_header: str = Security(api_key)):\n    user = User(username=oauth_header)\n    return user",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_query.py",
    "type": "function",
    "name": "get_current_user",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_query.py:function:read_current_user:chunk1",
    "text": "def read_current_user(current_user: User = Depends(get_current_user)):\n    return current_user",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_query.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_query.py:function:test_security_api_key:chunk1",
    "text": "def test_security_api_key():\n    response = client.get(\"/users/me?key=secret\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"secret\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_query.py",
    "type": "function",
    "name": "test_security_api_key",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_query.py:function:test_security_api_key_no_key:chunk1",
    "text": "def test_security_api_key_no_key():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_query.py",
    "type": "function",
    "name": "test_security_api_key_no_key",
    "loc": 34,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_query.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"APIKeyQuery\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"APIKeyQuery\": {\"type\": \"apiKey\", \"name\": \"key\", \"in\": \"query\"}\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_query.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_query.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_query.py",
    "type": "class",
    "name": "User",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_query_description.py:function:get_current_user:chunk1",
    "text": "def get_current_user(oauth_header: str = Security(api_key)):\n    user = User(username=oauth_header)\n    return user",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_query_description.py",
    "type": "function",
    "name": "get_current_user",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_query_description.py:function:read_current_user:chunk1",
    "text": "def read_current_user(current_user: User = Depends(get_current_user)):\n    return current_user",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_query_description.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_query_description.py:function:test_security_api_key:chunk1",
    "text": "def test_security_api_key():\n    response = client.get(\"/users/me?key=secret\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"secret\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_query_description.py",
    "type": "function",
    "name": "test_security_api_key",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_query_description.py:function:test_security_api_key_no_key:chunk1",
    "text": "def test_security_api_key_no_key():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_query_description.py",
    "type": "function",
    "name": "test_security_api_key_no_key",
    "loc": 34,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_query_description.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"APIKeyQuery\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"APIKeyQuery\": {\n                    \"type\": \"apiKey\",\n                    \"name\": \"key\",\n                    \"in\": \"query\",\n                    \"description\": \"API Key Query\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_query_description.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_query_description.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_query_description.py",
    "type": "class",
    "name": "User",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_query_optional.py:function:get_current_user:chunk1",
    "text": "def get_current_user(oauth_header: Optional[str] = Security(api_key)):\n    if oauth_header is None:\n        return None\n    user = User(username=oauth_header)\n    return user",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_query_optional.py",
    "type": "function",
    "name": "get_current_user",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_query_optional.py:function:read_current_user:chunk1",
    "text": "def read_current_user(current_user: Optional[User] = Depends(get_current_user)):\n    if current_user is None:\n        return {\"msg\": \"Create an account first\"}\n    return current_user",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_query_optional.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_query_optional.py:function:test_security_api_key:chunk1",
    "text": "def test_security_api_key():\n    response = client.get(\"/users/me?key=secret\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"secret\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_query_optional.py",
    "type": "function",
    "name": "test_security_api_key",
    "loc": 34,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_query_optional.py:function:test_security_api_key_no_key:chunk1",
    "text": "def test_security_api_key_no_key():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_query_optional.py",
    "type": "function",
    "name": "test_security_api_key_no_key",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_query_optional.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"APIKeyQuery\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"APIKeyQuery\": {\"type\": \"apiKey\", \"name\": \"key\", \"in\": \"query\"}\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_query_optional.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 46,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_api_key_query_optional.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str",
    "repo": "fastapi",
    "path": "tests\\test_security_api_key_query_optional.py",
    "type": "class",
    "name": "User",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_base.py:function:read_current_user:chunk1",
    "text": "def read_current_user(credentials: HTTPAuthorizationCredentials = Security(security)):\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_base.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_base.py:function:test_security_http_base:chunk1",
    "text": "def test_security_http_base():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other foobar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"scheme\": \"Other\", \"credentials\": \"foobar\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_base.py",
    "type": "function",
    "name": "test_security_http_base",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_base.py:function:test_security_http_base_no_credentials:chunk1",
    "text": "def test_security_http_base_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_base.py",
    "type": "function",
    "name": "test_security_http_base_no_credentials",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_base.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPBase\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\"HTTPBase\": {\"type\": \"http\", \"scheme\": \"Other\"}}\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_http_base.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_base_description.py:function:read_current_user:chunk1",
    "text": "def read_current_user(credentials: HTTPAuthorizationCredentials = Security(security)):\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_base_description.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_base_description.py:function:test_security_http_base:chunk1",
    "text": "def test_security_http_base():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other foobar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"scheme\": \"Other\", \"credentials\": \"foobar\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_base_description.py",
    "type": "function",
    "name": "test_security_http_base",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_base_description.py:function:test_security_http_base_no_credentials:chunk1",
    "text": "def test_security_http_base_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_base_description.py",
    "type": "function",
    "name": "test_security_http_base_no_credentials",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_base_description.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPBase\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"HTTPBase\": {\n                    \"type\": \"http\",\n                    \"scheme\": \"Other\",\n                    \"description\": \"Other Security Scheme\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_http_base_description.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_base_optional.py:function:read_current_user:chunk1",
    "text": "def read_current_user(\n    credentials: Optional[HTTPAuthorizationCredentials] = Security(security),\n):\n    if credentials is None:\n        return {\"msg\": \"Create an account first\"}\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_base_optional.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_base_optional.py:function:test_security_http_base:chunk1",
    "text": "def test_security_http_base():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other foobar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"scheme\": \"Other\", \"credentials\": \"foobar\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_base_optional.py",
    "type": "function",
    "name": "test_security_http_base",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_base_optional.py:function:test_security_http_base_no_credentials:chunk1",
    "text": "def test_security_http_base_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_base_optional.py",
    "type": "function",
    "name": "test_security_http_base_no_credentials",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_base_optional.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPBase\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\"HTTPBase\": {\"type\": \"http\", \"scheme\": \"Other\"}}\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_http_base_optional.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_basic_optional.py:function:read_current_user:chunk1",
    "text": "def read_current_user(credentials: Optional[HTTPBasicCredentials] = Security(security)):\n    if credentials is None:\n        return {\"msg\": \"Create an account first\"}\n    return {\"username\": credentials.username, \"password\": credentials.password}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_basic_optional.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_basic_optional.py:function:test_security_http_basic:chunk1",
    "text": "def test_security_http_basic():\n    response = client.get(\"/users/me\", auth=(\"john\", \"secret\"))\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"john\", \"password\": \"secret\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_basic_optional.py",
    "type": "function",
    "name": "test_security_http_basic",
    "loc": 23,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_basic_optional.py:function:test_security_http_basic_no_credentials:chunk1",
    "text": "def test_security_http_basic_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_basic_optional.py",
    "type": "function",
    "name": "test_security_http_basic_no_credentials",
    "loc": 29,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_basic_optional.py:function:test_security_http_basic_invalid_credentials:chunk1",
    "text": "def test_security_http_basic_invalid_credentials():\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Basic notabase64token\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_basic_optional.py",
    "type": "function",
    "name": "test_security_http_basic_invalid_credentials",
    "loc": 35,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_basic_optional.py:function:test_security_http_basic_non_basic_credentials:chunk1",
    "text": "def test_security_http_basic_non_basic_credentials():\n    payload = b64encode(b\"johnsecret\").decode(\"ascii\")\n    auth_header = f\"Basic {payload}\"\n    response = client.get(\"/users/me\", headers={\"Authorization\": auth_header})\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_basic_optional.py",
    "type": "function",
    "name": "test_security_http_basic_non_basic_credentials",
    "loc": 44,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_basic_optional.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPBasic\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_http_basic_optional.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 53,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_basic_realm.py:function:read_current_user:chunk1",
    "text": "def read_current_user(credentials: HTTPBasicCredentials = Security(security)):\n    return {\"username\": credentials.username, \"password\": credentials.password}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_basic_realm.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_basic_realm.py:function:test_security_http_basic:chunk1",
    "text": "def test_security_http_basic():\n    response = client.get(\"/users/me\", auth=(\"john\", \"secret\"))\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"john\", \"password\": \"secret\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_basic_realm.py",
    "type": "function",
    "name": "test_security_http_basic",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_basic_realm.py:function:test_security_http_basic_no_credentials:chunk1",
    "text": "def test_security_http_basic_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'",
    "repo": "fastapi",
    "path": "tests\\test_security_http_basic_realm.py",
    "type": "function",
    "name": "test_security_http_basic_no_credentials",
    "loc": 26,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_basic_realm.py:function:test_security_http_basic_invalid_credentials:chunk1",
    "text": "def test_security_http_basic_invalid_credentials():\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Basic notabase64token\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_basic_realm.py",
    "type": "function",
    "name": "test_security_http_basic_invalid_credentials",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_basic_realm.py:function:test_security_http_basic_non_basic_credentials:chunk1",
    "text": "def test_security_http_basic_non_basic_credentials():\n    payload = b64encode(b\"johnsecret\").decode(\"ascii\")\n    auth_header = f\"Basic {payload}\"\n    response = client.get(\"/users/me\", headers={\"Authorization\": auth_header})\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_basic_realm.py",
    "type": "function",
    "name": "test_security_http_basic_non_basic_credentials",
    "loc": 42,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_basic_realm.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPBasic\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_http_basic_realm.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 51,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_basic_realm_description.py:function:read_current_user:chunk1",
    "text": "def read_current_user(credentials: HTTPBasicCredentials = Security(security)):\n    return {\"username\": credentials.username, \"password\": credentials.password}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_basic_realm_description.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_basic_realm_description.py:function:test_security_http_basic:chunk1",
    "text": "def test_security_http_basic():\n    response = client.get(\"/users/me\", auth=(\"john\", \"secret\"))\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"john\", \"password\": \"secret\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_basic_realm_description.py",
    "type": "function",
    "name": "test_security_http_basic",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_basic_realm_description.py:function:test_security_http_basic_no_credentials:chunk1",
    "text": "def test_security_http_basic_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'",
    "repo": "fastapi",
    "path": "tests\\test_security_http_basic_realm_description.py",
    "type": "function",
    "name": "test_security_http_basic_no_credentials",
    "loc": 26,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_basic_realm_description.py:function:test_security_http_basic_invalid_credentials:chunk1",
    "text": "def test_security_http_basic_invalid_credentials():\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Basic notabase64token\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_basic_realm_description.py",
    "type": "function",
    "name": "test_security_http_basic_invalid_credentials",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_basic_realm_description.py:function:test_security_http_basic_non_basic_credentials:chunk1",
    "text": "def test_security_http_basic_non_basic_credentials():\n    payload = b64encode(b\"johnsecret\").decode(\"ascii\")\n    auth_header = f\"Basic {payload}\"\n    response = client.get(\"/users/me\", headers={\"Authorization\": auth_header})\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_basic_realm_description.py",
    "type": "function",
    "name": "test_security_http_basic_non_basic_credentials",
    "loc": 42,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_basic_realm_description.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPBasic\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"HTTPBasic\": {\n                    \"type\": \"http\",\n                    \"scheme\": \"basic\",\n                    \"description\": \"HTTPBasic scheme\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_http_basic_realm_description.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 51,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_bearer.py:function:read_current_user:chunk1",
    "text": "def read_current_user(credentials: HTTPAuthorizationCredentials = Security(security)):\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_bearer.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_bearer.py:function:test_security_http_bearer:chunk1",
    "text": "def test_security_http_bearer():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer foobar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"scheme\": \"Bearer\", \"credentials\": \"foobar\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_bearer.py",
    "type": "function",
    "name": "test_security_http_bearer",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_bearer.py:function:test_security_http_bearer_no_credentials:chunk1",
    "text": "def test_security_http_bearer_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_bearer.py",
    "type": "function",
    "name": "test_security_http_bearer_no_credentials",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_bearer.py:function:test_security_http_bearer_incorrect_scheme_credentials:chunk1",
    "text": "def test_security_http_bearer_incorrect_scheme_credentials():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Basic notreally\"})\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_bearer.py",
    "type": "function",
    "name": "test_security_http_bearer_incorrect_scheme_credentials",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_bearer.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPBearer\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\"HTTPBearer\": {\"type\": \"http\", \"scheme\": \"bearer\"}}\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_http_bearer.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_bearer_description.py:function:read_current_user:chunk1",
    "text": "def read_current_user(credentials: HTTPAuthorizationCredentials = Security(security)):\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_bearer_description.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_bearer_description.py:function:test_security_http_bearer:chunk1",
    "text": "def test_security_http_bearer():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer foobar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"scheme\": \"Bearer\", \"credentials\": \"foobar\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_bearer_description.py",
    "type": "function",
    "name": "test_security_http_bearer",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_bearer_description.py:function:test_security_http_bearer_no_credentials:chunk1",
    "text": "def test_security_http_bearer_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_bearer_description.py",
    "type": "function",
    "name": "test_security_http_bearer_no_credentials",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_bearer_description.py:function:test_security_http_bearer_incorrect_scheme_credentials:chunk1",
    "text": "def test_security_http_bearer_incorrect_scheme_credentials():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Basic notreally\"})\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_bearer_description.py",
    "type": "function",
    "name": "test_security_http_bearer_incorrect_scheme_credentials",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_bearer_description.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPBearer\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"HTTPBearer\": {\n                    \"type\": \"http\",\n                    \"scheme\": \"bearer\",\n                    \"description\": \"HTTP Bearer token scheme\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_http_bearer_description.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_bearer_optional.py:function:read_current_user:chunk1",
    "text": "def read_current_user(\n    credentials: Optional[HTTPAuthorizationCredentials] = Security(security),\n):\n    if credentials is None:\n        return {\"msg\": \"Create an account first\"}\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_bearer_optional.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_bearer_optional.py:function:test_security_http_bearer:chunk1",
    "text": "def test_security_http_bearer():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer foobar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"scheme\": \"Bearer\", \"credentials\": \"foobar\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_bearer_optional.py",
    "type": "function",
    "name": "test_security_http_bearer",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_bearer_optional.py:function:test_security_http_bearer_no_credentials:chunk1",
    "text": "def test_security_http_bearer_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_bearer_optional.py",
    "type": "function",
    "name": "test_security_http_bearer_no_credentials",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_bearer_optional.py:function:test_security_http_bearer_incorrect_scheme_credentials:chunk1",
    "text": "def test_security_http_bearer_incorrect_scheme_credentials():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Basic notreally\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_bearer_optional.py",
    "type": "function",
    "name": "test_security_http_bearer_incorrect_scheme_credentials",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_bearer_optional.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPBearer\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\"HTTPBearer\": {\"type\": \"http\", \"scheme\": \"bearer\"}}\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_http_bearer_optional.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 42,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_digest.py:function:read_current_user:chunk1",
    "text": "def read_current_user(credentials: HTTPAuthorizationCredentials = Security(security)):\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_digest.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_digest.py:function:test_security_http_digest:chunk1",
    "text": "def test_security_http_digest():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Digest foobar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"scheme\": \"Digest\", \"credentials\": \"foobar\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_digest.py",
    "type": "function",
    "name": "test_security_http_digest",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_digest.py:function:test_security_http_digest_no_credentials:chunk1",
    "text": "def test_security_http_digest_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_digest.py",
    "type": "function",
    "name": "test_security_http_digest_no_credentials",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_digest.py:function:test_security_http_digest_incorrect_scheme_credentials:chunk1",
    "text": "def test_security_http_digest_incorrect_scheme_credentials():\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Other invalidauthorization\"}\n    )\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_digest.py",
    "type": "function",
    "name": "test_security_http_digest_incorrect_scheme_credentials",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_digest.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPDigest\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\"HTTPDigest\": {\"type\": \"http\", \"scheme\": \"digest\"}}\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_http_digest.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 38,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_digest_description.py:function:read_current_user:chunk1",
    "text": "def read_current_user(credentials: HTTPAuthorizationCredentials = Security(security)):\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_digest_description.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_digest_description.py:function:test_security_http_digest:chunk1",
    "text": "def test_security_http_digest():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Digest foobar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"scheme\": \"Digest\", \"credentials\": \"foobar\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_digest_description.py",
    "type": "function",
    "name": "test_security_http_digest",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_digest_description.py:function:test_security_http_digest_no_credentials:chunk1",
    "text": "def test_security_http_digest_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_digest_description.py",
    "type": "function",
    "name": "test_security_http_digest_no_credentials",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_digest_description.py:function:test_security_http_digest_incorrect_scheme_credentials:chunk1",
    "text": "def test_security_http_digest_incorrect_scheme_credentials():\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Other invalidauthorization\"}\n    )\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_digest_description.py",
    "type": "function",
    "name": "test_security_http_digest_incorrect_scheme_credentials",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_digest_description.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPDigest\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"HTTPDigest\": {\n                    \"type\": \"http\",\n                    \"scheme\": \"digest\",\n                    \"description\": \"HTTPDigest scheme\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_http_digest_description.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 38,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_digest_optional.py:function:read_current_user:chunk1",
    "text": "def read_current_user(\n    credentials: Optional[HTTPAuthorizationCredentials] = Security(security),\n):\n    if credentials is None:\n        return {\"msg\": \"Create an account first\"}\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_digest_optional.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_digest_optional.py:function:test_security_http_digest:chunk1",
    "text": "def test_security_http_digest():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Digest foobar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"scheme\": \"Digest\", \"credentials\": \"foobar\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_digest_optional.py",
    "type": "function",
    "name": "test_security_http_digest",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_digest_optional.py:function:test_security_http_digest_no_credentials:chunk1",
    "text": "def test_security_http_digest_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_digest_optional.py",
    "type": "function",
    "name": "test_security_http_digest_no_credentials",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_digest_optional.py:function:test_security_http_digest_incorrect_scheme_credentials:chunk1",
    "text": "def test_security_http_digest_incorrect_scheme_credentials():\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Other invalidauthorization\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_http_digest_optional.py",
    "type": "function",
    "name": "test_security_http_digest_incorrect_scheme_credentials",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_http_digest_optional.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPDigest\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\"HTTPDigest\": {\"type\": \"http\", \"scheme\": \"digest\"}}\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_http_digest_optional.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 44,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2.py:function:get_current_user:chunk1",
    "text": "def get_current_user(oauth_header: \"str\" = Security(reusable_oauth2)):\n    user = User(username=oauth_header)\n    return user",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2.py",
    "type": "function",
    "name": "get_current_user",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2.py:function:login:chunk1",
    "text": "def login(form_data: \"OAuth2PasswordRequestFormStrict\" = Depends()):\n    return form_data",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2.py",
    "type": "function",
    "name": "login",
    "loc": 32,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2.py:function:read_current_user:chunk1",
    "text": "def read_current_user(current_user: \"User\" = Depends(get_current_user)):\n    return current_user",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 38,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2.py:function:test_security_oauth2:chunk1",
    "text": "def test_security_oauth2():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Bearer footokenbar\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2.py",
    "type": "function",
    "name": "test_security_oauth2",
    "loc": 45,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2.py:function:test_security_oauth2_password_other_header:chunk1",
    "text": "def test_security_oauth2_password_other_header():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Other footokenbar\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2.py",
    "type": "function",
    "name": "test_security_oauth2_password_other_header",
    "loc": 51,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2.py:function:test_security_oauth2_password_bearer_no_header:chunk1",
    "text": "def test_security_oauth2_password_bearer_no_header():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2.py",
    "type": "function",
    "name": "test_security_oauth2_password_bearer_no_header",
    "loc": 57,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2.py:function:test_strict_login_no_data:chunk1",
    "text": "def test_strict_login_no_data():\n    response = client.post(\"/login\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2.py",
    "type": "function",
    "name": "test_strict_login_no_data",
    "loc": 63,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2.py:function:test_strict_login_no_grant_type:chunk1",
    "text": "def test_strict_login_no_grant_type():\n    response = client.post(\"/login\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2.py",
    "type": "function",
    "name": "test_strict_login_no_grant_type",
    "loc": 113,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2.py:function:test_strict_login_incorrect_grant_type:chunk1",
    "text": "def test_strict_login_incorrect_grant_type(grant_type: str):\n    response = client.post(\n        \"/login\",\n        data={\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": grant_type},\n    )\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_pattern_mismatch\",\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"String should match pattern '^password$'\",\n                    \"input\": grant_type,\n                    \"ctx\": {\"pattern\": \"^password$\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": 'string does not match regex \"^password$\"',\n                    \"type\": \"value_error.str.regex\",\n                    \"ctx\": {\"pattern\": \"^password$\"},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2.py",
    "type": "function",
    "name": "test_strict_login_incorrect_grant_type",
    "loc": 149,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2.py:function:test_strict_login_correct_grant_type:chunk1",
    "text": "def test_strict_login_correct_grant_type():\n    response = client.post(\n        \"/login\",\n        data={\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": \"password\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"grant_type\": \"password\",\n        \"username\": \"johndoe\",\n        \"password\": \"secret\",\n        \"scopes\": [],\n        \"client_id\": None,\n        \"client_secret\": None,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2.py",
    "type": "function",
    "name": "test_strict_login_correct_grant_type",
    "loc": 182,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/login\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login\",\n                    \"operationId\": \"login_login_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_login_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"OAuth2\": []}],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_login_login_post\": {\n                    \"title\": \"Body_login_login_post\",\n                    \"required\": [\"grant_type\", \"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"grant_type\": {\n                            \"title\": \"Grant Type\",\n                            \"pattern\": \"^password$\",\n                            \"type\": \"string\",\n                        },\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n                        \"client_id\": IsDict(\n                            {\n                                \"title\": \"Client Id\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Id\", \"type\": \"string\"}\n                        ),\n                        \"client_secret\": IsDict(\n                            {\n                                \"title\": \"Client Secret\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            },\n            \"securitySchemes\": {\n                \"OAuth2\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\n                        \"password\": {\n                            \"scopes\": {\n                                \"read:users\": \"Read the users\",\n                                \"write:users\": \"Create users\",\n                            },\n                            \"tokenUrl\": \"token\",\n                        }\n                    },\n                }\n            },\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 198,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2.py",
    "type": "class",
    "name": "User",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_authorization_code_bearer.py:function:test_no_token:chunk1",
    "text": "def test_no_token():\n    response = client.get(\"/items\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_authorization_code_bearer.py",
    "type": "function",
    "name": "test_no_token",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_authorization_code_bearer.py:function:test_incorrect_token:chunk1",
    "text": "def test_incorrect_token():\n    response = client.get(\"/items\", headers={\"Authorization\": \"Non-existent testtoken\"})\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_authorization_code_bearer.py",
    "type": "function",
    "name": "test_incorrect_token",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_authorization_code_bearer.py:function:test_token:chunk1",
    "text": "def test_token():\n    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"token\": \"testtoken\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_authorization_code_bearer.py",
    "type": "function",
    "name": "test_token",
    "loc": 34,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_authorization_code_bearer.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"security\": [{\"OAuth2AuthorizationCodeBearer\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"OAuth2AuthorizationCodeBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\n                        \"authorizationCode\": {\n                            \"authorizationUrl\": \"authorize\",\n                            \"tokenUrl\": \"token\",\n                            \"scopes\": {},\n                        }\n                    },\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_authorization_code_bearer.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_authorization_code_bearer_description.py:function:test_no_token:chunk1",
    "text": "def test_no_token():\n    response = client.get(\"/items\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_authorization_code_bearer_description.py",
    "type": "function",
    "name": "test_no_token",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_authorization_code_bearer_description.py:function:test_incorrect_token:chunk1",
    "text": "def test_incorrect_token():\n    response = client.get(\"/items\", headers={\"Authorization\": \"Non-existent testtoken\"})\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_authorization_code_bearer_description.py",
    "type": "function",
    "name": "test_incorrect_token",
    "loc": 31,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_authorization_code_bearer_description.py:function:test_token:chunk1",
    "text": "def test_token():\n    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"token\": \"testtoken\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_authorization_code_bearer_description.py",
    "type": "function",
    "name": "test_token",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_authorization_code_bearer_description.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"security\": [{\"OAuth2AuthorizationCodeBearer\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"OAuth2AuthorizationCodeBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\n                        \"authorizationCode\": {\n                            \"authorizationUrl\": \"authorize\",\n                            \"tokenUrl\": \"token\",\n                            \"scopes\": {},\n                        }\n                    },\n                    \"description\": \"OAuth2 Code Bearer\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_authorization_code_bearer_description.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 43,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional.py:function:get_current_user:chunk1",
    "text": "def get_current_user(oauth_header: Optional[str] = Security(reusable_oauth2)):\n    if oauth_header is None:\n        return None\n    user = User(username=oauth_header)\n    return user",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional.py",
    "type": "function",
    "name": "get_current_user",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional.py:function:login:chunk1",
    "text": "def login(form_data: OAuth2PasswordRequestFormStrict = Depends()):\n    return form_data",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional.py",
    "type": "function",
    "name": "login",
    "loc": 35,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional.py:function:read_users_me:chunk1",
    "text": "def read_users_me(current_user: Optional[User] = Depends(get_current_user)):\n    if current_user is None:\n        return {\"msg\": \"Create an account first\"}\n    return current_user",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional.py",
    "type": "function",
    "name": "read_users_me",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional.py:function:test_security_oauth2:chunk1",
    "text": "def test_security_oauth2():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Bearer footokenbar\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional.py",
    "type": "function",
    "name": "test_security_oauth2",
    "loc": 49,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional.py:function:test_security_oauth2_password_other_header:chunk1",
    "text": "def test_security_oauth2_password_other_header():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Other footokenbar\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional.py",
    "type": "function",
    "name": "test_security_oauth2_password_other_header",
    "loc": 55,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional.py:function:test_security_oauth2_password_bearer_no_header:chunk1",
    "text": "def test_security_oauth2_password_bearer_no_header():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional.py",
    "type": "function",
    "name": "test_security_oauth2_password_bearer_no_header",
    "loc": 61,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional.py:function:test_strict_login_no_data:chunk1",
    "text": "def test_strict_login_no_data():\n    response = client.post(\"/login\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional.py",
    "type": "function",
    "name": "test_strict_login_no_data",
    "loc": 67,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional.py:function:test_strict_login_no_grant_type:chunk1",
    "text": "def test_strict_login_no_grant_type():\n    response = client.post(\"/login\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional.py",
    "type": "function",
    "name": "test_strict_login_no_grant_type",
    "loc": 117,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional.py:function:test_strict_login_incorrect_grant_type:chunk1",
    "text": "def test_strict_login_incorrect_grant_type(grant_type: str):\n    response = client.post(\n        \"/login\",\n        data={\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": grant_type},\n    )\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_pattern_mismatch\",\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"String should match pattern '^password$'\",\n                    \"input\": grant_type,\n                    \"ctx\": {\"pattern\": \"^password$\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": 'string does not match regex \"^password$\"',\n                    \"type\": \"value_error.str.regex\",\n                    \"ctx\": {\"pattern\": \"^password$\"},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional.py",
    "type": "function",
    "name": "test_strict_login_incorrect_grant_type",
    "loc": 153,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional.py:function:test_strict_login_correct_data:chunk1",
    "text": "def test_strict_login_correct_data():\n    response = client.post(\n        \"/login\",\n        data={\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": \"password\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"grant_type\": \"password\",\n        \"username\": \"johndoe\",\n        \"password\": \"secret\",\n        \"scopes\": [],\n        \"client_id\": None,\n        \"client_secret\": None,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional.py",
    "type": "function",
    "name": "test_strict_login_correct_data",
    "loc": 186,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/login\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login\",\n                    \"operationId\": \"login_login_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_login_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Users Me\",\n                    \"operationId\": \"read_users_me_users_me_get\",\n                    \"security\": [{\"OAuth2\": []}],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_login_login_post\": {\n                    \"title\": \"Body_login_login_post\",\n                    \"required\": [\"grant_type\", \"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"grant_type\": {\n                            \"title\": \"Grant Type\",\n                            \"pattern\": \"^password$\",\n                            \"type\": \"string\",\n                        },\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n                        \"client_id\": IsDict(\n                            {\n                                \"title\": \"Client Id\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Id\", \"type\": \"string\"}\n                        ),\n                        \"client_secret\": IsDict(\n                            {\n                                \"title\": \"Client Secret\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            },\n            \"securitySchemes\": {\n                \"OAuth2\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\n                        \"password\": {\n                            \"scopes\": {\n                                \"read:users\": \"Read the users\",\n                                \"write:users\": \"Create users\",\n                            },\n                            \"tokenUrl\": \"token\",\n                        }\n                    },\n                }\n            },\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 202,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional.py",
    "type": "class",
    "name": "User",
    "loc": 23,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional_description.py:function:get_current_user:chunk1",
    "text": "def get_current_user(oauth_header: Optional[str] = Security(reusable_oauth2)):\n    if oauth_header is None:\n        return None\n    user = User(username=oauth_header)\n    return user",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional_description.py",
    "type": "function",
    "name": "get_current_user",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional_description.py:function:login:chunk1",
    "text": "def login(form_data: OAuth2PasswordRequestFormStrict = Depends()):\n    return form_data",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional_description.py",
    "type": "function",
    "name": "login",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional_description.py:function:read_users_me:chunk1",
    "text": "def read_users_me(current_user: Optional[User] = Depends(get_current_user)):\n    if current_user is None:\n        return {\"msg\": \"Create an account first\"}\n    return current_user",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional_description.py",
    "type": "function",
    "name": "read_users_me",
    "loc": 41,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional_description.py:function:test_security_oauth2:chunk1",
    "text": "def test_security_oauth2():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Bearer footokenbar\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional_description.py",
    "type": "function",
    "name": "test_security_oauth2",
    "loc": 50,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional_description.py:function:test_security_oauth2_password_other_header:chunk1",
    "text": "def test_security_oauth2_password_other_header():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Other footokenbar\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional_description.py",
    "type": "function",
    "name": "test_security_oauth2_password_other_header",
    "loc": 56,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional_description.py:function:test_security_oauth2_password_bearer_no_header:chunk1",
    "text": "def test_security_oauth2_password_bearer_no_header():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional_description.py",
    "type": "function",
    "name": "test_security_oauth2_password_bearer_no_header",
    "loc": 62,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional_description.py:function:test_strict_login_None:chunk1",
    "text": "def test_strict_login_None():\n    response = client.post(\"/login\", data=None)\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional_description.py",
    "type": "function",
    "name": "test_strict_login_None",
    "loc": 68,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional_description.py:function:test_strict_login_no_grant_type:chunk1",
    "text": "def test_strict_login_no_grant_type():\n    response = client.post(\"/login\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional_description.py",
    "type": "function",
    "name": "test_strict_login_no_grant_type",
    "loc": 118,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional_description.py:function:test_strict_login_incorrect_grant_type:chunk1",
    "text": "def test_strict_login_incorrect_grant_type(grant_type: str):\n    response = client.post(\n        \"/login\",\n        data={\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": grant_type},\n    )\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_pattern_mismatch\",\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"String should match pattern '^password$'\",\n                    \"input\": grant_type,\n                    \"ctx\": {\"pattern\": \"^password$\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": 'string does not match regex \"^password$\"',\n                    \"type\": \"value_error.str.regex\",\n                    \"ctx\": {\"pattern\": \"^password$\"},\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional_description.py",
    "type": "function",
    "name": "test_strict_login_incorrect_grant_type",
    "loc": 154,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional_description.py:function:test_strict_login_correct_correct_grant_type:chunk1",
    "text": "def test_strict_login_correct_correct_grant_type():\n    response = client.post(\n        \"/login\",\n        data={\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": \"password\"},\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"grant_type\": \"password\",\n        \"username\": \"johndoe\",\n        \"password\": \"secret\",\n        \"scopes\": [],\n        \"client_id\": None,\n        \"client_secret\": None,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional_description.py",
    "type": "function",
    "name": "test_strict_login_correct_correct_grant_type",
    "loc": 187,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional_description.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/login\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login\",\n                    \"operationId\": \"login_login_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_login_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Users Me\",\n                    \"operationId\": \"read_users_me_users_me_get\",\n                    \"security\": [{\"OAuth2\": []}],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_login_login_post\": {\n                    \"title\": \"Body_login_login_post\",\n                    \"required\": [\"grant_type\", \"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"grant_type\": {\n                            \"title\": \"Grant Type\",\n                            \"pattern\": \"^password$\",\n                            \"type\": \"string\",\n                        },\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n                        \"client_id\": IsDict(\n                            {\n                                \"title\": \"Client Id\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Id\", \"type\": \"string\"}\n                        ),\n                        \"client_secret\": IsDict(\n                            {\n                                \"title\": \"Client Secret\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            },\n            \"securitySchemes\": {\n                \"OAuth2\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\n                        \"password\": {\n                            \"scopes\": {\n                                \"read:users\": \"Read the users\",\n                                \"write:users\": \"Create users\",\n                            },\n                            \"tokenUrl\": \"token\",\n                        }\n                    },\n                    \"description\": \"OAuth2 security scheme\",\n                }\n            },\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional_description.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 203,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_optional_description.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_optional_description.py",
    "type": "class",
    "name": "User",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_password_bearer_optional.py:function:test_no_token:chunk1",
    "text": "def test_no_token():\n    response = client.get(\"/items\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_password_bearer_optional.py",
    "type": "function",
    "name": "test_no_token",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_password_bearer_optional.py:function:test_token:chunk1",
    "text": "def test_token():\n    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"token\": \"testtoken\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_password_bearer_optional.py",
    "type": "function",
    "name": "test_token",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_password_bearer_optional.py:function:test_incorrect_token:chunk1",
    "text": "def test_incorrect_token():\n    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_password_bearer_optional.py",
    "type": "function",
    "name": "test_incorrect_token",
    "loc": 34,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_password_bearer_optional.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"OAuth2PasswordBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"/token\"}},\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_password_bearer_optional.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_password_bearer_optional_description.py:function:test_no_token:chunk1",
    "text": "def test_no_token():\n    response = client.get(\"/items\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_password_bearer_optional_description.py",
    "type": "function",
    "name": "test_no_token",
    "loc": 26,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_password_bearer_optional_description.py:function:test_token:chunk1",
    "text": "def test_token():\n    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"token\": \"testtoken\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_password_bearer_optional_description.py",
    "type": "function",
    "name": "test_token",
    "loc": 32,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_password_bearer_optional_description.py:function:test_incorrect_token:chunk1",
    "text": "def test_incorrect_token():\n    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_password_bearer_optional_description.py",
    "type": "function",
    "name": "test_incorrect_token",
    "loc": 38,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_oauth2_password_bearer_optional_description.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"OAuth2PasswordBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"/token\"}},\n                    \"description\": \"OAuth2PasswordBearer security scheme\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_oauth2_password_bearer_optional_description.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 44,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_openid_connect.py:function:get_current_user:chunk1",
    "text": "def get_current_user(oauth_header: str = Security(oid)):\n    user = User(username=oauth_header)\n    return user",
    "repo": "fastapi",
    "path": "tests\\test_security_openid_connect.py",
    "type": "function",
    "name": "get_current_user",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_openid_connect.py:function:read_current_user:chunk1",
    "text": "def read_current_user(current_user: User = Depends(get_current_user)):\n    return current_user",
    "repo": "fastapi",
    "path": "tests\\test_security_openid_connect.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_openid_connect.py:function:test_security_oauth2:chunk1",
    "text": "def test_security_oauth2():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Bearer footokenbar\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_openid_connect.py",
    "type": "function",
    "name": "test_security_oauth2",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_openid_connect.py:function:test_security_oauth2_password_other_header:chunk1",
    "text": "def test_security_oauth2_password_other_header():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Other footokenbar\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_openid_connect.py",
    "type": "function",
    "name": "test_security_oauth2_password_other_header",
    "loc": 34,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_openid_connect.py:function:test_security_oauth2_password_bearer_no_header:chunk1",
    "text": "def test_security_oauth2_password_bearer_no_header():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_openid_connect.py",
    "type": "function",
    "name": "test_security_oauth2_password_bearer_no_header",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_openid_connect.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"OpenIdConnect\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"OpenIdConnect\": {\n                    \"type\": \"openIdConnect\",\n                    \"openIdConnectUrl\": \"/openid\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_openid_connect.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 46,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_openid_connect.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str",
    "repo": "fastapi",
    "path": "tests\\test_security_openid_connect.py",
    "type": "class",
    "name": "User",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_openid_connect_description.py:function:get_current_user:chunk1",
    "text": "def get_current_user(oauth_header: str = Security(oid)):\n    user = User(username=oauth_header)\n    return user",
    "repo": "fastapi",
    "path": "tests\\test_security_openid_connect_description.py",
    "type": "function",
    "name": "get_current_user",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_openid_connect_description.py:function:read_current_user:chunk1",
    "text": "def read_current_user(current_user: User = Depends(get_current_user)):\n    return current_user",
    "repo": "fastapi",
    "path": "tests\\test_security_openid_connect_description.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 23,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_openid_connect_description.py:function:test_security_oauth2:chunk1",
    "text": "def test_security_oauth2():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Bearer footokenbar\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_openid_connect_description.py",
    "type": "function",
    "name": "test_security_oauth2",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_openid_connect_description.py:function:test_security_oauth2_password_other_header:chunk1",
    "text": "def test_security_oauth2_password_other_header():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Other footokenbar\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_openid_connect_description.py",
    "type": "function",
    "name": "test_security_oauth2_password_other_header",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_openid_connect_description.py:function:test_security_oauth2_password_bearer_no_header:chunk1",
    "text": "def test_security_oauth2_password_bearer_no_header():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_openid_connect_description.py",
    "type": "function",
    "name": "test_security_oauth2_password_bearer_no_header",
    "loc": 42,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_openid_connect_description.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"OpenIdConnect\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"OpenIdConnect\": {\n                    \"type\": \"openIdConnect\",\n                    \"openIdConnectUrl\": \"/openid\",\n                    \"description\": \"OpenIdConnect security scheme\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_openid_connect_description.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 48,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_openid_connect_description.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str",
    "repo": "fastapi",
    "path": "tests\\test_security_openid_connect_description.py",
    "type": "class",
    "name": "User",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_openid_connect_optional.py:function:get_current_user:chunk1",
    "text": "def get_current_user(oauth_header: Optional[str] = Security(oid)):\n    if oauth_header is None:\n        return None\n    user = User(username=oauth_header)\n    return user",
    "repo": "fastapi",
    "path": "tests\\test_security_openid_connect_optional.py",
    "type": "function",
    "name": "get_current_user",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_openid_connect_optional.py:function:read_current_user:chunk1",
    "text": "def read_current_user(current_user: Optional[User] = Depends(get_current_user)):\n    if current_user is None:\n        return {\"msg\": \"Create an account first\"}\n    return current_user",
    "repo": "fastapi",
    "path": "tests\\test_security_openid_connect_optional.py",
    "type": "function",
    "name": "read_current_user",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_openid_connect_optional.py:function:test_security_oauth2:chunk1",
    "text": "def test_security_oauth2():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Bearer footokenbar\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_openid_connect_optional.py",
    "type": "function",
    "name": "test_security_oauth2",
    "loc": 34,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_openid_connect_optional.py:function:test_security_oauth2_password_other_header:chunk1",
    "text": "def test_security_oauth2_password_other_header():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Other footokenbar\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_openid_connect_optional.py",
    "type": "function",
    "name": "test_security_oauth2_password_other_header",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_openid_connect_optional.py:function:test_security_oauth2_password_bearer_no_header:chunk1",
    "text": "def test_security_oauth2_password_bearer_no_header():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}",
    "repo": "fastapi",
    "path": "tests\\test_security_openid_connect_optional.py",
    "type": "function",
    "name": "test_security_oauth2_password_bearer_no_header",
    "loc": 46,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_openid_connect_optional.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"OpenIdConnect\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"OpenIdConnect\": {\n                    \"type\": \"openIdConnect\",\n                    \"openIdConnectUrl\": \"/openid\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_security_openid_connect_optional.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 52,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_security_openid_connect_optional.py:class:User:chunk1",
    "text": "class User(BaseModel):\n    username: str",
    "repo": "fastapi",
    "path": "tests\\test_security_openid_connect_optional.py",
    "type": "class",
    "name": "User",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response.py:function:get_valid:chunk1",
    "text": "def get_valid():\n    return {\"name\": \"valid\", \"price\": 1.0}",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response.py",
    "type": "function",
    "name": "get_valid",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response.py:function:get_coerce:chunk1",
    "text": "def get_coerce():\n    return {\"name\": \"coerce\", \"price\": \"1.0\"}",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response.py",
    "type": "function",
    "name": "get_coerce",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response.py:function:get_validlist:chunk1",
    "text": "def get_validlist():\n    return [\n        {\"name\": \"foo\"},\n        {\"name\": \"bar\", \"price\": 1.0},\n        {\"name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response.py",
    "type": "function",
    "name": "get_validlist",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response.py:function:test_valid:chunk1",
    "text": "def test_valid():\n    response = client.get(\"/items/valid\")\n    response.raise_for_status()\n    assert response.json() == {\"name\": \"valid\", \"price\": 1.0, \"owner_ids\": None}",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response.py",
    "type": "function",
    "name": "test_valid",
    "loc": 38,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response.py:function:test_coerce:chunk1",
    "text": "def test_coerce():\n    response = client.get(\"/items/coerce\")\n    response.raise_for_status()\n    assert response.json() == {\"name\": \"coerce\", \"price\": 1.0, \"owner_ids\": None}",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response.py",
    "type": "function",
    "name": "test_coerce",
    "loc": 44,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response.py:function:test_validlist:chunk1",
    "text": "def test_validlist():\n    response = client.get(\"/items/validlist\")\n    response.raise_for_status()\n    assert response.json() == [\n        {\"name\": \"foo\", \"price\": None, \"owner_ids\": None},\n        {\"name\": \"bar\", \"price\": 1.0, \"owner_ids\": None},\n        {\"name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response.py",
    "type": "function",
    "name": "test_validlist",
    "loc": 50,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response.py",
    "type": "class",
    "name": "Item",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_dataclass.py:function:get_valid:chunk1",
    "text": "def get_valid():\n    return {\"name\": \"valid\", \"date\": datetime(2021, 7, 26), \"price\": 1.0}",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_dataclass.py",
    "type": "function",
    "name": "get_valid",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_dataclass.py:function:get_object:chunk1",
    "text": "def get_object():\n    return Item(\n        name=\"object\", date=datetime(2021, 7, 26), price=1.0, owner_ids=[1, 2, 3]\n    )",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_dataclass.py",
    "type": "function",
    "name": "get_object",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_dataclass.py:function:get_coerce:chunk1",
    "text": "def get_coerce():\n    return {\"name\": \"coerce\", \"date\": datetime(2021, 7, 26).isoformat(), \"price\": \"1.0\"}",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_dataclass.py",
    "type": "function",
    "name": "get_coerce",
    "loc": 32,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_dataclass.py:function:get_validlist:chunk1",
    "text": "def get_validlist():\n    return [\n        {\"name\": \"foo\", \"date\": datetime(2021, 7, 26)},\n        {\"name\": \"bar\", \"date\": datetime(2021, 7, 26), \"price\": 1.0},\n        {\n            \"name\": \"baz\",\n            \"date\": datetime(2021, 7, 26),\n            \"price\": 2.0,\n            \"owner_ids\": [1, 2, 3],\n        },\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_dataclass.py",
    "type": "function",
    "name": "get_validlist",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_dataclass.py:function:get_objectlist:chunk1",
    "text": "def get_objectlist():\n    return [\n        Item(name=\"foo\", date=datetime(2021, 7, 26)),\n        Item(name=\"bar\", date=datetime(2021, 7, 26), price=1.0),\n        Item(name=\"baz\", date=datetime(2021, 7, 26), price=2.0, owner_ids=[1, 2, 3]),\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_dataclass.py",
    "type": "function",
    "name": "get_objectlist",
    "loc": 51,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_dataclass.py:function:get_no_response_model_object:chunk1",
    "text": "def get_no_response_model_object():\n    return Item(\n        name=\"object\", date=datetime(2021, 7, 26), price=1.0, owner_ids=[1, 2, 3]\n    )",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_dataclass.py",
    "type": "function",
    "name": "get_no_response_model_object",
    "loc": 60,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_dataclass.py:function:get_no_response_model_objectlist:chunk1",
    "text": "def get_no_response_model_objectlist():\n    return [\n        Item(name=\"foo\", date=datetime(2021, 7, 26)),\n        Item(name=\"bar\", date=datetime(2021, 7, 26), price=1.0),\n        Item(name=\"baz\", date=datetime(2021, 7, 26), price=2.0, owner_ids=[1, 2, 3]),\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_dataclass.py",
    "type": "function",
    "name": "get_no_response_model_objectlist",
    "loc": 67,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_dataclass.py:function:test_valid:chunk1",
    "text": "def test_valid():\n    response = client.get(\"/items/valid\")\n    response.raise_for_status()\n    assert response.json() == {\n        \"name\": \"valid\",\n        \"date\": datetime(2021, 7, 26).isoformat(),\n        \"price\": 1.0,\n        \"owner_ids\": None,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_dataclass.py",
    "type": "function",
    "name": "test_valid",
    "loc": 78,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_dataclass.py:function:test_object:chunk1",
    "text": "def test_object():\n    response = client.get(\"/items/object\")\n    response.raise_for_status()\n    assert response.json() == {\n        \"name\": \"object\",\n        \"date\": datetime(2021, 7, 26).isoformat(),\n        \"price\": 1.0,\n        \"owner_ids\": [1, 2, 3],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_dataclass.py",
    "type": "function",
    "name": "test_object",
    "loc": 89,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_dataclass.py:function:test_coerce:chunk1",
    "text": "def test_coerce():\n    response = client.get(\"/items/coerce\")\n    response.raise_for_status()\n    assert response.json() == {\n        \"name\": \"coerce\",\n        \"date\": datetime(2021, 7, 26).isoformat(),\n        \"price\": 1.0,\n        \"owner_ids\": None,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_dataclass.py",
    "type": "function",
    "name": "test_coerce",
    "loc": 100,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_dataclass.py:function:test_validlist:chunk1",
    "text": "def test_validlist():\n    response = client.get(\"/items/validlist\")\n    response.raise_for_status()\n    assert response.json() == [\n        {\n            \"name\": \"foo\",\n            \"date\": datetime(2021, 7, 26).isoformat(),\n            \"price\": None,\n            \"owner_ids\": None,\n        },\n        {\n            \"name\": \"bar\",\n            \"date\": datetime(2021, 7, 26).isoformat(),\n            \"price\": 1.0,\n            \"owner_ids\": None,\n        },\n        {\n            \"name\": \"baz\",\n            \"date\": datetime(2021, 7, 26).isoformat(),\n            \"price\": 2.0,\n            \"owner_ids\": [1, 2, 3],\n        },\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_dataclass.py",
    "type": "function",
    "name": "test_validlist",
    "loc": 111,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_dataclass.py:function:test_objectlist:chunk1",
    "text": "def test_objectlist():\n    response = client.get(\"/items/objectlist\")\n    response.raise_for_status()\n    assert response.json() == [\n        {\n            \"name\": \"foo\",\n            \"date\": datetime(2021, 7, 26).isoformat(),\n            \"price\": None,\n            \"owner_ids\": None,\n        },\n        {\n            \"name\": \"bar\",\n            \"date\": datetime(2021, 7, 26).isoformat(),\n            \"price\": 1.0,\n            \"owner_ids\": None,\n        },\n        {\n            \"name\": \"baz\",\n            \"date\": datetime(2021, 7, 26).isoformat(),\n            \"price\": 2.0,\n            \"owner_ids\": [1, 2, 3],\n        },\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_dataclass.py",
    "type": "function",
    "name": "test_objectlist",
    "loc": 136,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_dataclass.py:function:test_no_response_model_object:chunk1",
    "text": "def test_no_response_model_object():\n    response = client.get(\"/items/no-response-model/object\")\n    response.raise_for_status()\n    assert response.json() == {\n        \"name\": \"object\",\n        \"date\": datetime(2021, 7, 26).isoformat(),\n        \"price\": 1.0,\n        \"owner_ids\": [1, 2, 3],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_dataclass.py",
    "type": "function",
    "name": "test_no_response_model_object",
    "loc": 161,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_dataclass.py:function:test_no_response_model_objectlist:chunk1",
    "text": "def test_no_response_model_objectlist():\n    response = client.get(\"/items/no-response-model/objectlist\")\n    response.raise_for_status()\n    assert response.json() == [\n        {\n            \"name\": \"foo\",\n            \"date\": datetime(2021, 7, 26).isoformat(),\n            \"price\": None,\n            \"owner_ids\": None,\n        },\n        {\n            \"name\": \"bar\",\n            \"date\": datetime(2021, 7, 26).isoformat(),\n            \"price\": 1.0,\n            \"owner_ids\": None,\n        },\n        {\n            \"name\": \"baz\",\n            \"date\": datetime(2021, 7, 26).isoformat(),\n            \"price\": 2.0,\n            \"owner_ids\": [1, 2, 3],\n        },\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_dataclass.py",
    "type": "function",
    "name": "test_no_response_model_objectlist",
    "loc": 172,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_dataclass.py:class:Item:chunk1",
    "text": "class Item:\n    name: str\n    date: datetime\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_dataclass.py",
    "type": "class",
    "name": "Item",
    "loc": 12,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_model.py:function:get_valid:chunk1",
    "text": "def get_valid():\n    return Item(aliased_name=\"valid\", price=1.0)",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_model.py",
    "type": "function",
    "name": "get_valid",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_model.py:function:get_coerce:chunk1",
    "text": "def get_coerce():\n    return Item(aliased_name=\"coerce\", price=\"1.0\")",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_model.py",
    "type": "function",
    "name": "get_coerce",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_model.py:function:get_validlist:chunk1",
    "text": "def get_validlist():\n    return [\n        Item(aliased_name=\"foo\"),\n        Item(aliased_name=\"bar\", price=1.0),\n        Item(aliased_name=\"baz\", price=2.0, owner_ids=[1, 2, 3]),\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_model.py",
    "type": "function",
    "name": "get_validlist",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_model.py:function:get_validdict:chunk1",
    "text": "def get_validdict():\n    return {\n        \"k1\": Item(aliased_name=\"foo\"),\n        \"k2\": Item(aliased_name=\"bar\", price=1.0),\n        \"k3\": Item(aliased_name=\"baz\", price=2.0, owner_ids=[1, 2, 3]),\n    }",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_model.py",
    "type": "function",
    "name": "get_validdict",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_model.py:function:get_valid_exclude_unset:chunk1",
    "text": "def get_valid_exclude_unset():\n    return Item(aliased_name=\"valid\", price=1.0)",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_model.py",
    "type": "function",
    "name": "get_valid_exclude_unset",
    "loc": 47,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_model.py:function:get_coerce_exclude_unset:chunk1",
    "text": "def get_coerce_exclude_unset():\n    return Item(aliased_name=\"coerce\", price=\"1.0\")",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_model.py",
    "type": "function",
    "name": "get_coerce_exclude_unset",
    "loc": 56,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_model.py:function:get_validlist_exclude_unset:chunk1",
    "text": "def get_validlist_exclude_unset():\n    return [\n        Item(aliased_name=\"foo\"),\n        Item(aliased_name=\"bar\", price=1.0),\n        Item(aliased_name=\"baz\", price=2.0, owner_ids=[1, 2, 3]),\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_model.py",
    "type": "function",
    "name": "get_validlist_exclude_unset",
    "loc": 65,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_model.py:function:get_validdict_exclude_unset:chunk1",
    "text": "def get_validdict_exclude_unset():\n    return {\n        \"k1\": Item(aliased_name=\"foo\"),\n        \"k2\": Item(aliased_name=\"bar\", price=1.0),\n        \"k3\": Item(aliased_name=\"baz\", price=2.0, owner_ids=[1, 2, 3]),\n    }",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_model.py",
    "type": "function",
    "name": "get_validdict_exclude_unset",
    "loc": 78,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_model.py:function:test_valid:chunk1",
    "text": "def test_valid():\n    response = client.get(\"/items/valid\")\n    response.raise_for_status()\n    assert response.json() == {\"aliased_name\": \"valid\", \"price\": 1.0, \"owner_ids\": None}",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_model.py",
    "type": "function",
    "name": "test_valid",
    "loc": 89,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_model.py:function:test_coerce:chunk1",
    "text": "def test_coerce():\n    response = client.get(\"/items/coerce\")\n    response.raise_for_status()\n    assert response.json() == {\n        \"aliased_name\": \"coerce\",\n        \"price\": 1.0,\n        \"owner_ids\": None,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_model.py",
    "type": "function",
    "name": "test_coerce",
    "loc": 95,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_model.py:function:test_validlist:chunk1",
    "text": "def test_validlist():\n    response = client.get(\"/items/validlist\")\n    response.raise_for_status()\n    assert response.json() == [\n        {\"aliased_name\": \"foo\", \"price\": None, \"owner_ids\": None},\n        {\"aliased_name\": \"bar\", \"price\": 1.0, \"owner_ids\": None},\n        {\"aliased_name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_model.py",
    "type": "function",
    "name": "test_validlist",
    "loc": 105,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_model.py:function:test_validdict:chunk1",
    "text": "def test_validdict():\n    response = client.get(\"/items/validdict\")\n    response.raise_for_status()\n    assert response.json() == {\n        \"k1\": {\"aliased_name\": \"foo\", \"price\": None, \"owner_ids\": None},\n        \"k2\": {\"aliased_name\": \"bar\", \"price\": 1.0, \"owner_ids\": None},\n        \"k3\": {\"aliased_name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_model.py",
    "type": "function",
    "name": "test_validdict",
    "loc": 115,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_model.py:function:test_valid_exclude_unset:chunk1",
    "text": "def test_valid_exclude_unset():\n    response = client.get(\"/items/valid-exclude-unset\")\n    response.raise_for_status()\n    assert response.json() == {\"aliased_name\": \"valid\", \"price\": 1.0}",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_model.py",
    "type": "function",
    "name": "test_valid_exclude_unset",
    "loc": 125,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_model.py:function:test_coerce_exclude_unset:chunk1",
    "text": "def test_coerce_exclude_unset():\n    response = client.get(\"/items/coerce-exclude-unset\")\n    response.raise_for_status()\n    assert response.json() == {\"aliased_name\": \"coerce\", \"price\": 1.0}",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_model.py",
    "type": "function",
    "name": "test_coerce_exclude_unset",
    "loc": 131,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_model.py:function:test_validlist_exclude_unset:chunk1",
    "text": "def test_validlist_exclude_unset():\n    response = client.get(\"/items/validlist-exclude-unset\")\n    response.raise_for_status()\n    assert response.json() == [\n        {\"aliased_name\": \"foo\"},\n        {\"aliased_name\": \"bar\", \"price\": 1.0},\n        {\"aliased_name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_model.py",
    "type": "function",
    "name": "test_validlist_exclude_unset",
    "loc": 137,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_model.py:function:test_validdict_exclude_unset:chunk1",
    "text": "def test_validdict_exclude_unset():\n    response = client.get(\"/items/validdict-exclude-unset\")\n    response.raise_for_status()\n    assert response.json() == {\n        \"k1\": {\"aliased_name\": \"foo\"},\n        \"k2\": {\"aliased_name\": \"bar\", \"price\": 1.0},\n        \"k3\": {\"aliased_name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_model.py",
    "type": "function",
    "name": "test_validdict_exclude_unset",
    "loc": 147,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_serialize_response_model.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str = Field(alias=\"aliased_name\")\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None",
    "repo": "fastapi",
    "path": "tests\\test_serialize_response_model.py",
    "type": "class",
    "name": "Item",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_skip_defaults.py:function:get_root:chunk1",
    "text": "def get_root() -> ModelSubclass:\n    return ModelSubclass(sub={}, y=1, z=0)",
    "repo": "fastapi",
    "path": "tests\\test_skip_defaults.py",
    "type": "function",
    "name": "get_root",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_skip_defaults.py:function:get_exclude_unset:chunk1",
    "text": "def get_exclude_unset() -> ModelDefaults:\n    return ModelDefaults(x=None, y=\"y\")",
    "repo": "fastapi",
    "path": "tests\\test_skip_defaults.py",
    "type": "function",
    "name": "get_exclude_unset",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_skip_defaults.py:function:get_exclude_defaults:chunk1",
    "text": "def get_exclude_defaults() -> ModelDefaults:\n    return ModelDefaults(x=None, y=\"y\")",
    "repo": "fastapi",
    "path": "tests\\test_skip_defaults.py",
    "type": "function",
    "name": "get_exclude_defaults",
    "loc": 49,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_skip_defaults.py:function:get_exclude_none:chunk1",
    "text": "def get_exclude_none() -> ModelDefaults:\n    return ModelDefaults(x=None, y=\"y\")",
    "repo": "fastapi",
    "path": "tests\\test_skip_defaults.py",
    "type": "function",
    "name": "get_exclude_none",
    "loc": 56,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_skip_defaults.py:function:get_exclude_unset_none:chunk1",
    "text": "def get_exclude_unset_none() -> ModelDefaults:\n    return ModelDefaults(x=None, y=\"y\")",
    "repo": "fastapi",
    "path": "tests\\test_skip_defaults.py",
    "type": "function",
    "name": "get_exclude_unset_none",
    "loc": 66,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_skip_defaults.py:function:test_return_defaults:chunk1",
    "text": "def test_return_defaults():\n    response = client.get(\"/\")\n    assert response.json() == {\"sub\": {}}",
    "repo": "fastapi",
    "path": "tests\\test_skip_defaults.py",
    "type": "function",
    "name": "test_return_defaults",
    "loc": 73,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_skip_defaults.py:function:test_return_exclude_unset:chunk1",
    "text": "def test_return_exclude_unset():\n    response = client.get(\"/exclude_unset\")\n    assert response.json() == {\"x\": None, \"y\": \"y\"}",
    "repo": "fastapi",
    "path": "tests\\test_skip_defaults.py",
    "type": "function",
    "name": "test_return_exclude_unset",
    "loc": 78,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_skip_defaults.py:function:test_return_exclude_defaults:chunk1",
    "text": "def test_return_exclude_defaults():\n    response = client.get(\"/exclude_defaults\")\n    assert response.json() == {}",
    "repo": "fastapi",
    "path": "tests\\test_skip_defaults.py",
    "type": "function",
    "name": "test_return_exclude_defaults",
    "loc": 83,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_skip_defaults.py:function:test_return_exclude_none:chunk1",
    "text": "def test_return_exclude_none():\n    response = client.get(\"/exclude_none\")\n    assert response.json() == {\"y\": \"y\", \"z\": \"z\"}",
    "repo": "fastapi",
    "path": "tests\\test_skip_defaults.py",
    "type": "function",
    "name": "test_return_exclude_none",
    "loc": 88,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_skip_defaults.py:function:test_return_exclude_unset_none:chunk1",
    "text": "def test_return_exclude_unset_none():\n    response = client.get(\"/exclude_unset_none\")\n    assert response.json() == {\"y\": \"y\"}",
    "repo": "fastapi",
    "path": "tests\\test_skip_defaults.py",
    "type": "function",
    "name": "test_return_exclude_unset_none",
    "loc": 93,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_skip_defaults.py:class:SubModel:chunk1",
    "text": "class SubModel(BaseModel):\n    a: Optional[str] = \"foo\"",
    "repo": "fastapi",
    "path": "tests\\test_skip_defaults.py",
    "type": "class",
    "name": "SubModel",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_skip_defaults.py:class:Model:chunk1",
    "text": "class Model(BaseModel):\n    x: Optional[int] = None\n    sub: SubModel",
    "repo": "fastapi",
    "path": "tests\\test_skip_defaults.py",
    "type": "class",
    "name": "Model",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_skip_defaults.py:class:ModelSubclass:chunk1",
    "text": "class ModelSubclass(Model):\n    y: int\n    z: int = 0\n    w: Optional[int] = None",
    "repo": "fastapi",
    "path": "tests\\test_skip_defaults.py",
    "type": "class",
    "name": "ModelSubclass",
    "loc": 19,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_skip_defaults.py:class:ModelDefaults:chunk1",
    "text": "class ModelDefaults(BaseModel):\n    w: Optional[str] = None\n    x: Optional[str] = None\n    y: str = \"y\"\n    z: str = \"z\"",
    "repo": "fastapi",
    "path": "tests\\test_skip_defaults.py",
    "type": "class",
    "name": "ModelDefaults",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_starlette_exception.py:function:test_get_item:chunk1",
    "text": "def test_get_item():\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item\": \"The Foo Wrestlers\"}",
    "repo": "fastapi",
    "path": "tests\\test_starlette_exception.py",
    "type": "function",
    "name": "test_get_item",
    "loc": 41,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_starlette_exception.py:function:test_get_item_not_found:chunk1",
    "text": "def test_get_item_not_found():\n    response = client.get(\"/items/bar\")\n    assert response.status_code == 404, response.text\n    assert response.headers.get(\"x-error\") == \"Some custom header\"\n    assert response.json() == {\"detail\": \"Item not found\"}",
    "repo": "fastapi",
    "path": "tests\\test_starlette_exception.py",
    "type": "function",
    "name": "test_get_item_not_found",
    "loc": 47,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_starlette_exception.py:function:test_get_starlette_item:chunk1",
    "text": "def test_get_starlette_item():\n    response = client.get(\"/starlette-items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item\": \"The Foo Wrestlers\"}",
    "repo": "fastapi",
    "path": "tests\\test_starlette_exception.py",
    "type": "function",
    "name": "test_get_starlette_item",
    "loc": 54,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_starlette_exception.py:function:test_get_starlette_item_not_found:chunk1",
    "text": "def test_get_starlette_item_not_found():\n    response = client.get(\"/starlette-items/bar\")\n    assert response.status_code == 404, response.text\n    assert response.headers.get(\"x-error\") is None\n    assert response.json() == {\"detail\": \"Item not found\"}",
    "repo": "fastapi",
    "path": "tests\\test_starlette_exception.py",
    "type": "function",
    "name": "test_get_starlette_item_not_found",
    "loc": 60,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_starlette_exception.py:function:test_no_body_status_code_exception_handlers:chunk1",
    "text": "def test_no_body_status_code_exception_handlers():\n    response = client.get(\"/http-no-body-statuscode-exception\")\n    assert response.status_code == 204\n    assert not response.content",
    "repo": "fastapi",
    "path": "tests\\test_starlette_exception.py",
    "type": "function",
    "name": "test_no_body_status_code_exception_handlers",
    "loc": 67,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_starlette_exception.py:function:test_no_body_status_code_with_detail_exception_handlers:chunk1",
    "text": "def test_no_body_status_code_with_detail_exception_handlers():\n    response = client.get(\"/http-no-body-statuscode-with-detail-exception\")\n    assert response.status_code == 204\n    assert not response.content",
    "repo": "fastapi",
    "path": "tests\\test_starlette_exception.py",
    "type": "function",
    "name": "test_no_body_status_code_with_detail_exception_handlers",
    "loc": 73,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_starlette_exception.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/http-no-body-statuscode-exception\": {\n                \"get\": {\n                    \"operationId\": \"no_body_status_code_exception_http_no_body_statuscode_exception_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                            \"description\": \"Successful Response\",\n                        }\n                    },\n                    \"summary\": \"No Body Status Code Exception\",\n                }\n            },\n            \"/http-no-body-statuscode-with-detail-exception\": {\n                \"get\": {\n                    \"operationId\": \"no_body_status_code_with_detail_exception_http_no_body_statuscode_with_detail_exception_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                            \"description\": \"Successful Response\",\n                        }\n                    },\n                    \"summary\": \"No Body Status Code With Detail Exception\",\n                }\n            },\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/starlette-items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Starlette Item\",\n                    \"operationId\": \"read_starlette_item_starlette_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_starlette_exception.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 79,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_starlette_urlconvertors.py:function:int_convertor:chunk1",
    "text": "def int_convertor(param: int = Path()):\n    return {\"int\": param}",
    "repo": "fastapi",
    "path": "tests\\test_starlette_urlconvertors.py",
    "type": "function",
    "name": "int_convertor",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_starlette_urlconvertors.py:function:float_convertor:chunk1",
    "text": "def float_convertor(param: float = Path()):\n    return {\"float\": param}",
    "repo": "fastapi",
    "path": "tests\\test_starlette_urlconvertors.py",
    "type": "function",
    "name": "float_convertor",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_starlette_urlconvertors.py:function:path_convertor:chunk1",
    "text": "def path_convertor(param: str = Path()):\n    return {\"path\": param}",
    "repo": "fastapi",
    "path": "tests\\test_starlette_urlconvertors.py",
    "type": "function",
    "name": "path_convertor",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_starlette_urlconvertors.py:function:query_convertor:chunk1",
    "text": "def query_convertor(param: str = Query()):\n    return {\"query\": param}",
    "repo": "fastapi",
    "path": "tests\\test_starlette_urlconvertors.py",
    "type": "function",
    "name": "query_convertor",
    "loc": 23,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_starlette_urlconvertors.py:function:test_route_converters_int:chunk1",
    "text": "def test_route_converters_int():\n    # Test integer conversion\n    response = client.get(\"/int/5\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"int\": 5}\n    assert app.url_path_for(\"int_convertor\", param=5) == \"/int/5\"  # type: ignore",
    "repo": "fastapi",
    "path": "tests\\test_starlette_urlconvertors.py",
    "type": "function",
    "name": "test_route_converters_int",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_starlette_urlconvertors.py:function:test_route_converters_float:chunk1",
    "text": "def test_route_converters_float():\n    # Test float conversion\n    response = client.get(\"/float/25.5\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"float\": 25.5}\n    assert app.url_path_for(\"float_convertor\", param=25.5) == \"/float/25.5\"  # type: ignore",
    "repo": "fastapi",
    "path": "tests\\test_starlette_urlconvertors.py",
    "type": "function",
    "name": "test_route_converters_float",
    "loc": 38,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_starlette_urlconvertors.py:function:test_route_converters_path:chunk1",
    "text": "def test_route_converters_path():\n    # Test path conversion\n    response = client.get(\"/path/some/example\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"path\": \"some/example\"}",
    "repo": "fastapi",
    "path": "tests\\test_starlette_urlconvertors.py",
    "type": "function",
    "name": "test_route_converters_path",
    "loc": 46,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_starlette_urlconvertors.py:function:test_route_converters_query:chunk1",
    "text": "def test_route_converters_query():\n    # Test query conversion\n    response = client.get(\"/query\", params={\"param\": \"Qué tal!\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"query\": \"Qué tal!\"}",
    "repo": "fastapi",
    "path": "tests\\test_starlette_urlconvertors.py",
    "type": "function",
    "name": "test_route_converters_query",
    "loc": 53,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_starlette_urlconvertors.py:function:test_url_path_for_path_convertor:chunk1",
    "text": "def test_url_path_for_path_convertor():\n    assert (\n        app.url_path_for(\"path_convertor\", param=\"some/example\") == \"/path/some/example\"\n    )",
    "repo": "fastapi",
    "path": "tests\\test_starlette_urlconvertors.py",
    "type": "function",
    "name": "test_url_path_for_path_convertor",
    "loc": 60,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_sub_callbacks.py:function:invoice_notification:chunk1",
    "text": "def invoice_notification(body: InvoiceEvent):\n    pass  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_sub_callbacks.py",
    "type": "function",
    "name": "invoice_notification",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_sub_callbacks.py:function:event_callback:chunk1",
    "text": "def event_callback(event: Event):\n    pass  # pragma: nocover",
    "repo": "fastapi",
    "path": "tests\\test_sub_callbacks.py",
    "type": "function",
    "name": "event_callback",
    "loc": 46,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_sub_callbacks.py:function:create_invoice:chunk1",
    "text": "def create_invoice(invoice: Invoice, callback_url: Optional[HttpUrl] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}",
    "repo": "fastapi",
    "path": "tests\\test_sub_callbacks.py",
    "type": "function",
    "name": "create_invoice",
    "loc": 54,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_sub_callbacks.py:function:test_get:chunk1",
    "text": "def test_get():\n    response = client.post(\n        \"/invoices/\", json={\"id\": \"fooinvoice\", \"customer\": \"John\", \"total\": 5.3}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Invoice received\"}",
    "repo": "fastapi",
    "path": "tests\\test_sub_callbacks.py",
    "type": "function",
    "name": "test_get",
    "loc": 79,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_sub_callbacks.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    with client:\n        response = client.get(\"/openapi.json\")\n        assert response.json() == {\n            \"openapi\": \"3.1.0\",\n            \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n            \"paths\": {\n                \"/invoices/\": {\n                    \"post\": {\n                        \"summary\": \"Create Invoice\",\n                        \"description\": 'Create an invoice.\\n\\nThis will (let\\'s imagine) let the API user (some external developer) create an\\ninvoice.\\n\\nAnd this path operation will:\\n\\n* Send the invoice to the client.\\n* Collect the money from the client.\\n* Send a notification back to the API user (the external developer), as a callback.\\n    * At this point is that the API will somehow send a POST request to the\\n        external API with the notification of the invoice event\\n        (e.g. \"payment successful\").',\n                        \"operationId\": \"create_invoice_invoices__post\",\n                        \"parameters\": [\n                            {\n                                \"required\": False,\n                                \"schema\": IsDict(\n                                    {\n                                        \"title\": \"Callback Url\",\n                                        \"anyOf\": [\n                                            {\n                                                \"type\": \"string\",\n                                                \"format\": \"uri\",\n                                                \"minLength\": 1,\n                                                \"maxLength\": 2083,\n                                            },\n                                            {\"type\": \"null\"},\n                                        ],\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"title\": \"Callback Url\",\n                                        \"maxLength\": 2083,\n                                        \"minLength\": 1,\n                                        \"type\": \"string\",\n                                        \"format\": \"uri\",\n                                    }\n                                ),\n                                \"name\": \"callback_url\",\n                                \"in\": \"query\",\n                            }\n                        ],\n                        \"requestBody\": {\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Invoice\"}\n                                }\n                            },\n                            \"required\": True,\n                        },\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\"application/json\": {\"schema\": {}}},\n                            },\n                            \"422\": {\n                                \"description\": \"Validation Error\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                        }\n                                    }\n                                },\n                            },\n                        },\n                        \"callbacks\": {\n                            \"event_callback\": {\n                                \"{$callback_url}/events/{$request.body.title}\": {\n                                    \"get\": {\n                                        \"summary\": \"Event Callback\",\n                                        \"operationId\": \"event_callback__callback_url__events___request_body_title__get\",\n                                        \"requestBody\": {\n                                            \"required\": True,\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/Event\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                        \"responses\": {\n                                            \"200\": {\n                                                \"description\": \"Successful Response\",\n                                                \"content\": {\n                                                    \"application/json\": {\"schema\": {}}\n                                                },\n                                            },\n                                            \"422\": {\n                                                \"description\": \"Validation Error\",\n                                                \"content\": {\n                                                    \"application/json\": {\n                                                        \"schema\": {\n                                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                        }\n                                                    }\n                                                },\n                                            },\n                                        },\n                                    }\n                                }\n                            },\n                            \"invoice_notification\": {\n                                \"{$callback_url}/invoices/{$request.body.id}\": {\n                                    \"post\": {\n                                        \"summary\": \"Invoice Notification\",\n                                        \"operationId\": \"invoice_notification__callback_url__invoices___request_body_id__post\",\n                                        \"requestBody\": {\n                                            \"required\": True,\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/InvoiceEvent\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                        \"responses\": {\n                                            \"200\": {\n                                                \"description\": \"Successful Response\",\n                                                \"content\": {\n                                                    \"application/json\": {\n                                                        \"schema\": {\n                                                            \"$ref\": \"#/components/schemas/InvoiceEventReceived\"\n                                                        }\n                                                    }\n                                                },\n                                            },\n                                            \"422\": {\n                                                \"description\": \"Validation Error\",\n                                                \"content\": {\n                                                    \"application/json\": {\n                                                        \"schema\": {\n                                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                        }\n                                                    }\n                                                },\n                                            },\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                    }\n                }\n            },\n            \"components\": {\n                \"schemas\": {\n                    \"Event\": {\n                        \"title\": \"Event\",\n                        \"required\": [\"name\", \"total\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                            \"total\": {\"title\": \"Total\", \"type\": \"number\"},\n                        },\n                    },\n                    \"HTTPValidationError\": {\n                        \"title\": \"HTTPValidationError\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"detail\": {\n                                \"title\": \"Detail\",\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"$ref\": \"#/components/schemas/ValidationError\"\n                                },\n                            }\n                        },\n                    },\n                    \"Invoice\": {\n                        \"title\": \"Invoice\",\n                        \"required\": [\"id\", \"customer\", \"total\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"id\": {\"title\": \"Id\", \"type\": \"string\"},\n                            \"title\": IsDict(\n                                {\n                                    \"title\": \"Title\",\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Title\", \"type\": \"string\"}\n                            ),\n                            \"customer\": {\"title\": \"Customer\", \"type\": \"string\"},\n                            \"total\": {\"title\": \"Total\", \"type\": \"number\"},\n                        },\n                    },\n                    \"InvoiceEvent\": {\n                        \"title\": \"InvoiceEvent\",\n                        \"required\": [\"description\", \"paid\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                            \"paid\": {\"title\": \"Paid\", \"type\": \"boolean\"},\n                        },\n                    },\n                    \"InvoiceEventReceived\": {\n                        \"title\": \"InvoiceEventReceived\",\n                        \"required\": [\"ok\"],\n                        \"type\": \"object\",\n                        \"properties\": {\"ok\": {\"title\": \"Ok\", \"type\": \"boolean\"}},\n                    },\n                    \"ValidationError\": {\n                        \"title\": \"ValidationError\",\n                        \"required\": [\"loc\", \"msg\", \"type\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"loc\": {\n                                \"title\": \"Location\",\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                                },\n                            },\n                            \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                            \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                        },\n                    },\n                }\n            },\n        }",
    "repo": "fastapi",
    "path": "tests\\test_sub_callbacks.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 87,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_sub_callbacks.py:class:Invoice:chunk1",
    "text": "class Invoice(BaseModel):\n    id: str\n    title: Optional[str] = None\n    customer: str\n    total: float",
    "repo": "fastapi",
    "path": "tests\\test_sub_callbacks.py",
    "type": "class",
    "name": "Invoice",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_sub_callbacks.py:class:InvoiceEvent:chunk1",
    "text": "class InvoiceEvent(BaseModel):\n    description: str\n    paid: bool",
    "repo": "fastapi",
    "path": "tests\\test_sub_callbacks.py",
    "type": "class",
    "name": "InvoiceEvent",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_sub_callbacks.py:class:InvoiceEventReceived:chunk1",
    "text": "class InvoiceEventReceived(BaseModel):\n    ok: bool",
    "repo": "fastapi",
    "path": "tests\\test_sub_callbacks.py",
    "type": "class",
    "name": "InvoiceEventReceived",
    "loc": 23,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_sub_callbacks.py:class:Event:chunk1",
    "text": "class Event(BaseModel):\n    name: str\n    total: float",
    "repo": "fastapi",
    "path": "tests\\test_sub_callbacks.py",
    "type": "class",
    "name": "Event",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_swagger_ui_init_oauth.py:function:test_swagger_ui:chunk1",
    "text": "def test_swagger_ui():\n    response = client.get(\"/docs\")\n    assert response.status_code == 200, response.text\n    print(response.text)\n    assert \"ui.initOAuth\" in response.text\n    assert '\"appName\": \"The Predendapp\"' in response.text\n    assert '\"clientId\": \"the-foo-clients\"' in response.text",
    "repo": "fastapi",
    "path": "tests\\test_swagger_ui_init_oauth.py",
    "type": "function",
    "name": "test_swagger_ui",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_swagger_ui_init_oauth.py:function:test_response:chunk1",
    "text": "def test_response():\n    response = client.get(\"/items/\")\n    assert response.json() == {\"id\": \"foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_swagger_ui_init_oauth.py",
    "type": "function",
    "name": "test_response",
    "loc": 26,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tuples.py:function:post_model_with_tuple:chunk1",
    "text": "def post_model_with_tuple(item_group: ItemGroup):\n    return item_group",
    "repo": "fastapi",
    "path": "tests\\test_tuples.py",
    "type": "function",
    "name": "post_model_with_tuple",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tuples.py:function:post_tuple_of_models:chunk1",
    "text": "def post_tuple_of_models(square: Tuple[Coordinate, Coordinate]):\n    return square",
    "repo": "fastapi",
    "path": "tests\\test_tuples.py",
    "type": "function",
    "name": "post_tuple_of_models",
    "loc": 26,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tuples.py:function:hello:chunk1",
    "text": "def hello(values: Tuple[int, int] = Form()):\n    return values",
    "repo": "fastapi",
    "path": "tests\\test_tuples.py",
    "type": "function",
    "name": "hello",
    "loc": 31,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tuples.py:function:test_model_with_tuple_valid:chunk1",
    "text": "def test_model_with_tuple_valid():\n    data = {\"items\": [[\"foo\", \"bar\"], [\"baz\", \"whatelse\"]]}\n    response = client.post(\"/model-with-tuple/\", json=data)\n    assert response.status_code == 200, response.text\n    assert response.json() == data",
    "repo": "fastapi",
    "path": "tests\\test_tuples.py",
    "type": "function",
    "name": "test_model_with_tuple_valid",
    "loc": 38,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tuples.py:function:test_model_with_tuple_invalid:chunk1",
    "text": "def test_model_with_tuple_invalid():\n    data = {\"items\": [[\"foo\", \"bar\"], [\"baz\", \"whatelse\", \"too\", \"much\"]]}\n    response = client.post(\"/model-with-tuple/\", json=data)\n    assert response.status_code == 422, response.text\n\n    data = {\"items\": [[\"foo\", \"bar\"], [\"baz\"]]}\n    response = client.post(\"/model-with-tuple/\", json=data)\n    assert response.status_code == 422, response.text",
    "repo": "fastapi",
    "path": "tests\\test_tuples.py",
    "type": "function",
    "name": "test_model_with_tuple_invalid",
    "loc": 45,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tuples.py:function:test_tuple_with_model_valid:chunk1",
    "text": "def test_tuple_with_model_valid():\n    data = [{\"x\": 1, \"y\": 2}, {\"x\": 3, \"y\": 4}]\n    response = client.post(\"/tuple-of-models/\", json=data)\n    assert response.status_code == 200, response.text\n    assert response.json() == data",
    "repo": "fastapi",
    "path": "tests\\test_tuples.py",
    "type": "function",
    "name": "test_tuple_with_model_valid",
    "loc": 55,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tuples.py:function:test_tuple_with_model_invalid:chunk1",
    "text": "def test_tuple_with_model_invalid():\n    data = [{\"x\": 1, \"y\": 2}, {\"x\": 3, \"y\": 4}, {\"x\": 5, \"y\": 6}]\n    response = client.post(\"/tuple-of-models/\", json=data)\n    assert response.status_code == 422, response.text\n\n    data = [{\"x\": 1, \"y\": 2}]\n    response = client.post(\"/tuple-of-models/\", json=data)\n    assert response.status_code == 422, response.text",
    "repo": "fastapi",
    "path": "tests\\test_tuples.py",
    "type": "function",
    "name": "test_tuple_with_model_invalid",
    "loc": 62,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tuples.py:function:test_tuple_form_valid:chunk1",
    "text": "def test_tuple_form_valid():\n    response = client.post(\"/tuple-form/\", data={\"values\": (\"1\", \"2\")})\n    assert response.status_code == 200, response.text\n    assert response.json() == [1, 2]",
    "repo": "fastapi",
    "path": "tests\\test_tuples.py",
    "type": "function",
    "name": "test_tuple_form_valid",
    "loc": 72,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tuples.py:function:test_tuple_form_invalid:chunk1",
    "text": "def test_tuple_form_invalid():\n    response = client.post(\"/tuple-form/\", data={\"values\": (\"1\", \"2\", \"3\")})\n    assert response.status_code == 422, response.text\n\n    response = client.post(\"/tuple-form/\", data={\"values\": (\"1\")})\n    assert response.status_code == 422, response.text",
    "repo": "fastapi",
    "path": "tests\\test_tuples.py",
    "type": "function",
    "name": "test_tuple_form_invalid",
    "loc": 78,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tuples.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/model-with-tuple/\": {\n                \"post\": {\n                    \"summary\": \"Post Model With Tuple\",\n                    \"operationId\": \"post_model_with_tuple_model_with_tuple__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/ItemGroup\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/tuple-of-models/\": {\n                \"post\": {\n                    \"summary\": \"Post Tuple Of Models\",\n                    \"operationId\": \"post_tuple_of_models_tuple_of_models__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"title\": \"Square\",\n                                        \"maxItems\": 2,\n                                        \"minItems\": 2,\n                                        \"type\": \"array\",\n                                        \"prefixItems\": [\n                                            {\"$ref\": \"#/components/schemas/Coordinate\"},\n                                            {\"$ref\": \"#/components/schemas/Coordinate\"},\n                                        ],\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"title\": \"Square\",\n                                        \"maxItems\": 2,\n                                        \"minItems\": 2,\n                                        \"type\": \"array\",\n                                        \"items\": [\n                                            {\"$ref\": \"#/components/schemas/Coordinate\"},\n                                            {\"$ref\": \"#/components/schemas/Coordinate\"},\n                                        ],\n                                    }\n                                )\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/tuple-form/\": {\n                \"post\": {\n                    \"summary\": \"Hello\",\n                    \"operationId\": \"hello_tuple_form__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_hello_tuple_form__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_hello_tuple_form__post\": {\n                    \"title\": \"Body_hello_tuple_form__post\",\n                    \"required\": [\"values\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"values\": IsDict(\n                            {\n                                \"title\": \"Values\",\n                                \"maxItems\": 2,\n                                \"minItems\": 2,\n                                \"type\": \"array\",\n                                \"prefixItems\": [\n                                    {\"type\": \"integer\"},\n                                    {\"type\": \"integer\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Values\",\n                                \"maxItems\": 2,\n                                \"minItems\": 2,\n                                \"type\": \"array\",\n                                \"items\": [{\"type\": \"integer\"}, {\"type\": \"integer\"}],\n                            }\n                        )\n                    },\n                },\n                \"Coordinate\": {\n                    \"title\": \"Coordinate\",\n                    \"required\": [\"x\", \"y\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"x\": {\"title\": \"X\", \"type\": \"number\"},\n                        \"y\": {\"title\": \"Y\", \"type\": \"number\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ItemGroup\": {\n                    \"title\": \"ItemGroup\",\n                    \"required\": [\"items\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"items\": {\n                            \"title\": \"Items\",\n                            \"type\": \"array\",\n                            \"items\": IsDict(\n                                {\n                                    \"maxItems\": 2,\n                                    \"minItems\": 2,\n                                    \"type\": \"array\",\n                                    \"prefixItems\": [\n                                        {\"type\": \"string\"},\n                                        {\"type\": \"string\"},\n                                    ],\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"maxItems\": 2,\n                                    \"minItems\": 2,\n                                    \"type\": \"array\",\n                                    \"items\": [{\"type\": \"string\"}, {\"type\": \"string\"}],\n                                }\n                            ),\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tuples.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 86,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tuples.py:class:ItemGroup:chunk1",
    "text": "class ItemGroup(BaseModel):\n    items: List[Tuple[str, str]]",
    "repo": "fastapi",
    "path": "tests\\test_tuples.py",
    "type": "class",
    "name": "ItemGroup",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tuples.py:class:Coordinate:chunk1",
    "text": "class Coordinate(BaseModel):\n    x: float\n    y: float",
    "repo": "fastapi",
    "path": "tests\\test_tuples.py",
    "type": "class",
    "name": "Coordinate",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_typing_python39.py:function:test_typing:chunk1",
    "text": "def test_typing():\n    types = {\n        list[int]: [1, 2, 3],\n        dict[str, list[int]]: {\"a\": [1, 2, 3], \"b\": [4, 5, 6]},\n        set[int]: [1, 2, 3],  # `set` is converted to `list`\n        tuple[int, ...]: [1, 2, 3],  # `tuple` is converted to `list`\n    }\n    for test_type, expect in types.items():\n        app = FastAPI()\n\n        @app.post(\"/\", response_model=test_type)\n        def post_endpoint(input: test_type):\n            return input\n\n        res = TestClient(app).post(\"/\", json=expect)\n        assert res.status_code == 200, res.json()\n        assert res.json() == expect",
    "repo": "fastapi",
    "path": "tests\\test_typing_python39.py",
    "type": "function",
    "name": "test_typing",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_typing_python39.py:function:post_endpoint:chunk1",
    "text": "def post_endpoint(input: test_type):\n            return input",
    "repo": "fastapi",
    "path": "tests\\test_typing_python39.py",
    "type": "function",
    "name": "post_endpoint",
    "loc": 19,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_union_body.py:function:save_union_body:chunk1",
    "text": "def save_union_body(item: Union[OtherItem, Item]):\n    return {\"item\": item}",
    "repo": "fastapi",
    "path": "tests\\test_union_body.py",
    "type": "function",
    "name": "save_union_body",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_union_body.py:function:test_post_other_item:chunk1",
    "text": "def test_post_other_item():\n    response = client.post(\"/items/\", json={\"price\": 100})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item\": {\"price\": 100}}",
    "repo": "fastapi",
    "path": "tests\\test_union_body.py",
    "type": "function",
    "name": "test_post_other_item",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_union_body.py:function:test_post_item:chunk1",
    "text": "def test_post_item():\n    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item\": {\"name\": \"Foo\"}}",
    "repo": "fastapi",
    "path": "tests\\test_union_body.py",
    "type": "function",
    "name": "test_post_item",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_union_body.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Save Union Body\",\n                    \"operationId\": \"save_union_body_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"title\": \"Item\",\n                                    \"anyOf\": [\n                                        {\"$ref\": \"#/components/schemas/OtherItem\"},\n                                        {\"$ref\": \"#/components/schemas/Item\"},\n                                    ],\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"OtherItem\": {\n                    \"title\": \"OtherItem\",\n                    \"required\": [\"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"price\": {\"title\": \"Price\", \"type\": \"integer\"}},\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"type\": \"object\",\n                    \"properties\": IsDict(\n                        {\n                            \"name\": {\n                                \"title\": \"Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        }\n                    )\n                    | IsDict(\n                        # TODO: remove when deprecating Pydantic v1\n                        {\"name\": {\"title\": \"Name\", \"type\": \"string\"}}\n                    ),\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_union_body.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 39,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_union_body.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: Optional[str] = None",
    "repo": "fastapi",
    "path": "tests\\test_union_body.py",
    "type": "class",
    "name": "Item",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_union_body.py:class:OtherItem:chunk1",
    "text": "class OtherItem(BaseModel):\n    price: int",
    "repo": "fastapi",
    "path": "tests\\test_union_body.py",
    "type": "class",
    "name": "OtherItem",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_union_inherited_body.py:function:save_union_different_body:chunk1",
    "text": "def save_union_different_body(item: Union[ExtendedItem, Item]):\n    return {\"item\": item}",
    "repo": "fastapi",
    "path": "tests\\test_union_inherited_body.py",
    "type": "function",
    "name": "save_union_different_body",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_union_inherited_body.py:function:test_post_extended_item:chunk1",
    "text": "def test_post_extended_item():\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"age\": 5})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item\": {\"name\": \"Foo\", \"age\": 5}}",
    "repo": "fastapi",
    "path": "tests\\test_union_inherited_body.py",
    "type": "function",
    "name": "test_post_extended_item",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_union_inherited_body.py:function:test_post_item:chunk1",
    "text": "def test_post_item():\n    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item\": {\"name\": \"Foo\"}}",
    "repo": "fastapi",
    "path": "tests\\test_union_inherited_body.py",
    "type": "function",
    "name": "test_post_item",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_union_inherited_body.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Save Union Different Body\",\n                    \"operationId\": \"save_union_different_body_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"title\": \"Item\",\n                                    \"anyOf\": [\n                                        {\"$ref\": \"#/components/schemas/ExtendedItem\"},\n                                        {\"$ref\": \"#/components/schemas/Item\"},\n                                    ],\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": IsDict(\n                            {\n                                \"title\": \"Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Name\", \"type\": \"string\"}\n                        )\n                    },\n                },\n                \"ExtendedItem\": {\n                    \"title\": \"ExtendedItem\",\n                    \"required\": [\"age\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": IsDict(\n                            {\n                                \"title\": \"Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Name\", \"type\": \"string\"}\n                        ),\n                        \"age\": {\"title\": \"Age\", \"type\": \"integer\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_union_inherited_body.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 39,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_union_inherited_body.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: Optional[str] = None",
    "repo": "fastapi",
    "path": "tests\\test_union_inherited_body.py",
    "type": "class",
    "name": "Item",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_union_inherited_body.py:class:ExtendedItem:chunk1",
    "text": "class ExtendedItem(Item):\n    age: int",
    "repo": "fastapi",
    "path": "tests\\test_union_inherited_body.py",
    "type": "class",
    "name": "ExtendedItem",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response.py:function:get_invalid:chunk1",
    "text": "def get_invalid():\n    return {\"name\": \"invalid\", \"price\": \"foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_validate_response.py",
    "type": "function",
    "name": "get_invalid",
    "loc": 19,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response.py:function:get_invalid_none:chunk1",
    "text": "def get_invalid_none():\n    return None",
    "repo": "fastapi",
    "path": "tests\\test_validate_response.py",
    "type": "function",
    "name": "get_invalid_none",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response.py:function:get_valid_none:chunk1",
    "text": "def get_valid_none(send_none: bool = False):\n    if send_none:\n        return None\n    else:\n        return {\"name\": \"invalid\", \"price\": 3.2}",
    "repo": "fastapi",
    "path": "tests\\test_validate_response.py",
    "type": "function",
    "name": "get_valid_none",
    "loc": 29,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response.py:function:get_innerinvalid:chunk1",
    "text": "def get_innerinvalid():\n    return {\"name\": \"double invalid\", \"price\": \"foo\", \"owner_ids\": [\"foo\", \"bar\"]}",
    "repo": "fastapi",
    "path": "tests\\test_validate_response.py",
    "type": "function",
    "name": "get_innerinvalid",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response.py:function:get_invalidlist:chunk1",
    "text": "def get_invalidlist():\n    return [\n        {\"name\": \"foo\"},\n        {\"name\": \"bar\", \"price\": \"bar\"},\n        {\"name\": \"baz\", \"price\": \"baz\"},\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_validate_response.py",
    "type": "function",
    "name": "get_invalidlist",
    "loc": 42,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response.py:function:test_invalid:chunk1",
    "text": "def test_invalid():\n    with pytest.raises(ResponseValidationError):\n        client.get(\"/items/invalid\")",
    "repo": "fastapi",
    "path": "tests\\test_validate_response.py",
    "type": "function",
    "name": "test_invalid",
    "loc": 53,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response.py:function:test_invalid_none:chunk1",
    "text": "def test_invalid_none():\n    with pytest.raises(ResponseValidationError):\n        client.get(\"/items/invalidnone\")",
    "repo": "fastapi",
    "path": "tests\\test_validate_response.py",
    "type": "function",
    "name": "test_invalid_none",
    "loc": 58,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response.py:function:test_valid_none_data:chunk1",
    "text": "def test_valid_none_data():\n    response = client.get(\"/items/validnone\")\n    data = response.json()\n    assert response.status_code == 200\n    assert data == {\"name\": \"invalid\", \"price\": 3.2, \"owner_ids\": None}",
    "repo": "fastapi",
    "path": "tests\\test_validate_response.py",
    "type": "function",
    "name": "test_valid_none_data",
    "loc": 63,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response.py:function:test_valid_none_none:chunk1",
    "text": "def test_valid_none_none():\n    response = client.get(\"/items/validnone\", params={\"send_none\": \"true\"})\n    data = response.json()\n    assert response.status_code == 200\n    assert data is None",
    "repo": "fastapi",
    "path": "tests\\test_validate_response.py",
    "type": "function",
    "name": "test_valid_none_none",
    "loc": 70,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response.py:function:test_double_invalid:chunk1",
    "text": "def test_double_invalid():\n    with pytest.raises(ResponseValidationError):\n        client.get(\"/items/innerinvalid\")",
    "repo": "fastapi",
    "path": "tests\\test_validate_response.py",
    "type": "function",
    "name": "test_double_invalid",
    "loc": 77,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response.py:function:test_invalid_list:chunk1",
    "text": "def test_invalid_list():\n    with pytest.raises(ResponseValidationError):\n        client.get(\"/items/invalidlist\")",
    "repo": "fastapi",
    "path": "tests\\test_validate_response.py",
    "type": "function",
    "name": "test_invalid_list",
    "loc": 82,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response.py:class:Item:chunk1",
    "text": "class Item(BaseModel):\n    name: str\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None",
    "repo": "fastapi",
    "path": "tests\\test_validate_response.py",
    "type": "class",
    "name": "Item",
    "loc": 12,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response_dataclass.py:function:get_invalid:chunk1",
    "text": "def get_invalid():\n    return {\"name\": \"invalid\", \"price\": \"foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_validate_response_dataclass.py",
    "type": "function",
    "name": "get_invalid",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response_dataclass.py:function:get_innerinvalid:chunk1",
    "text": "def get_innerinvalid():\n    return {\"name\": \"double invalid\", \"price\": \"foo\", \"owner_ids\": [\"foo\", \"bar\"]}",
    "repo": "fastapi",
    "path": "tests\\test_validate_response_dataclass.py",
    "type": "function",
    "name": "get_innerinvalid",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response_dataclass.py:function:get_invalidlist:chunk1",
    "text": "def get_invalidlist():\n    return [\n        {\"name\": \"foo\"},\n        {\"name\": \"bar\", \"price\": \"bar\"},\n        {\"name\": \"baz\", \"price\": \"baz\"},\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_validate_response_dataclass.py",
    "type": "function",
    "name": "get_invalidlist",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response_dataclass.py:function:test_invalid:chunk1",
    "text": "def test_invalid():\n    with pytest.raises(ResponseValidationError):\n        client.get(\"/items/invalid\")",
    "repo": "fastapi",
    "path": "tests\\test_validate_response_dataclass.py",
    "type": "function",
    "name": "test_invalid",
    "loc": 41,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response_dataclass.py:function:test_double_invalid:chunk1",
    "text": "def test_double_invalid():\n    with pytest.raises(ResponseValidationError):\n        client.get(\"/items/innerinvalid\")",
    "repo": "fastapi",
    "path": "tests\\test_validate_response_dataclass.py",
    "type": "function",
    "name": "test_double_invalid",
    "loc": 46,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response_dataclass.py:function:test_invalid_list:chunk1",
    "text": "def test_invalid_list():\n    with pytest.raises(ResponseValidationError):\n        client.get(\"/items/invalidlist\")",
    "repo": "fastapi",
    "path": "tests\\test_validate_response_dataclass.py",
    "type": "function",
    "name": "test_invalid_list",
    "loc": 51,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response_dataclass.py:class:Item:chunk1",
    "text": "class Item:\n    name: str\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None",
    "repo": "fastapi",
    "path": "tests\\test_validate_response_dataclass.py",
    "type": "class",
    "name": "Item",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_webhooks_security.py:function:new_subscription:chunk1",
    "text": "def new_subscription(\n    body: Subscription, token: Annotated[str, Security(bearer_scheme)]\n):\n    \"\"\"\n    When a new user subscribes to your service we'll send you a POST request with this\n    data to the URL that you register for the event `new-subscription` in the dashboard.\n    \"\"\"",
    "repo": "fastapi",
    "path": "tests\\test_webhooks_security.py",
    "type": "function",
    "name": "new_subscription",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_webhooks_security.py:function:test_dummy_webhook:chunk1",
    "text": "def test_dummy_webhook():\n    # Just for coverage\n    new_subscription(body={}, token=\"Bearer 123\")",
    "repo": "fastapi",
    "path": "tests\\test_webhooks_security.py",
    "type": "function",
    "name": "test_dummy_webhook",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_webhooks_security.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    # insert_assert(response.json())\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {},\n        \"webhooks\": {\n            \"new-subscription\": {\n                \"post\": {\n                    \"summary\": \"New Subscription\",\n                    \"description\": \"When a new user subscribes to your service we'll send you a POST request with this\\ndata to the URL that you register for the event `new-subscription` in the dashboard.\",\n                    \"operationId\": \"new_subscriptionnew_subscription_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Subscription\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"security\": [{\"HTTPBearer\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Subscription\": {\n                    \"properties\": {\n                        \"username\": {\"type\": \"string\", \"title\": \"Username\"},\n                        \"monthly_fee\": {\"type\": \"number\", \"title\": \"Monthly Fee\"},\n                        \"start_date\": {\n                            \"type\": \"string\",\n                            \"format\": \"date-time\",\n                            \"title\": \"Start Date\",\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"username\", \"monthly_fee\", \"start_date\"],\n                    \"title\": \"Subscription\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            },\n            \"securitySchemes\": {\"HTTPBearer\": {\"type\": \"http\", \"scheme\": \"bearer\"}},\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_webhooks_security.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 38,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_webhooks_security.py:class:Subscription:chunk1",
    "text": "class Subscription(BaseModel):\n    username: str\n    monthly_fee: float\n    start_date: datetime",
    "repo": "fastapi",
    "path": "tests\\test_webhooks_security.py",
    "type": "class",
    "name": "Subscription",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ws_dependencies.py:function:dependency_list:chunk1",
    "text": "def dependency_list() -> List[str]:\n    return []",
    "repo": "fastapi",
    "path": "tests\\test_ws_dependencies.py",
    "type": "function",
    "name": "dependency_list",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ws_dependencies.py:function:create_dependency:chunk1",
    "text": "def create_dependency(name: str):\n    def fun(deps: DepList):\n        deps.append(name)\n\n    return Depends(fun)",
    "repo": "fastapi",
    "path": "tests\\test_ws_dependencies.py",
    "type": "function",
    "name": "create_dependency",
    "loc": 16,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ws_dependencies.py:function:fun:chunk1",
    "text": "def fun(deps: DepList):\n        deps.append(name)",
    "repo": "fastapi",
    "path": "tests\\test_ws_dependencies.py",
    "type": "function",
    "name": "fun",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ws_dependencies.py:function:test_index:chunk1",
    "text": "def test_index():\n    client = TestClient(app)\n    with client.websocket_connect(\"/\") as websocket:\n        data = json.loads(websocket.receive_text())\n        assert data == [\"app\", \"index\"]",
    "repo": "fastapi",
    "path": "tests\\test_ws_dependencies.py",
    "type": "function",
    "name": "test_index",
    "loc": 55,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ws_dependencies.py:function:test_routerindex:chunk1",
    "text": "def test_routerindex():\n    client = TestClient(app)\n    with client.websocket_connect(\"/router\") as websocket:\n        data = json.loads(websocket.receive_text())\n        assert data == [\"app\", \"router2\", \"router\", \"routerindex\"]",
    "repo": "fastapi",
    "path": "tests\\test_ws_dependencies.py",
    "type": "function",
    "name": "test_routerindex",
    "loc": 62,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ws_dependencies.py:function:test_routerprefixindex:chunk1",
    "text": "def test_routerprefixindex():\n    client = TestClient(app)\n    with client.websocket_connect(\"/prefix/\") as websocket:\n        data = json.loads(websocket.receive_text())\n        assert data == [\"app\", \"prefix_router2\", \"prefix_router\", \"routerprefixindex\"]",
    "repo": "fastapi",
    "path": "tests\\test_ws_dependencies.py",
    "type": "function",
    "name": "test_routerprefixindex",
    "loc": 69,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ws_router.py:function:make_app:chunk1",
    "text": "def make_app(app=None, **kwargs):\n    app = app or FastAPI(**kwargs)\n    app.include_router(router)\n    app.include_router(prefix_router, prefix=\"/prefix\")\n    app.include_router(native_prefix_route)\n    return app",
    "repo": "fastapi",
    "path": "tests\\test_ws_router.py",
    "type": "function",
    "name": "make_app",
    "loc": 107,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ws_router.py:function:test_app:chunk1",
    "text": "def test_app():\n    client = TestClient(app)\n    with client.websocket_connect(\"/\") as websocket:\n        data = websocket.receive_text()\n        assert data == \"Hello, world!\"",
    "repo": "fastapi",
    "path": "tests\\test_ws_router.py",
    "type": "function",
    "name": "test_app",
    "loc": 118,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ws_router.py:function:test_router:chunk1",
    "text": "def test_router():\n    client = TestClient(app)\n    with client.websocket_connect(\"/router\") as websocket:\n        data = websocket.receive_text()\n        assert data == \"Hello, router!\"",
    "repo": "fastapi",
    "path": "tests\\test_ws_router.py",
    "type": "function",
    "name": "test_router",
    "loc": 125,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ws_router.py:function:test_prefix_router:chunk1",
    "text": "def test_prefix_router():\n    client = TestClient(app)\n    with client.websocket_connect(\"/prefix/\") as websocket:\n        data = websocket.receive_text()\n        assert data == \"Hello, router with prefix!\"",
    "repo": "fastapi",
    "path": "tests\\test_ws_router.py",
    "type": "function",
    "name": "test_prefix_router",
    "loc": 132,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ws_router.py:function:test_native_prefix_router:chunk1",
    "text": "def test_native_prefix_router():\n    client = TestClient(app)\n    with client.websocket_connect(\"/native/\") as websocket:\n        data = websocket.receive_text()\n        assert data == \"Hello, router with native prefix!\"",
    "repo": "fastapi",
    "path": "tests\\test_ws_router.py",
    "type": "function",
    "name": "test_native_prefix_router",
    "loc": 139,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ws_router.py:function:test_router2:chunk1",
    "text": "def test_router2():\n    client = TestClient(app)\n    with client.websocket_connect(\"/router2\") as websocket:\n        data = websocket.receive_text()\n        assert data == \"Hello, router!\"",
    "repo": "fastapi",
    "path": "tests\\test_ws_router.py",
    "type": "function",
    "name": "test_router2",
    "loc": 146,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ws_router.py:function:test_router_ws_depends:chunk1",
    "text": "def test_router_ws_depends():\n    client = TestClient(app)\n    with client.websocket_connect(\"/router-ws-depends/\") as websocket:\n        assert websocket.receive_text() == \"Socket Dependency\"",
    "repo": "fastapi",
    "path": "tests\\test_ws_router.py",
    "type": "function",
    "name": "test_router_ws_depends",
    "loc": 153,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ws_router.py:function:test_router_ws_depends_with_override:chunk1",
    "text": "def test_router_ws_depends_with_override():\n    client = TestClient(app)\n    app.dependency_overrides[ws_dependency] = lambda: \"Override\"  # noqa: E731\n    with client.websocket_connect(\"/router-ws-depends/\") as websocket:\n        assert websocket.receive_text() == \"Override\"",
    "repo": "fastapi",
    "path": "tests\\test_ws_router.py",
    "type": "function",
    "name": "test_router_ws_depends_with_override",
    "loc": 159,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ws_router.py:function:test_router_with_params:chunk1",
    "text": "def test_router_with_params():\n    client = TestClient(app)\n    with client.websocket_connect(\n        \"/router/path/to/file?queryparam=a_query_param\"\n    ) as websocket:\n        data = websocket.receive_text()\n        assert data == \"path/to/file\"\n        data = websocket.receive_text()\n        assert data == \"a_query_param\"",
    "repo": "fastapi",
    "path": "tests\\test_ws_router.py",
    "type": "function",
    "name": "test_router_with_params",
    "loc": 166,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ws_router.py:function:test_wrong_uri:chunk1",
    "text": "def test_wrong_uri():\n    \"\"\"\n    Verify that a websocket connection to a non-existent endpoing returns in a shutdown\n    \"\"\"\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect) as e:\n        with client.websocket_connect(\"/no-router/\"):\n            pass  # pragma: no cover\n    assert e.value.code == status.WS_1000_NORMAL_CLOSURE",
    "repo": "fastapi",
    "path": "tests\\test_ws_router.py",
    "type": "function",
    "name": "test_wrong_uri",
    "loc": 177,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ws_router.py:function:websocket_middleware:chunk1",
    "text": "def websocket_middleware(middleware_func):\n    \"\"\"\n    Helper to create a Starlette pure websocket middleware\n    \"\"\"\n\n    def middleware_constructor(app):\n        @functools.wraps(app)\n        async def wrapped_app(scope, receive, send):\n            if scope[\"type\"] != \"websocket\":\n                return await app(scope, receive, send)  # pragma: no cover\n\n            async def call_next():\n                return await app(scope, receive, send)\n\n            websocket = WebSocket(scope, receive=receive, send=send)\n            return await middleware_func(websocket, call_next)\n\n        return wrapped_app\n\n    return middleware_constructor",
    "repo": "fastapi",
    "path": "tests\\test_ws_router.py",
    "type": "function",
    "name": "websocket_middleware",
    "loc": 188,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ws_router.py:function:middleware_constructor:chunk1",
    "text": "def middleware_constructor(app):\n        @functools.wraps(app)\n        async def wrapped_app(scope, receive, send):\n            if scope[\"type\"] != \"websocket\":\n                return await app(scope, receive, send)  # pragma: no cover\n\n            async def call_next():\n                return await app(scope, receive, send)\n\n            websocket = WebSocket(scope, receive=receive, send=send)\n            return await middleware_func(websocket, call_next)\n\n        return wrapped_app",
    "repo": "fastapi",
    "path": "tests\\test_ws_router.py",
    "type": "function",
    "name": "middleware_constructor",
    "loc": 193,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ws_router.py:function:test_depend_validation:chunk1",
    "text": "def test_depend_validation():\n    \"\"\"\n    Verify that a validation in a dependency invokes the correct exception handler\n    \"\"\"\n    caught = []\n\n    @websocket_middleware\n    async def catcher(websocket, call_next):\n        try:\n            return await call_next()\n        except Exception as e:  # pragma: no cover\n            caught.append(e)\n            raise\n\n    myapp = make_app(middleware=[Middleware(catcher)])\n\n    client = TestClient(myapp)\n    with pytest.raises(WebSocketDisconnect) as e:\n        with client.websocket_connect(\"/depends-validate/\"):\n            pass  # pragma: no cover\n    # the validation error does produce a close message\n    assert e.value.code == status.WS_1008_POLICY_VIOLATION\n    # and no error is leaked\n    assert caught == []",
    "repo": "fastapi",
    "path": "tests\\test_ws_router.py",
    "type": "function",
    "name": "test_depend_validation",
    "loc": 210,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ws_router.py:function:test_depend_err_middleware:chunk1",
    "text": "def test_depend_err_middleware():\n    \"\"\"\n    Verify that it is possible to write custom WebSocket middleware to catch errors\n    \"\"\"\n\n    @websocket_middleware\n    async def errorhandler(websocket: WebSocket, call_next):\n        try:\n            return await call_next()\n        except Exception as e:\n            await websocket.close(code=status.WS_1006_ABNORMAL_CLOSURE, reason=repr(e))\n\n    myapp = make_app(middleware=[Middleware(errorhandler)])\n    client = TestClient(myapp)\n    with pytest.raises(WebSocketDisconnect) as e:\n        with client.websocket_connect(\"/depends-err/\"):\n            pass  # pragma: no cover\n    assert e.value.code == status.WS_1006_ABNORMAL_CLOSURE\n    assert \"NotImplementedError\" in e.value.reason",
    "repo": "fastapi",
    "path": "tests\\test_ws_router.py",
    "type": "function",
    "name": "test_depend_err_middleware",
    "loc": 236,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ws_router.py:function:test_depend_err_handler:chunk1",
    "text": "def test_depend_err_handler():\n    \"\"\"\n    Verify that it is possible to write custom WebSocket middleware to catch errors\n    \"\"\"\n\n    async def custom_handler(websocket: WebSocket, exc: CustomError) -> None:\n        await websocket.close(1002, \"foo\")\n\n    myapp = make_app(exception_handlers={CustomError: custom_handler})\n    client = TestClient(myapp)\n    with pytest.raises(WebSocketDisconnect) as e:\n        with client.websocket_connect(\"/custom_error/\"):\n            pass  # pragma: no cover\n    assert e.value.code == 1002\n    assert \"foo\" in e.value.reason",
    "repo": "fastapi",
    "path": "tests\\test_ws_router.py",
    "type": "function",
    "name": "test_depend_err_handler",
    "loc": 257,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_ws_router.py:class:CustomError:chunk1",
    "text": "class CustomError(Exception):\n    pass",
    "repo": "fastapi",
    "path": "tests\\test_ws_router.py",
    "type": "class",
    "name": "CustomError",
    "loc": 98,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_filter_pydantic_sub_model\\app_pv1.py:class:ModelB:chunk1",
    "text": "class ModelB(BaseModel):\n    username: str",
    "repo": "fastapi",
    "path": "tests\\test_filter_pydantic_sub_model\\app_pv1.py",
    "type": "class",
    "name": "ModelB",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_filter_pydantic_sub_model\\app_pv1.py:class:ModelC:chunk1",
    "text": "class ModelC(ModelB):\n    password: str",
    "repo": "fastapi",
    "path": "tests\\test_filter_pydantic_sub_model\\app_pv1.py",
    "type": "class",
    "name": "ModelC",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_filter_pydantic_sub_model\\app_pv1.py:class:ModelA:chunk1",
    "text": "class ModelA(BaseModel):\n    name: str\n    description: Optional[str] = None\n    model_b: ModelB\n\n    @validator(\"name\")\n    def lower_username(cls, name: str, values):\n        if not name.endswith(\"A\"):\n            raise ValueError(\"name must end in A\")\n        return name",
    "repo": "fastapi",
    "path": "tests\\test_filter_pydantic_sub_model\\app_pv1.py",
    "type": "class",
    "name": "ModelA",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_filter_pydantic_sub_model\\test_filter_pydantic_sub_model_pv1.py:function:get_client:chunk1",
    "text": "def get_client():\n    from .app_pv1 import app\n\n    client = TestClient(app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_filter_pydantic_sub_model\\test_filter_pydantic_sub_model_pv1.py",
    "type": "function",
    "name": "get_client",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_filter_pydantic_sub_model\\test_filter_pydantic_sub_model_pv1.py:function:test_filter_sub_model:chunk1",
    "text": "def test_filter_sub_model(client: TestClient):\n    response = client.get(\"/model/modelA\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"modelA\",\n        \"description\": \"model-a-desc\",\n        \"model_b\": {\"username\": \"test-user\"},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_filter_pydantic_sub_model\\test_filter_pydantic_sub_model_pv1.py",
    "type": "function",
    "name": "test_filter_sub_model",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_filter_pydantic_sub_model\\test_filter_pydantic_sub_model_pv1.py:function:test_validator_is_cloned:chunk1",
    "text": "def test_validator_is_cloned(client: TestClient):\n    with pytest.raises(ResponseValidationError) as err:\n        client.get(\"/model/modelX\")\n    assert err.value.errors() == [\n        {\n            \"loc\": (\"response\", \"name\"),\n            \"msg\": \"name must end in A\",\n            \"type\": \"value_error\",\n        }\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_filter_pydantic_sub_model\\test_filter_pydantic_sub_model_pv1.py",
    "type": "function",
    "name": "test_validator_is_cloned",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_filter_pydantic_sub_model\\test_filter_pydantic_sub_model_pv1.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/model/{name}\": {\n                \"get\": {\n                    \"summary\": \"Get Model A\",\n                    \"operationId\": \"get_model_a_model__name__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Name\", \"type\": \"string\"},\n                            \"name\": \"name\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/ModelA\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ModelA\": {\n                    \"title\": \"ModelA\",\n                    \"required\": [\"name\", \"model_b\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                        \"model_b\": {\"$ref\": \"#/components/schemas/ModelB\"},\n                    },\n                },\n                \"ModelB\": {\n                    \"title\": \"ModelB\",\n                    \"required\": [\"username\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"username\": {\"title\": \"Username\", \"type\": \"string\"}},\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_filter_pydantic_sub_model\\test_filter_pydantic_sub_model_pv1.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 41,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_modules_same_name_body\\test_main.py:function:test_post:chunk1",
    "text": "def test_post(path):\n    data = {\"a\": 2, \"b\": \"foo\"}\n    response = client.post(path, json=data)\n    assert response.status_code == 200, response.text\n    assert data == response.json()",
    "repo": "fastapi",
    "path": "tests\\test_modules_same_name_body\\test_main.py",
    "type": "function",
    "name": "test_post",
    "loc": 12,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_modules_same_name_body\\test_main.py:function:test_post_invalid:chunk1",
    "text": "def test_post_invalid(path):\n    data = {\"a\": \"bar\", \"b\": \"foo\"}\n    response = client.post(path, json=data)\n    assert response.status_code == 422, response.text",
    "repo": "fastapi",
    "path": "tests\\test_modules_same_name_body\\test_main.py",
    "type": "function",
    "name": "test_post_invalid",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_modules_same_name_body\\test_main.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/a/compute\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Compute\",\n                    \"operationId\": \"compute_a_compute_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_compute_a_compute_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/b/compute/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Compute\",\n                    \"operationId\": \"compute_b_compute__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_compute_b_compute__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_compute_b_compute__post\": {\n                    \"title\": \"Body_compute_b_compute__post\",\n                    \"required\": [\"a\", \"b\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"a\": {\"title\": \"A\", \"type\": \"integer\"},\n                        \"b\": {\"title\": \"B\", \"type\": \"string\"},\n                    },\n                },\n                \"Body_compute_a_compute_post\": {\n                    \"title\": \"Body_compute_a_compute_post\",\n                    \"required\": [\"a\", \"b\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"a\": {\"title\": \"A\", \"type\": \"integer\"},\n                        \"b\": {\"title\": \"B\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_modules_same_name_body\\test_main.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_modules_same_name_body\\app\\a.py:function:compute:chunk1",
    "text": "def compute(a: int = Body(), b: str = Body()):\n    return {\"a\": a, \"b\": b}",
    "repo": "fastapi",
    "path": "tests\\test_modules_same_name_body\\app\\a.py",
    "type": "function",
    "name": "compute",
    "loc": 7,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_modules_same_name_body\\app\\b.py:function:compute:chunk1",
    "text": "def compute(a: int = Body(), b: str = Body()):\n    return {\"a\": a, \"b\": b}",
    "repo": "fastapi",
    "path": "tests\\test_modules_same_name_body\\app\\b.py",
    "type": "function",
    "name": "compute",
    "loc": 7,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_additional_responses\\test_tutorial001.py:function:test_path_operation:chunk1",
    "text": "def test_path_operation():\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_additional_responses\\test_tutorial001.py",
    "type": "function",
    "name": "test_path_operation",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_additional_responses\\test_tutorial001.py:function:test_path_operation_not_found:chunk1",
    "text": "def test_path_operation_not_found():\n    response = client.get(\"/items/bar\")\n    assert response.status_code == 404, response.text\n    assert response.json() == {\"message\": \"Item not found\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_additional_responses\\test_tutorial001.py",
    "type": "function",
    "name": "test_path_operation_not_found",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_additional_responses\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Message\"}\n                                }\n                            },\n                        },\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"id\", \"value\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"id\": {\"title\": \"Id\", \"type\": \"string\"},\n                        \"value\": {\"title\": \"Value\", \"type\": \"string\"},\n                    },\n                },\n                \"Message\": {\n                    \"title\": \"Message\",\n                    \"required\": [\"message\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"message\": {\"title\": \"Message\", \"type\": \"string\"}},\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_additional_responses\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_additional_responses\\test_tutorial002.py:function:test_path_operation:chunk1",
    "text": "def test_path_operation():\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_additional_responses\\test_tutorial002.py",
    "type": "function",
    "name": "test_path_operation",
    "loc": 12,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_additional_responses\\test_tutorial002.py:function:test_path_operation_img:chunk1",
    "text": "def test_path_operation_img():\n    shutil.copy(\"./docs/en/docs/img/favicon.png\", \"./image.png\")\n    response = client.get(\"/items/foo?img=1\")\n    assert response.status_code == 200, response.text\n    assert response.headers[\"Content-Type\"] == \"image/png\"\n    assert len(response.content)\n    os.remove(\"./image.png\")",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_additional_responses\\test_tutorial002.py",
    "type": "function",
    "name": "test_path_operation_img",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_additional_responses\\test_tutorial002.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Return the JSON item or an image.\",\n                            \"content\": {\n                                \"image/png\": {},\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                },\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"boolean\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Img\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Img\", \"type\": \"boolean\"}\n                            ),\n                            \"name\": \"img\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"id\", \"value\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"id\": {\"title\": \"Id\", \"type\": \"string\"},\n                        \"value\": {\"title\": \"Value\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_additional_responses\\test_tutorial002.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_additional_responses\\test_tutorial003.py:function:test_path_operation:chunk1",
    "text": "def test_path_operation():\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_additional_responses\\test_tutorial003.py",
    "type": "function",
    "name": "test_path_operation",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_additional_responses\\test_tutorial003.py:function:test_path_operation_not_found:chunk1",
    "text": "def test_path_operation_not_found():\n    response = client.get(\"/items/bar\")\n    assert response.status_code == 404, response.text\n    assert response.json() == {\"message\": \"Item not found\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_additional_responses\\test_tutorial003.py",
    "type": "function",
    "name": "test_path_operation_not_found",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_additional_responses\\test_tutorial003.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"404\": {\n                            \"description\": \"The item was not found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Message\"}\n                                }\n                            },\n                        },\n                        \"200\": {\n                            \"description\": \"Item requested by ID\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    \"example\": {\n                                        \"id\": \"bar\",\n                                        \"value\": \"The bar tenders\",\n                                    },\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"id\", \"value\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"id\": {\"title\": \"Id\", \"type\": \"string\"},\n                        \"value\": {\"title\": \"Value\", \"type\": \"string\"},\n                    },\n                },\n                \"Message\": {\n                    \"title\": \"Message\",\n                    \"required\": [\"message\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"message\": {\"title\": \"Message\", \"type\": \"string\"}},\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_additional_responses\\test_tutorial003.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_additional_responses\\test_tutorial004.py:function:test_path_operation:chunk1",
    "text": "def test_path_operation():\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_additional_responses\\test_tutorial004.py",
    "type": "function",
    "name": "test_path_operation",
    "loc": 12,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_additional_responses\\test_tutorial004.py:function:test_path_operation_img:chunk1",
    "text": "def test_path_operation_img():\n    shutil.copy(\"./docs/en/docs/img/favicon.png\", \"./image.png\")\n    response = client.get(\"/items/foo?img=1\")\n    assert response.status_code == 200, response.text\n    assert response.headers[\"Content-Type\"] == \"image/png\"\n    assert len(response.content)\n    os.remove(\"./image.png\")",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_additional_responses\\test_tutorial004.py",
    "type": "function",
    "name": "test_path_operation_img",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_additional_responses\\test_tutorial004.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"404\": {\"description\": \"Item not found\"},\n                        \"302\": {\"description\": \"The item was moved\"},\n                        \"403\": {\"description\": \"Not enough privileges\"},\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"image/png\": {},\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                },\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"boolean\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Img\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Img\", \"type\": \"boolean\"}\n                            ),\n                            \"name\": \"img\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"id\", \"value\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"id\": {\"title\": \"Id\", \"type\": \"string\"},\n                        \"value\": {\"title\": \"Value\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_additional_responses\\test_tutorial004.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_additional_status_codes\\test_tutorial001.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.additional_status_codes.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_additional_status_codes\\test_tutorial001.py",
    "type": "function",
    "name": "get_client",
    "loc": 19,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_additional_status_codes\\test_tutorial001.py:function:test_update:chunk1",
    "text": "def test_update(client: TestClient):\n    response = client.put(\"/items/foo\", json={\"name\": \"Wrestlers\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Wrestlers\", \"size\": None}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_additional_status_codes\\test_tutorial001.py",
    "type": "function",
    "name": "test_update",
    "loc": 26,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_additional_status_codes\\test_tutorial001.py:function:test_create:chunk1",
    "text": "def test_create(client: TestClient):\n    response = client.put(\"/items/red\", json={\"name\": \"Chillies\"})\n    assert response.status_code == 201, response.text\n    assert response.json() == {\"name\": \"Chillies\", \"size\": None}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_additional_status_codes\\test_tutorial001.py",
    "type": "function",
    "name": "test_create",
    "loc": 32,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_advanced_middleware\\test_tutorial001.py:function:test_middleware:chunk1",
    "text": "def test_middleware():\n    client = TestClient(app, base_url=\"https://testserver\")\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n\n    client = TestClient(app)\n    response = client.get(\"/\", follow_redirects=False)\n    assert response.status_code == 307, response.text\n    assert response.headers[\"location\"] == \"https://testserver/\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_advanced_middleware\\test_tutorial001.py",
    "type": "function",
    "name": "test_middleware",
    "loc": 6,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_advanced_middleware\\test_tutorial002.py:function:test_middleware:chunk1",
    "text": "def test_middleware():\n    client = TestClient(app, base_url=\"http://example.com\")\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    client = TestClient(app, base_url=\"http://subdomain.example.com\")\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    client = TestClient(app, base_url=\"http://invalidhost\")\n    response = client.get(\"/\")\n    assert response.status_code == 400, response.text",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_advanced_middleware\\test_tutorial002.py",
    "type": "function",
    "name": "test_middleware",
    "loc": 6,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_advanced_middleware\\test_tutorial003.py:function:test_middleware:chunk1",
    "text": "def test_middleware():\n    response = client.get(\"/large\", headers={\"accept-encoding\": \"gzip\"})\n    assert response.status_code == 200, response.text\n    assert response.text == \"x\" * 4000\n    assert response.headers[\"Content-Encoding\"] == \"gzip\"\n    assert int(response.headers[\"Content-Length\"]) < 4000\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_advanced_middleware\\test_tutorial003.py",
    "type": "function",
    "name": "test_middleware",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_background_tasks\\test_tutorial001.py:function:test:chunk1",
    "text": "def test():\n    log = Path(\"log.txt\")\n    if log.is_file():\n        os.remove(log)  # pragma: no cover\n    response = client.post(\"/send-notification/foo@example.com\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Notification sent in the background\"}\n    with open(\"./log.txt\") as f:\n        assert \"notification for foo@example.com: some notification\" in f.read()",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_background_tasks\\test_tutorial001.py",
    "type": "function",
    "name": "test",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_background_tasks\\test_tutorial002.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.background_tasks.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_background_tasks\\test_tutorial002.py",
    "type": "function",
    "name": "get_client",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_background_tasks\\test_tutorial002.py:function:test:chunk1",
    "text": "def test(client: TestClient):\n    log = Path(\"log.txt\")\n    if log.is_file():\n        os.remove(log)  # pragma: no cover\n    response = client.post(\"/send-notification/foo@example.com?q=some-query\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Message sent\"}\n    with open(\"./log.txt\") as f:\n        assert \"found query: some-query\\nmessage to foo@example.com\" in f.read()",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_background_tasks\\test_tutorial002.py",
    "type": "function",
    "name": "test",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_behind_a_proxy\\test_tutorial001.py:function:test_main:chunk1",
    "text": "def test_main():\n    response = client.get(\"/app\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello World\", \"root_path\": \"/api/v1\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_behind_a_proxy\\test_tutorial001.py",
    "type": "function",
    "name": "test_main",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_behind_a_proxy\\test_tutorial001.py:function:test_openapi:chunk1",
    "text": "def test_openapi():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/app\": {\n                \"get\": {\n                    \"summary\": \"Read Main\",\n                    \"operationId\": \"read_main_app_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n        \"servers\": [{\"url\": \"/api/v1\"}],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_behind_a_proxy\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_behind_a_proxy\\test_tutorial002.py:function:test_main:chunk1",
    "text": "def test_main():\n    response = client.get(\"/app\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello World\", \"root_path\": \"/api/v1\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_behind_a_proxy\\test_tutorial002.py",
    "type": "function",
    "name": "test_main",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_behind_a_proxy\\test_tutorial002.py:function:test_openapi:chunk1",
    "text": "def test_openapi():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/app\": {\n                \"get\": {\n                    \"summary\": \"Read Main\",\n                    \"operationId\": \"read_main_app_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n        \"servers\": [{\"url\": \"/api/v1\"}],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_behind_a_proxy\\test_tutorial002.py",
    "type": "function",
    "name": "test_openapi",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_behind_a_proxy\\test_tutorial003.py:function:test_main:chunk1",
    "text": "def test_main():\n    response = client.get(\"/app\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello World\", \"root_path\": \"/api/v1\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_behind_a_proxy\\test_tutorial003.py",
    "type": "function",
    "name": "test_main",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_behind_a_proxy\\test_tutorial003.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"servers\": [\n            {\"url\": \"/api/v1\"},\n            {\n                \"url\": IsOneOf(\n                    \"https://stag.example.com/\",\n                    # TODO: remove when deprecating Pydantic v1\n                    \"https://stag.example.com\",\n                ),\n                \"description\": \"Staging environment\",\n            },\n            {\n                \"url\": IsOneOf(\n                    \"https://prod.example.com/\",\n                    # TODO: remove when deprecating Pydantic v1\n                    \"https://prod.example.com\",\n                ),\n                \"description\": \"Production environment\",\n            },\n        ],\n        \"paths\": {\n            \"/app\": {\n                \"get\": {\n                    \"summary\": \"Read Main\",\n                    \"operationId\": \"read_main_app_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_behind_a_proxy\\test_tutorial003.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_behind_a_proxy\\test_tutorial004.py:function:test_main:chunk1",
    "text": "def test_main():\n    response = client.get(\"/app\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello World\", \"root_path\": \"/api/v1\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_behind_a_proxy\\test_tutorial004.py",
    "type": "function",
    "name": "test_main",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_behind_a_proxy\\test_tutorial004.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"servers\": [\n            {\n                \"url\": IsOneOf(\n                    \"https://stag.example.com/\",\n                    # TODO: remove when deprecating Pydantic v1\n                    \"https://stag.example.com\",\n                ),\n                \"description\": \"Staging environment\",\n            },\n            {\n                \"url\": IsOneOf(\n                    \"https://prod.example.com/\",\n                    # TODO: remove when deprecating Pydantic v1\n                    \"https://prod.example.com\",\n                ),\n                \"description\": \"Production environment\",\n            },\n        ],\n        \"paths\": {\n            \"/app\": {\n                \"get\": {\n                    \"summary\": \"Read Main\",\n                    \"operationId\": \"read_main_app_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_behind_a_proxy\\test_tutorial004.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.bigger_applications.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "get_client",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_users_token_jessica:chunk1",
    "text": "def test_users_token_jessica(client: TestClient):\n    response = client.get(\"/users?token=jessica\")\n    assert response.status_code == 200\n    assert response.json() == [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_users_token_jessica",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_users_with_no_token:chunk1",
    "text": "def test_users_with_no_token(client: TestClient):\n    response = client.get(\"/users\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_users_with_no_token",
    "loc": 31,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_users_foo_token_jessica:chunk1",
    "text": "def test_users_foo_token_jessica(client: TestClient):\n    response = client.get(\"/users/foo?token=jessica\")\n    assert response.status_code == 200\n    assert response.json() == {\"username\": \"foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_users_foo_token_jessica",
    "loc": 59,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_users_foo_with_no_token:chunk1",
    "text": "def test_users_foo_with_no_token(client: TestClient):\n    response = client.get(\"/users/foo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_users_foo_with_no_token",
    "loc": 65,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_users_me_token_jessica:chunk1",
    "text": "def test_users_me_token_jessica(client: TestClient):\n    response = client.get(\"/users/me?token=jessica\")\n    assert response.status_code == 200\n    assert response.json() == {\"username\": \"fakecurrentuser\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_users_me_token_jessica",
    "loc": 93,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_users_me_with_no_token:chunk1",
    "text": "def test_users_me_with_no_token(client: TestClient):\n    response = client.get(\"/users/me\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_users_me_with_no_token",
    "loc": 99,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_users_token_monica_with_no_jessica:chunk1",
    "text": "def test_users_token_monica_with_no_jessica(client: TestClient):\n    response = client.get(\"/users?token=monica\")\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"No Jessica token provided\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_users_token_monica_with_no_jessica",
    "loc": 127,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_items_token_jessica:chunk1",
    "text": "def test_items_token_jessica(client: TestClient):\n    response = client.get(\n        \"/items?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"plumbus\": {\"name\": \"Plumbus\"},\n        \"gun\": {\"name\": \"Portal Gun\"},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_items_token_jessica",
    "loc": 133,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_items_with_no_token_jessica:chunk1",
    "text": "def test_items_with_no_token_jessica(client: TestClient):\n    response = client.get(\"/items\", headers={\"X-Token\": \"fake-super-secret-token\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_items_with_no_token_jessica",
    "loc": 144,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_items_plumbus_token_jessica:chunk1",
    "text": "def test_items_plumbus_token_jessica(client: TestClient):\n    response = client.get(\n        \"/items/plumbus?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 200\n    assert response.json() == {\"name\": \"Plumbus\", \"item_id\": \"plumbus\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_items_plumbus_token_jessica",
    "loc": 172,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_items_bar_token_jessica:chunk1",
    "text": "def test_items_bar_token_jessica(client: TestClient):\n    response = client.get(\n        \"/items/bar?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_items_bar_token_jessica",
    "loc": 180,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_items_plumbus_with_no_token:chunk1",
    "text": "def test_items_plumbus_with_no_token(client: TestClient):\n    response = client.get(\n        \"/items/plumbus\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_items_plumbus_with_no_token",
    "loc": 188,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_items_with_invalid_token:chunk1",
    "text": "def test_items_with_invalid_token(client: TestClient):\n    response = client.get(\"/items?token=jessica\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_items_with_invalid_token",
    "loc": 218,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_items_bar_with_invalid_token:chunk1",
    "text": "def test_items_bar_with_invalid_token(client: TestClient):\n    response = client.get(\"/items/bar?token=jessica\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_items_bar_with_invalid_token",
    "loc": 224,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_items_with_missing_x_token_header:chunk1",
    "text": "def test_items_with_missing_x_token_header(client: TestClient):\n    response = client.get(\"/items?token=jessica\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_items_with_missing_x_token_header",
    "loc": 230,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_items_plumbus_with_missing_x_token_header:chunk1",
    "text": "def test_items_plumbus_with_missing_x_token_header(client: TestClient):\n    response = client.get(\"/items/plumbus?token=jessica\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_items_plumbus_with_missing_x_token_header",
    "loc": 258,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_root_token_jessica:chunk1",
    "text": "def test_root_token_jessica(client: TestClient):\n    response = client.get(\"/?token=jessica\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello Bigger Applications!\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_root_token_jessica",
    "loc": 286,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_root_with_no_token:chunk1",
    "text": "def test_root_with_no_token(client: TestClient):\n    response = client.get(\"/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_root_with_no_token",
    "loc": 292,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_put_no_header:chunk1",
    "text": "def test_put_no_header(client: TestClient):\n    response = client.put(\"/items/foo\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_put_no_header",
    "loc": 320,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_put_invalid_header:chunk1",
    "text": "def test_put_invalid_header(client: TestClient):\n    response = client.put(\"/items/foo\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_put_invalid_header",
    "loc": 359,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_put:chunk1",
    "text": "def test_put(client: TestClient):\n    response = client.put(\n        \"/items/plumbus?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": \"plumbus\", \"name\": \"The great Plumbus\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_put",
    "loc": 365,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_put_forbidden:chunk1",
    "text": "def test_put_forbidden(client: TestClient):\n    response = client.put(\n        \"/items/bar?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"You can only update the item: plumbus\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_put_forbidden",
    "loc": 373,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_admin:chunk1",
    "text": "def test_admin(client: TestClient):\n    response = client.post(\n        \"/admin/?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Admin getting schwifty\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_admin",
    "loc": 381,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_admin_invalid_header:chunk1",
    "text": "def test_admin_invalid_header(client: TestClient):\n    response = client.post(\"/admin/\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_admin_invalid_header",
    "loc": 389,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_bigger_applications\\test_main.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/\": {\n                \"get\": {\n                    \"tags\": [\"users\"],\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/users/me\": {\n                \"get\": {\n                    \"tags\": [\"users\"],\n                    \"summary\": \"Read User Me\",\n                    \"operationId\": \"read_user_me_users_me_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/users/{username}\": {\n                \"get\": {\n                    \"tags\": [\"users\"],\n                    \"summary\": \"Read User\",\n                    \"operationId\": \"read_user_users__username__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Username\", \"type\": \"string\"},\n                            \"name\": \"username\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/items/\": {\n                \"get\": {\n                    \"tags\": [\"items\"],\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"404\": {\"description\": \"Not found\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"tags\": [\"items\"],\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"404\": {\"description\": \"Not found\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                },\n                \"put\": {\n                    \"tags\": [\"items\", \"custom\"],\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"404\": {\"description\": \"Not found\"},\n                        \"403\": {\"description\": \"Operation forbidden\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                },\n            },\n            \"/admin/\": {\n                \"post\": {\n                    \"tags\": [\"admin\"],\n                    \"summary\": \"Update Admin\",\n                    \"operationId\": \"update_admin_admin__post\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"418\": {\"description\": \"I'm a teapot\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/\": {\n                \"get\": {\n                    \"summary\": \"Root\",\n                    \"operationId\": \"root__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_bigger_applications\\test_main.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 395,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body\\test_tutorial001.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.body.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body\\test_tutorial001.py",
    "type": "function",
    "name": "get_client",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body\\test_tutorial001.py:function:test_body_float:chunk1",
    "text": "def test_body_float(client: TestClient):\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 50.5})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"price\": 50.5,\n        \"description\": None,\n        \"tax\": None,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body\\test_tutorial001.py",
    "type": "function",
    "name": "test_body_float",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body\\test_tutorial001.py:function:test_post_with_str_float:chunk1",
    "text": "def test_post_with_str_float(client: TestClient):\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": \"50.5\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"price\": 50.5,\n        \"description\": None,\n        \"tax\": None,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_with_str_float",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body\\test_tutorial001.py:function:test_post_with_str_float_description:chunk1",
    "text": "def test_post_with_str_float_description(client: TestClient):\n    response = client.post(\n        \"/items/\", json={\"name\": \"Foo\", \"price\": \"50.5\", \"description\": \"Some Foo\"}\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"price\": 50.5,\n        \"description\": \"Some Foo\",\n        \"tax\": None,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_with_str_float_description",
    "loc": 47,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body\\test_tutorial001.py:function:test_post_with_str_float_description_tax:chunk1",
    "text": "def test_post_with_str_float_description_tax(client: TestClient):\n    response = client.post(\n        \"/items/\",\n        json={\"name\": \"Foo\", \"price\": \"50.5\", \"description\": \"Some Foo\", \"tax\": 0.3},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"price\": 50.5,\n        \"description\": \"Some Foo\",\n        \"tax\": 0.3,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_with_str_float_description_tax",
    "loc": 60,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body\\test_tutorial001.py:function:test_post_with_only_name:chunk1",
    "text": "def test_post_with_only_name(client: TestClient):\n    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"price\"],\n                    \"msg\": \"Field required\",\n                    \"input\": {\"name\": \"Foo\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"price\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_with_only_name",
    "loc": 74,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body\\test_tutorial001.py:function:test_post_with_only_name_price:chunk1",
    "text": "def test_post_with_only_name_price(client: TestClient):\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": \"twenty\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"float_parsing\",\n                    \"loc\": [\"body\", \"price\"],\n                    \"msg\": \"Input should be a valid number, unable to parse string as a number\",\n                    \"input\": \"twenty\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"price\"],\n                    \"msg\": \"value is not a valid float\",\n                    \"type\": \"type_error.float\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_with_only_name_price",
    "loc": 102,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body\\test_tutorial001.py:function:test_post_with_no_data:chunk1",
    "text": "def test_post_with_no_data(client: TestClient):\n    response = client.post(\"/items/\", json={})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"name\"],\n                    \"msg\": \"Field required\",\n                    \"input\": {},\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"price\"],\n                    \"msg\": \"Field required\",\n                    \"input\": {},\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"name\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"price\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_with_no_data",
    "loc": 130,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body\\test_tutorial001.py:function:test_post_with_none:chunk1",
    "text": "def test_post_with_none(client: TestClient):\n    response = client.post(\"/items/\", json=None)\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_with_none",
    "loc": 169,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body\\test_tutorial001.py:function:test_post_broken_body:chunk1",
    "text": "def test_post_broken_body(client: TestClient):\n    response = client.post(\n        \"/items/\",\n        headers={\"content-type\": \"application/json\"},\n        content=\"{some broken json}\",\n    )\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"json_invalid\",\n                    \"loc\": [\"body\", 1],\n                    \"msg\": \"JSON decode error\",\n                    \"input\": {},\n                    \"ctx\": {\n                        \"error\": \"Expecting property name enclosed in double quotes\"\n                    },\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", 1],\n                    \"msg\": \"Expecting property name enclosed in double quotes: line 1 column 2 (char 1)\",\n                    \"type\": \"value_error.jsondecode\",\n                    \"ctx\": {\n                        \"msg\": \"Expecting property name enclosed in double quotes\",\n                        \"doc\": \"{some broken json}\",\n                        \"pos\": 1,\n                        \"lineno\": 1,\n                        \"colno\": 2,\n                    },\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_broken_body",
    "loc": 197,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body\\test_tutorial001.py:function:test_post_form_for_json:chunk1",
    "text": "def test_post_form_for_json(client: TestClient):\n    response = client.post(\"/items/\", data={\"name\": \"Foo\", \"price\": 50.5})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"model_attributes_type\",\n                    \"loc\": [\"body\"],\n                    \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                    \"input\": \"name=Foo&price=50.5\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\"],\n                    \"msg\": \"value is not a valid dict\",\n                    \"type\": \"type_error.dict\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_form_for_json",
    "loc": 239,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body\\test_tutorial001.py:function:test_explicit_content_type:chunk1",
    "text": "def test_explicit_content_type(client: TestClient):\n    response = client.post(\n        \"/items/\",\n        content='{\"name\": \"Foo\", \"price\": 50.5}',\n        headers={\"Content-Type\": \"application/json\"},\n    )\n    assert response.status_code == 200, response.text",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body\\test_tutorial001.py",
    "type": "function",
    "name": "test_explicit_content_type",
    "loc": 267,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body\\test_tutorial001.py:function:test_geo_json:chunk1",
    "text": "def test_geo_json(client: TestClient):\n    response = client.post(\n        \"/items/\",\n        content='{\"name\": \"Foo\", \"price\": 50.5}',\n        headers={\"Content-Type\": \"application/geo+json\"},\n    )\n    assert response.status_code == 200, response.text",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body\\test_tutorial001.py",
    "type": "function",
    "name": "test_geo_json",
    "loc": 276,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body\\test_tutorial001.py:function:test_no_content_type_is_json:chunk1",
    "text": "def test_no_content_type_is_json(client: TestClient):\n    response = client.post(\n        \"/items/\",\n        content='{\"name\": \"Foo\", \"price\": 50.5}',\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"description\": None,\n        \"price\": 50.5,\n        \"tax\": None,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body\\test_tutorial001.py",
    "type": "function",
    "name": "test_no_content_type_is_json",
    "loc": 285,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body\\test_tutorial001.py:function:test_wrong_headers:chunk1",
    "text": "def test_wrong_headers(client: TestClient):\n    data = '{\"name\": \"Foo\", \"price\": 50.5}'\n    response = client.post(\n        \"/items/\", content=data, headers={\"Content-Type\": \"text/plain\"}\n    )\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"model_attributes_type\",\n                    \"loc\": [\"body\"],\n                    \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                    \"input\": '{\"name\": \"Foo\", \"price\": 50.5}',\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\"],\n                    \"msg\": \"value is not a valid dict\",\n                    \"type\": \"type_error.dict\",\n                }\n            ]\n        }\n    )\n\n    response = client.post(\n        \"/items/\", content=data, headers={\"Content-Type\": \"application/geo+json-seq\"}\n    )\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"model_attributes_type\",\n                    \"loc\": [\"body\"],\n                    \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                    \"input\": '{\"name\": \"Foo\", \"price\": 50.5}',\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\"],\n                    \"msg\": \"value is not a valid dict\",\n                    \"type\": \"type_error.dict\",\n                }\n            ]\n        }\n    )\n    response = client.post(\n        \"/items/\", content=data, headers={\"Content-Type\": \"application/not-really-json\"}\n    )\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"model_attributes_type\",\n                    \"loc\": [\"body\"],\n                    \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                    \"input\": '{\"name\": \"Foo\", \"price\": 50.5}',\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\"],\n                    \"msg\": \"value is not a valid dict\",\n                    \"type\": \"type_error.dict\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body\\test_tutorial001.py",
    "type": "function",
    "name": "test_wrong_headers",
    "loc": 299,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body\\test_tutorial001.py:function:test_other_exceptions:chunk1",
    "text": "def test_other_exceptions(client: TestClient):\n    with patch(\"json.loads\", side_effect=Exception):\n        response = client.post(\"/items/\", json={\"test\": \"test2\"})\n        assert response.status_code == 400, response.text",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body\\test_tutorial001.py",
    "type": "function",
    "name": "test_other_exceptions",
    "loc": 385,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 391,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_fields\\test_tutorial001.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.body_fields.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_fields\\test_tutorial001.py",
    "type": "function",
    "name": "get_client",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_fields\\test_tutorial001.py:function:test_items_5:chunk1",
    "text": "def test_items_5(client: TestClient):\n    response = client.put(\"/items/5\", json={\"item\": {\"name\": \"Foo\", \"price\": 3.0}})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 5,\n        \"item\": {\"name\": \"Foo\", \"price\": 3.0, \"description\": None, \"tax\": None},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_fields\\test_tutorial001.py",
    "type": "function",
    "name": "test_items_5",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_fields\\test_tutorial001.py:function:test_items_6:chunk1",
    "text": "def test_items_6(client: TestClient):\n    response = client.put(\n        \"/items/6\",\n        json={\n            \"item\": {\n                \"name\": \"Bar\",\n                \"price\": 0.2,\n                \"description\": \"Some bar\",\n                \"tax\": \"5.4\",\n            }\n        },\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 6,\n        \"item\": {\n            \"name\": \"Bar\",\n            \"price\": 0.2,\n            \"description\": \"Some bar\",\n            \"tax\": 5.4,\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_fields\\test_tutorial001.py",
    "type": "function",
    "name": "test_items_6",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_fields\\test_tutorial001.py:function:test_invalid_price:chunk1",
    "text": "def test_invalid_price(client: TestClient):\n    response = client.put(\"/items/5\", json={\"item\": {\"name\": \"Foo\", \"price\": -3.0}})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"greater_than\",\n                    \"loc\": [\"body\", \"item\", \"price\"],\n                    \"msg\": \"Input should be greater than 0\",\n                    \"input\": -3.0,\n                    \"ctx\": {\"gt\": 0.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"ctx\": {\"limit_value\": 0},\n                    \"loc\": [\"body\", \"item\", \"price\"],\n                    \"msg\": \"ensure this value is greater than 0\",\n                    \"type\": \"value_error.number.not_gt\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_fields\\test_tutorial001.py",
    "type": "function",
    "name": "test_invalid_price",
    "loc": 60,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_fields\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"The description of the item\",\n                                \"anyOf\": [\n                                    {\"maxLength\": 300, \"type\": \"string\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"The description of the item\",\n                                \"maxLength\": 300,\n                                \"type\": \"string\",\n                            }\n                        ),\n                        \"price\": {\n                            \"title\": \"Price\",\n                            \"exclusiveMinimum\": 0.0,\n                            \"type\": \"number\",\n                            \"description\": \"The price must be greater than zero\",\n                        },\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"Body_update_item_items__item_id__put\": {\n                    \"title\": \"Body_update_item_items__item_id__put\",\n                    \"required\": [\"item\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"item\": {\"$ref\": \"#/components/schemas/Item\"}},\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_fields\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 90,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_multiple_params\\test_tutorial001.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.body_multiple_params.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_multiple_params\\test_tutorial001.py",
    "type": "function",
    "name": "get_client",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_multiple_params\\test_tutorial001.py:function:test_post_body_q_bar_content:chunk1",
    "text": "def test_post_body_q_bar_content(client: TestClient):\n    response = client.put(\"/items/5?q=bar\", json={\"name\": \"Foo\", \"price\": 50.5})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 5,\n        \"item\": {\n            \"name\": \"Foo\",\n            \"price\": 50.5,\n            \"description\": None,\n            \"tax\": None,\n        },\n        \"q\": \"bar\",\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_multiple_params\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_body_q_bar_content",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_multiple_params\\test_tutorial001.py:function:test_post_no_body_q_bar:chunk1",
    "text": "def test_post_no_body_q_bar(client: TestClient):\n    response = client.put(\"/items/5?q=bar\", json=None)\n    assert response.status_code == 200\n    assert response.json() == {\"item_id\": 5, \"q\": \"bar\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_multiple_params\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_no_body_q_bar",
    "loc": 42,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_multiple_params\\test_tutorial001.py:function:test_post_no_body:chunk1",
    "text": "def test_post_no_body(client: TestClient):\n    response = client.put(\"/items/5\", json=None)\n    assert response.status_code == 200\n    assert response.json() == {\"item_id\": 5}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_multiple_params\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_no_body",
    "loc": 48,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_multiple_params\\test_tutorial001.py:function:test_post_id_foo:chunk1",
    "text": "def test_post_id_foo(client: TestClient):\n    response = client.put(\"/items/foo\", json=None)\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"foo\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_multiple_params\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_id_foo",
    "loc": 54,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_multiple_params\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"The ID of the item to get\",\n                                \"maximum\": 1000.0,\n                                \"minimum\": 0.0,\n                                \"type\": \"integer\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"anyOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"},\n                                            {\"type\": \"null\"},\n                                        ],\n                                        \"title\": \"Item\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\"$ref\": \"#/components/schemas/Item\"}\n                                )\n                            }\n                        }\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_multiple_params\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 82,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_multiple_params\\test_tutorial003.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.body_multiple_params.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_multiple_params\\test_tutorial003.py",
    "type": "function",
    "name": "get_client",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_multiple_params\\test_tutorial003.py:function:test_post_body_valid:chunk1",
    "text": "def test_post_body_valid(client: TestClient):\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"importance\": 2,\n            \"item\": {\"name\": \"Foo\", \"price\": 50.5},\n            \"user\": {\"username\": \"Dave\"},\n        },\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 5,\n        \"importance\": 2,\n        \"item\": {\n            \"name\": \"Foo\",\n            \"price\": 50.5,\n            \"description\": None,\n            \"tax\": None,\n        },\n        \"user\": {\"username\": \"Dave\", \"full_name\": None},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_multiple_params\\test_tutorial003.py",
    "type": "function",
    "name": "test_post_body_valid",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_multiple_params\\test_tutorial003.py:function:test_post_body_no_data:chunk1",
    "text": "def test_post_body_no_data(client: TestClient):\n    response = client.put(\"/items/5\", json=None)\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_multiple_params\\test_tutorial003.py",
    "type": "function",
    "name": "test_post_body_no_data",
    "loc": 50,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_multiple_params\\test_tutorial003.py:function:test_post_body_empty_list:chunk1",
    "text": "def test_post_body_empty_list(client: TestClient):\n    response = client.put(\"/items/5\", json=[])\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_multiple_params\\test_tutorial003.py",
    "type": "function",
    "name": "test_post_body_empty_list",
    "loc": 100,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_multiple_params\\test_tutorial003.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": [\"username\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"Body_update_item_items__item_id__put\": {\n                    \"title\": \"Body_update_item_items__item_id__put\",\n                    \"required\": [\"item\", \"user\", \"importance\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"user\": {\"$ref\": \"#/components/schemas/User\"},\n                        \"importance\": {\"title\": \"Importance\", \"type\": \"integer\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_multiple_params\\test_tutorial003.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 150,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_nested_models\\test_tutorial009.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.body_nested_models.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_nested_models\\test_tutorial009.py",
    "type": "function",
    "name": "get_client",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_nested_models\\test_tutorial009.py:function:test_post_body:chunk1",
    "text": "def test_post_body(client: TestClient):\n    data = {\"2\": 2.2, \"3\": 3.3}\n    response = client.post(\"/index-weights/\", json=data)\n    assert response.status_code == 200, response.text\n    assert response.json() == data",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_nested_models\\test_tutorial009.py",
    "type": "function",
    "name": "test_post_body",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_nested_models\\test_tutorial009.py:function:test_post_invalid_body:chunk1",
    "text": "def test_post_invalid_body(client: TestClient):\n    data = {\"foo\": 2.2, \"3\": 3.3}\n    response = client.post(\"/index-weights/\", json=data)\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"body\", \"foo\", \"[key]\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"foo\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"__key__\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_nested_models\\test_tutorial009.py",
    "type": "function",
    "name": "test_post_invalid_body",
    "loc": 31,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_nested_models\\test_tutorial009.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/index-weights/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Index Weights\",\n                    \"operationId\": \"create_index_weights_index_weights__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"title\": \"Weights\",\n                                    \"type\": \"object\",\n                                    \"additionalProperties\": {\"type\": \"number\"},\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_nested_models\\test_tutorial009.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 60,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_updates\\test_tutorial001.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.body_updates.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_updates\\test_tutorial001.py",
    "type": "function",
    "name": "get_client",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_updates\\test_tutorial001.py:function:test_get:chunk1",
    "text": "def test_get(client: TestClient):\n    response = client.get(\"/items/baz\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Baz\",\n        \"description\": None,\n        \"price\": 50.2,\n        \"tax\": 10.5,\n        \"tags\": [],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_updates\\test_tutorial001.py",
    "type": "function",
    "name": "test_get",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_updates\\test_tutorial001.py:function:test_put:chunk1",
    "text": "def test_put(client: TestClient):\n    response = client.put(\n        \"/items/bar\", json={\"name\": \"Barz\", \"price\": 3, \"description\": None}\n    )\n    assert response.json() == {\n        \"name\": \"Barz\",\n        \"description\": None,\n        \"price\": 3,\n        \"tax\": 10.5,\n        \"tags\": [],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_updates\\test_tutorial001.py",
    "type": "function",
    "name": "test_put",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_updates\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                },\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                },\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"type\": \"object\",\n                    \"title\": \"Item\",\n                    \"properties\": {\n                        \"name\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Name\",\n                        },\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                        \"price\": {\n                            \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            \"title\": \"Price\",\n                        },\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_updates\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 50,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_body_updates\\test_tutorial001.py:function:test_openapi_schema_pv1:chunk1",
    "text": "def test_openapi_schema_pv1(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                },\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                },\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_body_updates\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema_pv1",
    "loc": 193,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_conditional_openapi\\test_tutorial001.py:function:get_client:chunk1",
    "text": "def get_client() -> TestClient:\n    from docs_src.conditional_openapi import tutorial001\n\n    importlib.reload(tutorial001)\n\n    client = TestClient(tutorial001.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_conditional_openapi\\test_tutorial001.py",
    "type": "function",
    "name": "get_client",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_conditional_openapi\\test_tutorial001.py:function:test_disable_openapi:chunk1",
    "text": "def test_disable_openapi(monkeypatch):\n    monkeypatch.setenv(\"OPENAPI_URL\", \"\")\n    # Load the client after setting the env var\n    client = get_client()\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 404, response.text\n    response = client.get(\"/docs\")\n    assert response.status_code == 404, response.text\n    response = client.get(\"/redoc\")\n    assert response.status_code == 404, response.text",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_conditional_openapi\\test_tutorial001.py",
    "type": "function",
    "name": "test_disable_openapi",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_conditional_openapi\\test_tutorial001.py:function:test_root:chunk1",
    "text": "def test_root():\n    client = get_client()\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello World\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_conditional_openapi\\test_tutorial001.py",
    "type": "function",
    "name": "test_root",
    "loc": 31,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_conditional_openapi\\test_tutorial001.py:function:test_default_openapi:chunk1",
    "text": "def test_default_openapi():\n    client = get_client()\n    response = client.get(\"/docs\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/redoc\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/openapi.json\")\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"get\": {\n                    \"summary\": \"Root\",\n                    \"operationId\": \"root__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_conditional_openapi\\test_tutorial001.py",
    "type": "function",
    "name": "test_default_openapi",
    "loc": 39,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_configure_swagger_ui\\test_tutorial001.py:function:test_swagger_ui:chunk1",
    "text": "def test_swagger_ui():\n    response = client.get(\"/docs\")\n    assert response.status_code == 200, response.text\n    assert (\n        '\"syntaxHighlight\": false' in response.text\n    ), \"syntaxHighlight should be included and converted to JSON\"\n    assert (\n        '\"dom_id\": \"#swagger-ui\"' in response.text\n    ), \"default configs should be preserved\"\n    assert \"presets: [\" in response.text, \"default configs should be preserved\"\n    assert (\n        \"SwaggerUIBundle.presets.apis,\" in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        \"SwaggerUIBundle.SwaggerUIStandalonePreset\" in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        '\"layout\": \"BaseLayout\",' in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        '\"deepLinking\": true,' in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        '\"showExtensions\": true,' in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        '\"showCommonExtensions\": true,' in response.text\n    ), \"default configs should be preserved\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_configure_swagger_ui\\test_tutorial001.py",
    "type": "function",
    "name": "test_swagger_ui",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_configure_swagger_ui\\test_tutorial001.py:function:test_get_users:chunk1",
    "text": "def test_get_users():\n    response = client.get(\"/users/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Hello foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_configure_swagger_ui\\test_tutorial001.py",
    "type": "function",
    "name": "test_get_users",
    "loc": 38,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_configure_swagger_ui\\test_tutorial002.py:function:test_swagger_ui:chunk1",
    "text": "def test_swagger_ui():\n    response = client.get(\"/docs\")\n    assert response.status_code == 200, response.text\n    assert (\n        '\"syntaxHighlight\": false' not in response.text\n    ), \"not used parameters should not be included\"\n    assert (\n        '\"syntaxHighlight\": {\"theme\": \"obsidian\"}' in response.text\n    ), \"parameters with middle dots should be included in a JSON compatible way\"\n    assert (\n        '\"dom_id\": \"#swagger-ui\"' in response.text\n    ), \"default configs should be preserved\"\n    assert \"presets: [\" in response.text, \"default configs should be preserved\"\n    assert (\n        \"SwaggerUIBundle.presets.apis,\" in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        \"SwaggerUIBundle.SwaggerUIStandalonePreset\" in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        '\"layout\": \"BaseLayout\",' in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        '\"deepLinking\": true,' in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        '\"showExtensions\": true,' in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        '\"showCommonExtensions\": true,' in response.text\n    ), \"default configs should be preserved\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_configure_swagger_ui\\test_tutorial002.py",
    "type": "function",
    "name": "test_swagger_ui",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_configure_swagger_ui\\test_tutorial002.py:function:test_get_users:chunk1",
    "text": "def test_get_users():\n    response = client.get(\"/users/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Hello foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_configure_swagger_ui\\test_tutorial002.py",
    "type": "function",
    "name": "test_get_users",
    "loc": 41,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_configure_swagger_ui\\test_tutorial003.py:function:test_swagger_ui:chunk1",
    "text": "def test_swagger_ui():\n    response = client.get(\"/docs\")\n    assert response.status_code == 200, response.text\n    assert (\n        '\"deepLinking\": false,' in response.text\n    ), \"overridden configs should be preserved\"\n    assert (\n        '\"deepLinking\": true' not in response.text\n    ), \"overridden configs should not include the old value\"\n    assert (\n        '\"syntaxHighlight\": false' not in response.text\n    ), \"not used parameters should not be included\"\n    assert (\n        '\"dom_id\": \"#swagger-ui\"' in response.text\n    ), \"default configs should be preserved\"\n    assert \"presets: [\" in response.text, \"default configs should be preserved\"\n    assert (\n        \"SwaggerUIBundle.presets.apis,\" in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        \"SwaggerUIBundle.SwaggerUIStandalonePreset\" in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        '\"layout\": \"BaseLayout\",' in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        '\"showExtensions\": true,' in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        '\"showCommonExtensions\": true,' in response.text\n    ), \"default configs should be preserved\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_configure_swagger_ui\\test_tutorial003.py",
    "type": "function",
    "name": "test_swagger_ui",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_configure_swagger_ui\\test_tutorial003.py:function:test_get_users:chunk1",
    "text": "def test_get_users():\n    response = client.get(\"/users/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Hello foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_configure_swagger_ui\\test_tutorial003.py",
    "type": "function",
    "name": "test_get_users",
    "loc": 41,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_cookie_params\\test_tutorial001.py:function:get_mod:chunk1",
    "text": "def get_mod(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.cookie_params.{request.param}\")\n\n    return mod",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_cookie_params\\test_tutorial001.py",
    "type": "function",
    "name": "get_mod",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_cookie_params\\test_tutorial001.py:function:test:chunk1",
    "text": "def test(path, cookies, expected_status, expected_response, mod: ModuleType):\n    client = TestClient(mod.app, cookies=cookies)\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_cookie_params\\test_tutorial001.py",
    "type": "function",
    "name": "test",
    "loc": 41,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_cookie_params\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(mod: ModuleType):\n    client = TestClient(mod.app)\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Ads Id\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Ads Id\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"ads_id\",\n                            \"in\": \"cookie\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_cookie_params\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 48,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_cookie_param_models\\test_tutorial001.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.cookie_param_models.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_cookie_param_models\\test_tutorial001.py",
    "type": "function",
    "name": "get_client",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_cookie_param_models\\test_tutorial001.py:function:test_cookie_param_model:chunk1",
    "text": "def test_cookie_param_model(client: TestClient):\n    with client as c:\n        c.cookies.set(\"session_id\", \"123\")\n        c.cookies.set(\"fatebook_tracker\", \"456\")\n        c.cookies.set(\"googall_tracker\", \"789\")\n        response = c.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"session_id\": \"123\",\n        \"fatebook_tracker\": \"456\",\n        \"googall_tracker\": \"789\",\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_cookie_param_models\\test_tutorial001.py",
    "type": "function",
    "name": "test_cookie_param_model",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_cookie_param_models\\test_tutorial001.py:function:test_cookie_param_model_defaults:chunk1",
    "text": "def test_cookie_param_model_defaults(client: TestClient):\n    with client as c:\n        c.cookies.set(\"session_id\", \"123\")\n        response = c.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"session_id\": \"123\",\n        \"fatebook_tracker\": None,\n        \"googall_tracker\": None,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_cookie_param_models\\test_tutorial001.py",
    "type": "function",
    "name": "test_cookie_param_model_defaults",
    "loc": 42,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_cookie_param_models\\test_tutorial001.py:function:test_cookie_param_model_invalid:chunk1",
    "text": "def test_cookie_param_model_invalid(client: TestClient):\n    response = client.get(\"/items/\")\n    assert response.status_code == 422\n    assert response.json() == snapshot(\n        IsDict(\n            {\n                \"detail\": [\n                    {\n                        \"type\": \"missing\",\n                        \"loc\": [\"cookie\", \"session_id\"],\n                        \"msg\": \"Field required\",\n                        \"input\": {},\n                    }\n                ]\n            }\n        )\n        | IsDict(\n            # TODO: remove when deprecating Pydantic v1\n            {\n                \"detail\": [\n                    {\n                        \"type\": \"value_error.missing\",\n                        \"loc\": [\"cookie\", \"session_id\"],\n                        \"msg\": \"field required\",\n                    }\n                ]\n            }\n        )\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_cookie_param_models\\test_tutorial001.py",
    "type": "function",
    "name": "test_cookie_param_model_invalid",
    "loc": 54,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_cookie_param_models\\test_tutorial001.py:function:test_cookie_param_model_extra:chunk1",
    "text": "def test_cookie_param_model_extra(client: TestClient):\n    with client as c:\n        c.cookies.set(\"session_id\", \"123\")\n        c.cookies.set(\"extra\", \"track-me-here-too\")\n        response = c.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == snapshot(\n        {\"session_id\": \"123\", \"fatebook_tracker\": None, \"googall_tracker\": None}\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_cookie_param_models\\test_tutorial001.py",
    "type": "function",
    "name": "test_cookie_param_model_extra",
    "loc": 85,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_cookie_param_models\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == snapshot(\n        {\n            \"openapi\": \"3.1.0\",\n            \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n            \"paths\": {\n                \"/items/\": {\n                    \"get\": {\n                        \"summary\": \"Read Items\",\n                        \"operationId\": \"read_items_items__get\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"session_id\",\n                                \"in\": \"cookie\",\n                                \"required\": True,\n                                \"schema\": {\"type\": \"string\", \"title\": \"Session Id\"},\n                            },\n                            {\n                                \"name\": \"fatebook_tracker\",\n                                \"in\": \"cookie\",\n                                \"required\": False,\n                                \"schema\": IsDict(\n                                    {\n                                        \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                        \"title\": \"Fatebook Tracker\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"type\": \"string\",\n                                        \"title\": \"Fatebook Tracker\",\n                                    }\n                                ),\n                            },\n                            {\n                                \"name\": \"googall_tracker\",\n                                \"in\": \"cookie\",\n                                \"required\": False,\n                                \"schema\": IsDict(\n                                    {\n                                        \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                        \"title\": \"Googall Tracker\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"type\": \"string\",\n                                        \"title\": \"Googall Tracker\",\n                                    }\n                                ),\n                            },\n                        ],\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\"application/json\": {\"schema\": {}}},\n                            },\n                            \"422\": {\n                                \"description\": \"Validation Error\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                        }\n                                    }\n                                },\n                            },\n                        },\n                    }\n                }\n            },\n            \"components\": {\n                \"schemas\": {\n                    \"HTTPValidationError\": {\n                        \"properties\": {\n                            \"detail\": {\n                                \"items\": {\n                                    \"$ref\": \"#/components/schemas/ValidationError\"\n                                },\n                                \"type\": \"array\",\n                                \"title\": \"Detail\",\n                            }\n                        },\n                        \"type\": \"object\",\n                        \"title\": \"HTTPValidationError\",\n                    },\n                    \"ValidationError\": {\n                        \"properties\": {\n                            \"loc\": {\n                                \"items\": {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                                },\n                                \"type\": \"array\",\n                                \"title\": \"Location\",\n                            },\n                            \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                            \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                        },\n                        \"type\": \"object\",\n                        \"required\": [\"loc\", \"msg\", \"type\"],\n                        \"title\": \"ValidationError\",\n                    },\n                }\n            },\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_cookie_param_models\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 96,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_cookie_param_models\\test_tutorial002.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.cookie_param_models.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_cookie_param_models\\test_tutorial002.py",
    "type": "function",
    "name": "get_client",
    "loc": 26,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_cookie_param_models\\test_tutorial002.py:function:test_cookie_param_model:chunk1",
    "text": "def test_cookie_param_model(client: TestClient):\n    with client as c:\n        c.cookies.set(\"session_id\", \"123\")\n        c.cookies.set(\"fatebook_tracker\", \"456\")\n        c.cookies.set(\"googall_tracker\", \"789\")\n        response = c.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"session_id\": \"123\",\n        \"fatebook_tracker\": \"456\",\n        \"googall_tracker\": \"789\",\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_cookie_param_models\\test_tutorial002.py",
    "type": "function",
    "name": "test_cookie_param_model",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_cookie_param_models\\test_tutorial002.py:function:test_cookie_param_model_defaults:chunk1",
    "text": "def test_cookie_param_model_defaults(client: TestClient):\n    with client as c:\n        c.cookies.set(\"session_id\", \"123\")\n        response = c.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"session_id\": \"123\",\n        \"fatebook_tracker\": None,\n        \"googall_tracker\": None,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_cookie_param_models\\test_tutorial002.py",
    "type": "function",
    "name": "test_cookie_param_model_defaults",
    "loc": 47,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_cookie_param_models\\test_tutorial002.py:function:test_cookie_param_model_invalid:chunk1",
    "text": "def test_cookie_param_model_invalid(client: TestClient):\n    response = client.get(\"/items/\")\n    assert response.status_code == 422\n    assert response.json() == snapshot(\n        IsDict(\n            {\n                \"detail\": [\n                    {\n                        \"type\": \"missing\",\n                        \"loc\": [\"cookie\", \"session_id\"],\n                        \"msg\": \"Field required\",\n                        \"input\": {},\n                    }\n                ]\n            }\n        )\n        | IsDict(\n            # TODO: remove when deprecating Pydantic v1\n            {\n                \"detail\": [\n                    {\n                        \"type\": \"value_error.missing\",\n                        \"loc\": [\"cookie\", \"session_id\"],\n                        \"msg\": \"field required\",\n                    }\n                ]\n            }\n        )\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_cookie_param_models\\test_tutorial002.py",
    "type": "function",
    "name": "test_cookie_param_model_invalid",
    "loc": 59,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_cookie_param_models\\test_tutorial002.py:function:test_cookie_param_model_extra:chunk1",
    "text": "def test_cookie_param_model_extra(client: TestClient):\n    with client as c:\n        c.cookies.set(\"session_id\", \"123\")\n        c.cookies.set(\"extra\", \"track-me-here-too\")\n        response = c.get(\"/items/\")\n    assert response.status_code == 422\n    assert response.json() == snapshot(\n        IsDict(\n            {\n                \"detail\": [\n                    {\n                        \"type\": \"extra_forbidden\",\n                        \"loc\": [\"cookie\", \"extra\"],\n                        \"msg\": \"Extra inputs are not permitted\",\n                        \"input\": \"track-me-here-too\",\n                    }\n                ]\n            }\n        )\n        | IsDict(\n            # TODO: remove when deprecating Pydantic v1\n            {\n                \"detail\": [\n                    {\n                        \"type\": \"value_error.extra\",\n                        \"loc\": [\"cookie\", \"extra\"],\n                        \"msg\": \"extra fields not permitted\",\n                    }\n                ]\n            }\n        )\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_cookie_param_models\\test_tutorial002.py",
    "type": "function",
    "name": "test_cookie_param_model_extra",
    "loc": 90,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_cookie_param_models\\test_tutorial002.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == snapshot(\n        {\n            \"openapi\": \"3.1.0\",\n            \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n            \"paths\": {\n                \"/items/\": {\n                    \"get\": {\n                        \"summary\": \"Read Items\",\n                        \"operationId\": \"read_items_items__get\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"session_id\",\n                                \"in\": \"cookie\",\n                                \"required\": True,\n                                \"schema\": {\"type\": \"string\", \"title\": \"Session Id\"},\n                            },\n                            {\n                                \"name\": \"fatebook_tracker\",\n                                \"in\": \"cookie\",\n                                \"required\": False,\n                                \"schema\": IsDict(\n                                    {\n                                        \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                        \"title\": \"Fatebook Tracker\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"type\": \"string\",\n                                        \"title\": \"Fatebook Tracker\",\n                                    }\n                                ),\n                            },\n                            {\n                                \"name\": \"googall_tracker\",\n                                \"in\": \"cookie\",\n                                \"required\": False,\n                                \"schema\": IsDict(\n                                    {\n                                        \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                        \"title\": \"Googall Tracker\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"type\": \"string\",\n                                        \"title\": \"Googall Tracker\",\n                                    }\n                                ),\n                            },\n                        ],\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\"application/json\": {\"schema\": {}}},\n                            },\n                            \"422\": {\n                                \"description\": \"Validation Error\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                        }\n                                    }\n                                },\n                            },\n                        },\n                    }\n                }\n            },\n            \"components\": {\n                \"schemas\": {\n                    \"HTTPValidationError\": {\n                        \"properties\": {\n                            \"detail\": {\n                                \"items\": {\n                                    \"$ref\": \"#/components/schemas/ValidationError\"\n                                },\n                                \"type\": \"array\",\n                                \"title\": \"Detail\",\n                            }\n                        },\n                        \"type\": \"object\",\n                        \"title\": \"HTTPValidationError\",\n                    },\n                    \"ValidationError\": {\n                        \"properties\": {\n                            \"loc\": {\n                                \"items\": {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                                },\n                                \"type\": \"array\",\n                                \"title\": \"Location\",\n                            },\n                            \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                            \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                        },\n                        \"type\": \"object\",\n                        \"required\": [\"loc\", \"msg\", \"type\"],\n                        \"title\": \"ValidationError\",\n                    },\n                }\n            },\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_cookie_param_models\\test_tutorial002.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 124,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_cors\\test_tutorial001.py:function:test_cors:chunk1",
    "text": "def test_cors():\n    client = TestClient(app)\n    # Test pre-flight response\n    headers = {\n        \"Origin\": \"https://localhost.tiangolo.com\",\n        \"Access-Control-Request-Method\": \"GET\",\n        \"Access-Control-Request-Headers\": \"X-Example\",\n    }\n    response = client.options(\"/\", headers=headers)\n    assert response.status_code == 200, response.text\n    assert response.text == \"OK\"\n    assert (\n        response.headers[\"access-control-allow-origin\"]\n        == \"https://localhost.tiangolo.com\"\n    )\n    assert response.headers[\"access-control-allow-headers\"] == \"X-Example\"\n\n    # Test standard response\n    headers = {\"Origin\": \"https://localhost.tiangolo.com\"}\n    response = client.get(\"/\", headers=headers)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Hello World\"}\n    assert (\n        response.headers[\"access-control-allow-origin\"]\n        == \"https://localhost.tiangolo.com\"\n    )\n\n    # Test non-CORS response\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Hello World\"}\n    assert \"access-control-allow-origin\" not in response.headers",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_cors\\test_tutorial001.py",
    "type": "function",
    "name": "test_cors",
    "loc": 6,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_docs_ui\\test_tutorial001.py:function:client:chunk1",
    "text": "def client():\n    static_dir: Path = Path(os.getcwd()) / \"static\"\n    print(static_dir)\n    static_dir.mkdir(exist_ok=True)\n    from docs_src.custom_docs_ui.tutorial001 import app\n\n    with TestClient(app) as client:\n        yield client\n    static_dir.rmdir()",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_docs_ui\\test_tutorial001.py",
    "type": "function",
    "name": "client",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_docs_ui\\test_tutorial001.py:function:test_swagger_ui_html:chunk1",
    "text": "def test_swagger_ui_html(client: TestClient):\n    response = client.get(\"/docs\")\n    assert response.status_code == 200, response.text\n    assert \"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\" in response.text\n    assert \"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\" in response.text",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_docs_ui\\test_tutorial001.py",
    "type": "function",
    "name": "test_swagger_ui_html",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_docs_ui\\test_tutorial001.py:function:test_swagger_ui_oauth2_redirect_html:chunk1",
    "text": "def test_swagger_ui_oauth2_redirect_html(client: TestClient):\n    response = client.get(\"/docs/oauth2-redirect\")\n    assert response.status_code == 200, response.text\n    assert \"window.opener.swaggerUIRedirectOauth2\" in response.text",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_docs_ui\\test_tutorial001.py",
    "type": "function",
    "name": "test_swagger_ui_oauth2_redirect_html",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_docs_ui\\test_tutorial001.py:function:test_redoc_html:chunk1",
    "text": "def test_redoc_html(client: TestClient):\n    response = client.get(\"/redoc\")\n    assert response.status_code == 200, response.text\n    assert \"https://unpkg.com/redoc@next/bundles/redoc.standalone.js\" in response.text",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_docs_ui\\test_tutorial001.py",
    "type": "function",
    "name": "test_redoc_html",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_docs_ui\\test_tutorial001.py:function:test_api:chunk1",
    "text": "def test_api(client: TestClient):\n    response = client.get(\"/users/john\")\n    assert response.status_code == 200, response.text\n    assert response.json()[\"message\"] == \"Hello john\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_docs_ui\\test_tutorial001.py",
    "type": "function",
    "name": "test_api",
    "loc": 39,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_docs_ui\\test_tutorial002.py:function:client:chunk1",
    "text": "def client():\n    static_dir: Path = Path(os.getcwd()) / \"static\"\n    print(static_dir)\n    static_dir.mkdir(exist_ok=True)\n    from docs_src.custom_docs_ui.tutorial002 import app\n\n    with TestClient(app) as client:\n        yield client\n    static_dir.rmdir()",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_docs_ui\\test_tutorial002.py",
    "type": "function",
    "name": "client",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_docs_ui\\test_tutorial002.py:function:test_swagger_ui_html:chunk1",
    "text": "def test_swagger_ui_html(client: TestClient):\n    response = client.get(\"/docs\")\n    assert response.status_code == 200, response.text\n    assert \"/static/swagger-ui-bundle.js\" in response.text\n    assert \"/static/swagger-ui.css\" in response.text",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_docs_ui\\test_tutorial002.py",
    "type": "function",
    "name": "test_swagger_ui_html",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_docs_ui\\test_tutorial002.py:function:test_swagger_ui_oauth2_redirect_html:chunk1",
    "text": "def test_swagger_ui_oauth2_redirect_html(client: TestClient):\n    response = client.get(\"/docs/oauth2-redirect\")\n    assert response.status_code == 200, response.text\n    assert \"window.opener.swaggerUIRedirectOauth2\" in response.text",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_docs_ui\\test_tutorial002.py",
    "type": "function",
    "name": "test_swagger_ui_oauth2_redirect_html",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_docs_ui\\test_tutorial002.py:function:test_redoc_html:chunk1",
    "text": "def test_redoc_html(client: TestClient):\n    response = client.get(\"/redoc\")\n    assert response.status_code == 200, response.text\n    assert \"/static/redoc.standalone.js\" in response.text",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_docs_ui\\test_tutorial002.py",
    "type": "function",
    "name": "test_redoc_html",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_docs_ui\\test_tutorial002.py:function:test_api:chunk1",
    "text": "def test_api(client: TestClient):\n    response = client.get(\"/users/john\")\n    assert response.status_code == 200, response.text\n    assert response.json()[\"message\"] == \"Hello john\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_docs_ui\\test_tutorial002.py",
    "type": "function",
    "name": "test_api",
    "loc": 39,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_request_and_route\\test_tutorial001.py:function:test_gzip_request:chunk1",
    "text": "def test_gzip_request(compress):\n    n = 1000\n    headers = {}\n    body = [1] * n\n    data = json.dumps(body).encode()\n    if compress:\n        data = gzip.compress(data)\n        headers[\"Content-Encoding\"] = \"gzip\"\n    headers[\"Content-Type\"] = \"application/json\"\n    response = client.post(\"/sum\", content=data, headers=headers)\n    assert response.json() == {\"sum\": n}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_request_and_route\\test_tutorial001.py",
    "type": "function",
    "name": "test_gzip_request",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_request_and_route\\test_tutorial001.py:function:test_request_class:chunk1",
    "text": "def test_request_class():\n    response = client.get(\"/check-class\")\n    assert response.json() == {\"request_class\": \"GzipRequest\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_request_and_route\\test_tutorial001.py",
    "type": "function",
    "name": "test_request_class",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_request_and_route\\test_tutorial002.py:function:test_endpoint_works:chunk1",
    "text": "def test_endpoint_works():\n    response = client.post(\"/\", json=[1, 2, 3])\n    assert response.json() == 6",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_request_and_route\\test_tutorial002.py",
    "type": "function",
    "name": "test_endpoint_works",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_request_and_route\\test_tutorial002.py:function:test_exception_handler_body_access:chunk1",
    "text": "def test_exception_handler_body_access():\n    response = client.post(\"/\", json={\"numbers\": [1, 2, 3]})\n    assert response.json() == IsDict(\n        {\n            \"detail\": {\n                \"errors\": [\n                    {\n                        \"type\": \"list_type\",\n                        \"loc\": [\"body\"],\n                        \"msg\": \"Input should be a valid list\",\n                        \"input\": {\"numbers\": [1, 2, 3]},\n                    }\n                ],\n                \"body\": '{\"numbers\": [1, 2, 3]}',\n            }\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": {\n                \"body\": '{\"numbers\": [1, 2, 3]}',\n                \"errors\": [\n                    {\n                        \"loc\": [\"body\"],\n                        \"msg\": \"value is not a valid list\",\n                        \"type\": \"type_error.list\",\n                    }\n                ],\n            }\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_request_and_route\\test_tutorial002.py",
    "type": "function",
    "name": "test_exception_handler_body_access",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_request_and_route\\test_tutorial003.py:function:test_get:chunk1",
    "text": "def test_get():\n    response = client.get(\"/\")\n    assert response.json() == {\"message\": \"Not timed\"}\n    assert \"X-Response-Time\" not in response.headers",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_request_and_route\\test_tutorial003.py",
    "type": "function",
    "name": "test_get",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_request_and_route\\test_tutorial003.py:function:test_get_timed:chunk1",
    "text": "def test_get_timed():\n    response = client.get(\"/timed\")\n    assert response.json() == {\"message\": \"It's the time of my life\"}\n    assert \"X-Response-Time\" in response.headers\n    assert float(response.headers[\"X-Response-Time\"]) >= 0",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_request_and_route\\test_tutorial003.py",
    "type": "function",
    "name": "test_get_timed",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_response\\test_tutorial001.py:function:test_get_custom_response:chunk1",
    "text": "def test_get_custom_response():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item_id\": \"Foo\"}]",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_response\\test_tutorial001.py",
    "type": "function",
    "name": "test_get_custom_response",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_response\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_response\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_response\\test_tutorial001b.py:function:test_get_custom_response:chunk1",
    "text": "def test_get_custom_response():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item_id\": \"Foo\"}]",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_response\\test_tutorial001b.py",
    "type": "function",
    "name": "test_get_custom_response",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_response\\test_tutorial001b.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_response\\test_tutorial001b.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_response\\test_tutorial004.py:function:test_get_custom_response:chunk1",
    "text": "def test_get_custom_response():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.text == html_contents",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_response\\test_tutorial004.py",
    "type": "function",
    "name": "test_get_custom_response",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_response\\test_tutorial004.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"text/html\": {\"schema\": {\"type\": \"string\"}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_response\\test_tutorial004.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 26,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_response\\test_tutorial005.py:function:test_get:chunk1",
    "text": "def test_get():\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert response.text == \"Hello World\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_response\\test_tutorial005.py",
    "type": "function",
    "name": "test_get",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_response\\test_tutorial005.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"get\": {\n                    \"summary\": \"Main\",\n                    \"operationId\": \"main__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"text/plain\": {\"schema\": {\"type\": \"string\"}}},\n                        }\n                    },\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_response\\test_tutorial005.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_response\\test_tutorial006.py:function:test_get:chunk1",
    "text": "def test_get():\n    response = client.get(\"/typer\", follow_redirects=False)\n    assert response.status_code == 307, response.text\n    assert response.headers[\"location\"] == \"https://typer.tiangolo.com\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_response\\test_tutorial006.py",
    "type": "function",
    "name": "test_get",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_response\\test_tutorial006.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/typer\": {\n                \"get\": {\n                    \"summary\": \"Redirect Typer\",\n                    \"operationId\": \"redirect_typer_typer_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_response\\test_tutorial006.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_response\\test_tutorial006b.py:function:test_redirect_response_class:chunk1",
    "text": "def test_redirect_response_class():\n    response = client.get(\"/fastapi\", follow_redirects=False)\n    assert response.status_code == 307\n    assert response.headers[\"location\"] == \"https://fastapi.tiangolo.com\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_response\\test_tutorial006b.py",
    "type": "function",
    "name": "test_redirect_response_class",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_response\\test_tutorial006b.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/fastapi\": {\n                \"get\": {\n                    \"summary\": \"Redirect Fastapi\",\n                    \"operationId\": \"redirect_fastapi_fastapi_get\",\n                    \"responses\": {\"307\": {\"description\": \"Successful Response\"}},\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_response\\test_tutorial006b.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_response\\test_tutorial006c.py:function:test_redirect_status_code:chunk1",
    "text": "def test_redirect_status_code():\n    response = client.get(\"/pydantic\", follow_redirects=False)\n    assert response.status_code == 302\n    assert response.headers[\"location\"] == \"https://docs.pydantic.dev/\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_response\\test_tutorial006c.py",
    "type": "function",
    "name": "test_redirect_status_code",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_response\\test_tutorial006c.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/pydantic\": {\n                \"get\": {\n                    \"summary\": \"Redirect Pydantic\",\n                    \"operationId\": \"redirect_pydantic_pydantic_get\",\n                    \"responses\": {\"302\": {\"description\": \"Successful Response\"}},\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_response\\test_tutorial006c.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_response\\test_tutorial007.py:function:test_get:chunk1",
    "text": "def test_get():\n    fake_content = b\"some fake video bytes\"\n    response = client.get(\"/\")\n    assert response.content == fake_content * 10",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_response\\test_tutorial007.py",
    "type": "function",
    "name": "test_get",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_response\\test_tutorial008.py:function:test_get:chunk1",
    "text": "def test_get(tmp_path: Path):\n    file_path: Path = tmp_path / \"large-video-file.mp4\"\n    tutorial008.some_file_path = str(file_path)\n    test_content = b\"Fake video bytes\"\n    file_path.write_bytes(test_content)\n    response = client.get(\"/\")\n    assert response.content == test_content",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_response\\test_tutorial008.py",
    "type": "function",
    "name": "test_get",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_response\\test_tutorial009.py:function:test_get:chunk1",
    "text": "def test_get(tmp_path: Path):\n    file_path: Path = tmp_path / \"large-video-file.mp4\"\n    tutorial009.some_file_path = str(file_path)\n    test_content = b\"Fake video bytes\"\n    file_path.write_bytes(test_content)\n    response = client.get(\"/\")\n    assert response.content == test_content",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_response\\test_tutorial009.py",
    "type": "function",
    "name": "test_get",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_response\\test_tutorial009b.py:function:test_get:chunk1",
    "text": "def test_get(tmp_path: Path):\n    file_path: Path = tmp_path / \"large-video-file.mp4\"\n    tutorial009b.some_file_path = str(file_path)\n    test_content = b\"Fake video bytes\"\n    file_path.write_bytes(test_content)\n    response = client.get(\"/\")\n    assert response.content == test_content",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_response\\test_tutorial009b.py",
    "type": "function",
    "name": "test_get",
    "loc": 11,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_custom_response\\test_tutorial009c.py:function:test_get:chunk1",
    "text": "def test_get():\n    response = client.get(\"/\")\n    assert response.content == b'{\\n  \"message\": \"Hello World\"\\n}'",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_custom_response\\test_tutorial009c.py",
    "type": "function",
    "name": "test_get",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dataclasses\\test_tutorial001.py:function:test_post_item:chunk1",
    "text": "def test_post_item():\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 3})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"price\": 3,\n        \"description\": None,\n        \"tax\": None,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dataclasses\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_item",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dataclasses\\test_tutorial001.py:function:test_post_invalid_item:chunk1",
    "text": "def test_post_invalid_item():\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": \"invalid price\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"float_parsing\",\n                    \"loc\": [\"body\", \"price\"],\n                    \"msg\": \"Input should be a valid number, unable to parse string as a number\",\n                    \"input\": \"invalid price\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"price\"],\n                    \"msg\": \"value is not a valid float\",\n                    \"type\": \"type_error.float\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dataclasses\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_invalid_item",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dataclasses\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dataclasses\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 48,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dataclasses\\test_tutorial002.py:function:test_get_item:chunk1",
    "text": "def test_get_item():\n    response = client.get(\"/items/next\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"name\": \"Island In The Moon\",\n        \"price\": 12.99,\n        \"description\": \"A place to be playin' and havin' fun\",\n        \"tags\": [\"breater\"],\n        \"tax\": None,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dataclasses\\test_tutorial002.py",
    "type": "function",
    "name": "test_get_item",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dataclasses\\test_tutorial002.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/next\": {\n                \"get\": {\n                    \"summary\": \"Read Next Item\",\n                    \"operationId\": \"read_next_item_items_next_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": IsOneOf(\n                        [\"name\", \"price\", \"tags\", \"description\", \"tax\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"name\", \"price\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tags\": IsDict(\n                            {\n                                \"title\": \"Tags\",\n                                \"type\": \"array\",\n                                \"items\": {\"type\": \"string\"},\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Tags\",\n                                \"type\": \"array\",\n                                \"items\": {\"type\": \"string\"},\n                            }\n                        ),\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dataclasses\\test_tutorial002.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dataclasses\\test_tutorial003.py:function:test_post_authors_item:chunk1",
    "text": "def test_post_authors_item():\n    response = client.post(\n        \"/authors/foo/items/\",\n        json=[{\"name\": \"Bar\"}, {\"name\": \"Baz\", \"description\": \"Drop the Baz\"}],\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"name\": \"foo\",\n        \"items\": [\n            {\"name\": \"Bar\", \"description\": None},\n            {\"name\": \"Baz\", \"description\": \"Drop the Baz\"},\n        ],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dataclasses\\test_tutorial003.py",
    "type": "function",
    "name": "test_post_authors_item",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dataclasses\\test_tutorial003.py:function:test_get_authors:chunk1",
    "text": "def test_get_authors():\n    response = client.get(\"/authors/\")\n    assert response.status_code == 200\n    assert response.json() == [\n        {\n            \"name\": \"Breaters\",\n            \"items\": [\n                {\n                    \"name\": \"Island In The Moon\",\n                    \"description\": \"A place to be playin' and havin' fun\",\n                },\n                {\"name\": \"Holy Buddies\", \"description\": None},\n            ],\n        },\n        {\n            \"name\": \"System of an Up\",\n            \"items\": [\n                {\n                    \"name\": \"Salt\",\n                    \"description\": \"The kombucha mushroom people's favorite\",\n                },\n                {\"name\": \"Pad Thai\", \"description\": None},\n                {\n                    \"name\": \"Lonely Night\",\n                    \"description\": \"The mostests lonliest nightiest of allest\",\n                },\n            ],\n        },\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dataclasses\\test_tutorial003.py",
    "type": "function",
    "name": "test_get_authors",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dataclasses\\test_tutorial003.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/authors/{author_id}/items/\": {\n                \"post\": {\n                    \"summary\": \"Create Author Items\",\n                    \"operationId\": \"create_author_items_authors__author_id__items__post\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Author Id\", \"type\": \"string\"},\n                            \"name\": \"author_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"title\": \"Items\",\n                                    \"type\": \"array\",\n                                    \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Author\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/authors/\": {\n                \"get\": {\n                    \"summary\": \"Get Authors\",\n                    \"operationId\": \"get_authors_authors__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Get Authors Authors  Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Author\"\n                                        },\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Author\": {\n                    \"title\": \"Author\",\n                    \"required\": [\"name\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"items\": {\n                            \"title\": \"Items\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                        },\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dataclasses\\test_tutorial003.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 57,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dataclasses\\test_tutorial003.py:function:test_openapi_schema_pv1:chunk1",
    "text": "def test_openapi_schema_pv1():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/authors/{author_id}/items/\": {\n                \"post\": {\n                    \"summary\": \"Create Author Items\",\n                    \"operationId\": \"create_author_items_authors__author_id__items__post\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Author Id\", \"type\": \"string\"},\n                            \"name\": \"author_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"title\": \"Items\",\n                                    \"type\": \"array\",\n                                    \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Author\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/authors/\": {\n                \"get\": {\n                    \"summary\": \"Get Authors\",\n                    \"operationId\": \"get_authors_authors__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Get Authors Authors  Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Author\"\n                                        },\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Author\": {\n                    \"title\": \"Author\",\n                    \"required\": [\"name\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"items\": {\n                            \"title\": \"Items\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                        },\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dataclasses\\test_tutorial003.py",
    "type": "function",
    "name": "test_openapi_schema_pv1",
    "loc": 194,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial001.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.dependencies.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial001.py",
    "type": "function",
    "name": "get_client",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial001.py:function:test_get:chunk1",
    "text": "def test_get(path, expected_status, expected_response, client: TestClient):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial001.py",
    "type": "function",
    "name": "test_get",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            },\n            \"/users/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 43,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial004.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.dependencies.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial004.py",
    "type": "function",
    "name": "get_client",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial004.py:function:test_get:chunk1",
    "text": "def test_get(path, expected_status, expected_response, client: TestClient):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial004.py",
    "type": "function",
    "name": "test_get",
    "loc": 75,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial004.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial004.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 81,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial006.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.dependencies.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial006.py",
    "type": "function",
    "name": "get_client",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial006.py:function:test_get_no_headers:chunk1",
    "text": "def test_get_no_headers(client: TestClient):\n    response = client.get(\"/items/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial006.py",
    "type": "function",
    "name": "test_get_no_headers",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial006.py:function:test_get_invalid_one_header:chunk1",
    "text": "def test_get_invalid_one_header(client: TestClient):\n    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial006.py",
    "type": "function",
    "name": "test_get_invalid_one_header",
    "loc": 64,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial006.py:function:test_get_invalid_second_header:chunk1",
    "text": "def test_get_invalid_second_header(client: TestClient):\n    response = client.get(\n        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Key header invalid\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial006.py",
    "type": "function",
    "name": "test_get_invalid_second_header",
    "loc": 70,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial006.py:function:test_get_valid_headers:chunk1",
    "text": "def test_get_valid_headers(client: TestClient):\n    response = client.get(\n        \"/items/\",\n        headers={\n            \"X-Token\": \"fake-super-secret-token\",\n            \"X-Key\": \"fake-super-secret-key\",\n        },\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial006.py",
    "type": "function",
    "name": "test_get_valid_headers",
    "loc": 78,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial006.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n                            \"name\": \"x-key\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial006.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 90,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial008b.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.dependencies.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial008b.py",
    "type": "function",
    "name": "get_client",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial008b.py:function:test_get_no_item:chunk1",
    "text": "def test_get_no_item(client: TestClient):\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 404, response.text\n    assert response.json() == {\"detail\": \"Item not found\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial008b.py",
    "type": "function",
    "name": "test_get_no_item",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial008b.py:function:test_owner_error:chunk1",
    "text": "def test_owner_error(client: TestClient):\n    response = client.get(\"/items/plumbus\")\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Owner error: Rick\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial008b.py",
    "type": "function",
    "name": "test_owner_error",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial008b.py:function:test_get_item:chunk1",
    "text": "def test_get_item(client: TestClient):\n    response = client.get(\"/items/portal-gun\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial008b.py",
    "type": "function",
    "name": "test_get_item",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial008c.py:function:get_mod:chunk1",
    "text": "def get_mod(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.dependencies.{request.param}\")\n\n    return mod",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial008c.py",
    "type": "function",
    "name": "get_mod",
    "loc": 19,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial008c.py:function:test_get_no_item:chunk1",
    "text": "def test_get_no_item(mod: ModuleType):\n    client = TestClient(mod.app)\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 404, response.text\n    assert response.json() == {\"detail\": \"Item not found, there's only a plumbus here\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial008c.py",
    "type": "function",
    "name": "test_get_no_item",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial008c.py:function:test_get:chunk1",
    "text": "def test_get(mod: ModuleType):\n    client = TestClient(mod.app)\n    response = client.get(\"/items/plumbus\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"plumbus\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial008c.py",
    "type": "function",
    "name": "test_get",
    "loc": 32,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial008c.py:function:test_fastapi_error:chunk1",
    "text": "def test_fastapi_error(mod: ModuleType):\n    client = TestClient(mod.app)\n    with pytest.raises(FastAPIError) as exc_info:\n        client.get(\"/items/portal-gun\")\n    assert \"No response object was returned\" in exc_info.value.args[0]",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial008c.py",
    "type": "function",
    "name": "test_fastapi_error",
    "loc": 39,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial008c.py:function:test_internal_server_error:chunk1",
    "text": "def test_internal_server_error(mod: ModuleType):\n    client = TestClient(mod.app, raise_server_exceptions=False)\n    response = client.get(\"/items/portal-gun\")\n    assert response.status_code == 500, response.text\n    assert response.text == \"Internal Server Error\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial008c.py",
    "type": "function",
    "name": "test_internal_server_error",
    "loc": 46,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial008d.py:function:get_mod:chunk1",
    "text": "def get_mod(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.dependencies.{request.param}\")\n\n    return mod",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial008d.py",
    "type": "function",
    "name": "get_mod",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial008d.py:function:test_get_no_item:chunk1",
    "text": "def test_get_no_item(mod: ModuleType):\n    client = TestClient(mod.app)\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 404, response.text\n    assert response.json() == {\"detail\": \"Item not found, there's only a plumbus here\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial008d.py",
    "type": "function",
    "name": "test_get_no_item",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial008d.py:function:test_get:chunk1",
    "text": "def test_get(mod: ModuleType):\n    client = TestClient(mod.app)\n    response = client.get(\"/items/plumbus\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"plumbus\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial008d.py",
    "type": "function",
    "name": "test_get",
    "loc": 31,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial008d.py:function:test_internal_error:chunk1",
    "text": "def test_internal_error(mod: ModuleType):\n    client = TestClient(mod.app)\n    with pytest.raises(mod.InternalError) as exc_info:\n        client.get(\"/items/portal-gun\")\n    assert (\n        exc_info.value.args[0] == \"The portal gun is too dangerous to be owned by Rick\"\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial008d.py",
    "type": "function",
    "name": "test_internal_error",
    "loc": 38,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial008d.py:function:test_internal_server_error:chunk1",
    "text": "def test_internal_server_error(mod: ModuleType):\n    client = TestClient(mod.app, raise_server_exceptions=False)\n    response = client.get(\"/items/portal-gun\")\n    assert response.status_code == 500, response.text\n    assert response.text == \"Internal Server Error\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial008d.py",
    "type": "function",
    "name": "test_internal_server_error",
    "loc": 47,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial012.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.dependencies.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial012.py",
    "type": "function",
    "name": "get_client",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial012.py:function:test_get_no_headers_items:chunk1",
    "text": "def test_get_no_headers_items(client: TestClient):\n    response = client.get(\"/items/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial012.py",
    "type": "function",
    "name": "test_get_no_headers_items",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial012.py:function:test_get_no_headers_users:chunk1",
    "text": "def test_get_no_headers_users(client: TestClient):\n    response = client.get(\"/users/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial012.py",
    "type": "function",
    "name": "test_get_no_headers_users",
    "loc": 64,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial012.py:function:test_get_invalid_one_header_items:chunk1",
    "text": "def test_get_invalid_one_header_items(client: TestClient):\n    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial012.py",
    "type": "function",
    "name": "test_get_invalid_one_header_items",
    "loc": 103,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial012.py:function:test_get_invalid_one_users:chunk1",
    "text": "def test_get_invalid_one_users(client: TestClient):\n    response = client.get(\"/users/\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial012.py",
    "type": "function",
    "name": "test_get_invalid_one_users",
    "loc": 109,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial012.py:function:test_get_invalid_second_header_items:chunk1",
    "text": "def test_get_invalid_second_header_items(client: TestClient):\n    response = client.get(\n        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Key header invalid\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial012.py",
    "type": "function",
    "name": "test_get_invalid_second_header_items",
    "loc": 115,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial012.py:function:test_get_invalid_second_header_users:chunk1",
    "text": "def test_get_invalid_second_header_users(client: TestClient):\n    response = client.get(\n        \"/users/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Key header invalid\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial012.py",
    "type": "function",
    "name": "test_get_invalid_second_header_users",
    "loc": 123,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial012.py:function:test_get_valid_headers_items:chunk1",
    "text": "def test_get_valid_headers_items(client: TestClient):\n    response = client.get(\n        \"/items/\",\n        headers={\n            \"X-Token\": \"fake-super-secret-token\",\n            \"X-Key\": \"fake-super-secret-key\",\n        },\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial012.py",
    "type": "function",
    "name": "test_get_valid_headers_items",
    "loc": 131,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial012.py:function:test_get_valid_headers_users:chunk1",
    "text": "def test_get_valid_headers_users(client: TestClient):\n    response = client.get(\n        \"/users/\",\n        headers={\n            \"X-Token\": \"fake-super-secret-token\",\n            \"X-Key\": \"fake-super-secret-key\",\n        },\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial012.py",
    "type": "function",
    "name": "test_get_valid_headers_users",
    "loc": 143,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_dependencies\\test_tutorial012.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n                            \"name\": \"x-key\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/users/\": {\n                \"get\": {\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n                            \"name\": \"x-key\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_dependencies\\test_tutorial012.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 155,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_events\\test_tutorial001.py:function:get_app:chunk1",
    "text": "def get_app():\n    with pytest.warns(DeprecationWarning):\n        from docs_src.events.tutorial001 import app\n    yield app",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_events\\test_tutorial001.py",
    "type": "function",
    "name": "get_app",
    "loc": 7,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_events\\test_tutorial001.py:function:test_events:chunk1",
    "text": "def test_events(app: FastAPI):\n    with TestClient(app) as client:\n        response = client.get(\"/items/foo\")\n        assert response.status_code == 200, response.text\n        assert response.json() == {\"name\": \"Fighters\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_events\\test_tutorial001.py",
    "type": "function",
    "name": "test_events",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_events\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(app: FastAPI):\n    with TestClient(app) as client:\n        response = client.get(\"/openapi.json\")\n        assert response.status_code == 200, response.text\n        assert response.json() == {\n            \"openapi\": \"3.1.0\",\n            \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n            \"paths\": {\n                \"/items/{item_id}\": {\n                    \"get\": {\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\"application/json\": {\"schema\": {}}},\n                            },\n                            \"422\": {\n                                \"description\": \"Validation Error\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                        }\n                                    }\n                                },\n                            },\n                        },\n                        \"summary\": \"Read Items\",\n                        \"operationId\": \"read_items_items__item_id__get\",\n                        \"parameters\": [\n                            {\n                                \"required\": True,\n                                \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                                \"name\": \"item_id\",\n                                \"in\": \"path\",\n                            }\n                        ],\n                    }\n                }\n            },\n            \"components\": {\n                \"schemas\": {\n                    \"ValidationError\": {\n                        \"title\": \"ValidationError\",\n                        \"required\": [\"loc\", \"msg\", \"type\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"loc\": {\n                                \"title\": \"Location\",\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                                },\n                            },\n                            \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                            \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                        },\n                    },\n                    \"HTTPValidationError\": {\n                        \"title\": \"HTTPValidationError\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"detail\": {\n                                \"title\": \"Detail\",\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"$ref\": \"#/components/schemas/ValidationError\"\n                                },\n                            }\n                        },\n                    },\n                }\n            },\n        }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_events\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_events\\test_tutorial002.py:function:get_app:chunk1",
    "text": "def get_app():\n    with pytest.warns(DeprecationWarning):\n        from docs_src.events.tutorial002 import app\n    yield app",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_events\\test_tutorial002.py",
    "type": "function",
    "name": "get_app",
    "loc": 7,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_events\\test_tutorial002.py:function:test_events:chunk1",
    "text": "def test_events(app: FastAPI):\n    with TestClient(app) as client:\n        response = client.get(\"/items/\")\n        assert response.status_code == 200, response.text\n        assert response.json() == [{\"name\": \"Foo\"}]\n    with open(\"log.txt\") as log:\n        assert \"Application shutdown\" in log.read()",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_events\\test_tutorial002.py",
    "type": "function",
    "name": "test_events",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_events\\test_tutorial002.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(app: FastAPI):\n    with TestClient(app) as client:\n        response = client.get(\"/openapi.json\")\n        assert response.status_code == 200, response.text\n        assert response.json() == {\n            \"openapi\": \"3.1.0\",\n            \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n            \"paths\": {\n                \"/items/\": {\n                    \"get\": {\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\"application/json\": {\"schema\": {}}},\n                            }\n                        },\n                        \"summary\": \"Read Items\",\n                        \"operationId\": \"read_items_items__get\",\n                    }\n                }\n            },\n        }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_events\\test_tutorial002.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_events\\test_tutorial003.py:function:test_events:chunk1",
    "text": "def test_events():\n    assert not ml_models, \"ml_models should be empty\"\n    with TestClient(app) as client:\n        assert ml_models[\"answer_to_everything\"] == fake_answer_to_everything_ml_model\n        response = client.get(\"/predict\", params={\"x\": 2})\n        assert response.status_code == 200, response.text\n        assert response.json() == {\"result\": 84.0}\n    assert not ml_models, \"ml_models should be empty\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_events\\test_tutorial003.py",
    "type": "function",
    "name": "test_events",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_events\\test_tutorial003.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    with TestClient(app) as client:\n        response = client.get(\"/openapi.json\")\n        assert response.status_code == 200, response.text\n        assert response.json() == {\n            \"openapi\": \"3.1.0\",\n            \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n            \"paths\": {\n                \"/predict\": {\n                    \"get\": {\n                        \"summary\": \"Predict\",\n                        \"operationId\": \"predict_predict_get\",\n                        \"parameters\": [\n                            {\n                                \"required\": True,\n                                \"schema\": {\"title\": \"X\", \"type\": \"number\"},\n                                \"name\": \"x\",\n                                \"in\": \"query\",\n                            }\n                        ],\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\"application/json\": {\"schema\": {}}},\n                            },\n                            \"422\": {\n                                \"description\": \"Validation Error\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                        }\n                                    }\n                                },\n                            },\n                        },\n                    }\n                }\n            },\n            \"components\": {\n                \"schemas\": {\n                    \"HTTPValidationError\": {\n                        \"title\": \"HTTPValidationError\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"detail\": {\n                                \"title\": \"Detail\",\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"$ref\": \"#/components/schemas/ValidationError\"\n                                },\n                            }\n                        },\n                    },\n                    \"ValidationError\": {\n                        \"title\": \"ValidationError\",\n                        \"required\": [\"loc\", \"msg\", \"type\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"loc\": {\n                                \"title\": \"Location\",\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                                },\n                            },\n                            \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                            \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                        },\n                    },\n                }\n            },\n        }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_events\\test_tutorial003.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_extending_openapi\\test_tutorial001.py:function:test:chunk1",
    "text": "def test():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"name\": \"Foo\"}]",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_extending_openapi\\test_tutorial001.py",
    "type": "function",
    "name": "test",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_extending_openapi\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\n            \"title\": \"Custom title\",\n            \"summary\": \"This is a very custom OpenAPI schema\",\n            \"description\": \"Here's a longer description of the custom **OpenAPI** schema\",\n            \"version\": \"2.5.0\",\n            \"x-logo\": {\n                \"url\": \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\"\n            },\n        },\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                }\n            }\n        },\n    }\n    openapi_schema = response.json()\n    # Request again to test the custom cache\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == openapi_schema",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_extending_openapi\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_extra_data_types\\test_tutorial001.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.extra_data_types.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_extra_data_types\\test_tutorial001.py",
    "type": "function",
    "name": "get_client",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_extra_data_types\\test_tutorial001.py:function:test_extra_types:chunk1",
    "text": "def test_extra_types(client: TestClient):\n    item_id = \"ff97dd87-a4a5-4a12-b412-cde99f33e00e\"\n    data = {\n        \"start_datetime\": \"2018-12-22T14:00:00+00:00\",\n        \"end_datetime\": \"2018-12-24T15:00:00+00:00\",\n        \"repeat_at\": \"15:30:00\",\n        \"process_after\": 300,\n    }\n    expected_response = data.copy()\n    expected_response.update(\n        {\n            \"start_process\": \"2018-12-22T14:05:00+00:00\",\n            \"duration\": 176_100,\n            \"item_id\": item_id,\n        }\n    )\n    response = client.put(f\"/items/{item_id}\", json=data)\n    assert response.status_code == 200, response.text\n    assert response.json() == expected_response",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_extra_data_types\\test_tutorial001.py",
    "type": "function",
    "name": "test_extra_types",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_extra_data_types\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"type\": \"string\",\n                                \"format\": \"uuid\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"required\": True,\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/Body_read_items_items__item_id__put\"\n                                            }\n                                        ],\n                                        \"title\": \"Body\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"$ref\": \"#/components/schemas/Body_read_items_items__item_id__put\"\n                                    }\n                                )\n                            }\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_read_items_items__item_id__put\": {\n                    \"title\": \"Body_read_items_items__item_id__put\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"start_datetime\": {\n                            \"title\": \"Start Datetime\",\n                            \"type\": \"string\",\n                            \"format\": \"date-time\",\n                        },\n                        \"end_datetime\": {\n                            \"title\": \"End Datetime\",\n                            \"type\": \"string\",\n                            \"format\": \"date-time\",\n                        },\n                        \"repeat_at\": IsDict(\n                            {\n                                \"title\": \"Repeat At\",\n                                \"anyOf\": [\n                                    {\"type\": \"string\", \"format\": \"time\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Repeat At\",\n                                \"type\": \"string\",\n                                \"format\": \"time\",\n                            }\n                        ),\n                        \"process_after\": IsDict(\n                            {\n                                \"title\": \"Process After\",\n                                \"type\": \"string\",\n                                \"format\": \"duration\",\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Process After\",\n                                \"type\": \"number\",\n                                \"format\": \"time-delta\",\n                            }\n                        ),\n                    },\n                    \"required\": [\"start_datetime\", \"end_datetime\", \"process_after\"],\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_extra_data_types\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 48,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_extra_models\\test_tutorial003.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.extra_models.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_extra_models\\test_tutorial003.py",
    "type": "function",
    "name": "get_client",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_extra_models\\test_tutorial003.py:function:test_get_car:chunk1",
    "text": "def test_get_car(client: TestClient):\n    response = client.get(\"/items/item1\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"description\": \"All my friends drive a low rider\",\n        \"type\": \"car\",\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_extra_models\\test_tutorial003.py",
    "type": "function",
    "name": "test_get_car",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_extra_models\\test_tutorial003.py:function:test_get_plane:chunk1",
    "text": "def test_get_plane(client: TestClient):\n    response = client.get(\"/items/item2\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n        \"type\": \"plane\",\n        \"size\": 5,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_extra_models\\test_tutorial003.py",
    "type": "function",
    "name": "test_get_plane",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_extra_models\\test_tutorial003.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read Item Items  Item Id  Get\",\n                                        \"anyOf\": [\n                                            {\"$ref\": \"#/components/schemas/PlaneItem\"},\n                                            {\"$ref\": \"#/components/schemas/CarItem\"},\n                                        ],\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"PlaneItem\": {\n                    \"title\": \"PlaneItem\",\n                    \"required\": IsOneOf(\n                        [\"description\", \"type\", \"size\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"description\", \"size\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Type\", \"type\": \"string\", \"default\": \"plane\"},\n                        \"size\": {\"title\": \"Size\", \"type\": \"integer\"},\n                    },\n                },\n                \"CarItem\": {\n                    \"title\": \"CarItem\",\n                    \"required\": IsOneOf(\n                        [\"description\", \"type\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"description\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Type\", \"type\": \"string\", \"default\": \"car\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_extra_models\\test_tutorial003.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 43,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_extra_models\\test_tutorial004.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.extra_models.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_extra_models\\test_tutorial004.py",
    "type": "function",
    "name": "get_client",
    "loc": 16,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_extra_models\\test_tutorial004.py:function:test_get_items:chunk1",
    "text": "def test_get_items(client: TestClient):\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n        {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_extra_models\\test_tutorial004.py",
    "type": "function",
    "name": "test_get_items",
    "loc": 23,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_extra_models\\test_tutorial004.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read Items Items  Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"description\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                    },\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_extra_models\\test_tutorial004.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 32,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_extra_models\\test_tutorial005.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.extra_models.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_extra_models\\test_tutorial005.py",
    "type": "function",
    "name": "get_client",
    "loc": 16,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_extra_models\\test_tutorial005.py:function:test_get_items:chunk1",
    "text": "def test_get_items(client: TestClient):\n    response = client.get(\"/keyword-weights/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"foo\": 2.3, \"bar\": 3.4}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_extra_models\\test_tutorial005.py",
    "type": "function",
    "name": "test_get_items",
    "loc": 23,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_extra_models\\test_tutorial005.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/keyword-weights/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read Keyword Weights Keyword Weights  Get\",\n                                        \"type\": \"object\",\n                                        \"additionalProperties\": {\"type\": \"number\"},\n                                    }\n                                }\n                            },\n                        }\n                    },\n                    \"summary\": \"Read Keyword Weights\",\n                    \"operationId\": \"read_keyword_weights_keyword_weights__get\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_extra_models\\test_tutorial005.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 29,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_first_steps\\test_tutorial001.py:function:test_get_path:chunk1",
    "text": "def test_get_path(path, expected_status, expected_response):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_first_steps\\test_tutorial001.py",
    "type": "function",
    "name": "test_get_path",
    "loc": 16,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_first_steps\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Root\",\n                    \"operationId\": \"root__get\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_first_steps\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_generate_clients\\test_tutorial003.py:function:test_post_items:chunk1",
    "text": "def test_post_items():\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 5})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Item received\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_generate_clients\\test_tutorial003.py",
    "type": "function",
    "name": "test_post_items",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_generate_clients\\test_tutorial003.py:function:test_post_users:chunk1",
    "text": "def test_post_users():\n    response = client.post(\n        \"/users/\", json={\"username\": \"Foo\", \"email\": \"foo@example.com\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"User received\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_generate_clients\\test_tutorial003.py",
    "type": "function",
    "name": "test_post_users",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_generate_clients\\test_tutorial003.py:function:test_get_items:chunk1",
    "text": "def test_get_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_generate_clients\\test_tutorial003.py",
    "type": "function",
    "name": "test_get_items",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_generate_clients\\test_tutorial003.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"tags\": [\"items\"],\n                    \"summary\": \"Get Items\",\n                    \"operationId\": \"items-get_items\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Items-Get Items\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        }\n                    },\n                },\n                \"post\": {\n                    \"tags\": [\"items\"],\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"items-create_item\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/ResponseMessage\"\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                },\n            },\n            \"/users/\": {\n                \"post\": {\n                    \"tags\": [\"users\"],\n                    \"summary\": \"Create User\",\n                    \"operationId\": \"users-create_user\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/ResponseMessage\"\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                    },\n                },\n                \"ResponseMessage\": {\n                    \"title\": \"ResponseMessage\",\n                    \"required\": [\"message\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"message\": {\"title\": \"Message\", \"type\": \"string\"}},\n                },\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": [\"username\", \"email\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_generate_clients\\test_tutorial003.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 31,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_handling_errors\\test_tutorial001.py:function:test_get_item:chunk1",
    "text": "def test_get_item():\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item\": \"The Foo Wrestlers\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_handling_errors\\test_tutorial001.py",
    "type": "function",
    "name": "test_get_item",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_handling_errors\\test_tutorial001.py:function:test_get_item_not_found:chunk1",
    "text": "def test_get_item_not_found():\n    response = client.get(\"/items/bar\")\n    assert response.status_code == 404, response.text\n    assert response.headers.get(\"x-error\") is None\n    assert response.json() == {\"detail\": \"Item not found\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_handling_errors\\test_tutorial001.py",
    "type": "function",
    "name": "test_get_item_not_found",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_handling_errors\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_handling_errors\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_handling_errors\\test_tutorial002.py:function:test_get_item_header:chunk1",
    "text": "def test_get_item_header():\n    response = client.get(\"/items-header/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item\": \"The Foo Wrestlers\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_handling_errors\\test_tutorial002.py",
    "type": "function",
    "name": "test_get_item_header",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_handling_errors\\test_tutorial002.py:function:test_get_item_not_found_header:chunk1",
    "text": "def test_get_item_not_found_header():\n    response = client.get(\"/items-header/bar\")\n    assert response.status_code == 404, response.text\n    assert response.headers.get(\"x-error\") == \"There goes my error\"\n    assert response.json() == {\"detail\": \"Item not found\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_handling_errors\\test_tutorial002.py",
    "type": "function",
    "name": "test_get_item_not_found_header",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_handling_errors\\test_tutorial002.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items-header/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item Header\",\n                    \"operationId\": \"read_item_header_items_header__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_handling_errors\\test_tutorial002.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_handling_errors\\test_tutorial003.py:function:test_get:chunk1",
    "text": "def test_get():\n    response = client.get(\"/unicorns/shinny\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"unicorn_name\": \"shinny\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_handling_errors\\test_tutorial003.py",
    "type": "function",
    "name": "test_get",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_handling_errors\\test_tutorial003.py:function:test_get_exception:chunk1",
    "text": "def test_get_exception():\n    response = client.get(\"/unicorns/yolo\")\n    assert response.status_code == 418, response.text\n    assert response.json() == {\n        \"message\": \"Oops! yolo did something. There goes a rainbow...\"\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_handling_errors\\test_tutorial003.py",
    "type": "function",
    "name": "test_get_exception",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_handling_errors\\test_tutorial003.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/unicorns/{name}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Unicorn\",\n                    \"operationId\": \"read_unicorn_unicorns__name__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Name\", \"type\": \"string\"},\n                            \"name\": \"name\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_handling_errors\\test_tutorial003.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_handling_errors\\test_tutorial004.py:function:test_get_validation_error:chunk1",
    "text": "def test_get_validation_error():\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 400, response.text\n    # TODO: remove when deprecating Pydantic v1\n    assert (\n        # TODO: remove when deprecating Pydantic v1\n        \"path -> item_id\" in response.text\n        or \"'loc': ('path', 'item_id')\" in response.text\n    )\n    assert (\n        # TODO: remove when deprecating Pydantic v1\n        \"value is not a valid integer\" in response.text\n        or \"Input should be a valid integer, unable to parse string as an integer\"\n        in response.text\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_handling_errors\\test_tutorial004.py",
    "type": "function",
    "name": "test_get_validation_error",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_handling_errors\\test_tutorial004.py:function:test_get_http_error:chunk1",
    "text": "def test_get_http_error():\n    response = client.get(\"/items/3\")\n    assert response.status_code == 418, response.text\n    assert response.content == b\"Nope! I don't like 3.\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_handling_errors\\test_tutorial004.py",
    "type": "function",
    "name": "test_get_http_error",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_handling_errors\\test_tutorial004.py:function:test_get:chunk1",
    "text": "def test_get():\n    response = client.get(\"/items/2\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": 2}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_handling_errors\\test_tutorial004.py",
    "type": "function",
    "name": "test_get",
    "loc": 31,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_handling_errors\\test_tutorial004.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_handling_errors\\test_tutorial004.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_handling_errors\\test_tutorial005.py:function:test_post_validation_error:chunk1",
    "text": "def test_post_validation_error():\n    response = client.post(\"/items/\", json={\"title\": \"towel\", \"size\": \"XL\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"body\", \"size\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"XL\",\n                }\n            ],\n            \"body\": {\"title\": \"towel\", \"size\": \"XL\"},\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"size\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ],\n            \"body\": {\"title\": \"towel\", \"size\": \"XL\"},\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_handling_errors\\test_tutorial005.py",
    "type": "function",
    "name": "test_post_validation_error",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_handling_errors\\test_tutorial005.py:function:test_post:chunk1",
    "text": "def test_post():\n    data = {\"title\": \"towel\", \"size\": 5}\n    response = client.post(\"/items/\", json=data)\n    assert response.status_code == 200, response.text\n    assert response.json() == data",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_handling_errors\\test_tutorial005.py",
    "type": "function",
    "name": "test_post",
    "loc": 39,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_handling_errors\\test_tutorial005.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"title\", \"size\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"size\": {\"title\": \"Size\", \"type\": \"integer\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_handling_errors\\test_tutorial005.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 46,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_handling_errors\\test_tutorial006.py:function:test_get_validation_error:chunk1",
    "text": "def test_get_validation_error():\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"foo\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_handling_errors\\test_tutorial006.py",
    "type": "function",
    "name": "test_get_validation_error",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_handling_errors\\test_tutorial006.py:function:test_get_http_error:chunk1",
    "text": "def test_get_http_error():\n    response = client.get(\"/items/3\")\n    assert response.status_code == 418, response.text\n    assert response.json() == {\"detail\": \"Nope! I don't like 3.\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_handling_errors\\test_tutorial006.py",
    "type": "function",
    "name": "test_get_http_error",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_handling_errors\\test_tutorial006.py:function:test_get:chunk1",
    "text": "def test_get():\n    response = client.get(\"/items/2\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": 2}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_handling_errors\\test_tutorial006.py",
    "type": "function",
    "name": "test_get",
    "loc": 43,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_handling_errors\\test_tutorial006.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_handling_errors\\test_tutorial006.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 49,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_header_params\\test_tutorial001.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.header_params.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_header_params\\test_tutorial001.py",
    "type": "function",
    "name": "get_client",
    "loc": 19,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_header_params\\test_tutorial001.py:function:test:chunk1",
    "text": "def test(path, headers, expected_status, expected_response, client: TestClient):\n    response = client.get(path, headers=headers)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_header_params\\test_tutorial001.py",
    "type": "function",
    "name": "test",
    "loc": 34,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_header_params\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"User-Agent\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"User-Agent\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"user-agent\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_header_params\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_header_params\\test_tutorial002.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.header_params.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_header_params\\test_tutorial002.py",
    "type": "function",
    "name": "get_client",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_header_params\\test_tutorial002.py:function:test:chunk1",
    "text": "def test(path, headers, expected_status, expected_response, client: TestClient):\n    response = client.get(path, headers=headers)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_header_params\\test_tutorial002.py",
    "type": "function",
    "name": "test",
    "loc": 46,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_header_params\\test_tutorial002.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Strange Header\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Strange Header\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"strange_header\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_header_params\\test_tutorial002.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 52,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_header_params\\test_tutorial003.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.header_params.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_header_params\\test_tutorial003.py",
    "type": "function",
    "name": "get_client",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_header_params\\test_tutorial003.py:function:test:chunk1",
    "text": "def test(path, headers, expected_status, expected_response, client: TestClient):\n    response = client.get(path, headers=headers)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_header_params\\test_tutorial003.py",
    "type": "function",
    "name": "test",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_header_params\\test_tutorial003.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"title\": \"X-Token\",\n                                    \"anyOf\": [\n                                        {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n                                        {\"type\": \"null\"},\n                                    ],\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"X-Token\",\n                                    \"type\": \"array\",\n                                    \"items\": {\"type\": \"string\"},\n                                }\n                            ),\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_header_params\\test_tutorial003.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 42,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_header_param_models\\test_tutorial001.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.header_param_models.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_header_param_models\\test_tutorial001.py",
    "type": "function",
    "name": "get_client",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_header_param_models\\test_tutorial001.py:function:test_header_param_model:chunk1",
    "text": "def test_header_param_model(client: TestClient):\n    response = client.get(\n        \"/items/\",\n        headers=[\n            (\"save-data\", \"true\"),\n            (\"if-modified-since\", \"yesterday\"),\n            (\"traceparent\", \"123\"),\n            (\"x-tag\", \"one\"),\n            (\"x-tag\", \"two\"),\n        ],\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"host\": \"testserver\",\n        \"save_data\": True,\n        \"if_modified_since\": \"yesterday\",\n        \"traceparent\": \"123\",\n        \"x_tag\": [\"one\", \"two\"],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_header_param_models\\test_tutorial001.py",
    "type": "function",
    "name": "test_header_param_model",
    "loc": 29,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_header_param_models\\test_tutorial001.py:function:test_header_param_model_defaults:chunk1",
    "text": "def test_header_param_model_defaults(client: TestClient):\n    response = client.get(\"/items/\", headers=[(\"save-data\", \"true\")])\n    assert response.status_code == 200\n    assert response.json() == {\n        \"host\": \"testserver\",\n        \"save_data\": True,\n        \"if_modified_since\": None,\n        \"traceparent\": None,\n        \"x_tag\": [],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_header_param_models\\test_tutorial001.py",
    "type": "function",
    "name": "test_header_param_model_defaults",
    "loc": 50,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_header_param_models\\test_tutorial001.py:function:test_header_param_model_invalid:chunk1",
    "text": "def test_header_param_model_invalid(client: TestClient):\n    response = client.get(\"/items/\")\n    assert response.status_code == 422\n    assert response.json() == snapshot(\n        {\n            \"detail\": [\n                IsDict(\n                    {\n                        \"type\": \"missing\",\n                        \"loc\": [\"header\", \"save_data\"],\n                        \"msg\": \"Field required\",\n                        \"input\": {\n                            \"x_tag\": [],\n                            \"host\": \"testserver\",\n                            \"accept\": \"*/*\",\n                            \"accept-encoding\": \"gzip, deflate\",\n                            \"connection\": \"keep-alive\",\n                            \"user-agent\": \"testclient\",\n                        },\n                    }\n                )\n                | IsDict(\n                    # TODO: remove when deprecating Pydantic v1\n                    {\n                        \"type\": \"value_error.missing\",\n                        \"loc\": [\"header\", \"save_data\"],\n                        \"msg\": \"field required\",\n                    }\n                )\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_header_param_models\\test_tutorial001.py",
    "type": "function",
    "name": "test_header_param_model_invalid",
    "loc": 62,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_header_param_models\\test_tutorial001.py:function:test_header_param_model_extra:chunk1",
    "text": "def test_header_param_model_extra(client: TestClient):\n    response = client.get(\n        \"/items/\", headers=[(\"save-data\", \"true\"), (\"tool\", \"plumbus\")]\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == snapshot(\n        {\n            \"host\": \"testserver\",\n            \"save_data\": True,\n            \"if_modified_since\": None,\n            \"traceparent\": None,\n            \"x_tag\": [],\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_header_param_models\\test_tutorial001.py",
    "type": "function",
    "name": "test_header_param_model_extra",
    "loc": 96,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_header_param_models\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == snapshot(\n        {\n            \"openapi\": \"3.1.0\",\n            \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n            \"paths\": {\n                \"/items/\": {\n                    \"get\": {\n                        \"summary\": \"Read Items\",\n                        \"operationId\": \"read_items_items__get\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"host\",\n                                \"in\": \"header\",\n                                \"required\": True,\n                                \"schema\": {\"type\": \"string\", \"title\": \"Host\"},\n                            },\n                            {\n                                \"name\": \"save_data\",\n                                \"in\": \"header\",\n                                \"required\": True,\n                                \"schema\": {\"type\": \"boolean\", \"title\": \"Save Data\"},\n                            },\n                            {\n                                \"name\": \"if_modified_since\",\n                                \"in\": \"header\",\n                                \"required\": False,\n                                \"schema\": IsDict(\n                                    {\n                                        \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                        \"title\": \"If Modified Since\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"type\": \"string\",\n                                        \"title\": \"If Modified Since\",\n                                    }\n                                ),\n                            },\n                            {\n                                \"name\": \"traceparent\",\n                                \"in\": \"header\",\n                                \"required\": False,\n                                \"schema\": IsDict(\n                                    {\n                                        \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                        \"title\": \"Traceparent\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"type\": \"string\",\n                                        \"title\": \"Traceparent\",\n                                    }\n                                ),\n                            },\n                            {\n                                \"name\": \"x_tag\",\n                                \"in\": \"header\",\n                                \"required\": False,\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\"type\": \"string\"},\n                                    \"default\": [],\n                                    \"title\": \"X Tag\",\n                                },\n                            },\n                        ],\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\"application/json\": {\"schema\": {}}},\n                            },\n                            \"422\": {\n                                \"description\": \"Validation Error\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                        }\n                                    }\n                                },\n                            },\n                        },\n                    }\n                }\n            },\n            \"components\": {\n                \"schemas\": {\n                    \"HTTPValidationError\": {\n                        \"properties\": {\n                            \"detail\": {\n                                \"items\": {\n                                    \"$ref\": \"#/components/schemas/ValidationError\"\n                                },\n                                \"type\": \"array\",\n                                \"title\": \"Detail\",\n                            }\n                        },\n                        \"type\": \"object\",\n                        \"title\": \"HTTPValidationError\",\n                    },\n                    \"ValidationError\": {\n                        \"properties\": {\n                            \"loc\": {\n                                \"items\": {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                                },\n                                \"type\": \"array\",\n                                \"title\": \"Location\",\n                            },\n                            \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                            \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                        },\n                        \"type\": \"object\",\n                        \"required\": [\"loc\", \"msg\", \"type\"],\n                        \"title\": \"ValidationError\",\n                    },\n                }\n            },\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_header_param_models\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 112,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_header_param_models\\test_tutorial002.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.header_param_models.{request.param}\")\n\n    client = TestClient(mod.app)\n    client.headers.clear()\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_header_param_models\\test_tutorial002.py",
    "type": "function",
    "name": "get_client",
    "loc": 26,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_header_param_models\\test_tutorial002.py:function:test_header_param_model:chunk1",
    "text": "def test_header_param_model(client: TestClient):\n    response = client.get(\n        \"/items/\",\n        headers=[\n            (\"save-data\", \"true\"),\n            (\"if-modified-since\", \"yesterday\"),\n            (\"traceparent\", \"123\"),\n            (\"x-tag\", \"one\"),\n            (\"x-tag\", \"two\"),\n        ],\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"host\": \"testserver\",\n        \"save_data\": True,\n        \"if_modified_since\": \"yesterday\",\n        \"traceparent\": \"123\",\n        \"x_tag\": [\"one\", \"two\"],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_header_param_models\\test_tutorial002.py",
    "type": "function",
    "name": "test_header_param_model",
    "loc": 34,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_header_param_models\\test_tutorial002.py:function:test_header_param_model_defaults:chunk1",
    "text": "def test_header_param_model_defaults(client: TestClient):\n    response = client.get(\"/items/\", headers=[(\"save-data\", \"true\")])\n    assert response.status_code == 200\n    assert response.json() == {\n        \"host\": \"testserver\",\n        \"save_data\": True,\n        \"if_modified_since\": None,\n        \"traceparent\": None,\n        \"x_tag\": [],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_header_param_models\\test_tutorial002.py",
    "type": "function",
    "name": "test_header_param_model_defaults",
    "loc": 55,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_header_param_models\\test_tutorial002.py:function:test_header_param_model_invalid:chunk1",
    "text": "def test_header_param_model_invalid(client: TestClient):\n    response = client.get(\"/items/\")\n    assert response.status_code == 422\n    assert response.json() == snapshot(\n        {\n            \"detail\": [\n                IsDict(\n                    {\n                        \"type\": \"missing\",\n                        \"loc\": [\"header\", \"save_data\"],\n                        \"msg\": \"Field required\",\n                        \"input\": {\"x_tag\": [], \"host\": \"testserver\"},\n                    }\n                )\n                | IsDict(\n                    # TODO: remove when deprecating Pydantic v1\n                    {\n                        \"type\": \"value_error.missing\",\n                        \"loc\": [\"header\", \"save_data\"],\n                        \"msg\": \"field required\",\n                    }\n                )\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_header_param_models\\test_tutorial002.py",
    "type": "function",
    "name": "test_header_param_model_invalid",
    "loc": 67,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_header_param_models\\test_tutorial002.py:function:test_header_param_model_extra:chunk1",
    "text": "def test_header_param_model_extra(client: TestClient):\n    response = client.get(\n        \"/items/\", headers=[(\"save-data\", \"true\"), (\"tool\", \"plumbus\")]\n    )\n    assert response.status_code == 422, response.text\n    assert response.json() == snapshot(\n        {\n            \"detail\": [\n                IsDict(\n                    {\n                        \"type\": \"extra_forbidden\",\n                        \"loc\": [\"header\", \"tool\"],\n                        \"msg\": \"Extra inputs are not permitted\",\n                        \"input\": \"plumbus\",\n                    }\n                )\n                | IsDict(\n                    # TODO: remove when deprecating Pydantic v1\n                    {\n                        \"type\": \"value_error.extra\",\n                        \"loc\": [\"header\", \"tool\"],\n                        \"msg\": \"extra fields not permitted\",\n                    }\n                )\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_header_param_models\\test_tutorial002.py",
    "type": "function",
    "name": "test_header_param_model_extra",
    "loc": 94,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_header_param_models\\test_tutorial002.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == snapshot(\n        {\n            \"openapi\": \"3.1.0\",\n            \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n            \"paths\": {\n                \"/items/\": {\n                    \"get\": {\n                        \"summary\": \"Read Items\",\n                        \"operationId\": \"read_items_items__get\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"host\",\n                                \"in\": \"header\",\n                                \"required\": True,\n                                \"schema\": {\"type\": \"string\", \"title\": \"Host\"},\n                            },\n                            {\n                                \"name\": \"save_data\",\n                                \"in\": \"header\",\n                                \"required\": True,\n                                \"schema\": {\"type\": \"boolean\", \"title\": \"Save Data\"},\n                            },\n                            {\n                                \"name\": \"if_modified_since\",\n                                \"in\": \"header\",\n                                \"required\": False,\n                                \"schema\": IsDict(\n                                    {\n                                        \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                        \"title\": \"If Modified Since\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"type\": \"string\",\n                                        \"title\": \"If Modified Since\",\n                                    }\n                                ),\n                            },\n                            {\n                                \"name\": \"traceparent\",\n                                \"in\": \"header\",\n                                \"required\": False,\n                                \"schema\": IsDict(\n                                    {\n                                        \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                        \"title\": \"Traceparent\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"type\": \"string\",\n                                        \"title\": \"Traceparent\",\n                                    }\n                                ),\n                            },\n                            {\n                                \"name\": \"x_tag\",\n                                \"in\": \"header\",\n                                \"required\": False,\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\"type\": \"string\"},\n                                    \"default\": [],\n                                    \"title\": \"X Tag\",\n                                },\n                            },\n                        ],\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\"application/json\": {\"schema\": {}}},\n                            },\n                            \"422\": {\n                                \"description\": \"Validation Error\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                        }\n                                    }\n                                },\n                            },\n                        },\n                    }\n                }\n            },\n            \"components\": {\n                \"schemas\": {\n                    \"HTTPValidationError\": {\n                        \"properties\": {\n                            \"detail\": {\n                                \"items\": {\n                                    \"$ref\": \"#/components/schemas/ValidationError\"\n                                },\n                                \"type\": \"array\",\n                                \"title\": \"Detail\",\n                            }\n                        },\n                        \"type\": \"object\",\n                        \"title\": \"HTTPValidationError\",\n                    },\n                    \"ValidationError\": {\n                        \"properties\": {\n                            \"loc\": {\n                                \"items\": {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                                },\n                                \"type\": \"array\",\n                                \"title\": \"Location\",\n                            },\n                            \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                            \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                        },\n                        \"type\": \"object\",\n                        \"required\": [\"loc\", \"msg\", \"type\"],\n                        \"title\": \"ValidationError\",\n                    },\n                }\n            },\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_header_param_models\\test_tutorial002.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 123,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_metadata\\test_tutorial001.py:function:test_items:chunk1",
    "text": "def test_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"name\": \"Katana\"}]",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_metadata\\test_tutorial001.py",
    "type": "function",
    "name": "test_items",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_metadata\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\n            \"title\": \"ChimichangApp\",\n            \"summary\": \"Deadpool's favorite app. Nuff said.\",\n            \"description\": \"\\nChimichangApp API helps you do awesome stuff. 🚀\\n\\n## Items\\n\\nYou can **read items**.\\n\\n## Users\\n\\nYou will be able to:\\n\\n* **Create users** (_not implemented_).\\n* **Read users** (_not implemented_).\\n\",\n            \"termsOfService\": \"http://example.com/terms/\",\n            \"contact\": {\n                \"name\": \"Deadpoolio the Amazing\",\n                \"url\": \"http://x-force.example.com/contact/\",\n                \"email\": \"dp@x-force.example.com\",\n            },\n            \"license\": {\n                \"name\": \"Apache 2.0\",\n                \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n            },\n            \"version\": \"0.0.1\",\n        },\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_metadata\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_metadata\\test_tutorial001_1.py:function:test_items:chunk1",
    "text": "def test_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"name\": \"Katana\"}]",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_metadata\\test_tutorial001_1.py",
    "type": "function",
    "name": "test_items",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_metadata\\test_tutorial001_1.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\n            \"title\": \"ChimichangApp\",\n            \"summary\": \"Deadpool's favorite app. Nuff said.\",\n            \"description\": \"\\nChimichangApp API helps you do awesome stuff. 🚀\\n\\n## Items\\n\\nYou can **read items**.\\n\\n## Users\\n\\nYou will be able to:\\n\\n* **Create users** (_not implemented_).\\n* **Read users** (_not implemented_).\\n\",\n            \"termsOfService\": \"http://example.com/terms/\",\n            \"contact\": {\n                \"name\": \"Deadpoolio the Amazing\",\n                \"url\": \"http://x-force.example.com/contact/\",\n                \"email\": \"dp@x-force.example.com\",\n            },\n            \"license\": {\n                \"name\": \"Apache 2.0\",\n                \"identifier\": \"MIT\",\n            },\n            \"version\": \"0.0.1\",\n        },\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_metadata\\test_tutorial001_1.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_metadata\\test_tutorial004.py:function:test_path_operations:chunk1",
    "text": "def test_path_operations():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/users/\")\n    assert response.status_code == 200, response.text",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_metadata\\test_tutorial004.py",
    "type": "function",
    "name": "test_path_operations",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_metadata\\test_tutorial004.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/\": {\n                \"get\": {\n                    \"tags\": [\"users\"],\n                    \"summary\": \"Get Users\",\n                    \"operationId\": \"get_users_users__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/items/\": {\n                \"get\": {\n                    \"tags\": [\"items\"],\n                    \"summary\": \"Get Items\",\n                    \"operationId\": \"get_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n        },\n        \"tags\": [\n            {\n                \"name\": \"users\",\n                \"description\": \"Operations with users. The **login** logic is also here.\",\n            },\n            {\n                \"name\": \"items\",\n                \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n                \"externalDocs\": {\n                    \"description\": \"Items external docs\",\n                    \"url\": \"https://fastapi.tiangolo.com/\",\n                },\n            },\n        ],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_metadata\\test_tutorial004.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_openapi_callbacks\\test_tutorial001.py:function:test_get:chunk1",
    "text": "def test_get():\n    response = client.post(\n        \"/invoices/\", json={\"id\": \"fooinvoice\", \"customer\": \"John\", \"total\": 5.3}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Invoice received\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_openapi_callbacks\\test_tutorial001.py",
    "type": "function",
    "name": "test_get",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_openapi_callbacks\\test_tutorial001.py:function:test_dummy_callback:chunk1",
    "text": "def test_dummy_callback():\n    # Just for coverage\n    invoice_notification({})",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_openapi_callbacks\\test_tutorial001.py",
    "type": "function",
    "name": "test_dummy_callback",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_openapi_callbacks\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/invoices/\": {\n                \"post\": {\n                    \"summary\": \"Create Invoice\",\n                    \"description\": 'Create an invoice.\\n\\nThis will (let\\'s imagine) let the API user (some external developer) create an\\ninvoice.\\n\\nAnd this path operation will:\\n\\n* Send the invoice to the client.\\n* Collect the money from the client.\\n* Send a notification back to the API user (the external developer), as a callback.\\n    * At this point is that the API will somehow send a POST request to the\\n        external API with the notification of the invoice event\\n        (e.g. \"payment successful\").',\n                    \"operationId\": \"create_invoice_invoices__post\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [\n                                        {\n                                            \"type\": \"string\",\n                                            \"format\": \"uri\",\n                                            \"minLength\": 1,\n                                            \"maxLength\": 2083,\n                                        },\n                                        {\"type\": \"null\"},\n                                    ],\n                                    \"title\": \"Callback Url\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Callback Url\",\n                                    \"maxLength\": 2083,\n                                    \"minLength\": 1,\n                                    \"type\": \"string\",\n                                    \"format\": \"uri\",\n                                }\n                            ),\n                            \"name\": \"callback_url\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Invoice\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"callbacks\": {\n                        \"invoice_notification\": {\n                            \"{$callback_url}/invoices/{$request.body.id}\": {\n                                \"post\": {\n                                    \"summary\": \"Invoice Notification\",\n                                    \"operationId\": \"invoice_notification__callback_url__invoices___request_body_id__post\",\n                                    \"requestBody\": {\n                                        \"required\": True,\n                                        \"content\": {\n                                            \"application/json\": {\n                                                \"schema\": {\n                                                    \"$ref\": \"#/components/schemas/InvoiceEvent\"\n                                                }\n                                            }\n                                        },\n                                    },\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/InvoiceEventReceived\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        }\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Invoice\": {\n                    \"title\": \"Invoice\",\n                    \"required\": [\"id\", \"customer\", \"total\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"id\": {\"title\": \"Id\", \"type\": \"string\"},\n                        \"title\": IsDict(\n                            {\n                                \"title\": \"Title\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Title\", \"type\": \"string\"}\n                        ),\n                        \"customer\": {\"title\": \"Customer\", \"type\": \"string\"},\n                        \"total\": {\"title\": \"Total\", \"type\": \"number\"},\n                    },\n                },\n                \"InvoiceEvent\": {\n                    \"title\": \"InvoiceEvent\",\n                    \"required\": [\"description\", \"paid\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                        \"paid\": {\"title\": \"Paid\", \"type\": \"boolean\"},\n                    },\n                },\n                \"InvoiceEventReceived\": {\n                    \"title\": \"InvoiceEventReceived\",\n                    \"required\": [\"ok\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"ok\": {\"title\": \"Ok\", \"type\": \"boolean\"}},\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_openapi_callbacks\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_openapi_webhooks\\test_tutorial001.py:function:test_get:chunk1",
    "text": "def test_get():\n    response = client.get(\"/users/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\"Rick\", \"Morty\"]",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_openapi_webhooks\\test_tutorial001.py",
    "type": "function",
    "name": "test_get",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_openapi_webhooks\\test_tutorial001.py:function:test_dummy_webhook:chunk1",
    "text": "def test_dummy_webhook():\n    # Just for coverage\n    app.webhooks.routes[0].endpoint({})",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_openapi_webhooks\\test_tutorial001.py",
    "type": "function",
    "name": "test_dummy_webhook",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_openapi_webhooks\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/\": {\n                \"get\": {\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n        \"webhooks\": {\n            \"new-subscription\": {\n                \"post\": {\n                    \"summary\": \"New Subscription\",\n                    \"description\": \"When a new user subscribes to your service we'll send you a POST request with this\\ndata to the URL that you register for the event `new-subscription` in the dashboard.\",\n                    \"operationId\": \"new_subscriptionnew_subscription_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Subscription\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Subscription\": {\n                    \"properties\": {\n                        \"username\": {\"type\": \"string\", \"title\": \"Username\"},\n                        \"monthly_fee\": {\"type\": \"number\", \"title\": \"Monthly Fee\"},\n                        \"start_date\": {\n                            \"type\": \"string\",\n                            \"format\": \"date-time\",\n                            \"title\": \"Start Date\",\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"username\", \"monthly_fee\", \"start_date\"],\n                    \"title\": \"Subscription\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_openapi_webhooks\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 19,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial001.py:function:test_get:chunk1",
    "text": "def test_get():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item_id\": \"Foo\"}]",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial001.py",
    "type": "function",
    "name": "test_get",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"some_specific_id_you_define\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial002.py:function:test_get:chunk1",
    "text": "def test_get():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item_id\": \"Foo\"}]",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial002.py",
    "type": "function",
    "name": "test_get",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial002.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial002.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial003.py:function:test_get:chunk1",
    "text": "def test_get():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item_id\": \"Foo\"}]",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial003.py",
    "type": "function",
    "name": "test_get",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial003.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial003.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial004.py:function:test_query_params_str_validations:chunk1",
    "text": "def test_query_params_str_validations():\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"price\": 42,\n        \"description\": None,\n        \"tax\": None,\n        \"tags\": [],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial004.py",
    "type": "function",
    "name": "test_query_params_str_validations",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial004.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create an item\",\n                    \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\n                            \"title\": \"Description\",\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                        },\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": {\n                            \"title\": \"Tax\",\n                            \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                        },\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"uniqueItems\": True,\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial004.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 23,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial004.py:function:test_openapi_schema_pv1:chunk1",
    "text": "def test_openapi_schema_pv1():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create an item\",\n                    \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"uniqueItems\": True,\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial004.py",
    "type": "function",
    "name": "test_openapi_schema_pv1",
    "loc": 126,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial005.py:function:test_get:chunk1",
    "text": "def test_get():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial005.py",
    "type": "function",
    "name": "test_get",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial005.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"x-aperture-labs-portal\": \"blue\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial005.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial006.py:function:test_post:chunk1",
    "text": "def test_post():\n    response = client.post(\"/items/\", content=b\"this is actually not validated\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"size\": 30,\n        \"content\": {\n            \"name\": \"Maaaagic\",\n            \"price\": 42,\n            \"description\": \"Just kiddin', no magic here. ✨\",\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial006.py",
    "type": "function",
    "name": "test_post",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial006.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"required\": [\"name\", \"price\"],\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"name\": {\"type\": \"string\"},\n                                        \"price\": {\"type\": \"number\"},\n                                        \"description\": {\"type\": \"string\"},\n                                    },\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial006.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial007.py:function:get_client:chunk1",
    "text": "def get_client():\n    from docs_src.path_operation_advanced_configuration.tutorial007 import app\n\n    client = TestClient(app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial007.py",
    "type": "function",
    "name": "get_client",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial007.py:function:test_post:chunk1",
    "text": "def test_post(client: TestClient):\n    yaml_data = \"\"\"\n        name: Deadpoolio\n        tags:\n        - x-force\n        - x-men\n        - x-avengers\n        \"\"\"\n    response = client.post(\"/items/\", content=yaml_data)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Deadpoolio\",\n        \"tags\": [\"x-force\", \"x-men\", \"x-avengers\"],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial007.py",
    "type": "function",
    "name": "test_post",
    "loc": 16,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial007.py:function:test_post_broken_yaml:chunk1",
    "text": "def test_post_broken_yaml(client: TestClient):\n    yaml_data = \"\"\"\n        name: Deadpoolio\n        tags:\n        x - x-force\n        x - x-men\n        x - x-avengers\n        \"\"\"\n    response = client.post(\"/items/\", content=yaml_data)\n    assert response.status_code == 422, response.text\n    assert response.json() == {\"detail\": \"Invalid YAML\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial007.py",
    "type": "function",
    "name": "test_post_broken_yaml",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial007.py:function:test_post_invalid:chunk1",
    "text": "def test_post_invalid(client: TestClient):\n    yaml_data = \"\"\"\n        name: Deadpoolio\n        tags:\n        - x-force\n        - x-men\n        - x-avengers\n        - sneaky: object\n        \"\"\"\n    response = client.post(\"/items/\", content=yaml_data)\n    assert response.status_code == 422, response.text\n    # insert_assert(response.json())\n    assert response.json() == {\n        \"detail\": [\n            {\n                \"type\": \"string_type\",\n                \"loc\": [\"tags\", 3],\n                \"msg\": \"Input should be a valid string\",\n                \"input\": {\"sneaky\": \"object\"},\n            }\n        ]\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial007.py",
    "type": "function",
    "name": "test_post_invalid",
    "loc": 47,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial007.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-yaml\": {\n                                \"schema\": {\n                                    \"title\": \"Item\",\n                                    \"required\": [\"name\", \"tags\"],\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                                        \"tags\": {\n                                            \"title\": \"Tags\",\n                                            \"type\": \"array\",\n                                            \"items\": {\"type\": \"string\"},\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial007.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 72,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial007_pv1.py:function:get_client:chunk1",
    "text": "def get_client():\n    from docs_src.path_operation_advanced_configuration.tutorial007_pv1 import app\n\n    client = TestClient(app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial007_pv1.py",
    "type": "function",
    "name": "get_client",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial007_pv1.py:function:test_post:chunk1",
    "text": "def test_post(client: TestClient):\n    yaml_data = \"\"\"\n        name: Deadpoolio\n        tags:\n        - x-force\n        - x-men\n        - x-avengers\n        \"\"\"\n    response = client.post(\"/items/\", content=yaml_data)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Deadpoolio\",\n        \"tags\": [\"x-force\", \"x-men\", \"x-avengers\"],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial007_pv1.py",
    "type": "function",
    "name": "test_post",
    "loc": 16,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial007_pv1.py:function:test_post_broken_yaml:chunk1",
    "text": "def test_post_broken_yaml(client: TestClient):\n    yaml_data = \"\"\"\n        name: Deadpoolio\n        tags:\n        x - x-force\n        x - x-men\n        x - x-avengers\n        \"\"\"\n    response = client.post(\"/items/\", content=yaml_data)\n    assert response.status_code == 422, response.text\n    assert response.json() == {\"detail\": \"Invalid YAML\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial007_pv1.py",
    "type": "function",
    "name": "test_post_broken_yaml",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial007_pv1.py:function:test_post_invalid:chunk1",
    "text": "def test_post_invalid(client: TestClient):\n    yaml_data = \"\"\"\n        name: Deadpoolio\n        tags:\n        - x-force\n        - x-men\n        - x-avengers\n        - sneaky: object\n        \"\"\"\n    response = client.post(\"/items/\", content=yaml_data)\n    assert response.status_code == 422, response.text\n    assert response.json() == {\n        \"detail\": [\n            {\"loc\": [\"tags\", 3], \"msg\": \"str type expected\", \"type\": \"type_error.str\"}\n        ]\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial007_pv1.py",
    "type": "function",
    "name": "test_post_invalid",
    "loc": 47,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial007_pv1.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-yaml\": {\n                                \"schema\": {\n                                    \"title\": \"Item\",\n                                    \"required\": [\"name\", \"tags\"],\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                                        \"tags\": {\n                                            \"title\": \"Tags\",\n                                            \"type\": \"array\",\n                                            \"items\": {\"type\": \"string\"},\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_advanced_configurations\\test_tutorial007_pv1.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 66,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_configurations\\test_tutorial002b.py:function:test_get_items:chunk1",
    "text": "def test_get_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\"Portal gun\", \"Plumbus\"]",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_configurations\\test_tutorial002b.py",
    "type": "function",
    "name": "test_get_items",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_configurations\\test_tutorial002b.py:function:test_get_users:chunk1",
    "text": "def test_get_users():\n    response = client.get(\"/users/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\"Rick\", \"Morty\"]",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_configurations\\test_tutorial002b.py",
    "type": "function",
    "name": "test_get_users",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_configurations\\test_tutorial002b.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"tags\": [\"items\"],\n                    \"summary\": \"Get Items\",\n                    \"operationId\": \"get_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/users/\": {\n                \"get\": {\n                    \"tags\": [\"users\"],\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_configurations\\test_tutorial002b.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_configurations\\test_tutorial005.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(\n        f\"docs_src.path_operation_configuration.{request.param}\"\n    )\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_configurations\\test_tutorial005.py",
    "type": "function",
    "name": "get_client",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_configurations\\test_tutorial005.py:function:test_query_params_str_validations:chunk1",
    "text": "def test_query_params_str_validations(client: TestClient):\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"price\": 42,\n        \"description\": None,\n        \"tax\": None,\n        \"tags\": [],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_configurations\\test_tutorial005.py",
    "type": "function",
    "name": "test_query_params_str_validations",
    "loc": 26,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_configurations\\test_tutorial005.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"The created item\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create an item\",\n                    \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\n                            \"title\": \"Description\",\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                        },\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": {\n                            \"title\": \"Tax\",\n                            \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                        },\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"uniqueItems\": True,\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_configurations\\test_tutorial005.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 39,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_configurations\\test_tutorial005.py:function:test_openapi_schema_pv1:chunk1",
    "text": "def test_openapi_schema_pv1(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"The created item\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create an item\",\n                    \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"uniqueItems\": True,\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_configurations\\test_tutorial005.py",
    "type": "function",
    "name": "test_openapi_schema_pv1",
    "loc": 142,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_configurations\\test_tutorial006.py:function:test_query_params_str_validations:chunk1",
    "text": "def test_query_params_str_validations(path, expected_status, expected_response):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_configurations\\test_tutorial006.py",
    "type": "function",
    "name": "test_query_params_str_validations",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_operation_configurations\\test_tutorial006.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"tags\": [\"items\"],\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                }\n            },\n            \"/users/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"tags\": [\"users\"],\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                }\n            },\n            \"/elements/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"tags\": [\"items\"],\n                    \"summary\": \"Read Elements\",\n                    \"operationId\": \"read_elements_elements__get\",\n                    \"deprecated\": True,\n                }\n            },\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_operation_configurations\\test_tutorial006.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 23,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_params\\test_tutorial004.py:function:test_file_path:chunk1",
    "text": "def test_file_path():\n    response = client.get(\"/files/home/johndoe/myfile.txt\")\n    print(response.content)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_path\": \"home/johndoe/myfile.txt\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_params\\test_tutorial004.py",
    "type": "function",
    "name": "test_file_path",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_params\\test_tutorial004.py:function:test_root_file_path:chunk1",
    "text": "def test_root_file_path():\n    response = client.get(\"/files//home/johndoe/myfile.txt\")\n    print(response.content)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_path\": \"/home/johndoe/myfile.txt\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_params\\test_tutorial004.py",
    "type": "function",
    "name": "test_root_file_path",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_params\\test_tutorial004.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/{file_path}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read File\",\n                    \"operationId\": \"read_file_files__file_path__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"File Path\", \"type\": \"string\"},\n                            \"name\": \"file_path\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_params\\test_tutorial004.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_params\\test_tutorial005.py:function:test_get_enums_alexnet:chunk1",
    "text": "def test_get_enums_alexnet():\n    response = client.get(\"/models/alexnet\")\n    assert response.status_code == 200\n    assert response.json() == {\"model_name\": \"alexnet\", \"message\": \"Deep Learning FTW!\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_params\\test_tutorial005.py",
    "type": "function",
    "name": "test_get_enums_alexnet",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_params\\test_tutorial005.py:function:test_get_enums_lenet:chunk1",
    "text": "def test_get_enums_lenet():\n    response = client.get(\"/models/lenet\")\n    assert response.status_code == 200\n    assert response.json() == {\"model_name\": \"lenet\", \"message\": \"LeCNN all the images\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_params\\test_tutorial005.py",
    "type": "function",
    "name": "test_get_enums_lenet",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_params\\test_tutorial005.py:function:test_get_enums_resnet:chunk1",
    "text": "def test_get_enums_resnet():\n    response = client.get(\"/models/resnet\")\n    assert response.status_code == 200\n    assert response.json() == {\"model_name\": \"resnet\", \"message\": \"Have some residuals\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_params\\test_tutorial005.py",
    "type": "function",
    "name": "test_get_enums_resnet",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_params\\test_tutorial005.py:function:test_get_enums_invalid:chunk1",
    "text": "def test_get_enums_invalid():\n    response = client.get(\"/models/foo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"enum\",\n                    \"loc\": [\"path\", \"model_name\"],\n                    \"msg\": \"Input should be 'alexnet', 'resnet' or 'lenet'\",\n                    \"input\": \"foo\",\n                    \"ctx\": {\"expected\": \"'alexnet', 'resnet' or 'lenet'\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"ctx\": {\"enum_values\": [\"alexnet\", \"resnet\", \"lenet\"]},\n                    \"loc\": [\"path\", \"model_name\"],\n                    \"msg\": \"value is not a valid enumeration member; permitted: 'alexnet', 'resnet', 'lenet'\",\n                    \"type\": \"type_error.enum\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_params\\test_tutorial005.py",
    "type": "function",
    "name": "test_get_enums_invalid",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_path_params\\test_tutorial005.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert data == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/models/{model_name}\": {\n                \"get\": {\n                    \"summary\": \"Get Model\",\n                    \"operationId\": \"get_model_models__model_name__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"$ref\": \"#/components/schemas/ModelName\"},\n                            \"name\": \"model_name\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ModelName\": IsDict(\n                    {\n                        \"title\": \"ModelName\",\n                        \"enum\": [\"alexnet\", \"resnet\", \"lenet\"],\n                        \"type\": \"string\",\n                    }\n                )\n                | IsDict(\n                    {\n                        # TODO: remove when deprecating Pydantic v1\n                        \"title\": \"ModelName\",\n                        \"enum\": [\"alexnet\", \"resnet\", \"lenet\"],\n                        \"type\": \"string\",\n                        \"description\": \"An enumeration.\",\n                    }\n                ),\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_path_params\\test_tutorial005.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 57,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params\\test_tutorial005.py:function:test_foo_needy_very:chunk1",
    "text": "def test_foo_needy_very():\n    response = client.get(\"/items/foo?needy=very\")\n    assert response.status_code == 200\n    assert response.json() == {\"item_id\": \"foo\", \"needy\": \"very\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params\\test_tutorial005.py",
    "type": "function",
    "name": "test_foo_needy_very",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params\\test_tutorial005.py:function:test_foo_no_needy:chunk1",
    "text": "def test_foo_no_needy():\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"needy\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"needy\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params\\test_tutorial005.py",
    "type": "function",
    "name": "test_foo_no_needy",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params\\test_tutorial005.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read User Item\",\n                    \"operationId\": \"read_user_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Needy\", \"type\": \"string\"},\n                            \"name\": \"needy\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params\\test_tutorial005.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 43,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params\\test_tutorial006.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.query_params.{request.param}\")\n\n    c = TestClient(mod.app)\n    return c",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params\\test_tutorial006.py",
    "type": "function",
    "name": "get_client",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params\\test_tutorial006.py:function:test_foo_needy_very:chunk1",
    "text": "def test_foo_needy_very(client: TestClient):\n    response = client.get(\"/items/foo?needy=very\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": \"foo\",\n        \"needy\": \"very\",\n        \"skip\": 0,\n        \"limit\": None,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params\\test_tutorial006.py",
    "type": "function",
    "name": "test_foo_needy_very",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params\\test_tutorial006.py:function:test_foo_no_needy:chunk1",
    "text": "def test_foo_no_needy(client: TestClient):\n    response = client.get(\"/items/foo?skip=a&limit=b\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"needy\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"query\", \"skip\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"a\",\n                },\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"query\", \"limit\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"b\",\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"needy\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"query\", \"skip\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                },\n                {\n                    \"loc\": [\"query\", \"limit\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params\\test_tutorial006.py",
    "type": "function",
    "name": "test_foo_no_needy",
    "loc": 35,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params\\test_tutorial006.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read User Item\",\n                    \"operationId\": \"read_user_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Needy\", \"type\": \"string\"},\n                            \"name\": \"needy\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Limit\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Limit\", \"type\": \"integer\"}\n                            ),\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params\\test_tutorial006.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 85,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial010.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(\n        f\"docs_src.query_params_str_validations.{request.param}\"\n    )\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial010.py",
    "type": "function",
    "name": "get_client",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial010.py:function:test_query_params_str_validations_no_query:chunk1",
    "text": "def test_query_params_str_validations_no_query(client: TestClient):\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial010.py",
    "type": "function",
    "name": "test_query_params_str_validations_no_query",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial010.py:function:test_query_params_str_validations_item_query_fixedquery:chunk1",
    "text": "def test_query_params_str_validations_item_query_fixedquery(client: TestClient):\n    response = client.get(\"/items/\", params={\"item-query\": \"fixedquery\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}],\n        \"q\": \"fixedquery\",\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial010.py",
    "type": "function",
    "name": "test_query_params_str_validations_item_query_fixedquery",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial010.py:function:test_query_params_str_validations_q_fixedquery:chunk1",
    "text": "def test_query_params_str_validations_q_fixedquery(client: TestClient):\n    response = client.get(\"/items/\", params={\"q\": \"fixedquery\"})\n    assert response.status_code == 200\n    assert response.json() == {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial010.py",
    "type": "function",
    "name": "test_query_params_str_validations_q_fixedquery",
    "loc": 45,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial010.py:function:test_query_params_str_validations_item_query_nonregexquery:chunk1",
    "text": "def test_query_params_str_validations_item_query_nonregexquery(client: TestClient):\n    response = client.get(\"/items/\", params={\"item-query\": \"nonregexquery\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_pattern_mismatch\",\n                    \"loc\": [\"query\", \"item-query\"],\n                    \"msg\": \"String should match pattern '^fixedquery$'\",\n                    \"input\": \"nonregexquery\",\n                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n                    \"loc\": [\"query\", \"item-query\"],\n                    \"msg\": 'string does not match regex \"^fixedquery$\"',\n                    \"type\": \"value_error.str.regex\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial010.py",
    "type": "function",
    "name": "test_query_params_str_validations_item_query_nonregexquery",
    "loc": 51,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial010.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"description\": \"Query string for the items to search in the database that have a good match\",\n                            \"required\": False,\n                            \"deprecated\": True,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [\n                                        {\n                                            \"type\": \"string\",\n                                            \"minLength\": 3,\n                                            \"maxLength\": 50,\n                                            \"pattern\": \"^fixedquery$\",\n                                        },\n                                        {\"type\": \"null\"},\n                                    ],\n                                    \"title\": \"Query string\",\n                                    \"description\": \"Query string for the items to search in the database that have a good match\",\n                                    # See https://github.com/pydantic/pydantic/blob/80353c29a824c55dea4667b328ba8f329879ac9f/tests/test_fastapi.sh#L25-L34.\n                                    **(\n                                        {\"deprecated\": True}\n                                        if PYDANTIC_VERSION_MINOR_TUPLE >= (2, 10)\n                                        else {}\n                                    ),\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Query string\",\n                                    \"maxLength\": 50,\n                                    \"minLength\": 3,\n                                    \"pattern\": \"^fixedquery$\",\n                                    \"type\": \"string\",\n                                    \"description\": \"Query string for the items to search in the database that have a good match\",\n                                }\n                            ),\n                            \"name\": \"item-query\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial010.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 81,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial011.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(\n        f\"docs_src.query_params_str_validations.{request.param}\"\n    )\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial011.py",
    "type": "function",
    "name": "get_client",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial011.py:function:test_multi_query_values:chunk1",
    "text": "def test_multi_query_values(client: TestClient):\n    url = \"/items/?q=foo&q=bar\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [\"foo\", \"bar\"]}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial011.py",
    "type": "function",
    "name": "test_multi_query_values",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial011.py:function:test_query_no_values:chunk1",
    "text": "def test_query_no_values(client: TestClient):\n    url = \"/items/\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": None}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial011.py",
    "type": "function",
    "name": "test_query_no_values",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial011.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [\n                                        {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n                                        {\"type\": \"null\"},\n                                    ],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Q\",\n                                    \"type\": \"array\",\n                                    \"items\": {\"type\": \"string\"},\n                                }\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial011.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 44,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial012.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(\n        f\"docs_src.query_params_str_validations.{request.param}\"\n    )\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial012.py",
    "type": "function",
    "name": "get_client",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial012.py:function:test_default_query_values:chunk1",
    "text": "def test_default_query_values(client: TestClient):\n    url = \"/items/\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [\"foo\", \"bar\"]}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial012.py",
    "type": "function",
    "name": "test_default_query_values",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial012.py:function:test_multi_query_values:chunk1",
    "text": "def test_multi_query_values(client: TestClient):\n    url = \"/items/?q=baz&q=foobar\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [\"baz\", \"foobar\"]}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial012.py",
    "type": "function",
    "name": "test_multi_query_values",
    "loc": 34,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial012.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Q\",\n                                \"type\": \"array\",\n                                \"items\": {\"type\": \"string\"},\n                                \"default\": [\"foo\", \"bar\"],\n                            },\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial012.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 41,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial013.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(\n        f\"docs_src.query_params_str_validations.{request.param}\"\n    )\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial013.py",
    "type": "function",
    "name": "get_client",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial013.py:function:test_multi_query_values:chunk1",
    "text": "def test_multi_query_values(client: TestClient):\n    url = \"/items/?q=foo&q=bar\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [\"foo\", \"bar\"]}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial013.py",
    "type": "function",
    "name": "test_multi_query_values",
    "loc": 26,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial013.py:function:test_query_no_values:chunk1",
    "text": "def test_query_no_values(client: TestClient):\n    url = \"/items/\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": []}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial013.py",
    "type": "function",
    "name": "test_query_no_values",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial013.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Q\",\n                                \"type\": \"array\",\n                                \"items\": {},\n                                \"default\": [],\n                            },\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial013.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial014.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(\n        f\"docs_src.query_params_str_validations.{request.param}\"\n    )\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial014.py",
    "type": "function",
    "name": "get_client",
    "loc": 19,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial014.py:function:test_hidden_query:chunk1",
    "text": "def test_hidden_query(client: TestClient):\n    response = client.get(\"/items?hidden_query=somevalue\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"hidden_query\": \"somevalue\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial014.py",
    "type": "function",
    "name": "test_hidden_query",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial014.py:function:test_no_hidden_query:chunk1",
    "text": "def test_no_hidden_query(client: TestClient):\n    response = client.get(\"/items\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"hidden_query\": \"Not found\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial014.py",
    "type": "function",
    "name": "test_no_hidden_query",
    "loc": 34,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial014.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_params_str_validations\\test_tutorial014.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_param_models\\test_tutorial001.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.query_param_models.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_param_models\\test_tutorial001.py",
    "type": "function",
    "name": "get_client",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_param_models\\test_tutorial001.py:function:test_query_param_model:chunk1",
    "text": "def test_query_param_model(client: TestClient):\n    response = client.get(\n        \"/items/\",\n        params={\n            \"limit\": 10,\n            \"offset\": 5,\n            \"order_by\": \"updated_at\",\n            \"tags\": [\"tag1\", \"tag2\"],\n        },\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"limit\": 10,\n        \"offset\": 5,\n        \"order_by\": \"updated_at\",\n        \"tags\": [\"tag1\", \"tag2\"],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_param_models\\test_tutorial001.py",
    "type": "function",
    "name": "test_query_param_model",
    "loc": 29,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_param_models\\test_tutorial001.py:function:test_query_param_model_defaults:chunk1",
    "text": "def test_query_param_model_defaults(client: TestClient):\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"limit\": 100,\n        \"offset\": 0,\n        \"order_by\": \"created_at\",\n        \"tags\": [],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_param_models\\test_tutorial001.py",
    "type": "function",
    "name": "test_query_param_model_defaults",
    "loc": 48,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_param_models\\test_tutorial001.py:function:test_query_param_model_invalid:chunk1",
    "text": "def test_query_param_model_invalid(client: TestClient):\n    response = client.get(\n        \"/items/\",\n        params={\n            \"limit\": 150,\n            \"offset\": -1,\n            \"order_by\": \"invalid\",\n        },\n    )\n    assert response.status_code == 422\n    assert response.json() == snapshot(\n        IsDict(\n            {\n                \"detail\": [\n                    {\n                        \"type\": \"less_than_equal\",\n                        \"loc\": [\"query\", \"limit\"],\n                        \"msg\": \"Input should be less than or equal to 100\",\n                        \"input\": \"150\",\n                        \"ctx\": {\"le\": 100},\n                    },\n                    {\n                        \"type\": \"greater_than_equal\",\n                        \"loc\": [\"query\", \"offset\"],\n                        \"msg\": \"Input should be greater than or equal to 0\",\n                        \"input\": \"-1\",\n                        \"ctx\": {\"ge\": 0},\n                    },\n                    {\n                        \"type\": \"literal_error\",\n                        \"loc\": [\"query\", \"order_by\"],\n                        \"msg\": \"Input should be 'created_at' or 'updated_at'\",\n                        \"input\": \"invalid\",\n                        \"ctx\": {\"expected\": \"'created_at' or 'updated_at'\"},\n                    },\n                ]\n            }\n        )\n        | IsDict(\n            # TODO: remove when deprecating Pydantic v1\n            {\n                \"detail\": [\n                    {\n                        \"type\": \"value_error.number.not_le\",\n                        \"loc\": [\"query\", \"limit\"],\n                        \"msg\": \"ensure this value is less than or equal to 100\",\n                        \"ctx\": {\"limit_value\": 100},\n                    },\n                    {\n                        \"type\": \"value_error.number.not_ge\",\n                        \"loc\": [\"query\", \"offset\"],\n                        \"msg\": \"ensure this value is greater than or equal to 0\",\n                        \"ctx\": {\"limit_value\": 0},\n                    },\n                    {\n                        \"type\": \"value_error.const\",\n                        \"loc\": [\"query\", \"order_by\"],\n                        \"msg\": \"unexpected value; permitted: 'created_at', 'updated_at'\",\n                        \"ctx\": {\n                            \"given\": \"invalid\",\n                            \"permitted\": [\"created_at\", \"updated_at\"],\n                        },\n                    },\n                ]\n            }\n        )\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_param_models\\test_tutorial001.py",
    "type": "function",
    "name": "test_query_param_model_invalid",
    "loc": 59,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_param_models\\test_tutorial001.py:function:test_query_param_model_extra:chunk1",
    "text": "def test_query_param_model_extra(client: TestClient):\n    response = client.get(\n        \"/items/\",\n        params={\n            \"limit\": 10,\n            \"offset\": 5,\n            \"order_by\": \"updated_at\",\n            \"tags\": [\"tag1\", \"tag2\"],\n            \"tool\": \"plumbus\",\n        },\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"limit\": 10,\n        \"offset\": 5,\n        \"order_by\": \"updated_at\",\n        \"tags\": [\"tag1\", \"tag2\"],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_param_models\\test_tutorial001.py",
    "type": "function",
    "name": "test_query_param_model_extra",
    "loc": 128,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_param_models\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == snapshot(\n        {\n            \"openapi\": \"3.1.0\",\n            \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n            \"paths\": {\n                \"/items/\": {\n                    \"get\": {\n                        \"summary\": \"Read Items\",\n                        \"operationId\": \"read_items_items__get\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"limit\",\n                                \"in\": \"query\",\n                                \"required\": False,\n                                \"schema\": {\n                                    \"type\": \"integer\",\n                                    \"maximum\": 100,\n                                    \"exclusiveMinimum\": 0,\n                                    \"default\": 100,\n                                    \"title\": \"Limit\",\n                                },\n                            },\n                            {\n                                \"name\": \"offset\",\n                                \"in\": \"query\",\n                                \"required\": False,\n                                \"schema\": {\n                                    \"type\": \"integer\",\n                                    \"minimum\": 0,\n                                    \"default\": 0,\n                                    \"title\": \"Offset\",\n                                },\n                            },\n                            {\n                                \"name\": \"order_by\",\n                                \"in\": \"query\",\n                                \"required\": False,\n                                \"schema\": {\n                                    \"enum\": [\"created_at\", \"updated_at\"],\n                                    \"type\": \"string\",\n                                    \"default\": \"created_at\",\n                                    \"title\": \"Order By\",\n                                },\n                            },\n                            {\n                                \"name\": \"tags\",\n                                \"in\": \"query\",\n                                \"required\": False,\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\"type\": \"string\"},\n                                    \"default\": [],\n                                    \"title\": \"Tags\",\n                                },\n                            },\n                        ],\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\"application/json\": {\"schema\": {}}},\n                            },\n                            \"422\": {\n                                \"description\": \"Validation Error\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                        }\n                                    }\n                                },\n                            },\n                        },\n                    }\n                }\n            },\n            \"components\": {\n                \"schemas\": {\n                    \"HTTPValidationError\": {\n                        \"properties\": {\n                            \"detail\": {\n                                \"items\": {\n                                    \"$ref\": \"#/components/schemas/ValidationError\"\n                                },\n                                \"type\": \"array\",\n                                \"title\": \"Detail\",\n                            }\n                        },\n                        \"type\": \"object\",\n                        \"title\": \"HTTPValidationError\",\n                    },\n                    \"ValidationError\": {\n                        \"properties\": {\n                            \"loc\": {\n                                \"items\": {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                                },\n                                \"type\": \"array\",\n                                \"title\": \"Location\",\n                            },\n                            \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                            \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                        },\n                        \"type\": \"object\",\n                        \"required\": [\"loc\", \"msg\", \"type\"],\n                        \"title\": \"ValidationError\",\n                    },\n                }\n            },\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_param_models\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 148,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_param_models\\test_tutorial002.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.query_param_models.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_param_models\\test_tutorial002.py",
    "type": "function",
    "name": "get_client",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_param_models\\test_tutorial002.py:function:test_query_param_model:chunk1",
    "text": "def test_query_param_model(client: TestClient):\n    response = client.get(\n        \"/items/\",\n        params={\n            \"limit\": 10,\n            \"offset\": 5,\n            \"order_by\": \"updated_at\",\n            \"tags\": [\"tag1\", \"tag2\"],\n        },\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"limit\": 10,\n        \"offset\": 5,\n        \"order_by\": \"updated_at\",\n        \"tags\": [\"tag1\", \"tag2\"],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_param_models\\test_tutorial002.py",
    "type": "function",
    "name": "test_query_param_model",
    "loc": 35,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_param_models\\test_tutorial002.py:function:test_query_param_model_defaults:chunk1",
    "text": "def test_query_param_model_defaults(client: TestClient):\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"limit\": 100,\n        \"offset\": 0,\n        \"order_by\": \"created_at\",\n        \"tags\": [],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_param_models\\test_tutorial002.py",
    "type": "function",
    "name": "test_query_param_model_defaults",
    "loc": 54,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_param_models\\test_tutorial002.py:function:test_query_param_model_invalid:chunk1",
    "text": "def test_query_param_model_invalid(client: TestClient):\n    response = client.get(\n        \"/items/\",\n        params={\n            \"limit\": 150,\n            \"offset\": -1,\n            \"order_by\": \"invalid\",\n        },\n    )\n    assert response.status_code == 422\n    assert response.json() == snapshot(\n        IsDict(\n            {\n                \"detail\": [\n                    {\n                        \"type\": \"less_than_equal\",\n                        \"loc\": [\"query\", \"limit\"],\n                        \"msg\": \"Input should be less than or equal to 100\",\n                        \"input\": \"150\",\n                        \"ctx\": {\"le\": 100},\n                    },\n                    {\n                        \"type\": \"greater_than_equal\",\n                        \"loc\": [\"query\", \"offset\"],\n                        \"msg\": \"Input should be greater than or equal to 0\",\n                        \"input\": \"-1\",\n                        \"ctx\": {\"ge\": 0},\n                    },\n                    {\n                        \"type\": \"literal_error\",\n                        \"loc\": [\"query\", \"order_by\"],\n                        \"msg\": \"Input should be 'created_at' or 'updated_at'\",\n                        \"input\": \"invalid\",\n                        \"ctx\": {\"expected\": \"'created_at' or 'updated_at'\"},\n                    },\n                ]\n            }\n        )\n        | IsDict(\n            # TODO: remove when deprecating Pydantic v1\n            {\n                \"detail\": [\n                    {\n                        \"type\": \"value_error.number.not_le\",\n                        \"loc\": [\"query\", \"limit\"],\n                        \"msg\": \"ensure this value is less than or equal to 100\",\n                        \"ctx\": {\"limit_value\": 100},\n                    },\n                    {\n                        \"type\": \"value_error.number.not_ge\",\n                        \"loc\": [\"query\", \"offset\"],\n                        \"msg\": \"ensure this value is greater than or equal to 0\",\n                        \"ctx\": {\"limit_value\": 0},\n                    },\n                    {\n                        \"type\": \"value_error.const\",\n                        \"loc\": [\"query\", \"order_by\"],\n                        \"msg\": \"unexpected value; permitted: 'created_at', 'updated_at'\",\n                        \"ctx\": {\n                            \"given\": \"invalid\",\n                            \"permitted\": [\"created_at\", \"updated_at\"],\n                        },\n                    },\n                ]\n            }\n        )\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_param_models\\test_tutorial002.py",
    "type": "function",
    "name": "test_query_param_model_invalid",
    "loc": 65,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_param_models\\test_tutorial002.py:function:test_query_param_model_extra:chunk1",
    "text": "def test_query_param_model_extra(client: TestClient):\n    response = client.get(\n        \"/items/\",\n        params={\n            \"limit\": 10,\n            \"offset\": 5,\n            \"order_by\": \"updated_at\",\n            \"tags\": [\"tag1\", \"tag2\"],\n            \"tool\": \"plumbus\",\n        },\n    )\n    assert response.status_code == 422\n    assert response.json() == snapshot(\n        {\n            \"detail\": [\n                IsDict(\n                    {\n                        \"type\": \"extra_forbidden\",\n                        \"loc\": [\"query\", \"tool\"],\n                        \"msg\": \"Extra inputs are not permitted\",\n                        \"input\": \"plumbus\",\n                    }\n                )\n                | IsDict(\n                    # TODO: remove when deprecating Pydantic v1\n                    {\n                        \"type\": \"value_error.extra\",\n                        \"loc\": [\"query\", \"tool\"],\n                        \"msg\": \"extra fields not permitted\",\n                    }\n                )\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_param_models\\test_tutorial002.py",
    "type": "function",
    "name": "test_query_param_model_extra",
    "loc": 134,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_query_param_models\\test_tutorial002.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == snapshot(\n        {\n            \"openapi\": \"3.1.0\",\n            \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n            \"paths\": {\n                \"/items/\": {\n                    \"get\": {\n                        \"summary\": \"Read Items\",\n                        \"operationId\": \"read_items_items__get\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"limit\",\n                                \"in\": \"query\",\n                                \"required\": False,\n                                \"schema\": {\n                                    \"type\": \"integer\",\n                                    \"maximum\": 100,\n                                    \"exclusiveMinimum\": 0,\n                                    \"default\": 100,\n                                    \"title\": \"Limit\",\n                                },\n                            },\n                            {\n                                \"name\": \"offset\",\n                                \"in\": \"query\",\n                                \"required\": False,\n                                \"schema\": {\n                                    \"type\": \"integer\",\n                                    \"minimum\": 0,\n                                    \"default\": 0,\n                                    \"title\": \"Offset\",\n                                },\n                            },\n                            {\n                                \"name\": \"order_by\",\n                                \"in\": \"query\",\n                                \"required\": False,\n                                \"schema\": {\n                                    \"enum\": [\"created_at\", \"updated_at\"],\n                                    \"type\": \"string\",\n                                    \"default\": \"created_at\",\n                                    \"title\": \"Order By\",\n                                },\n                            },\n                            {\n                                \"name\": \"tags\",\n                                \"in\": \"query\",\n                                \"required\": False,\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\"type\": \"string\"},\n                                    \"default\": [],\n                                    \"title\": \"Tags\",\n                                },\n                            },\n                        ],\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\"application/json\": {\"schema\": {}}},\n                            },\n                            \"422\": {\n                                \"description\": \"Validation Error\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                        }\n                                    }\n                                },\n                            },\n                        },\n                    }\n                }\n            },\n            \"components\": {\n                \"schemas\": {\n                    \"HTTPValidationError\": {\n                        \"properties\": {\n                            \"detail\": {\n                                \"items\": {\n                                    \"$ref\": \"#/components/schemas/ValidationError\"\n                                },\n                                \"type\": \"array\",\n                                \"title\": \"Detail\",\n                            }\n                        },\n                        \"type\": \"object\",\n                        \"title\": \"HTTPValidationError\",\n                    },\n                    \"ValidationError\": {\n                        \"properties\": {\n                            \"loc\": {\n                                \"items\": {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                                },\n                                \"type\": \"array\",\n                                \"title\": \"Location\",\n                            },\n                            \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                            \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                        },\n                        \"type\": \"object\",\n                        \"required\": [\"loc\", \"msg\", \"type\"],\n                        \"title\": \"ValidationError\",\n                    },\n                }\n            },\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_query_param_models\\test_tutorial002.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 170,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial001.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.request_files.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial001.py",
    "type": "function",
    "name": "get_client",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial001.py:function:test_post_form_no_body:chunk1",
    "text": "def test_post_form_no_body(client: TestClient):\n    response = client.post(\"/files/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_form_no_body",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial001.py:function:test_post_body_json:chunk1",
    "text": "def test_post_body_json(client: TestClient):\n    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_body_json",
    "loc": 53,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial001.py:function:test_post_file:chunk1",
    "text": "def test_post_file(tmp_path, client: TestClient):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    with path.open(\"rb\") as file:\n        response = client.post(\"/files/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_size\": 14}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_file",
    "loc": 81,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial001.py:function:test_post_large_file:chunk1",
    "text": "def test_post_large_file(tmp_path, client: TestClient):\n    default_pydantic_max_size = 2**16\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"x\" * (default_pydantic_max_size + 1))\n\n    with path.open(\"rb\") as file:\n        response = client.post(\"/files/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_size\": default_pydantic_max_size + 1}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_large_file",
    "loc": 91,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial001.py:function:test_post_upload_file:chunk1",
    "text": "def test_post_upload_file(tmp_path, client: TestClient):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    with path.open(\"rb\") as file:\n        response = client.post(\"/uploadfile/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filename\": \"test.txt\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_upload_file",
    "loc": 102,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create File\",\n                    \"operationId\": \"create_file_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/uploadfile/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Upload File\",\n                    \"operationId\": \"create_upload_file_uploadfile__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_upload_file_uploadfile__post\": {\n                    \"title\": \"Body_create_upload_file_uploadfile__post\",\n                    \"required\": [\"file\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n                    },\n                },\n                \"Body_create_file_files__post\": {\n                    \"title\": \"Body_create_file_files__post\",\n                    \"required\": [\"file\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 112,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial001_02.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.request_files.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial001_02.py",
    "type": "function",
    "name": "get_client",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial001_02.py:function:test_post_form_no_body:chunk1",
    "text": "def test_post_form_no_body(client: TestClient):\n    response = client.post(\"/files/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"No file sent\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial001_02.py",
    "type": "function",
    "name": "test_post_form_no_body",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial001_02.py:function:test_post_uploadfile_no_body:chunk1",
    "text": "def test_post_uploadfile_no_body(client: TestClient):\n    response = client.post(\"/uploadfile/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"No upload file sent\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial001_02.py",
    "type": "function",
    "name": "test_post_uploadfile_no_body",
    "loc": 34,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial001_02.py:function:test_post_file:chunk1",
    "text": "def test_post_file(tmp_path: Path, client: TestClient):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    with path.open(\"rb\") as file:\n        response = client.post(\"/files/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_size\": 14}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial001_02.py",
    "type": "function",
    "name": "test_post_file",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial001_02.py:function:test_post_upload_file:chunk1",
    "text": "def test_post_upload_file(tmp_path: Path, client: TestClient):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    with path.open(\"rb\") as file:\n        response = client.post(\"/uploadfile/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filename\": \"test.txt\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial001_02.py",
    "type": "function",
    "name": "test_post_upload_file",
    "loc": 50,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial001_02.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"summary\": \"Create File\",\n                    \"operationId\": \"create_file_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                            }\n                                        ],\n                                        \"title\": \"Body\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                    }\n                                )\n                            }\n                        }\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/uploadfile/\": {\n                \"post\": {\n                    \"summary\": \"Create Upload File\",\n                    \"operationId\": \"create_upload_file_uploadfile__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n                                            }\n                                        ],\n                                        \"title\": \"Body\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n                                    }\n                                )\n                            }\n                        }\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_file_files__post\": {\n                    \"title\": \"Body_create_file_files__post\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": IsDict(\n                            {\n                                \"title\": \"File\",\n                                \"anyOf\": [\n                                    {\"type\": \"string\", \"format\": \"binary\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n                        )\n                    },\n                },\n                \"Body_create_upload_file_uploadfile__post\": {\n                    \"title\": \"Body_create_upload_file_uploadfile__post\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": IsDict(\n                            {\n                                \"title\": \"File\",\n                                \"anyOf\": [\n                                    {\"type\": \"string\", \"format\": \"binary\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n                        )\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial001_02.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 60,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial001_03.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.request_files.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial001_03.py",
    "type": "function",
    "name": "get_client",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial001_03.py:function:test_post_file:chunk1",
    "text": "def test_post_file(tmp_path, client: TestClient):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    with path.open(\"rb\") as file:\n        response = client.post(\"/files/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_size\": 14}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial001_03.py",
    "type": "function",
    "name": "test_post_file",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial001_03.py:function:test_post_upload_file:chunk1",
    "text": "def test_post_upload_file(tmp_path, client: TestClient):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    with path.open(\"rb\") as file:\n        response = client.post(\"/uploadfile/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filename\": \"test.txt\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial001_03.py",
    "type": "function",
    "name": "test_post_upload_file",
    "loc": 34,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial001_03.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"summary\": \"Create File\",\n                    \"operationId\": \"create_file_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/uploadfile/\": {\n                \"post\": {\n                    \"summary\": \"Create Upload File\",\n                    \"operationId\": \"create_upload_file_uploadfile__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_file_files__post\": {\n                    \"title\": \"Body_create_file_files__post\",\n                    \"required\": [\"file\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": {\n                            \"title\": \"File\",\n                            \"type\": \"string\",\n                            \"description\": \"A file read as bytes\",\n                            \"format\": \"binary\",\n                        }\n                    },\n                },\n                \"Body_create_upload_file_uploadfile__post\": {\n                    \"title\": \"Body_create_upload_file_uploadfile__post\",\n                    \"required\": [\"file\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": {\n                            \"title\": \"File\",\n                            \"type\": \"string\",\n                            \"description\": \"A file read as UploadFile\",\n                            \"format\": \"binary\",\n                        }\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial001_03.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 44,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial002.py:function:get_app:chunk1",
    "text": "def get_app(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.request_files.{request.param}\")\n\n    return mod.app",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial002.py",
    "type": "function",
    "name": "get_app",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial002.py:function:get_client:chunk1",
    "text": "def get_client(app: FastAPI):\n    client = TestClient(app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial002.py",
    "type": "function",
    "name": "get_client",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial002.py:function:test_post_form_no_body:chunk1",
    "text": "def test_post_form_no_body(client: TestClient):\n    response = client.post(\"/files/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"files\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"files\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial002.py",
    "type": "function",
    "name": "test_post_form_no_body",
    "loc": 32,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial002.py:function:test_post_body_json:chunk1",
    "text": "def test_post_body_json(client: TestClient):\n    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"files\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"files\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial002.py",
    "type": "function",
    "name": "test_post_body_json",
    "loc": 60,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial002.py:function:test_post_files:chunk1",
    "text": "def test_post_files(tmp_path, app: FastAPI):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n    path2 = tmp_path / \"test2.txt\"\n    path2.write_bytes(b\"<file content2>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n        response = client.post(\n            \"/files/\",\n            files=(\n                (\"files\", (\"test.txt\", file)),\n                (\"files\", (\"test2.txt\", file2)),\n            ),\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_sizes\": [14, 15]}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial002.py",
    "type": "function",
    "name": "test_post_files",
    "loc": 88,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial002.py:function:test_post_upload_file:chunk1",
    "text": "def test_post_upload_file(tmp_path, app: FastAPI):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n    path2 = tmp_path / \"test2.txt\"\n    path2.write_bytes(b\"<file content2>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n        response = client.post(\n            \"/uploadfiles/\",\n            files=(\n                (\"files\", (\"test.txt\", file)),\n                (\"files\", (\"test2.txt\", file2)),\n            ),\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial002.py",
    "type": "function",
    "name": "test_post_upload_file",
    "loc": 107,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial002.py:function:test_get_root:chunk1",
    "text": "def test_get_root(app: FastAPI):\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert b\"<form\" in response.content",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial002.py",
    "type": "function",
    "name": "test_get_root",
    "loc": 126,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial002.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Files\",\n                    \"operationId\": \"create_files_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_files_files__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/uploadfiles/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Upload Files\",\n                    \"operationId\": \"create_upload_files_uploadfiles__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_upload_files_uploadfiles__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Main\",\n                    \"operationId\": \"main__get\",\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_upload_files_uploadfiles__post\": {\n                    \"title\": \"Body_create_upload_files_uploadfiles__post\",\n                    \"required\": [\"files\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"files\": {\n                            \"title\": \"Files\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n                        }\n                    },\n                },\n                \"Body_create_files_files__post\": {\n                    \"title\": \"Body_create_files_files__post\",\n                    \"required\": [\"files\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"files\": {\n                            \"title\": \"Files\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial002.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 133,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial003.py:function:get_app:chunk1",
    "text": "def get_app(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.request_files.{request.param}\")\n\n    return mod.app",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial003.py",
    "type": "function",
    "name": "get_app",
    "loc": 19,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial003.py:function:get_client:chunk1",
    "text": "def get_client(app: FastAPI):\n    client = TestClient(app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial003.py",
    "type": "function",
    "name": "get_client",
    "loc": 26,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial003.py:function:test_post_files:chunk1",
    "text": "def test_post_files(tmp_path, app: FastAPI):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n    path2 = tmp_path / \"test2.txt\"\n    path2.write_bytes(b\"<file content2>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n        response = client.post(\n            \"/files/\",\n            files=(\n                (\"files\", (\"test.txt\", file)),\n                (\"files\", (\"test2.txt\", file2)),\n            ),\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_sizes\": [14, 15]}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial003.py",
    "type": "function",
    "name": "test_post_files",
    "loc": 31,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial003.py:function:test_post_upload_file:chunk1",
    "text": "def test_post_upload_file(tmp_path, app: FastAPI):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n    path2 = tmp_path / \"test2.txt\"\n    path2.write_bytes(b\"<file content2>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n        response = client.post(\n            \"/uploadfiles/\",\n            files=(\n                (\"files\", (\"test.txt\", file)),\n                (\"files\", (\"test2.txt\", file2)),\n            ),\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial003.py",
    "type": "function",
    "name": "test_post_upload_file",
    "loc": 50,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial003.py:function:test_get_root:chunk1",
    "text": "def test_get_root(app: FastAPI):\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert b\"<form\" in response.content",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial003.py",
    "type": "function",
    "name": "test_get_root",
    "loc": 69,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_files\\test_tutorial003.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"summary\": \"Create Files\",\n                    \"operationId\": \"create_files_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_files_files__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/uploadfiles/\": {\n                \"post\": {\n                    \"summary\": \"Create Upload Files\",\n                    \"operationId\": \"create_upload_files_uploadfiles__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_upload_files_uploadfiles__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/\": {\n                \"get\": {\n                    \"summary\": \"Main\",\n                    \"operationId\": \"main__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_files_files__post\": {\n                    \"title\": \"Body_create_files_files__post\",\n                    \"required\": [\"files\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"files\": {\n                            \"title\": \"Files\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n                            \"description\": \"Multiple files as bytes\",\n                        }\n                    },\n                },\n                \"Body_create_upload_files_uploadfiles__post\": {\n                    \"title\": \"Body_create_upload_files_uploadfiles__post\",\n                    \"required\": [\"files\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"files\": {\n                            \"title\": \"Files\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n                            \"description\": \"Multiple files as UploadFile\",\n                        }\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_files\\test_tutorial003.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 76,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_forms\\test_tutorial001.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.request_forms.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_forms\\test_tutorial001.py",
    "type": "function",
    "name": "get_client",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_forms\\test_tutorial001.py:function:test_post_body_form:chunk1",
    "text": "def test_post_body_form(client: TestClient):\n    response = client.post(\"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\"})\n    assert response.status_code == 200\n    assert response.json() == {\"username\": \"Foo\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_forms\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_body_form",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_forms\\test_tutorial001.py:function:test_post_body_form_no_password:chunk1",
    "text": "def test_post_body_form_no_password(client: TestClient):\n    response = client.post(\"/login/\", data={\"username\": \"Foo\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_forms\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_body_form_no_password",
    "loc": 31,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_forms\\test_tutorial001.py:function:test_post_body_form_no_username:chunk1",
    "text": "def test_post_body_form_no_username(client: TestClient):\n    response = client.post(\"/login/\", data={\"password\": \"secret\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_forms\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_body_form_no_username",
    "loc": 59,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_forms\\test_tutorial001.py:function:test_post_body_form_no_data:chunk1",
    "text": "def test_post_body_form_no_data(client: TestClient):\n    response = client.post(\"/login/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_forms\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_body_form_no_data",
    "loc": 87,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_forms\\test_tutorial001.py:function:test_post_body_json:chunk1",
    "text": "def test_post_body_json(client: TestClient):\n    response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_forms\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_body_json",
    "loc": 126,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_forms\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/login/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login\",\n                    \"operationId\": \"login_login__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_login__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_login_login__post\": {\n                    \"title\": \"Body_login_login__post\",\n                    \"required\": [\"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_forms\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 165,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_forms_and_files\\test_tutorial001.py:function:get_app:chunk1",
    "text": "def get_app(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.request_forms_and_files.{request.param}\")\n\n    return mod.app",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_forms_and_files\\test_tutorial001.py",
    "type": "function",
    "name": "get_app",
    "loc": 19,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_forms_and_files\\test_tutorial001.py:function:get_client:chunk1",
    "text": "def get_client(app: FastAPI):\n    client = TestClient(app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_forms_and_files\\test_tutorial001.py",
    "type": "function",
    "name": "get_client",
    "loc": 26,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_forms_and_files\\test_tutorial001.py:function:test_post_form_no_body:chunk1",
    "text": "def test_post_form_no_body(client: TestClient):\n    response = client.post(\"/files/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_forms_and_files\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_form_no_body",
    "loc": 31,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_forms_and_files\\test_tutorial001.py:function:test_post_form_no_file:chunk1",
    "text": "def test_post_form_no_file(client: TestClient):\n    response = client.post(\"/files/\", data={\"token\": \"foo\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_forms_and_files\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_form_no_file",
    "loc": 81,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_forms_and_files\\test_tutorial001.py:function:test_post_body_json:chunk1",
    "text": "def test_post_body_json(client: TestClient):\n    response = client.post(\"/files/\", json={\"file\": \"Foo\", \"token\": \"Bar\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_forms_and_files\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_body_json",
    "loc": 120,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_forms_and_files\\test_tutorial001.py:function:test_post_file_no_token:chunk1",
    "text": "def test_post_file_no_token(tmp_path, app: FastAPI):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file:\n        response = client.post(\"/files/\", files={\"file\": file})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_forms_and_files\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_file_no_token",
    "loc": 170,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_forms_and_files\\test_tutorial001.py:function:test_post_files_and_token:chunk1",
    "text": "def test_post_files_and_token(tmp_path, app: FastAPI):\n    patha = tmp_path / \"test.txt\"\n    pathb = tmp_path / \"testb.txt\"\n    patha.write_text(\"<file content>\")\n    pathb.write_text(\"<file b content>\")\n\n    client = TestClient(app)\n    with patha.open(\"rb\") as filea, pathb.open(\"rb\") as fileb:\n        response = client.post(\n            \"/files/\",\n            data={\"token\": \"foo\"},\n            files={\"file\": filea, \"fileb\": (\"testb.txt\", fileb, \"text/plain\")},\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"file_size\": 14,\n        \"token\": \"foo\",\n        \"fileb_content_type\": \"text/plain\",\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_forms_and_files\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_files_and_token",
    "loc": 214,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_forms_and_files\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create File\",\n                    \"operationId\": \"create_file_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_file_files__post\": {\n                    \"title\": \"Body_create_file_files__post\",\n                    \"required\": [\"file\", \"fileb\", \"token\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"},\n                        \"fileb\": {\n                            \"title\": \"Fileb\",\n                            \"type\": \"string\",\n                            \"format\": \"binary\",\n                        },\n                        \"token\": {\"title\": \"Token\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_forms_and_files\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 235,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial001.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.request_form_models.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial001.py",
    "type": "function",
    "name": "get_client",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial001.py:function:test_post_body_form:chunk1",
    "text": "def test_post_body_form(client: TestClient):\n    response = client.post(\"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\"})\n    assert response.status_code == 200\n    assert response.json() == {\"username\": \"Foo\", \"password\": \"secret\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_body_form",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial001.py:function:test_post_body_form_no_password:chunk1",
    "text": "def test_post_body_form_no_password(client: TestClient):\n    response = client.post(\"/login/\", data={\"username\": \"Foo\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"Field required\",\n                    \"input\": {\"username\": \"Foo\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_body_form_no_password",
    "loc": 31,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial001.py:function:test_post_body_form_no_username:chunk1",
    "text": "def test_post_body_form_no_username(client: TestClient):\n    response = client.post(\"/login/\", data={\"password\": \"secret\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"Field required\",\n                    \"input\": {\"password\": \"secret\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_body_form_no_username",
    "loc": 59,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial001.py:function:test_post_body_form_no_data:chunk1",
    "text": "def test_post_body_form_no_data(client: TestClient):\n    response = client.post(\"/login/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"Field required\",\n                    \"input\": {},\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"Field required\",\n                    \"input\": {},\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_body_form_no_data",
    "loc": 87,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial001.py:function:test_post_body_json:chunk1",
    "text": "def test_post_body_json(client: TestClient):\n    response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"Field required\",\n                    \"input\": {},\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"Field required\",\n                    \"input\": {},\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_body_json",
    "loc": 126,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/login/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login\",\n                    \"operationId\": \"login_login__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/FormData\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"FormData\": {\n                    \"properties\": {\n                        \"username\": {\"type\": \"string\", \"title\": \"Username\"},\n                        \"password\": {\"type\": \"string\", \"title\": \"Password\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"username\", \"password\"],\n                    \"title\": \"FormData\",\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 165,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial002.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.request_form_models.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial002.py",
    "type": "function",
    "name": "get_client",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial002.py:function:test_post_body_form:chunk1",
    "text": "def test_post_body_form(client: TestClient):\n    response = client.post(\"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\"})\n    assert response.status_code == 200\n    assert response.json() == {\"username\": \"Foo\", \"password\": \"secret\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial002.py",
    "type": "function",
    "name": "test_post_body_form",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial002.py:function:test_post_body_extra_form:chunk1",
    "text": "def test_post_body_extra_form(client: TestClient):\n    response = client.post(\n        \"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\", \"extra\": \"extra\"}\n    )\n    assert response.status_code == 422\n    assert response.json() == {\n        \"detail\": [\n            {\n                \"type\": \"extra_forbidden\",\n                \"loc\": [\"body\", \"extra\"],\n                \"msg\": \"Extra inputs are not permitted\",\n                \"input\": \"extra\",\n            }\n        ]\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial002.py",
    "type": "function",
    "name": "test_post_body_extra_form",
    "loc": 32,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial002.py:function:test_post_body_form_no_password:chunk1",
    "text": "def test_post_body_form_no_password(client: TestClient):\n    response = client.post(\"/login/\", data={\"username\": \"Foo\"})\n    assert response.status_code == 422\n    assert response.json() == {\n        \"detail\": [\n            {\n                \"type\": \"missing\",\n                \"loc\": [\"body\", \"password\"],\n                \"msg\": \"Field required\",\n                \"input\": {\"username\": \"Foo\"},\n            }\n        ]\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial002.py",
    "type": "function",
    "name": "test_post_body_form_no_password",
    "loc": 50,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial002.py:function:test_post_body_form_no_username:chunk1",
    "text": "def test_post_body_form_no_username(client: TestClient):\n    response = client.post(\"/login/\", data={\"password\": \"secret\"})\n    assert response.status_code == 422\n    assert response.json() == {\n        \"detail\": [\n            {\n                \"type\": \"missing\",\n                \"loc\": [\"body\", \"username\"],\n                \"msg\": \"Field required\",\n                \"input\": {\"password\": \"secret\"},\n            }\n        ]\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial002.py",
    "type": "function",
    "name": "test_post_body_form_no_username",
    "loc": 66,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial002.py:function:test_post_body_form_no_data:chunk1",
    "text": "def test_post_body_form_no_data(client: TestClient):\n    response = client.post(\"/login/\")\n    assert response.status_code == 422\n    assert response.json() == {\n        \"detail\": [\n            {\n                \"type\": \"missing\",\n                \"loc\": [\"body\", \"username\"],\n                \"msg\": \"Field required\",\n                \"input\": {},\n            },\n            {\n                \"type\": \"missing\",\n                \"loc\": [\"body\", \"password\"],\n                \"msg\": \"Field required\",\n                \"input\": {},\n            },\n        ]\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial002.py",
    "type": "function",
    "name": "test_post_body_form_no_data",
    "loc": 82,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial002.py:function:test_post_body_json:chunk1",
    "text": "def test_post_body_json(client: TestClient):\n    response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == {\n        \"detail\": [\n            {\n                \"type\": \"missing\",\n                \"loc\": [\"body\", \"username\"],\n                \"msg\": \"Field required\",\n                \"input\": {},\n            },\n            {\n                \"type\": \"missing\",\n                \"loc\": [\"body\", \"password\"],\n                \"msg\": \"Field required\",\n                \"input\": {},\n            },\n        ]\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial002.py",
    "type": "function",
    "name": "test_post_body_json",
    "loc": 104,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial002.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/login/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login\",\n                    \"operationId\": \"login_login__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/FormData\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"FormData\": {\n                    \"properties\": {\n                        \"username\": {\"type\": \"string\", \"title\": \"Username\"},\n                        \"password\": {\"type\": \"string\", \"title\": \"Password\"},\n                    },\n                    \"additionalProperties\": False,\n                    \"type\": \"object\",\n                    \"required\": [\"username\", \"password\"],\n                    \"title\": \"FormData\",\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial002.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 126,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial002_pv1.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.request_form_models.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial002_pv1.py",
    "type": "function",
    "name": "get_client",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial002_pv1.py:function:test_post_body_form:chunk1",
    "text": "def test_post_body_form(client: TestClient):\n    response = client.post(\"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\"})\n    assert response.status_code == 200\n    assert response.json() == {\"username\": \"Foo\", \"password\": \"secret\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial002_pv1.py",
    "type": "function",
    "name": "test_post_body_form",
    "loc": 26,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial002_pv1.py:function:test_post_body_extra_form:chunk1",
    "text": "def test_post_body_extra_form(client: TestClient):\n    response = client.post(\n        \"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\", \"extra\": \"extra\"}\n    )\n    assert response.status_code == 422\n    assert response.json() == {\n        \"detail\": [\n            {\n                \"type\": \"value_error.extra\",\n                \"loc\": [\"body\", \"extra\"],\n                \"msg\": \"extra fields not permitted\",\n            }\n        ]\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial002_pv1.py",
    "type": "function",
    "name": "test_post_body_extra_form",
    "loc": 34,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial002_pv1.py:function:test_post_body_form_no_password:chunk1",
    "text": "def test_post_body_form_no_password(client: TestClient):\n    response = client.post(\"/login/\", data={\"username\": \"Foo\"})\n    assert response.status_code == 422\n    assert response.json() == {\n        \"detail\": [\n            {\n                \"type\": \"value_error.missing\",\n                \"loc\": [\"body\", \"password\"],\n                \"msg\": \"field required\",\n            }\n        ]\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial002_pv1.py",
    "type": "function",
    "name": "test_post_body_form_no_password",
    "loc": 52,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial002_pv1.py:function:test_post_body_form_no_username:chunk1",
    "text": "def test_post_body_form_no_username(client: TestClient):\n    response = client.post(\"/login/\", data={\"password\": \"secret\"})\n    assert response.status_code == 422\n    assert response.json() == {\n        \"detail\": [\n            {\n                \"type\": \"value_error.missing\",\n                \"loc\": [\"body\", \"username\"],\n                \"msg\": \"field required\",\n            }\n        ]\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial002_pv1.py",
    "type": "function",
    "name": "test_post_body_form_no_username",
    "loc": 68,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial002_pv1.py:function:test_post_body_form_no_data:chunk1",
    "text": "def test_post_body_form_no_data(client: TestClient):\n    response = client.post(\"/login/\")\n    assert response.status_code == 422\n    assert response.json() == {\n        \"detail\": [\n            {\n                \"type\": \"value_error.missing\",\n                \"loc\": [\"body\", \"username\"],\n                \"msg\": \"field required\",\n            },\n            {\n                \"type\": \"value_error.missing\",\n                \"loc\": [\"body\", \"password\"],\n                \"msg\": \"field required\",\n            },\n        ]\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial002_pv1.py",
    "type": "function",
    "name": "test_post_body_form_no_data",
    "loc": 84,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial002_pv1.py:function:test_post_body_json:chunk1",
    "text": "def test_post_body_json(client: TestClient):\n    response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == {\n        \"detail\": [\n            {\n                \"type\": \"value_error.missing\",\n                \"loc\": [\"body\", \"username\"],\n                \"msg\": \"field required\",\n            },\n            {\n                \"type\": \"value_error.missing\",\n                \"loc\": [\"body\", \"password\"],\n                \"msg\": \"field required\",\n            },\n        ]\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial002_pv1.py",
    "type": "function",
    "name": "test_post_body_json",
    "loc": 105,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_request_form_models\\test_tutorial002_pv1.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/login/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login\",\n                    \"operationId\": \"login_login__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/FormData\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"FormData\": {\n                    \"properties\": {\n                        \"username\": {\"type\": \"string\", \"title\": \"Username\"},\n                        \"password\": {\"type\": \"string\", \"title\": \"Password\"},\n                    },\n                    \"additionalProperties\": False,\n                    \"type\": \"object\",\n                    \"required\": [\"username\", \"password\"],\n                    \"title\": \"FormData\",\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_request_form_models\\test_tutorial002_pv1.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 126,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_change_status_code\\test_tutorial001.py:function:test_path_operation:chunk1",
    "text": "def test_path_operation():\n    response = client.put(\"/get-or-create-task/foo\")\n    print(response.content)\n    assert response.status_code == 200, response.text\n    assert response.json() == \"Listen to the Bar Fighters\"\n    response = client.put(\"/get-or-create-task/bar\")\n    assert response.status_code == 201, response.text\n    assert response.json() == \"This didn't exist before\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_change_status_code\\test_tutorial001.py",
    "type": "function",
    "name": "test_path_operation",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_cookies\\test_tutorial001.py:function:test_path_operation:chunk1",
    "text": "def test_path_operation():\n    response = client.post(\"/cookie/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Come to the dark side, we have cookies\"}\n    assert response.cookies[\"fakesession\"] == \"fake-cookie-session-value\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_cookies\\test_tutorial001.py",
    "type": "function",
    "name": "test_path_operation",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_cookies\\test_tutorial002.py:function:test_path_operation:chunk1",
    "text": "def test_path_operation():\n    response = client.post(\"/cookie-and-object/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Come to the dark side, we have cookies\"}\n    assert response.cookies[\"fakesession\"] == \"fake-cookie-session-value\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_cookies\\test_tutorial002.py",
    "type": "function",
    "name": "test_path_operation",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_headers\\test_tutorial001.py:function:test_path_operation:chunk1",
    "text": "def test_path_operation():\n    response = client.get(\"/headers/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Hello World\"}\n    assert response.headers[\"X-Cat-Dog\"] == \"alone in the world\"\n    assert response.headers[\"Content-Language\"] == \"en-US\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_headers\\test_tutorial001.py",
    "type": "function",
    "name": "test_path_operation",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_headers\\test_tutorial002.py:function:test_path_operation:chunk1",
    "text": "def test_path_operation():\n    response = client.get(\"/headers-and-object/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Hello World\"}\n    assert response.headers[\"X-Cat-Dog\"] == \"alone in the world\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_headers\\test_tutorial002.py",
    "type": "function",
    "name": "test_path_operation",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial003.py:function:test_post_user:chunk1",
    "text": "def test_post_user():\n    response = client.post(\n        \"/user/\",\n        json={\n            \"username\": \"foo\",\n            \"password\": \"fighter\",\n            \"email\": \"foo@example.com\",\n            \"full_name\": \"Grave Dohl\",\n        },\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"username\": \"foo\",\n        \"email\": \"foo@example.com\",\n        \"full_name\": \"Grave Dohl\",\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial003.py",
    "type": "function",
    "name": "test_post_user",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial003.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/user/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/UserOut\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create User\",\n                    \"operationId\": \"create_user_user__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/UserIn\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"UserOut\": {\n                    \"title\": \"UserOut\",\n                    \"required\": IsOneOf(\n                        [\"username\", \"email\", \"full_name\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"username\", \"email\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"email\": {\n                            \"title\": \"Email\",\n                            \"type\": \"string\",\n                            \"format\": \"email\",\n                        },\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"UserIn\": {\n                    \"title\": \"UserIn\",\n                    \"required\": [\"username\", \"password\", \"email\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"email\": {\n                            \"title\": \"Email\",\n                            \"type\": \"string\",\n                            \"format\": \"email\",\n                        },\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial003.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial003_01.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.response_model.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial003_01.py",
    "type": "function",
    "name": "get_client",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial003_01.py:function:test_post_user:chunk1",
    "text": "def test_post_user(client: TestClient):\n    response = client.post(\n        \"/user/\",\n        json={\n            \"username\": \"foo\",\n            \"password\": \"fighter\",\n            \"email\": \"foo@example.com\",\n            \"full_name\": \"Grave Dohl\",\n        },\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"username\": \"foo\",\n        \"email\": \"foo@example.com\",\n        \"full_name\": \"Grave Dohl\",\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial003_01.py",
    "type": "function",
    "name": "test_post_user",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial003_01.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/user/\": {\n                \"post\": {\n                    \"summary\": \"Create User\",\n                    \"operationId\": \"create_user_user__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/UserIn\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/BaseUser\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"BaseUser\": {\n                    \"title\": \"BaseUser\",\n                    \"required\": IsOneOf(\n                        [\"username\", \"email\", \"full_name\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"username\", \"email\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"email\": {\n                            \"title\": \"Email\",\n                            \"type\": \"string\",\n                            \"format\": \"email\",\n                        },\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"UserIn\": {\n                    \"title\": \"UserIn\",\n                    \"required\": [\"username\", \"email\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"email\": {\n                            \"title\": \"Email\",\n                            \"type\": \"string\",\n                            \"format\": \"email\",\n                        },\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial003_01.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 42,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial003_02.py:function:test_get_portal:chunk1",
    "text": "def test_get_portal():\n    response = client.get(\"/portal\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Here's your interdimensional portal.\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial003_02.py",
    "type": "function",
    "name": "test_get_portal",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial003_02.py:function:test_get_redirect:chunk1",
    "text": "def test_get_redirect():\n    response = client.get(\"/portal\", params={\"teleport\": True}, follow_redirects=False)\n    assert response.status_code == 307, response.text\n    assert response.headers[\"location\"] == \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial003_02.py",
    "type": "function",
    "name": "test_get_redirect",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial003_02.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/portal\": {\n                \"get\": {\n                    \"summary\": \"Get Portal\",\n                    \"operationId\": \"get_portal_portal_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Teleport\",\n                                \"type\": \"boolean\",\n                                \"default\": False,\n                            },\n                            \"name\": \"teleport\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial003_02.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial003_03.py:function:test_get_portal:chunk1",
    "text": "def test_get_portal():\n    response = client.get(\"/teleport\", follow_redirects=False)\n    assert response.status_code == 307, response.text\n    assert response.headers[\"location\"] == \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial003_03.py",
    "type": "function",
    "name": "test_get_portal",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial003_03.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/teleport\": {\n                \"get\": {\n                    \"summary\": \"Get Teleport\",\n                    \"operationId\": \"get_teleport_teleport_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial003_03.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial003_04.py:function:test_invalid_response_model:chunk1",
    "text": "def test_invalid_response_model():\n    with pytest.raises(FastAPIError):\n        from docs_src.response_model.tutorial003_04 import app\n\n        assert app  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial003_04.py",
    "type": "function",
    "name": "test_invalid_response_model",
    "loc": 5,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial003_04_py310.py:function:test_invalid_response_model:chunk1",
    "text": "def test_invalid_response_model():\n    with pytest.raises(FastAPIError):\n        from docs_src.response_model.tutorial003_04_py310 import app\n\n        assert app  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial003_04_py310.py",
    "type": "function",
    "name": "test_invalid_response_model",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial003_05.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.response_model.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial003_05.py",
    "type": "function",
    "name": "get_client",
    "loc": 16,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial003_05.py:function:test_get_portal:chunk1",
    "text": "def test_get_portal(client: TestClient):\n    response = client.get(\"/portal\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Here's your interdimensional portal.\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial003_05.py",
    "type": "function",
    "name": "test_get_portal",
    "loc": 23,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial003_05.py:function:test_get_redirect:chunk1",
    "text": "def test_get_redirect(client: TestClient):\n    response = client.get(\"/portal\", params={\"teleport\": True}, follow_redirects=False)\n    assert response.status_code == 307, response.text\n    assert response.headers[\"location\"] == \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial003_05.py",
    "type": "function",
    "name": "test_get_redirect",
    "loc": 29,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial003_05.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/portal\": {\n                \"get\": {\n                    \"summary\": \"Get Portal\",\n                    \"operationId\": \"get_portal_portal_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Teleport\",\n                                \"type\": \"boolean\",\n                                \"default\": False,\n                            },\n                            \"name\": \"teleport\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial003_05.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 35,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial003_py310.py:function:get_client:chunk1",
    "text": "def get_client():\n    from docs_src.response_model.tutorial003_py310 import app\n\n    client = TestClient(app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial003_py310.py",
    "type": "function",
    "name": "get_client",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial003_py310.py:function:test_post_user:chunk1",
    "text": "def test_post_user(client: TestClient):\n    response = client.post(\n        \"/user/\",\n        json={\n            \"username\": \"foo\",\n            \"password\": \"fighter\",\n            \"email\": \"foo@example.com\",\n            \"full_name\": \"Grave Dohl\",\n        },\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"username\": \"foo\",\n        \"email\": \"foo@example.com\",\n        \"full_name\": \"Grave Dohl\",\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial003_py310.py",
    "type": "function",
    "name": "test_post_user",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial003_py310.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/user/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/UserOut\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create User\",\n                    \"operationId\": \"create_user_user__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/UserIn\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"UserOut\": {\n                    \"title\": \"UserOut\",\n                    \"required\": IsOneOf(\n                        [\"username\", \"email\", \"full_name\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"username\", \"email\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"email\": {\n                            \"title\": \"Email\",\n                            \"type\": \"string\",\n                            \"format\": \"email\",\n                        },\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"UserIn\": {\n                    \"title\": \"UserIn\",\n                    \"required\": [\"username\", \"password\", \"email\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"email\": {\n                            \"title\": \"Email\",\n                            \"type\": \"string\",\n                            \"format\": \"email\",\n                        },\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial003_py310.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial004.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.response_model.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial004.py",
    "type": "function",
    "name": "get_client",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial004.py:function:test_get:chunk1",
    "text": "def test_get(url, data, client: TestClient):\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == data",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial004.py",
    "type": "function",
    "name": "test_get",
    "loc": 45,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial004.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": IsOneOf(\n                        [\"name\", \"description\", \"price\", \"tax\", \"tags\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"name\", \"price\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial004.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 51,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial005.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.response_model.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial005.py",
    "type": "function",
    "name": "get_client",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial005.py:function:test_read_item_name:chunk1",
    "text": "def test_read_item_name(client: TestClient):\n    response = client.get(\"/items/bar/name\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Bar\", \"description\": \"The Bar fighters\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial005.py",
    "type": "function",
    "name": "test_read_item_name",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial005.py:function:test_read_item_public_data:chunk1",
    "text": "def test_read_item_public_data(client: TestClient):\n    response = client.get(\"/items/bar/public\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Bar\",\n        \"description\": \"The Bar fighters\",\n        \"price\": 62,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial005.py",
    "type": "function",
    "name": "test_read_item_public_data",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial005.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}/name\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item Name\",\n                    \"operationId\": \"read_item_name_items__item_id__name_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/items/{item_id}/public\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item Public Data\",\n                    \"operationId\": \"read_item_public_data_items__item_id__public_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": IsOneOf(\n                        [\"name\", \"description\", \"price\", \"tax\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"name\", \"price\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial005.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial006.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.response_model.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial006.py",
    "type": "function",
    "name": "get_client",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial006.py:function:test_read_item_name:chunk1",
    "text": "def test_read_item_name(client: TestClient):\n    response = client.get(\"/items/bar/name\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Bar\", \"description\": \"The Bar fighters\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial006.py",
    "type": "function",
    "name": "test_read_item_name",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial006.py:function:test_read_item_public_data:chunk1",
    "text": "def test_read_item_public_data(client: TestClient):\n    response = client.get(\"/items/bar/public\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Bar\",\n        \"description\": \"The Bar fighters\",\n        \"price\": 62,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial006.py",
    "type": "function",
    "name": "test_read_item_public_data",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_response_model\\test_tutorial006.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}/name\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item Name\",\n                    \"operationId\": \"read_item_name_items__item_id__name_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/items/{item_id}/public\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item Public Data\",\n                    \"operationId\": \"read_item_public_data_items__item_id__public_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": IsOneOf(\n                        [\"name\", \"description\", \"price\", \"tax\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"name\", \"price\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_response_model\\test_tutorial006.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_schema_extra_example\\test_tutorial001.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.schema_extra_example.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_schema_extra_example\\test_tutorial001.py",
    "type": "function",
    "name": "get_client",
    "loc": 16,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_schema_extra_example\\test_tutorial001.py:function:test_post_body_example:chunk1",
    "text": "def test_post_body_example(client: TestClient):\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"name\": \"Foo\",\n            \"description\": \"A very nice Item\",\n            \"price\": 35.4,\n            \"tax\": 3.2,\n        },\n    )\n    assert response.status_code == 200",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_schema_extra_example\\test_tutorial001.py",
    "type": "function",
    "name": "test_post_body_example",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_schema_extra_example\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    # insert_assert(response.json())\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                            \"required\": True,\n                            \"schema\": {\"type\": \"integer\", \"title\": \"Item Id\"},\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"required\": True,\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Item\": {\n                    \"properties\": {\n                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                        \"price\": {\"type\": \"number\", \"title\": \"Price\"},\n                        \"tax\": {\n                            \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            \"title\": \"Tax\",\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"name\", \"price\"],\n                    \"title\": \"Item\",\n                    \"examples\": [\n                        {\n                            \"description\": \"A very nice Item\",\n                            \"name\": \"Foo\",\n                            \"price\": 35.4,\n                            \"tax\": 3.2,\n                        }\n                    ],\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_schema_extra_example\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 38,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_schema_extra_example\\test_tutorial001_pv1.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.schema_extra_example.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_schema_extra_example\\test_tutorial001_pv1.py",
    "type": "function",
    "name": "get_client",
    "loc": 16,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_schema_extra_example\\test_tutorial001_pv1.py:function:test_post_body_example:chunk1",
    "text": "def test_post_body_example(client: TestClient):\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"name\": \"Foo\",\n            \"description\": \"A very nice Item\",\n            \"price\": 35.4,\n            \"tax\": 3.2,\n        },\n    )\n    assert response.status_code == 200",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_schema_extra_example\\test_tutorial001_pv1.py",
    "type": "function",
    "name": "test_post_body_example",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_schema_extra_example\\test_tutorial001_pv1.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    # insert_assert(response.json())\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"type\": \"integer\", \"title\": \"Item Id\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Item\": {\n                    \"properties\": {\n                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                        \"description\": {\"type\": \"string\", \"title\": \"Description\"},\n                        \"price\": {\"type\": \"number\", \"title\": \"Price\"},\n                        \"tax\": {\"type\": \"number\", \"title\": \"Tax\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"name\", \"price\"],\n                    \"title\": \"Item\",\n                    \"examples\": [\n                        {\n                            \"name\": \"Foo\",\n                            \"description\": \"A very nice Item\",\n                            \"price\": 35.4,\n                            \"tax\": 3.2,\n                        }\n                    ],\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_schema_extra_example\\test_tutorial001_pv1.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 38,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_schema_extra_example\\test_tutorial004.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.schema_extra_example.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_schema_extra_example\\test_tutorial004.py",
    "type": "function",
    "name": "get_client",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_schema_extra_example\\test_tutorial004.py:function:test_post_body_example:chunk1",
    "text": "def test_post_body_example(client: TestClient):\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"name\": \"Foo\",\n            \"description\": \"A very nice Item\",\n            \"price\": 35.4,\n            \"tax\": 3.2,\n        },\n    )\n    assert response.status_code == 200",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_schema_extra_example\\test_tutorial004.py",
    "type": "function",
    "name": "test_post_body_example",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_schema_extra_example\\test_tutorial004.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"$ref\": \"#/components/schemas/Item\",\n                                        \"examples\": [\n                                            {\n                                                \"name\": \"Foo\",\n                                                \"description\": \"A very nice Item\",\n                                                \"price\": 35.4,\n                                                \"tax\": 3.2,\n                                            },\n                                            {\"name\": \"Bar\", \"price\": \"35.4\"},\n                                            {\n                                                \"name\": \"Baz\",\n                                                \"price\": \"thirty five point four\",\n                                            },\n                                        ],\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"allOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"}\n                                        ],\n                                        \"title\": \"Item\",\n                                        \"examples\": [\n                                            {\n                                                \"name\": \"Foo\",\n                                                \"description\": \"A very nice Item\",\n                                                \"price\": 35.4,\n                                                \"tax\": 3.2,\n                                            },\n                                            {\"name\": \"Bar\", \"price\": \"35.4\"},\n                                            {\n                                                \"name\": \"Baz\",\n                                                \"price\": \"thirty five point four\",\n                                            },\n                                        ],\n                                    }\n                                )\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_schema_extra_example\\test_tutorial004.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_schema_extra_example\\test_tutorial005.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.schema_extra_example.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_schema_extra_example\\test_tutorial005.py",
    "type": "function",
    "name": "get_client",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_schema_extra_example\\test_tutorial005.py:function:test_post_body_example:chunk1",
    "text": "def test_post_body_example(client: TestClient):\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"name\": \"Foo\",\n            \"description\": \"A very nice Item\",\n            \"price\": 35.4,\n            \"tax\": 3.2,\n        },\n    )\n    assert response.status_code == 200",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_schema_extra_example\\test_tutorial005.py",
    "type": "function",
    "name": "test_post_body_example",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_schema_extra_example\\test_tutorial005.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient) -> None:\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict({\"$ref\": \"#/components/schemas/Item\"})\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"allOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"}\n                                        ],\n                                        \"title\": \"Item\",\n                                    }\n                                ),\n                                \"examples\": {\n                                    \"normal\": {\n                                        \"summary\": \"A normal example\",\n                                        \"description\": \"A **normal** item works correctly.\",\n                                        \"value\": {\n                                            \"name\": \"Foo\",\n                                            \"description\": \"A very nice Item\",\n                                            \"price\": 35.4,\n                                            \"tax\": 3.2,\n                                        },\n                                    },\n                                    \"converted\": {\n                                        \"summary\": \"An example with converted data\",\n                                        \"description\": \"FastAPI can convert price `strings` to actual `numbers` automatically\",\n                                        \"value\": {\"name\": \"Bar\", \"price\": \"35.4\"},\n                                    },\n                                    \"invalid\": {\n                                        \"summary\": \"Invalid data is rejected with an error\",\n                                        \"value\": {\n                                            \"name\": \"Baz\",\n                                            \"price\": \"thirty five point four\",\n                                        },\n                                    },\n                                },\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_schema_extra_example\\test_tutorial005.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial001.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.security.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial001.py",
    "type": "function",
    "name": "get_client",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial001.py:function:test_no_token:chunk1",
    "text": "def test_no_token(client: TestClient):\n    response = client.get(\"/items\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial001.py",
    "type": "function",
    "name": "test_no_token",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial001.py:function:test_token:chunk1",
    "text": "def test_token(client: TestClient):\n    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"token\": \"testtoken\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial001.py",
    "type": "function",
    "name": "test_token",
    "loc": 31,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial001.py:function:test_incorrect_token:chunk1",
    "text": "def test_incorrect_token(client: TestClient):\n    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial001.py",
    "type": "function",
    "name": "test_incorrect_token",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"OAuth2PasswordBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"token\"}},\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 44,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial003.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.security.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial003.py",
    "type": "function",
    "name": "get_client",
    "loc": 20,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial003.py:function:test_login:chunk1",
    "text": "def test_login(client: TestClient):\n    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial003.py",
    "type": "function",
    "name": "test_login",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial003.py:function:test_login_incorrect_password:chunk1",
    "text": "def test_login_incorrect_password(client: TestClient):\n    response = client.post(\n        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial003.py",
    "type": "function",
    "name": "test_login_incorrect_password",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial003.py:function:test_login_incorrect_username:chunk1",
    "text": "def test_login_incorrect_username(client: TestClient):\n    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial003.py",
    "type": "function",
    "name": "test_login_incorrect_username",
    "loc": 41,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial003.py:function:test_no_token:chunk1",
    "text": "def test_no_token(client: TestClient):\n    response = client.get(\"/users/me\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial003.py",
    "type": "function",
    "name": "test_no_token",
    "loc": 47,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial003.py:function:test_token:chunk1",
    "text": "def test_token(client: TestClient):\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial003.py",
    "type": "function",
    "name": "test_token",
    "loc": 54,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial003.py:function:test_incorrect_token:chunk1",
    "text": "def test_incorrect_token(client: TestClient):\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial003.py",
    "type": "function",
    "name": "test_incorrect_token",
    "loc": 66,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial003.py:function:test_incorrect_token_type:chunk1",
    "text": "def test_incorrect_token_type(client: TestClient):\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial003.py",
    "type": "function",
    "name": "test_incorrect_token_type",
    "loc": 73,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial003.py:function:test_inactive_user:chunk1",
    "text": "def test_inactive_user(client: TestClient):\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Inactive user\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial003.py",
    "type": "function",
    "name": "test_inactive_user",
    "loc": 82,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial003.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/token\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login\",\n                    \"operationId\": \"login_token_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_token_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Users Me\",\n                    \"operationId\": \"read_users_me_users_me_get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_login_token_post\": {\n                    \"title\": \"Body_login_token_post\",\n                    \"required\": [\"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"grant_type\": IsDict(\n                            {\n                                \"title\": \"Grant Type\",\n                                \"anyOf\": [\n                                    {\"pattern\": \"^password$\", \"type\": \"string\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Grant Type\",\n                                \"pattern\": \"^password$\",\n                                \"type\": \"string\",\n                            }\n                        ),\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n                        \"client_id\": IsDict(\n                            {\n                                \"title\": \"Client Id\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Id\", \"type\": \"string\"}\n                        ),\n                        \"client_secret\": IsDict(\n                            {\n                                \"title\": \"Client Secret\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            },\n            \"securitySchemes\": {\n                \"OAuth2PasswordBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"token\"}},\n                }\n            },\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial003.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 88,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial005.py:function:get_mod:chunk1",
    "text": "def get_mod(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.security.{request.param}\")\n\n    return mod",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial005.py",
    "type": "function",
    "name": "get_mod",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial005.py:function:get_access_token:chunk1",
    "text": "def get_access_token(\n    *, username=\"johndoe\", password=\"secret\", scope=None, client: TestClient\n):\n    data = {\"username\": username, \"password\": password}\n    if scope:\n        data[\"scope\"] = scope\n    response = client.post(\"/token\", data=data)\n    content = response.json()\n    access_token = content.get(\"access_token\")\n    return access_token",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial005.py",
    "type": "function",
    "name": "get_access_token",
    "loc": 28,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial005.py:function:test_login:chunk1",
    "text": "def test_login(mod: ModuleType):\n    client = TestClient(mod.app)\n    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n    assert response.status_code == 200, response.text\n    content = response.json()\n    assert \"access_token\" in content\n    assert content[\"token_type\"] == \"bearer\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial005.py",
    "type": "function",
    "name": "test_login",
    "loc": 40,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial005.py:function:test_login_incorrect_password:chunk1",
    "text": "def test_login_incorrect_password(mod: ModuleType):\n    client = TestClient(mod.app)\n    response = client.post(\n        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial005.py",
    "type": "function",
    "name": "test_login_incorrect_password",
    "loc": 49,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial005.py:function:test_login_incorrect_username:chunk1",
    "text": "def test_login_incorrect_username(mod: ModuleType):\n    client = TestClient(mod.app)\n    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial005.py",
    "type": "function",
    "name": "test_login_incorrect_username",
    "loc": 58,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial005.py:function:test_no_token:chunk1",
    "text": "def test_no_token(mod: ModuleType):\n    client = TestClient(mod.app)\n    response = client.get(\"/users/me\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial005.py",
    "type": "function",
    "name": "test_no_token",
    "loc": 65,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial005.py:function:test_token:chunk1",
    "text": "def test_token(mod: ModuleType):\n    client = TestClient(mod.app)\n    access_token = get_access_token(scope=\"me\", client=client)\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"disabled\": False,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial005.py",
    "type": "function",
    "name": "test_token",
    "loc": 73,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial005.py:function:test_incorrect_token:chunk1",
    "text": "def test_incorrect_token(mod: ModuleType):\n    client = TestClient(mod.app)\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial005.py",
    "type": "function",
    "name": "test_incorrect_token",
    "loc": 88,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial005.py:function:test_incorrect_token_type:chunk1",
    "text": "def test_incorrect_token_type(mod: ModuleType):\n    client = TestClient(mod.app)\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial005.py",
    "type": "function",
    "name": "test_incorrect_token_type",
    "loc": 96,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial005.py:function:test_verify_password:chunk1",
    "text": "def test_verify_password(mod: ModuleType):\n    assert mod.verify_password(\n        \"secret\", mod.fake_users_db[\"johndoe\"][\"hashed_password\"]\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial005.py",
    "type": "function",
    "name": "test_verify_password",
    "loc": 106,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial005.py:function:test_get_password_hash:chunk1",
    "text": "def test_get_password_hash(mod: ModuleType):\n    assert mod.get_password_hash(\"secretalice\")",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial005.py",
    "type": "function",
    "name": "test_get_password_hash",
    "loc": 112,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial005.py:function:test_create_access_token:chunk1",
    "text": "def test_create_access_token(mod: ModuleType):\n    access_token = mod.create_access_token(data={\"data\": \"foo\"})\n    assert access_token",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial005.py",
    "type": "function",
    "name": "test_create_access_token",
    "loc": 116,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial005.py:function:test_token_no_sub:chunk1",
    "text": "def test_token_no_sub(mod: ModuleType):\n    client = TestClient(mod.app)\n\n    response = client.get(\n        \"/users/me\",\n        headers={\n            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiZm9vIn0.9ynBhuYb4e6aW3oJr_K_TBgwcMTDpRToQIE25L57rOE\"\n        },\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial005.py",
    "type": "function",
    "name": "test_token_no_sub",
    "loc": 121,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial005.py:function:test_token_no_username:chunk1",
    "text": "def test_token_no_username(mod: ModuleType):\n    client = TestClient(mod.app)\n\n    response = client.get(\n        \"/users/me\",\n        headers={\n            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmb28ifQ.NnExK_dlNAYyzACrXtXDrcWOgGY2JuPbI4eDaHdfK5Y\"\n        },\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial005.py",
    "type": "function",
    "name": "test_token_no_username",
    "loc": 135,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial005.py:function:test_token_no_scope:chunk1",
    "text": "def test_token_no_scope(mod: ModuleType):\n    client = TestClient(mod.app)\n\n    access_token = get_access_token(client=client)\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not enough permissions\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial005.py",
    "type": "function",
    "name": "test_token_no_scope",
    "loc": 149,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial005.py:function:test_token_nonexistent_user:chunk1",
    "text": "def test_token_nonexistent_user(mod: ModuleType):\n    client = TestClient(mod.app)\n\n    response = client.get(\n        \"/users/me\",\n        headers={\n            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VybmFtZTpib2IifQ.HcfCW67Uda-0gz54ZWTqmtgJnZeNem0Q757eTa9EZuw\"\n        },\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial005.py",
    "type": "function",
    "name": "test_token_nonexistent_user",
    "loc": 161,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial005.py:function:test_token_inactive_user:chunk1",
    "text": "def test_token_inactive_user(mod: ModuleType):\n    client = TestClient(mod.app)\n\n    access_token = get_access_token(\n        username=\"alice\", password=\"secretalice\", scope=\"me\", client=client\n    )\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Inactive user\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial005.py",
    "type": "function",
    "name": "test_token_inactive_user",
    "loc": 175,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial005.py:function:test_read_items:chunk1",
    "text": "def test_read_items(mod: ModuleType):\n    client = TestClient(mod.app)\n    access_token = get_access_token(scope=\"me items\", client=client)\n    response = client.get(\n        \"/users/me/items/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item_id\": \"Foo\", \"owner\": \"johndoe\"}]",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial005.py",
    "type": "function",
    "name": "test_read_items",
    "loc": 188,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial005.py:function:test_read_system_status:chunk1",
    "text": "def test_read_system_status(mod: ModuleType):\n    client = TestClient(mod.app)\n    access_token = get_access_token(client=client)\n    response = client.get(\n        \"/status/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"status\": \"ok\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial005.py",
    "type": "function",
    "name": "test_read_system_status",
    "loc": 198,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial005.py:function:test_read_system_status_no_token:chunk1",
    "text": "def test_read_system_status_no_token(mod: ModuleType):\n    client = TestClient(mod.app)\n    response = client.get(\"/status/\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial005.py",
    "type": "function",
    "name": "test_read_system_status_no_token",
    "loc": 208,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial005.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(mod: ModuleType):\n    client = TestClient(mod.app)\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/token\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login For Access Token\",\n                    \"operationId\": \"login_for_access_token_token_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/users/me/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                    \"summary\": \"Read Users Me\",\n                    \"operationId\": \"read_users_me_users_me__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n                }\n            },\n            \"/users/me/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Own Items\",\n                    \"operationId\": \"read_own_items_users_me_items__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n                }\n            },\n            \"/status/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read System Status\",\n                    \"operationId\": \"read_system_status_status__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": IsOneOf(\n                        [\"username\", \"email\", \"full_name\", \"disabled\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"username\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"email\": IsDict(\n                            {\n                                \"title\": \"Email\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Email\", \"type\": \"string\"}\n                        ),\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                        \"disabled\": IsDict(\n                            {\n                                \"title\": \"Disabled\",\n                                \"anyOf\": [{\"type\": \"boolean\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Disabled\", \"type\": \"boolean\"}\n                        ),\n                    },\n                },\n                \"Token\": {\n                    \"title\": \"Token\",\n                    \"required\": [\"access_token\", \"token_type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n                        \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n                    },\n                },\n                \"Body_login_for_access_token_token_post\": {\n                    \"title\": \"Body_login_for_access_token_token_post\",\n                    \"required\": [\"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"grant_type\": IsDict(\n                            {\n                                \"title\": \"Grant Type\",\n                                \"anyOf\": [\n                                    {\"pattern\": \"^password$\", \"type\": \"string\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Grant Type\",\n                                \"pattern\": \"^password$\",\n                                \"type\": \"string\",\n                            }\n                        ),\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n                        \"client_id\": IsDict(\n                            {\n                                \"title\": \"Client Id\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Id\", \"type\": \"string\"}\n                        ),\n                        \"client_secret\": IsDict(\n                            {\n                                \"title\": \"Client Secret\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            },\n            \"securitySchemes\": {\n                \"OAuth2PasswordBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\n                        \"password\": {\n                            \"scopes\": {\n                                \"me\": \"Read information about the current user.\",\n                                \"items\": \"Read items.\",\n                            },\n                            \"tokenUrl\": \"token\",\n                        }\n                    },\n                }\n            },\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial005.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 216,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial006.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.security.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial006.py",
    "type": "function",
    "name": "get_client",
    "loc": 18,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial006.py:function:test_security_http_basic:chunk1",
    "text": "def test_security_http_basic(client: TestClient):\n    response = client.get(\"/users/me\", auth=(\"john\", \"secret\"))\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"john\", \"password\": \"secret\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial006.py",
    "type": "function",
    "name": "test_security_http_basic",
    "loc": 25,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial006.py:function:test_security_http_basic_no_credentials:chunk1",
    "text": "def test_security_http_basic_no_credentials(client: TestClient):\n    response = client.get(\"/users/me\")\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial006.py",
    "type": "function",
    "name": "test_security_http_basic_no_credentials",
    "loc": 31,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial006.py:function:test_security_http_basic_invalid_credentials:chunk1",
    "text": "def test_security_http_basic_invalid_credentials(client: TestClient):\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Basic notabase64token\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial006.py",
    "type": "function",
    "name": "test_security_http_basic_invalid_credentials",
    "loc": 38,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial006.py:function:test_security_http_basic_non_basic_credentials:chunk1",
    "text": "def test_security_http_basic_non_basic_credentials(client: TestClient):\n    payload = b64encode(b\"johnsecret\").decode(\"ascii\")\n    auth_header = f\"Basic {payload}\"\n    response = client.get(\"/users/me\", headers={\"Authorization\": auth_header})\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial006.py",
    "type": "function",
    "name": "test_security_http_basic_non_basic_credentials",
    "loc": 47,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_security\\test_tutorial006.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPBasic\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_security\\test_tutorial006.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 56,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_separate_openapi_schemas\\test_tutorial001.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest) -> TestClient:\n    mod = importlib.import_module(f\"docs_src.separate_openapi_schemas.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_separate_openapi_schemas\\test_tutorial001.py",
    "type": "function",
    "name": "get_client",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_separate_openapi_schemas\\test_tutorial001.py:function:test_create_item:chunk1",
    "text": "def test_create_item(client: TestClient) -> None:\n    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo\", \"description\": None}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_separate_openapi_schemas\\test_tutorial001.py",
    "type": "function",
    "name": "test_create_item",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_separate_openapi_schemas\\test_tutorial001.py:function:test_read_items:chunk1",
    "text": "def test_read_items(client: TestClient) -> None:\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\n            \"name\": \"Portal Gun\",\n            \"description\": \"Device to travel through the multi-rick-verse\",\n        },\n        {\"name\": \"Plumbus\", \"description\": None},\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_separate_openapi_schemas\\test_tutorial001.py",
    "type": "function",
    "name": "test_read_items",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_separate_openapi_schemas\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient) -> None:\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                        \"type\": \"array\",\n                                        \"title\": \"Response Read Items Items  Get\",\n                                    }\n                                }\n                            },\n                        }\n                    },\n                },\n                \"post\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                },\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Item\": {\n                    \"properties\": {\n                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"name\"],\n                    \"title\": \"Item\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_separate_openapi_schemas\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 43,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_separate_openapi_schemas\\test_tutorial002.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest) -> TestClient:\n    mod = importlib.import_module(f\"docs_src.separate_openapi_schemas.{request.param}\")\n\n    client = TestClient(mod.app)\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_separate_openapi_schemas\\test_tutorial002.py",
    "type": "function",
    "name": "get_client",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_separate_openapi_schemas\\test_tutorial002.py:function:test_create_item:chunk1",
    "text": "def test_create_item(client: TestClient) -> None:\n    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo\", \"description\": None}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_separate_openapi_schemas\\test_tutorial002.py",
    "type": "function",
    "name": "test_create_item",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_separate_openapi_schemas\\test_tutorial002.py:function:test_read_items:chunk1",
    "text": "def test_read_items(client: TestClient) -> None:\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\n            \"name\": \"Portal Gun\",\n            \"description\": \"Device to travel through the multi-rick-verse\",\n        },\n        {\"name\": \"Plumbus\", \"description\": None},\n    ]",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_separate_openapi_schemas\\test_tutorial002.py",
    "type": "function",
    "name": "test_read_items",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_separate_openapi_schemas\\test_tutorial002.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient) -> None:\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                        \"type\": \"array\",\n                                        \"title\": \"Response Read Items Items  Get\",\n                                    }\n                                }\n                            },\n                        }\n                    },\n                },\n                \"post\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                },\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Item\": {\n                    \"properties\": {\n                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"name\"],\n                    \"title\": \"Item\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_separate_openapi_schemas\\test_tutorial002.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 43,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_settings\\test_app02.py:function:test_settings:chunk1",
    "text": "def test_settings(monkeypatch: MonkeyPatch):\n    from docs_src.settings.app02 import main\n\n    monkeypatch.setenv(\"ADMIN_EMAIL\", \"admin@example.com\")\n    settings = main.get_settings()\n    assert settings.app_name == \"Awesome API\"\n    assert settings.items_per_user == 50",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_settings\\test_app02.py",
    "type": "function",
    "name": "test_settings",
    "loc": 7,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_settings\\test_app02.py:function:test_override_settings:chunk1",
    "text": "def test_override_settings():\n    from docs_src.settings.app02 import test_main\n\n    test_main.test_app()",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_settings\\test_app02.py",
    "type": "function",
    "name": "test_override_settings",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_settings\\test_tutorial001.py:function:test_settings:chunk1",
    "text": "def test_settings(monkeypatch: MonkeyPatch):\n    monkeypatch.setenv(\"ADMIN_EMAIL\", \"admin@example.com\")\n    from docs_src.settings.tutorial001 import app\n\n    client = TestClient(app)\n    response = client.get(\"/info\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"app_name\": \"Awesome API\",\n        \"admin_email\": \"admin@example.com\",\n        \"items_per_user\": 50,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_settings\\test_tutorial001.py",
    "type": "function",
    "name": "test_settings",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_settings\\test_tutorial001_pv1.py:function:test_settings:chunk1",
    "text": "def test_settings(monkeypatch: MonkeyPatch):\n    monkeypatch.setenv(\"ADMIN_EMAIL\", \"admin@example.com\")\n    from docs_src.settings.tutorial001_pv1 import app\n\n    client = TestClient(app)\n    response = client.get(\"/info\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"app_name\": \"Awesome API\",\n        \"admin_email\": \"admin@example.com\",\n        \"items_per_user\": 50,\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_settings\\test_tutorial001_pv1.py",
    "type": "function",
    "name": "test_settings",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_sql_databases\\test_tutorial001.py:function:clear_sqlmodel:chunk1",
    "text": "def clear_sqlmodel():\n    # Clear the tables in the metadata for the default base model\n    SQLModel.metadata.clear()\n    # Clear the Models associated with the registry, to avoid warnings\n    default_registry.dispose()",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_sql_databases\\test_tutorial001.py",
    "type": "function",
    "name": "clear_sqlmodel",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_sql_databases\\test_tutorial001.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    clear_sqlmodel()\n    # TODO: remove when updating SQL tutorial to use new lifespan API\n    with warnings.catch_warnings(record=True):\n        warnings.simplefilter(\"always\")\n        mod = importlib.import_module(f\"docs_src.sql_databases.{request.param}\")\n        clear_sqlmodel()\n        importlib.reload(mod)\n    mod.sqlite_url = \"sqlite://\"\n    mod.engine = create_engine(\n        mod.sqlite_url, connect_args={\"check_same_thread\": False}, poolclass=StaticPool\n    )\n\n    with TestClient(mod.app) as c:\n        yield c",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_sql_databases\\test_tutorial001.py",
    "type": "function",
    "name": "get_client",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_sql_databases\\test_tutorial001.py:function:test_crud_app:chunk1",
    "text": "def test_crud_app(client: TestClient):\n    # TODO: this warns that SQLModel.from_orm is deprecated in Pydantic v1, refactor\n    # this if using obj.model_validate becomes independent of Pydantic v2\n    with warnings.catch_warnings(record=True):\n        warnings.simplefilter(\"always\")\n        # No heroes before creating\n        response = client.get(\"heroes/\")\n        assert response.status_code == 200, response.text\n        assert response.json() == []\n\n        # Create a hero\n        response = client.post(\n            \"/heroes/\",\n            json={\n                \"id\": 999,\n                \"name\": \"Dead Pond\",\n                \"age\": 30,\n                \"secret_name\": \"Dive Wilson\",\n            },\n        )\n        assert response.status_code == 200, response.text\n        assert response.json() == snapshot(\n            {\"age\": 30, \"secret_name\": \"Dive Wilson\", \"id\": 999, \"name\": \"Dead Pond\"}\n        )\n\n        # Read a hero\n        hero_id = response.json()[\"id\"]\n        response = client.get(f\"/heroes/{hero_id}\")\n        assert response.status_code == 200, response.text\n        assert response.json() == snapshot(\n            {\"name\": \"Dead Pond\", \"age\": 30, \"id\": 999, \"secret_name\": \"Dive Wilson\"}\n        )\n\n        # Read all heroes\n        # Create more heroes first\n        response = client.post(\n            \"/heroes/\",\n            json={\"name\": \"Spider-Boy\", \"age\": 18, \"secret_name\": \"Pedro Parqueador\"},\n        )\n        assert response.status_code == 200, response.text\n        response = client.post(\n            \"/heroes/\", json={\"name\": \"Rusty-Man\", \"secret_name\": \"Tommy Sharp\"}\n        )\n        assert response.status_code == 200, response.text\n\n        response = client.get(\"/heroes/\")\n        assert response.status_code == 200, response.text\n        assert response.json() == snapshot(\n            [\n                {\n                    \"name\": \"Dead Pond\",\n                    \"age\": 30,\n                    \"id\": IsInt(),\n                    \"secret_name\": \"Dive Wilson\",\n                },\n                {\n                    \"name\": \"Spider-Boy\",\n                    \"age\": 18,\n                    \"id\": IsInt(),\n                    \"secret_name\": \"Pedro Parqueador\",\n                },\n                {\n                    \"name\": \"Rusty-Man\",\n                    \"age\": None,\n                    \"id\": IsInt(),\n                    \"secret_name\": \"Tommy Sharp\",\n                },\n            ]\n        )\n\n        response = client.get(\"/heroes/?offset=1&limit=1\")\n        assert response.status_code == 200, response.text\n        assert response.json() == snapshot(\n            [\n                {\n                    \"name\": \"Spider-Boy\",\n                    \"age\": 18,\n                    \"id\": IsInt(),\n                    \"secret_name\": \"Pedro Parqueador\",\n                }\n            ]\n        )\n\n        # Delete a hero\n        response = client.delete(f\"/heroes/{hero_id}\")\n        assert response.status_code == 200, response.text\n        assert response.json() == snapshot({\"ok\": True})\n\n        response = client.get(f\"/heroes/{hero_id}\")\n        assert response.status_code == 404, response.text\n\n        response = client.delete(f\"/heroes/{hero_id}\")\n        assert response.status_code == 404, response.text\n        assert response.json() == snapshot({\"detail\": \"Hero not found\"})",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_sql_databases\\test_tutorial001.py",
    "type": "function",
    "name": "test_crud_app",
    "loc": 50,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_sql_databases\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == snapshot(\n        {\n            \"openapi\": \"3.1.0\",\n            \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n            \"paths\": {\n                \"/heroes/\": {\n                    \"post\": {\n                        \"summary\": \"Create Hero\",\n                        \"operationId\": \"create_hero_heroes__post\",\n                        \"requestBody\": {\n                            \"required\": True,\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Hero\"}\n                                }\n                            },\n                        },\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\"$ref\": \"#/components/schemas/Hero\"}\n                                    }\n                                },\n                            },\n                            \"422\": {\n                                \"description\": \"Validation Error\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                        }\n                                    }\n                                },\n                            },\n                        },\n                    },\n                    \"get\": {\n                        \"summary\": \"Read Heroes\",\n                        \"operationId\": \"read_heroes_heroes__get\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"offset\",\n                                \"in\": \"query\",\n                                \"required\": False,\n                                \"schema\": {\n                                    \"type\": \"integer\",\n                                    \"default\": 0,\n                                    \"title\": \"Offset\",\n                                },\n                            },\n                            {\n                                \"name\": \"limit\",\n                                \"in\": \"query\",\n                                \"required\": False,\n                                \"schema\": {\n                                    \"type\": \"integer\",\n                                    \"maximum\": 100,\n                                    \"default\": 100,\n                                    \"title\": \"Limit\",\n                                },\n                            },\n                        ],\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"type\": \"array\",\n                                            \"items\": {\n                                                \"$ref\": \"#/components/schemas/Hero\"\n                                            },\n                                            \"title\": \"Response Read Heroes Heroes  Get\",\n                                        }\n                                    }\n                                },\n                            },\n                            \"422\": {\n                                \"description\": \"Validation Error\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                        }\n                                    }\n                                },\n                            },\n                        },\n                    },\n                },\n                \"/heroes/{hero_id}\": {\n                    \"get\": {\n                        \"summary\": \"Read Hero\",\n                        \"operationId\": \"read_hero_heroes__hero_id__get\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"hero_id\",\n                                \"in\": \"path\",\n                                \"required\": True,\n                                \"schema\": {\"type\": \"integer\", \"title\": \"Hero Id\"},\n                            }\n                        ],\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\"$ref\": \"#/components/schemas/Hero\"}\n                                    }\n                                },\n                            },\n                            \"422\": {\n                                \"description\": \"Validation Error\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                        }\n                                    }\n                                },\n                            },\n                        },\n                    },\n                    \"delete\": {\n                        \"summary\": \"Delete Hero\",\n                        \"operationId\": \"delete_hero_heroes__hero_id__delete\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"hero_id\",\n                                \"in\": \"path\",\n                                \"required\": True,\n                                \"schema\": {\"type\": \"integer\", \"title\": \"Hero Id\"},\n                            }\n                        ],\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\"application/json\": {\"schema\": {}}},\n                            },\n                            \"422\": {\n                                \"description\": \"Validation Error\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                        }\n                                    }\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n            \"components\": {\n                \"schemas\": {\n                    \"HTTPValidationError\": {\n                        \"properties\": {\n                            \"detail\": {\n                                \"items\": {\n                                    \"$ref\": \"#/components/schemas/ValidationError\"\n                                },\n                                \"type\": \"array\",\n                                \"title\": \"Detail\",\n                            }\n                        },\n                        \"type\": \"object\",\n                        \"title\": \"HTTPValidationError\",\n                    },\n                    \"Hero\": {\n                        \"properties\": {\n                            \"id\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Id\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"type\": \"integer\",\n                                    \"title\": \"Id\",\n                                }\n                            ),\n                            \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                            \"age\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Age\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"type\": \"integer\",\n                                    \"title\": \"Age\",\n                                }\n                            ),\n                            \"secret_name\": {\"type\": \"string\", \"title\": \"Secret Name\"},\n                        },\n                        \"type\": \"object\",\n                        \"required\": [\"name\", \"secret_name\"],\n                        \"title\": \"Hero\",\n                    },\n                    \"ValidationError\": {\n                        \"properties\": {\n                            \"loc\": {\n                                \"items\": {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                                },\n                                \"type\": \"array\",\n                                \"title\": \"Location\",\n                            },\n                            \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                            \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                        },\n                        \"type\": \"object\",\n                        \"required\": [\"loc\", \"msg\", \"type\"],\n                        \"title\": \"ValidationError\",\n                    },\n                }\n            },\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_sql_databases\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 146,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_sql_databases\\test_tutorial002.py:function:clear_sqlmodel:chunk1",
    "text": "def clear_sqlmodel():\n    # Clear the tables in the metadata for the default base model\n    SQLModel.metadata.clear()\n    # Clear the Models associated with the registry, to avoid warnings\n    default_registry.dispose()",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_sql_databases\\test_tutorial002.py",
    "type": "function",
    "name": "clear_sqlmodel",
    "loc": 15,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_sql_databases\\test_tutorial002.py:function:get_client:chunk1",
    "text": "def get_client(request: pytest.FixtureRequest):\n    clear_sqlmodel()\n    # TODO: remove when updating SQL tutorial to use new lifespan API\n    with warnings.catch_warnings(record=True):\n        warnings.simplefilter(\"always\")\n        mod = importlib.import_module(f\"docs_src.sql_databases.{request.param}\")\n        clear_sqlmodel()\n        importlib.reload(mod)\n    mod.sqlite_url = \"sqlite://\"\n    mod.engine = create_engine(\n        mod.sqlite_url, connect_args={\"check_same_thread\": False}, poolclass=StaticPool\n    )\n\n    with TestClient(mod.app) as c:\n        yield c",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_sql_databases\\test_tutorial002.py",
    "type": "function",
    "name": "get_client",
    "loc": 33,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_sql_databases\\test_tutorial002.py:function:test_crud_app:chunk1",
    "text": "def test_crud_app(client: TestClient):\n    # TODO: this warns that SQLModel.from_orm is deprecated in Pydantic v1, refactor\n    # this if using obj.model_validate becomes independent of Pydantic v2\n    with warnings.catch_warnings(record=True):\n        warnings.simplefilter(\"always\")\n        # No heroes before creating\n        response = client.get(\"heroes/\")\n        assert response.status_code == 200, response.text\n        assert response.json() == []\n\n        # Create a hero\n        response = client.post(\n            \"/heroes/\",\n            json={\n                \"id\": 9000,\n                \"name\": \"Dead Pond\",\n                \"age\": 30,\n                \"secret_name\": \"Dive Wilson\",\n            },\n        )\n        assert response.status_code == 200, response.text\n        assert response.json() == snapshot(\n            {\"age\": 30, \"id\": IsInt(), \"name\": \"Dead Pond\"}\n        )\n        assert (\n            response.json()[\"id\"] != 9000\n        ), \"The ID should be generated by the database\"\n\n        # Read a hero\n        hero_id = response.json()[\"id\"]\n        response = client.get(f\"/heroes/{hero_id}\")\n        assert response.status_code == 200, response.text\n        assert response.json() == snapshot(\n            {\"name\": \"Dead Pond\", \"age\": 30, \"id\": IsInt()}\n        )\n\n        # Read all heroes\n        # Create more heroes first\n        response = client.post(\n            \"/heroes/\",\n            json={\"name\": \"Spider-Boy\", \"age\": 18, \"secret_name\": \"Pedro Parqueador\"},\n        )\n        assert response.status_code == 200, response.text\n        response = client.post(\n            \"/heroes/\", json={\"name\": \"Rusty-Man\", \"secret_name\": \"Tommy Sharp\"}\n        )\n        assert response.status_code == 200, response.text\n\n        response = client.get(\"/heroes/\")\n        assert response.status_code == 200, response.text\n        assert response.json() == snapshot(\n            [\n                {\"name\": \"Dead Pond\", \"age\": 30, \"id\": IsInt()},\n                {\"name\": \"Spider-Boy\", \"age\": 18, \"id\": IsInt()},\n                {\"name\": \"Rusty-Man\", \"age\": None, \"id\": IsInt()},\n            ]\n        )\n\n        response = client.get(\"/heroes/?offset=1&limit=1\")\n        assert response.status_code == 200, response.text\n        assert response.json() == snapshot(\n            [{\"name\": \"Spider-Boy\", \"age\": 18, \"id\": IsInt()}]\n        )\n\n        # Update a hero\n        response = client.patch(\n            f\"/heroes/{hero_id}\", json={\"name\": \"Dog Pond\", \"age\": None}\n        )\n        assert response.status_code == 200, response.text\n        assert response.json() == snapshot(\n            {\"name\": \"Dog Pond\", \"age\": None, \"id\": hero_id}\n        )\n\n        # Get updated hero\n        response = client.get(f\"/heroes/{hero_id}\")\n        assert response.status_code == 200, response.text\n        assert response.json() == snapshot(\n            {\"name\": \"Dog Pond\", \"age\": None, \"id\": hero_id}\n        )\n\n        # Delete a hero\n        response = client.delete(f\"/heroes/{hero_id}\")\n        assert response.status_code == 200, response.text\n        assert response.json() == snapshot({\"ok\": True})\n\n        # The hero is no longer found\n        response = client.get(f\"/heroes/{hero_id}\")\n        assert response.status_code == 404, response.text\n\n        # Delete a hero that does not exist\n        response = client.delete(f\"/heroes/{hero_id}\")\n        assert response.status_code == 404, response.text\n        assert response.json() == snapshot({\"detail\": \"Hero not found\"})\n\n        # Update a hero that does not exist\n        response = client.patch(f\"/heroes/{hero_id}\", json={\"name\": \"Dog Pond\"})\n        assert response.status_code == 404, response.text\n        assert response.json() == snapshot({\"detail\": \"Hero not found\"})",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_sql_databases\\test_tutorial002.py",
    "type": "function",
    "name": "test_crud_app",
    "loc": 50,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_sql_databases\\test_tutorial002.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == snapshot(\n        {\n            \"openapi\": \"3.1.0\",\n            \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n            \"paths\": {\n                \"/heroes/\": {\n                    \"post\": {\n                        \"summary\": \"Create Hero\",\n                        \"operationId\": \"create_hero_heroes__post\",\n                        \"requestBody\": {\n                            \"required\": True,\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HeroCreate\"\n                                    }\n                                }\n                            },\n                        },\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HeroPublic\"\n                                        }\n                                    }\n                                },\n                            },\n                            \"422\": {\n                                \"description\": \"Validation Error\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                        }\n                                    }\n                                },\n                            },\n                        },\n                    },\n                    \"get\": {\n                        \"summary\": \"Read Heroes\",\n                        \"operationId\": \"read_heroes_heroes__get\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"offset\",\n                                \"in\": \"query\",\n                                \"required\": False,\n                                \"schema\": {\n                                    \"type\": \"integer\",\n                                    \"default\": 0,\n                                    \"title\": \"Offset\",\n                                },\n                            },\n                            {\n                                \"name\": \"limit\",\n                                \"in\": \"query\",\n                                \"required\": False,\n                                \"schema\": {\n                                    \"type\": \"integer\",\n                                    \"maximum\": 100,\n                                    \"default\": 100,\n                                    \"title\": \"Limit\",\n                                },\n                            },\n                        ],\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"type\": \"array\",\n                                            \"items\": {\n                                                \"$ref\": \"#/components/schemas/HeroPublic\"\n                                            },\n                                            \"title\": \"Response Read Heroes Heroes  Get\",\n                                        }\n                                    }\n                                },\n                            },\n                            \"422\": {\n                                \"description\": \"Validation Error\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                        }\n                                    }\n                                },\n                            },\n                        },\n                    },\n                },\n                \"/heroes/{hero_id}\": {\n                    \"get\": {\n                        \"summary\": \"Read Hero\",\n                        \"operationId\": \"read_hero_heroes__hero_id__get\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"hero_id\",\n                                \"in\": \"path\",\n                                \"required\": True,\n                                \"schema\": {\"type\": \"integer\", \"title\": \"Hero Id\"},\n                            }\n                        ],\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HeroPublic\"\n                                        }\n                                    }\n                                },\n                            },\n                            \"422\": {\n                                \"description\": \"Validation Error\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                        }\n                                    }\n                                },\n                            },\n                        },\n                    },\n                    \"patch\": {\n                        \"summary\": \"Update Hero\",\n                        \"operationId\": \"update_hero_heroes__hero_id__patch\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"hero_id\",\n                                \"in\": \"path\",\n                                \"required\": True,\n                                \"schema\": {\"type\": \"integer\", \"title\": \"Hero Id\"},\n                            }\n                        ],\n                        \"requestBody\": {\n                            \"required\": True,\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HeroUpdate\"\n                                    }\n                                }\n                            },\n                        },\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HeroPublic\"\n                                        }\n                                    }\n                                },\n                            },\n                            \"422\": {\n                                \"description\": \"Validation Error\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                        }\n                                    }\n                                },\n                            },\n                        },\n                    },\n                    \"delete\": {\n                        \"summary\": \"Delete Hero\",\n                        \"operationId\": \"delete_hero_heroes__hero_id__delete\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"hero_id\",\n                                \"in\": \"path\",\n                                \"required\": True,\n                                \"schema\": {\"type\": \"integer\", \"title\": \"Hero Id\"},\n                            }\n                        ],\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\"application/json\": {\"schema\": {}}},\n                            },\n                            \"422\": {\n                                \"description\": \"Validation Error\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                        }\n                                    }\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n            \"components\": {\n                \"schemas\": {\n                    \"HTTPValidationError\": {\n                        \"properties\": {\n                            \"detail\": {\n                                \"items\": {\n                                    \"$ref\": \"#/components/schemas/ValidationError\"\n                                },\n                                \"type\": \"array\",\n                                \"title\": \"Detail\",\n                            }\n                        },\n                        \"type\": \"object\",\n                        \"title\": \"HTTPValidationError\",\n                    },\n                    \"HeroCreate\": {\n                        \"properties\": {\n                            \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                            \"age\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Age\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"type\": \"integer\",\n                                    \"title\": \"Age\",\n                                }\n                            ),\n                            \"secret_name\": {\"type\": \"string\", \"title\": \"Secret Name\"},\n                        },\n                        \"type\": \"object\",\n                        \"required\": [\"name\", \"secret_name\"],\n                        \"title\": \"HeroCreate\",\n                    },\n                    \"HeroPublic\": {\n                        \"properties\": {\n                            \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                            \"age\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Age\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"type\": \"integer\",\n                                    \"title\": \"Age\",\n                                }\n                            ),\n                            \"id\": {\"type\": \"integer\", \"title\": \"Id\"},\n                        },\n                        \"type\": \"object\",\n                        \"required\": [\"name\", \"id\"],\n                        \"title\": \"HeroPublic\",\n                    },\n                    \"HeroUpdate\": {\n                        \"properties\": {\n                            \"name\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Name\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"type\": \"string\",\n                                    \"title\": \"Name\",\n                                }\n                            ),\n                            \"age\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Age\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"type\": \"integer\",\n                                    \"title\": \"Age\",\n                                }\n                            ),\n                            \"secret_name\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Secret Name\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"type\": \"string\",\n                                    \"title\": \"Secret Name\",\n                                }\n                            ),\n                        },\n                        \"type\": \"object\",\n                        \"title\": \"HeroUpdate\",\n                    },\n                    \"ValidationError\": {\n                        \"properties\": {\n                            \"loc\": {\n                                \"items\": {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                                },\n                                \"type\": \"array\",\n                                \"title\": \"Location\",\n                            },\n                            \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                            \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                        },\n                        \"type\": \"object\",\n                        \"required\": [\"loc\", \"msg\", \"type\"],\n                        \"title\": \"ValidationError\",\n                    },\n                }\n            },\n        }\n    )",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_sql_databases\\test_tutorial002.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 150,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_sub_applications\\test_tutorial001.py:function:test_openapi_schema_main:chunk1",
    "text": "def test_openapi_schema_main():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == openapi_schema_main",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_sub_applications\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema_main",
    "loc": 46,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_sub_applications\\test_tutorial001.py:function:test_main:chunk1",
    "text": "def test_main():\n    response = client.get(\"/app\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Hello World from main app\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_sub_applications\\test_tutorial001.py",
    "type": "function",
    "name": "test_main",
    "loc": 52,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_sub_applications\\test_tutorial001.py:function:test_openapi_schema_sub:chunk1",
    "text": "def test_openapi_schema_sub():\n    response = client.get(\"/subapi/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == openapi_schema_sub",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_sub_applications\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema_sub",
    "loc": 58,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_sub_applications\\test_tutorial001.py:function:test_sub:chunk1",
    "text": "def test_sub():\n    response = client.get(\"/subapi/sub\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Hello World from sub API\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_sub_applications\\test_tutorial001.py",
    "type": "function",
    "name": "test_sub",
    "loc": 64,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_templates\\test_tutorial001.py:function:test_main:chunk1",
    "text": "def test_main():\n    if os.path.isdir(\"./static\"):  # pragma: nocover\n        shutil.rmtree(\"./static\")\n    if os.path.isdir(\"./templates\"):  # pragma: nocover\n        shutil.rmtree(\"./templates\")\n    shutil.copytree(\"./docs_src/templates/templates/\", \"./templates\")\n    shutil.copytree(\"./docs_src/templates/static/\", \"./static\")\n    from docs_src.templates.tutorial001 import app\n\n    client = TestClient(app)\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert (\n        b'<h1><a href=\"http://testserver/items/foo\">Item ID: foo</a></h1>'\n        in response.content\n    )\n    response = client.get(\"/static/styles.css\")\n    assert response.status_code == 200, response.text\n    assert b\"color: green;\" in response.content\n    shutil.rmtree(\"./templates\")\n    shutil.rmtree(\"./static\")",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_templates\\test_tutorial001.py",
    "type": "function",
    "name": "test_main",
    "loc": 7,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_testing\\test_main.py:function:test_main:chunk1",
    "text": "def test_main():\n    test_read_main()",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_testing\\test_main.py",
    "type": "function",
    "name": "test_main",
    "loc": 4,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_testing\\test_main.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Main\",\n                    \"operationId\": \"read_main__get\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_testing\\test_main.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_testing\\test_main_b.py:function:get_test_module:chunk1",
    "text": "def get_test_module(request: pytest.FixtureRequest) -> ModuleType:\n    mod: ModuleType = importlib.import_module(f\"docs_src.app_testing.{request.param}\")\n    return mod",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_testing\\test_main_b.py",
    "type": "function",
    "name": "get_test_module",
    "loc": 19,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_testing\\test_main_b.py:function:test_app:chunk1",
    "text": "def test_app(test_module: ModuleType):\n    test_main = test_module\n    test_main.test_create_existing_item()\n    test_main.test_create_item()\n    test_main.test_create_item_bad_token()\n    test_main.test_read_nonexistent_item()\n    test_main.test_read_item()\n    test_main.test_read_item_bad_token()",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_testing\\test_main_b.py",
    "type": "function",
    "name": "test_app",
    "loc": 24,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_testing\\test_tutorial001.py:function:test_main:chunk1",
    "text": "def test_main():\n    test_read_main()",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_testing\\test_tutorial001.py",
    "type": "function",
    "name": "test_main",
    "loc": 4,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_testing\\test_tutorial001.py:function:test_openapi_schema:chunk1",
    "text": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Main\",\n                    \"operationId\": \"read_main__get\",\n                }\n            }\n        },\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_testing\\test_tutorial001.py",
    "type": "function",
    "name": "test_openapi_schema",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_testing\\test_tutorial002.py:function:test_main:chunk1",
    "text": "def test_main():\n    test_read_main()",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_testing\\test_tutorial002.py",
    "type": "function",
    "name": "test_main",
    "loc": 4,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_testing\\test_tutorial002.py:function:test_ws:chunk1",
    "text": "def test_ws():\n    test_websocket()",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_testing\\test_tutorial002.py",
    "type": "function",
    "name": "test_ws",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_testing\\test_tutorial003.py:function:test_main:chunk1",
    "text": "def test_main():\n    with pytest.warns(DeprecationWarning):\n        from docs_src.app_testing.tutorial003 import test_read_items\n    test_read_items()",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_testing\\test_tutorial003.py",
    "type": "function",
    "name": "test_main",
    "loc": 4,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_testing_dependencies\\test_tutorial001.py:function:get_test_module:chunk1",
    "text": "def get_test_module(request: pytest.FixtureRequest) -> ModuleType:\n    mod: ModuleType = importlib.import_module(\n        f\"docs_src.dependency_testing.{request.param}\"\n    )\n    return mod",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_testing_dependencies\\test_tutorial001.py",
    "type": "function",
    "name": "get_test_module",
    "loc": 19,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_testing_dependencies\\test_tutorial001.py:function:test_override_in_items_run:chunk1",
    "text": "def test_override_in_items_run(test_module: ModuleType):\n    test_override_in_items = test_module.test_override_in_items\n\n    test_override_in_items()",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_testing_dependencies\\test_tutorial001.py",
    "type": "function",
    "name": "test_override_in_items_run",
    "loc": 26,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_testing_dependencies\\test_tutorial001.py:function:test_override_in_items_with_q_run:chunk1",
    "text": "def test_override_in_items_with_q_run(test_module: ModuleType):\n    test_override_in_items_with_q = test_module.test_override_in_items_with_q\n\n    test_override_in_items_with_q()",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_testing_dependencies\\test_tutorial001.py",
    "type": "function",
    "name": "test_override_in_items_with_q_run",
    "loc": 32,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_testing_dependencies\\test_tutorial001.py:function:test_override_in_items_with_params_run:chunk1",
    "text": "def test_override_in_items_with_params_run(test_module: ModuleType):\n    test_override_in_items_with_params = test_module.test_override_in_items_with_params\n\n    test_override_in_items_with_params()",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_testing_dependencies\\test_tutorial001.py",
    "type": "function",
    "name": "test_override_in_items_with_params_run",
    "loc": 38,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_testing_dependencies\\test_tutorial001.py:function:test_override_in_users:chunk1",
    "text": "def test_override_in_users(test_module: ModuleType):\n    client = test_module.client\n    response = client.get(\"/users/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Users!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_testing_dependencies\\test_tutorial001.py",
    "type": "function",
    "name": "test_override_in_users",
    "loc": 44,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_testing_dependencies\\test_tutorial001.py:function:test_override_in_users_with_q:chunk1",
    "text": "def test_override_in_users_with_q(test_module: ModuleType):\n    client = test_module.client\n    response = client.get(\"/users/?q=foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Users!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_testing_dependencies\\test_tutorial001.py",
    "type": "function",
    "name": "test_override_in_users_with_q",
    "loc": 54,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_testing_dependencies\\test_tutorial001.py:function:test_override_in_users_with_params:chunk1",
    "text": "def test_override_in_users_with_params(test_module: ModuleType):\n    client = test_module.client\n    response = client.get(\"/users/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Users!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_testing_dependencies\\test_tutorial001.py",
    "type": "function",
    "name": "test_override_in_users_with_params",
    "loc": 64,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_testing_dependencies\\test_tutorial001.py:function:test_normal_app:chunk1",
    "text": "def test_normal_app(test_module: ModuleType):\n    app = test_module.app\n    client = test_module.client\n    app.dependency_overrides = None\n    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 100, \"limit\": 200},\n    }",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_testing_dependencies\\test_tutorial001.py",
    "type": "function",
    "name": "test_normal_app",
    "loc": 74,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_websockets\\test_tutorial001.py:function:test_main:chunk1",
    "text": "def test_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert b\"<!DOCTYPE html>\" in response.content",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_websockets\\test_tutorial001.py",
    "type": "function",
    "name": "test_main",
    "loc": 10,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_websockets\\test_tutorial001.py:function:test_websocket:chunk1",
    "text": "def test_websocket():\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/ws\") as websocket:\n            message = \"Message one\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}\"\n            message = \"Message two\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_websockets\\test_tutorial001.py",
    "type": "function",
    "name": "test_websocket",
    "loc": 16,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_websockets\\test_tutorial002.py:function:get_app:chunk1",
    "text": "def get_app(request: pytest.FixtureRequest):\n    mod = importlib.import_module(f\"docs_src.websockets.{request.param}\")\n\n    return mod.app",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_websockets\\test_tutorial002.py",
    "type": "function",
    "name": "get_app",
    "loc": 21,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_websockets\\test_tutorial002.py:function:test_main:chunk1",
    "text": "def test_main(app: FastAPI):\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert b\"<!DOCTYPE html>\" in response.content",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_websockets\\test_tutorial002.py",
    "type": "function",
    "name": "test_main",
    "loc": 27,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_websockets\\test_tutorial002.py:function:test_websocket_with_cookie:chunk1",
    "text": "def test_websocket_with_cookie(app: FastAPI):\n    client = TestClient(app, cookies={\"session\": \"fakesession\"})\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/foo/ws\") as websocket:\n            message = \"Message one\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: fakesession\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: foo\"\n            message = \"Message two\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: fakesession\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: foo\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_websockets\\test_tutorial002.py",
    "type": "function",
    "name": "test_websocket_with_cookie",
    "loc": 34,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_websockets\\test_tutorial002.py:function:test_websocket_with_header:chunk1",
    "text": "def test_websocket_with_header(app: FastAPI):\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/bar/ws?token=some-token\") as websocket:\n            message = \"Message one\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: bar\"\n            message = \"Message two\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: bar\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_websockets\\test_tutorial002.py",
    "type": "function",
    "name": "test_websocket_with_header",
    "loc": 52,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_websockets\\test_tutorial002.py:function:test_websocket_with_header_and_query:chunk1",
    "text": "def test_websocket_with_header_and_query(app: FastAPI):\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/2/ws?q=3&token=some-token\") as websocket:\n            message = \"Message one\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == \"Query parameter q is: 3\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: 2\"\n            message = \"Message two\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == \"Query parameter q is: 3\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: 2\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_websockets\\test_tutorial002.py",
    "type": "function",
    "name": "test_websocket_with_header_and_query",
    "loc": 70,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_websockets\\test_tutorial002.py:function:test_websocket_no_credentials:chunk1",
    "text": "def test_websocket_no_credentials(app: FastAPI):\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/foo/ws\"):\n            pytest.fail(\n                \"did not raise WebSocketDisconnect on __enter__\"\n            )  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_websockets\\test_tutorial002.py",
    "type": "function",
    "name": "test_websocket_no_credentials",
    "loc": 92,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_websockets\\test_tutorial002.py:function:test_websocket_invalid_data:chunk1",
    "text": "def test_websocket_invalid_data(app: FastAPI):\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/foo/ws?q=bar&token=some-token\"):\n            pytest.fail(\n                \"did not raise WebSocketDisconnect on __enter__\"\n            )  # pragma: no cover",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_websockets\\test_tutorial002.py",
    "type": "function",
    "name": "test_websocket_invalid_data",
    "loc": 101,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_websockets\\test_tutorial003.py:function:test_get:chunk1",
    "text": "def test_get():\n    response = client.get(\"/\")\n    assert response.text == html",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_websockets\\test_tutorial003.py",
    "type": "function",
    "name": "test_get",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_websockets\\test_tutorial003.py:function:test_websocket_handle_disconnection:chunk1",
    "text": "def test_websocket_handle_disconnection():\n    with client.websocket_connect(\"/ws/1234\") as connection, client.websocket_connect(\n        \"/ws/5678\"\n    ) as connection_two:\n        connection.send_text(\"Hello from 1234\")\n        data1 = connection.receive_text()\n        assert data1 == \"You wrote: Hello from 1234\"\n        data2 = connection_two.receive_text()\n        client1_says = \"Client #1234 says: Hello from 1234\"\n        assert data2 == client1_says\n        data1 = connection.receive_text()\n        assert data1 == client1_says\n        connection_two.close()\n        data1 = connection.receive_text()\n        assert data1 == \"Client #5678 left the chat\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_websockets\\test_tutorial003.py",
    "type": "function",
    "name": "test_websocket_handle_disconnection",
    "loc": 13,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_websockets\\test_tutorial003_py39.py:function:get_app:chunk1",
    "text": "def get_app():\n    from docs_src.websockets.tutorial003_py39 import app\n\n    return app",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_websockets\\test_tutorial003_py39.py",
    "type": "function",
    "name": "get_app",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_websockets\\test_tutorial003_py39.py:function:get_html:chunk1",
    "text": "def get_html():\n    from docs_src.websockets.tutorial003_py39 import html\n\n    return html",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_websockets\\test_tutorial003_py39.py",
    "type": "function",
    "name": "get_html",
    "loc": 16,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_websockets\\test_tutorial003_py39.py:function:get_client:chunk1",
    "text": "def get_client(app: FastAPI):\n    client = TestClient(app)\n\n    return client",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_websockets\\test_tutorial003_py39.py",
    "type": "function",
    "name": "get_client",
    "loc": 23,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_websockets\\test_tutorial003_py39.py:function:test_get:chunk1",
    "text": "def test_get(client: TestClient, html: str):\n    response = client.get(\"/\")\n    assert response.text == html",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_websockets\\test_tutorial003_py39.py",
    "type": "function",
    "name": "test_get",
    "loc": 30,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_websockets\\test_tutorial003_py39.py:function:test_websocket_handle_disconnection:chunk1",
    "text": "def test_websocket_handle_disconnection(client: TestClient):\n    with client.websocket_connect(\"/ws/1234\") as connection, client.websocket_connect(\n        \"/ws/5678\"\n    ) as connection_two:\n        connection.send_text(\"Hello from 1234\")\n        data1 = connection.receive_text()\n        assert data1 == \"You wrote: Hello from 1234\"\n        data2 = connection_two.receive_text()\n        client1_says = \"Client #1234 says: Hello from 1234\"\n        assert data2 == client1_says\n        data1 = connection.receive_text()\n        assert data1 == client1_says\n        connection_two.close()\n        data1 = connection.receive_text()\n        assert data1 == \"Client #5678 left the chat\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_websockets\\test_tutorial003_py39.py",
    "type": "function",
    "name": "test_websocket_handle_disconnection",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_wsgi\\test_tutorial001.py:function:test_flask:chunk1",
    "text": "def test_flask():\n    response = client.get(\"/v1/\")\n    assert response.status_code == 200, response.text\n    assert response.text == \"Hello, World from Flask!\"",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_wsgi\\test_tutorial001.py",
    "type": "function",
    "name": "test_flask",
    "loc": 8,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_tutorial\\test_wsgi\\test_tutorial001.py:function:test_app:chunk1",
    "text": "def test_app():\n    response = client.get(\"/v2\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Hello World\"}",
    "repo": "fastapi",
    "path": "tests\\test_tutorial\\test_wsgi\\test_tutorial001.py",
    "type": "function",
    "name": "test_app",
    "loc": 14,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response_recursive\\app_pv1.py:function:get_recursive:chunk1",
    "text": "def get_recursive():\n    return {\"name\": \"item\", \"sub_items\": [{\"name\": \"subitem\", \"sub_items\": []}]}",
    "repo": "fastapi",
    "path": "tests\\test_validate_response_recursive\\app_pv1.py",
    "type": "function",
    "name": "get_recursive",
    "loc": 31,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response_recursive\\app_pv1.py:function:get_recursive_submodel:chunk1",
    "text": "def get_recursive_submodel():\n    return {\n        \"name\": \"item\",\n        \"sub_items1\": [\n            {\n                \"name\": \"subitem\",\n                \"sub_items2\": [\n                    {\n                        \"name\": \"subsubitem\",\n                        \"sub_items1\": [{\"name\": \"subsubsubitem\", \"sub_items2\": []}],\n                    }\n                ],\n            }\n        ],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_validate_response_recursive\\app_pv1.py",
    "type": "function",
    "name": "get_recursive_submodel",
    "loc": 36,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response_recursive\\app_pv1.py:class:RecursiveItem:chunk1",
    "text": "class RecursiveItem(BaseModel):\n    sub_items: List[\"RecursiveItem\"] = []\n    name: str",
    "repo": "fastapi",
    "path": "tests\\test_validate_response_recursive\\app_pv1.py",
    "type": "class",
    "name": "RecursiveItem",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response_recursive\\app_pv1.py:class:RecursiveSubitemInSubmodel:chunk1",
    "text": "class RecursiveSubitemInSubmodel(BaseModel):\n    sub_items2: List[\"RecursiveItemViaSubmodel\"] = []\n    name: str",
    "repo": "fastapi",
    "path": "tests\\test_validate_response_recursive\\app_pv1.py",
    "type": "class",
    "name": "RecursiveSubitemInSubmodel",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response_recursive\\app_pv1.py:class:RecursiveItemViaSubmodel:chunk1",
    "text": "class RecursiveItemViaSubmodel(BaseModel):\n    sub_items1: List[RecursiveSubitemInSubmodel] = []\n    name: str",
    "repo": "fastapi",
    "path": "tests\\test_validate_response_recursive\\app_pv1.py",
    "type": "class",
    "name": "RecursiveItemViaSubmodel",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response_recursive\\app_pv2.py:function:get_recursive:chunk1",
    "text": "def get_recursive():\n    return {\"name\": \"item\", \"sub_items\": [{\"name\": \"subitem\", \"sub_items\": []}]}",
    "repo": "fastapi",
    "path": "tests\\test_validate_response_recursive\\app_pv2.py",
    "type": "function",
    "name": "get_recursive",
    "loc": 32,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response_recursive\\app_pv2.py:function:get_recursive_submodel:chunk1",
    "text": "def get_recursive_submodel():\n    return {\n        \"name\": \"item\",\n        \"sub_items1\": [\n            {\n                \"name\": \"subitem\",\n                \"sub_items2\": [\n                    {\n                        \"name\": \"subsubitem\",\n                        \"sub_items1\": [{\"name\": \"subsubsubitem\", \"sub_items2\": []}],\n                    }\n                ],\n            }\n        ],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_validate_response_recursive\\app_pv2.py",
    "type": "function",
    "name": "get_recursive_submodel",
    "loc": 37,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response_recursive\\app_pv2.py:class:RecursiveItem:chunk1",
    "text": "class RecursiveItem(BaseModel):\n    sub_items: List[\"RecursiveItem\"] = []\n    name: str",
    "repo": "fastapi",
    "path": "tests\\test_validate_response_recursive\\app_pv2.py",
    "type": "class",
    "name": "RecursiveItem",
    "loc": 9,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response_recursive\\app_pv2.py:class:RecursiveSubitemInSubmodel:chunk1",
    "text": "class RecursiveSubitemInSubmodel(BaseModel):\n    sub_items2: List[\"RecursiveItemViaSubmodel\"] = []\n    name: str",
    "repo": "fastapi",
    "path": "tests\\test_validate_response_recursive\\app_pv2.py",
    "type": "class",
    "name": "RecursiveSubitemInSubmodel",
    "loc": 17,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response_recursive\\app_pv2.py:class:RecursiveItemViaSubmodel:chunk1",
    "text": "class RecursiveItemViaSubmodel(BaseModel):\n    sub_items1: List[RecursiveSubitemInSubmodel] = []\n    name: str",
    "repo": "fastapi",
    "path": "tests\\test_validate_response_recursive\\app_pv2.py",
    "type": "class",
    "name": "RecursiveItemViaSubmodel",
    "loc": 22,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response_recursive\\test_validate_response_recursive_pv1.py:function:test_recursive:chunk1",
    "text": "def test_recursive():\n    from .app_pv1 import app\n\n    client = TestClient(app)\n    response = client.get(\"/items/recursive\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"sub_items\": [{\"name\": \"subitem\", \"sub_items\": []}],\n        \"name\": \"item\",\n    }\n\n    response = client.get(\"/items/recursive-submodel\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"item\",\n        \"sub_items1\": [\n            {\n                \"name\": \"subitem\",\n                \"sub_items2\": [\n                    {\n                        \"name\": \"subsubitem\",\n                        \"sub_items1\": [{\"name\": \"subsubsubitem\", \"sub_items2\": []}],\n                    }\n                ],\n            }\n        ],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_validate_response_recursive\\test_validate_response_recursive_pv1.py",
    "type": "function",
    "name": "test_recursive",
    "loc": 7,
    "role": "tests"
  },
  {
    "id": "fastapi:tests\\test_validate_response_recursive\\test_validate_response_recursive_pv2.py:function:test_recursive:chunk1",
    "text": "def test_recursive():\n    from .app_pv2 import app\n\n    client = TestClient(app)\n    response = client.get(\"/items/recursive\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"sub_items\": [{\"name\": \"subitem\", \"sub_items\": []}],\n        \"name\": \"item\",\n    }\n\n    response = client.get(\"/items/recursive-submodel\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"item\",\n        \"sub_items1\": [\n            {\n                \"name\": \"subitem\",\n                \"sub_items2\": [\n                    {\n                        \"name\": \"subsubitem\",\n                        \"sub_items1\": [{\"name\": \"subsubsubitem\", \"sub_items2\": []}],\n                    }\n                ],\n            }\n        ],\n    }",
    "repo": "fastapi",
    "path": "tests\\test_validate_response_recursive\\test_validate_response_recursive_pv2.py",
    "type": "function",
    "name": "test_recursive",
    "loc": 7,
    "role": "tests"
  }
]