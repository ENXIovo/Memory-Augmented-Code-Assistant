[
  {
    "id": "asv_benchmarks\\benchmarks\\cluster.py",
    "summary": "Benchmarks for KMeans. | classes: KMeansBenchmark, MiniBatchKMeansBenchmark | imports: sklearn, common, datasets, utils | [asv_benchmarks benchmarks cluster.py]",
    "role": "benchmarks",
    "loc": 79
  },
  {
    "id": "asv_benchmarks\\benchmarks\\common.py",
    "summary": "Abstract base class for all the benchmarks | classes: Benchmark, Estimator, Predictor, Transformer | functions: get_from_config, get_estimator_path, clear_tmp | imports: json, pickle, timeit, abc | [asv_benchmarks benchmarks common.py]",
    "role": "benchmarks",
    "loc": 186
  },
  {
    "id": "asv_benchmarks\\benchmarks\\datasets.py",
    "summary": "No description | functions: _blobs_dataset, _20newsgroups_highdim_dataset, _20newsgroups_lowdim_dataset, _mnist_dataset, _digits_dataset, _synth_regression_dataset | imports: numpy, scipy, joblib, sklearn | [asv_benchmarks benchmarks datasets.py]",
    "role": "benchmarks",
    "loc": 133
  },
  {
    "id": "asv_benchmarks\\benchmarks\\decomposition.py",
    "summary": "Benchmarks for PCA. | classes: PCABenchmark, DictionaryLearningBenchmark, MiniBatchDictionaryLearningBenchmark | imports: sklearn, common, datasets, utils | [asv_benchmarks benchmarks decomposition.py]",
    "role": "benchmarks",
    "loc": 68
  },
  {
    "id": "asv_benchmarks\\benchmarks\\ensemble.py",
    "summary": "Benchmarks for RandomForestClassifier. | classes: RandomForestClassifierBenchmark, GradientBoostingClassifierBenchmark, HistGradientBoostingClassifierBenchmark | imports: sklearn, common, datasets, utils | [asv_benchmarks benchmarks ensemble.py]",
    "role": "benchmarks",
    "loc": 87
  },
  {
    "id": "asv_benchmarks\\benchmarks\\linear_model.py",
    "summary": "Benchmarks for LogisticRegression. | classes: LogisticRegressionBenchmark, RidgeBenchmark, LinearRegressionBenchmark, SGDRegressorBenchmark, ElasticNetBenchmark, LassoBenchmark | imports: sklearn, common, datasets, utils | [asv_benchmarks benchmarks linear_model.py]",
    "role": "benchmarks",
    "loc": 183
  },
  {
    "id": "asv_benchmarks\\benchmarks\\manifold.py",
    "summary": "Benchmarks for t-SNE. | classes: TSNEBenchmark | imports: sklearn, common, datasets | [asv_benchmarks benchmarks manifold.py]",
    "role": "benchmarks",
    "loc": 22
  },
  {
    "id": "asv_benchmarks\\benchmarks\\metrics.py",
    "summary": "Benchmarks for pairwise distances. | classes: PairwiseDistancesBenchmark | imports: sklearn, common, datasets | [asv_benchmarks benchmarks metrics.py]",
    "role": "benchmarks",
    "loc": 34
  },
  {
    "id": "asv_benchmarks\\benchmarks\\model_selection.py",
    "summary": "Benchmarks for Cross Validation. | classes: CrossValidationBenchmark, GridSearchBenchmark | imports: sklearn, common, datasets, utils | [asv_benchmarks benchmarks model_selection.py]",
    "role": "benchmarks",
    "loc": 57
  },
  {
    "id": "asv_benchmarks\\benchmarks\\neighbors.py",
    "summary": "Benchmarks for KNeighborsClassifier. | classes: KNeighborsClassifierBenchmark | imports: sklearn, common, datasets, utils | [asv_benchmarks benchmarks neighbors.py]",
    "role": "benchmarks",
    "loc": 26
  },
  {
    "id": "asv_benchmarks\\benchmarks\\svm.py",
    "summary": "Benchmarks for SVC. | classes: SVCBenchmark | imports: sklearn, common, datasets, utils | [asv_benchmarks benchmarks svm.py]",
    "role": "benchmarks",
    "loc": 20
  },
  {
    "id": "asv_benchmarks\\benchmarks\\utils.py",
    "summary": "No description | functions: neg_mean_inertia, make_gen_classif_scorers, make_gen_reg_scorers, neg_mean_data_error, make_dict_learning_scorers, explained_variance_ratio | imports: numpy, sklearn | [asv_benchmarks benchmarks utils.py]",
    "role": "benchmarks",
    "loc": 32
  },
  {
    "id": "asv_benchmarks\\benchmarks\\__init__.py",
    "summary": "Benchmark suite for scikit-learn using ASV | [asv_benchmarks benchmarks __init__.py]",
    "role": "benchmarks",
    "loc": 1
  },
  {
    "id": "benchmarks\\bench_20newsgroups.py",
    "summary": "No description | imports: argparse, numpy, sklearn | [benchmarks bench_20newsgroups.py]",
    "role": "benchmarks",
    "loc": 81
  },
  {
    "id": "benchmarks\\bench_covertype.py",
    "summary": "Covertype dataset benchmark | functions: load_data | imports: argparse, numpy, joblib, sklearn | [benchmarks bench_covertype.py]",
    "role": "benchmarks",
    "loc": 193
  },
  {
    "id": "benchmarks\\bench_feature_expansions.py",
    "summary": "No description | imports: matplotlib, numpy, scipy, sklearn | [benchmarks bench_feature_expansions.py]",
    "role": "benchmarks",
    "loc": 49
  },
  {
    "id": "benchmarks\\bench_glm.py",
    "summary": "A comparison of different methods in GLM | imports: datetime, numpy, sklearn, matplotlib | [benchmarks bench_glm.py]",
    "role": "benchmarks",
    "loc": 40
  },
  {
    "id": "benchmarks\\bench_glmnet.py",
    "summary": "To run this, you'll need to have installed. | functions: rmse, bench | imports: gc, numpy, sklearn, matplotlib | [benchmarks bench_glmnet.py]",
    "role": "benchmarks",
    "loc": 104
  },
  {
    "id": "benchmarks\\bench_hist_gradient_boosting.py",
    "summary": "No description | functions: get_estimator_and_data, one_run | imports: argparse, matplotlib, numpy, sklearn | [benchmarks bench_hist_gradient_boosting.py]",
    "role": "benchmarks",
    "loc": 257
  },
  {
    "id": "benchmarks\\bench_hist_gradient_boosting_adult.py",
    "summary": "No description | functions: fit, predict | imports: argparse, numpy, pandas, sklearn | [benchmarks bench_hist_gradient_boosting_adult.py]",
    "role": "benchmarks",
    "loc": 83
  },
  {
    "id": "benchmarks\\bench_hist_gradient_boosting_categorical_only.py",
    "summary": "No description | functions: fit, predict | imports: argparse, sklearn | [benchmarks bench_hist_gradient_boosting_categorical_only.py]",
    "role": "benchmarks",
    "loc": 63
  },
  {
    "id": "benchmarks\\bench_hist_gradient_boosting_higgsboson.py",
    "summary": "No description | functions: load_data, fit, predict | imports: argparse, gzip, urllib, numpy | [benchmarks bench_hist_gradient_boosting_higgsboson.py]",
    "role": "benchmarks",
    "loc": 106
  },
  {
    "id": "benchmarks\\bench_hist_gradient_boosting_threading.py",
    "summary": "No description | functions: get_estimator_and_data, one_run | imports: argparse, pprint, numpy, threadpoolctl | [benchmarks bench_hist_gradient_boosting_threading.py]",
    "role": "benchmarks",
    "loc": 296
  },
  {
    "id": "benchmarks\\bench_isolation_forest.py",
    "summary": "IsolationForest benchmark | functions: print_outlier_ratio | imports: matplotlib, numpy, sklearn | [benchmarks bench_isolation_forest.py]",
    "role": "benchmarks",
    "loc": 127
  },
  {
    "id": "benchmarks\\bench_isolation_forest_predict.py",
    "summary": "IsolationForest prediction benchmark | functions: get_data, plot, bench | imports: argparse, numpy, pandas, joblib | [benchmarks bench_isolation_forest_predict.py]",
    "role": "benchmarks",
    "loc": 161
  },
  {
    "id": "benchmarks\\bench_isotonic.py",
    "summary": "Benchmarks of isotonic regression performance. | functions: generate_perturbed_logarithm_dataset, generate_logistic_dataset, generate_pathological_dataset, bench_isotonic_regression | imports: argparse, gc, timeit, matplotlib | [benchmarks bench_isotonic.py]",
    "role": "benchmarks",
    "loc": 85
  },
  {
    "id": "benchmarks\\bench_kernel_pca_solvers_time_vs_n_components.py",
    "summary": "Kernel PCA Solvers comparison benchmark: time vs n_components | imports: matplotlib, numpy, sklearn | [benchmarks bench_kernel_pca_solvers_time_vs_n_components.py]",
    "role": "benchmarks",
    "loc": 131
  },
  {
    "id": "benchmarks\\bench_kernel_pca_solvers_time_vs_n_samples.py",
    "summary": "Kernel PCA Solvers comparison benchmark: time vs n_samples | imports: matplotlib, numpy, sklearn | [benchmarks bench_kernel_pca_solvers_time_vs_n_samples.py]",
    "role": "benchmarks",
    "loc": 133
  },
  {
    "id": "benchmarks\\bench_lasso.py",
    "summary": "Benchmarks of Lasso vs LassoLars | functions: compute_bench | imports: gc, numpy, sklearn, matplotlib | [benchmarks bench_lasso.py]",
    "role": "benchmarks",
    "loc": 78
  },
  {
    "id": "benchmarks\\bench_lof.py",
    "summary": "LocalOutlierFactor benchmark | imports: matplotlib, numpy, sklearn | [benchmarks bench_lof.py]",
    "role": "benchmarks",
    "loc": 88
  },
  {
    "id": "benchmarks\\bench_mnist.py",
    "summary": "MNIST dataset benchmark | functions: load_data | imports: argparse, numpy, joblib, sklearn | [benchmarks bench_mnist.py]",
    "role": "benchmarks",
    "loc": 192
  },
  {
    "id": "benchmarks\\bench_multilabel_metrics.py",
    "summary": "A comparison of multilabel target formats and metrics over them | functions: benchmark, _tabulate, _plot | imports: argparse, functools, timeit, matplotlib | [benchmarks bench_multilabel_metrics.py]",
    "role": "benchmarks",
    "loc": 199
  },
  {
    "id": "benchmarks\\bench_online_ocsvm.py",
    "summary": "SGDOneClassSVM benchmark | functions: print_outlier_ratio, autolabel_auc, autolabel_time | imports: matplotlib, numpy, scipy, sklearn | [benchmarks bench_online_ocsvm.py]",
    "role": "benchmarks",
    "loc": 224
  },
  {
    "id": "benchmarks\\bench_pca_solvers.py",
    "summary": "No description | functions: measure_one | imports: matplotlib, numpy, pandas, sklearn | [benchmarks bench_pca_solvers.py]",
    "role": "benchmarks",
    "loc": 130
  },
  {
    "id": "benchmarks\\bench_plot_fastkmeans.py",
    "summary": "No description | functions: compute_bench, compute_bench_2 | imports: numpy, sklearn, mpl_toolkits, matplotlib | [benchmarks bench_plot_fastkmeans.py]",
    "role": "benchmarks",
    "loc": 114
  },
  {
    "id": "benchmarks\\bench_plot_hierarchical.py",
    "summary": "No description | functions: compute_bench | imports: numpy, sklearn, matplotlib | [benchmarks bench_plot_hierarchical.py]",
    "role": "benchmarks",
    "loc": 59
  },
  {
    "id": "benchmarks\\bench_plot_incremental_pca.py",
    "summary": "IncrementalPCA benchmark | functions: plot_results, benchmark, plot_feature_times, plot_feature_errors, plot_batch_times, plot_batch_errors | imports: gc, matplotlib, numpy, sklearn | [benchmarks bench_plot_incremental_pca.py]",
    "role": "benchmarks",
    "loc": 126
  },
  {
    "id": "benchmarks\\bench_plot_lasso_path.py",
    "summary": "Benchmarks of Lasso regularization path computation using Lars and CD | functions: compute_bench | imports: gc, numpy, sklearn, mpl_toolkits | [benchmarks bench_plot_lasso_path.py]",
    "role": "benchmarks",
    "loc": 86
  },
  {
    "id": "benchmarks\\bench_plot_neighbors.py",
    "summary": "Plot the scaling of the nearest neighbors algorithms with k, D, and N | functions: get_data, barplot_neighbors | imports: matplotlib, numpy, sklearn | [benchmarks bench_plot_neighbors.py]",
    "role": "benchmarks",
    "loc": 147
  },
  {
    "id": "benchmarks\\bench_plot_nmf.py",
    "summary": "Benchmarks of Non-Negative Matrix Factorization | classes: _PGNMF | functions: _norm, _nls_subproblem, _fit_projected_gradient, plot_results, bench_one, run_bench | imports: numbers, matplotlib, numpy, pandas | [benchmarks bench_plot_nmf.py]",
    "role": "benchmarks",
    "loc": 368
  },
  {
    "id": "benchmarks\\bench_plot_omp_lars.py",
    "summary": "Benchmarks of orthogonal matching pursuit (:ref:`OMP`) versus least angle | functions: compute_bench | imports: gc, numpy, sklearn, matplotlib | [benchmarks bench_plot_omp_lars.py]",
    "role": "benchmarks",
    "loc": 93
  },
  {
    "id": "benchmarks\\bench_plot_parallel_pairwise.py",
    "summary": "No description | functions: plot, euclidean_distances, rbf_kernels | imports: matplotlib, sklearn | [benchmarks bench_plot_parallel_pairwise.py]",
    "role": "benchmarks",
    "loc": 31
  },
  {
    "id": "benchmarks\\bench_plot_polynomial_kernel_approximation.py",
    "summary": "Benchmark for explicit feature map approximation of polynomial kernels | imports: matplotlib, numpy, sklearn | [benchmarks bench_plot_polynomial_kernel_approximation.py]",
    "role": "benchmarks",
    "loc": 126
  },
  {
    "id": "benchmarks\\bench_plot_randomized_svd.py",
    "summary": "Benchmarks on the power iterations phase in randomized SVD. | functions: unpickle, handle_missing_dataset, get_data, plot_time_vs_s, scatter_time_vs_s, plot_power_iter_vs_s | imports: gc, pickle, matplotlib, numpy | [benchmarks bench_plot_randomized_svd.py]",
    "role": "benchmarks",
    "loc": 436
  },
  {
    "id": "benchmarks\\bench_plot_svd.py",
    "summary": "Benchmarks of Singular Value Decomposition (Exact and Approximate) | functions: compute_bench | imports: gc, numpy, scipy, sklearn | [benchmarks bench_plot_svd.py]",
    "role": "benchmarks",
    "loc": 60
  },
  {
    "id": "benchmarks\\bench_plot_ward.py",
    "summary": "Benchmark scikit-learn's Ward implement compared to SciPy's | imports: matplotlib, numpy, scipy, sklearn | [benchmarks bench_plot_ward.py]",
    "role": "benchmarks",
    "loc": 40
  },
  {
    "id": "benchmarks\\bench_random_projections.py",
    "summary": "Random projection benchmark | functions: type_auto_or_float, type_auto_or_int, compute_time, bench_scikit_transformer, make_sparse_random_data, print_row | imports: gc, optparse, datetime, numpy | [benchmarks bench_random_projections.py]",
    "role": "benchmarks",
    "loc": 230
  },
  {
    "id": "benchmarks\\bench_rcv1_logreg_convergence.py",
    "summary": "No description | functions: get_loss, bench_one, bench, plot_train_losses, plot_train_scores, plot_test_scores | imports: gc, matplotlib, numpy, joblib | [benchmarks bench_rcv1_logreg_convergence.py]",
    "role": "benchmarks",
    "loc": 250
  },
  {
    "id": "benchmarks\\bench_saga.py",
    "summary": "Author: Arthur Mensch, Nelle Varoquaux | functions: fit_single, _predict_proba, exp, plot | imports: json, matplotlib, numpy, sklearn | [benchmarks bench_saga.py]",
    "role": "benchmarks",
    "loc": 340
  },
  {
    "id": "benchmarks\\bench_sample_without_replacement.py",
    "summary": "Benchmarks for sampling without replacement of integer. | functions: compute_time, bench_sample | imports: gc, operator, optparse, random | [benchmarks bench_sample_without_replacement.py]",
    "role": "benchmarks",
    "loc": 160
  },
  {
    "id": "benchmarks\\bench_sgd_regression.py",
    "summary": "No description | imports: gc, matplotlib, numpy, sklearn | [benchmarks bench_sgd_regression.py]",
    "role": "benchmarks",
    "loc": 125
  },
  {
    "id": "benchmarks\\bench_sparsify.py",
    "summary": "Benchmark SGD prediction time with dense/sparse coefficients. | functions: sparsity_ratio, benchmark_dense_predict, benchmark_sparse_predict, score | imports: numpy, scipy, sklearn | [benchmarks bench_sparsify.py]",
    "role": "benchmarks",
    "loc": 78
  },
  {
    "id": "benchmarks\\bench_text_vectorizers.py",
    "summary": "To run this benchmark, you will need, | functions: run_vectorizer, f | imports: timeit, numpy, pandas, memory_profiler | [benchmarks bench_text_vectorizers.py]",
    "role": "benchmarks",
    "loc": 52
  },
  {
    "id": "benchmarks\\bench_tree.py",
    "summary": "To run this, you'll need to have installed. | functions: bench_scikit_tree_classifier, bench_scikit_tree_regressor | imports: gc, datetime, matplotlib, numpy | [benchmarks bench_tree.py]",
    "role": "benchmarks",
    "loc": 91
  },
  {
    "id": "benchmarks\\bench_tsne_mnist.py",
    "summary": "MNIST dataset T-SNE benchmark | functions: load_data, nn_accuracy, tsne_fit_transform, sanitize, bhtsne | imports: argparse, json, numpy, joblib | [benchmarks bench_tsne_mnist.py]",
    "role": "benchmarks",
    "loc": 172
  },
  {
    "id": "benchmarks\\plot_tsne_mnist.py",
    "summary": "No description | imports: argparse, matplotlib, numpy | [benchmarks plot_tsne_mnist.py]",
    "role": "benchmarks",
    "loc": 27
  },
  {
    "id": "build_tools\\check-meson-openmp-dependencies.py",
    "summary": "Check that OpenMP dependencies are correctly defined in meson.build files. | functions: has_source_openmp_flags, has_openmp_flags, get_canonical_name_meson, get_canonical_name_git_grep, get_meson_info, get_git_grep_info | imports: json, subprocess | [build_tools check-meson-openmp-dependencies.py]",
    "role": "src",
    "loc": 131
  },
  {
    "id": "build_tools\\generate_authors_table.py",
    "summary": "This script generates an html table of contributors, with names and avatars. | functions: get, get_contributors, get_profile, key, generate_table, generate_list | imports: getpass, requests | [build_tools generate_authors_table.py]",
    "role": "src",
    "loc": 202
  },
  {
    "id": "build_tools\\get_comment.py",
    "summary": "Get the versions of the packages used in the linter job. | functions: get_versions, get_step_message, get_message, get_headers, find_lint_bot_comments, create_or_update_comment | imports: requests | [build_tools get_comment.py]",
    "role": "src",
    "loc": 281
  },
  {
    "id": "build_tools\\update_environments_and_lock_files.py",
    "summary": "Script to update CI environment files and associated lock files. | functions: remove_from, execute_command, get_package_with_constraint, get_conda_environment_content, write_conda_environment, write_all_conda_environments | imports: json, subprocess, importlib, click | [build_tools update_environmen",
    "role": "src",
    "loc": 670
  },
  {
    "id": "build_tools\\azure\\get_commit_message.py",
    "summary": "Retrieve the commit message. | functions: get_commit_message, parsed_args | imports: argparse, subprocess | [build_tools azure get_commit_message.py]",
    "role": "src",
    "loc": 40
  },
  {
    "id": "build_tools\\azure\\get_selected_tests.py",
    "summary": "Parse the commit message to check if pytest should run only specific tests. | functions: get_selected_tests | imports: get_commit_message | [build_tools azure get_selected_tests.py]",
    "role": "src",
    "loc": 24
  },
  {
    "id": "build_tools\\circle\\list_versions.py",
    "summary": "No description | functions: json_urlread, human_readable_data_quantity, get_file_extension, get_file_size | imports: argparse, json, urllib, sklearn | [build_tools circle list_versions.py]",
    "role": "src",
    "loc": 103
  },
  {
    "id": "build_tools\\github\\check_wheels.py",
    "summary": "Checks that dist/* contains the number of wheels built from the | imports: yaml | [build_tools github check_wheels.py]",
    "role": "src",
    "loc": 21
  },
  {
    "id": "build_tools\\github\\vendor.py",
    "summary": "Embed vcomp140.dll and msvcp140.dll. | functions: make_distributor_init_64_bits, main | imports: shutil, textwrap | [build_tools github vendor.py]",
    "role": "src",
    "loc": 72
  },
  {
    "id": "build_tools\\wheels\\check_license.py",
    "summary": "Checks the bundled license is installed with the wheel. | imports: platform, site | [build_tools wheels check_license.py]",
    "role": "src",
    "loc": 23
  },
  {
    "id": "doc\\api_reference.py",
    "summary": "Configuration for the API reference documentation. | functions: _get_guide, _get_submodule | [doc api_reference.py]",
    "role": "docs",
    "loc": 1334
  },
  {
    "id": "doc\\conf.py",
    "summary": "Sort example gallery by title of subsection. | classes: SubSectionTitleOrder, SKExampleTitleSortKey | functions: add_js_css_files, notebook_modification_function, reset_sklearn_config, make_carousel_thumbs, filter_search_index, disable_plot_gallery_for_linkcheck | imports: json, datetime, urllib, sk",
    "role": "docs",
    "loc": 670
  },
  {
    "id": "doc\\conftest.py",
    "summary": "No description | functions: setup_labeled_faces, setup_rcv1, setup_twenty_newsgroups, setup_working_with_text_data, setup_loading_other_datasets, setup_compose | imports: pytest, _pytest, sklearn, pandas | [doc conftest.py]",
    "role": "docs",
    "loc": 128
  },
  {
    "id": "doc\\sphinxext\\allow_nan_estimators.py",
    "summary": "No description | classes: AllowNanEstimators | functions: setup | imports: docutils, sklearn | [doc sphinxext allow_nan_estimators.py]",
    "role": "docs",
    "loc": 46
  },
  {
    "id": "doc\\sphinxext\\autoshortsummary.py",
    "summary": "An autodocumenter that only renders the short summary of the object. | classes: ShortSummaryDocumenter | functions: setup | imports: sphinx | [doc sphinxext autoshortsummary.py]",
    "role": "docs",
    "loc": 33
  },
  {
    "id": "doc\\sphinxext\\doi_role.py",
    "summary": "doilinks | functions: reference_role, setup_link_role, setup | imports: docutils, sphinx | [doc sphinxext doi_role.py]",
    "role": "docs",
    "loc": 39
  },
  {
    "id": "doc\\sphinxext\\dropdown_anchors.py",
    "summary": "Insert anchor links to the sphinx-design dropdowns. | classes: DropdownAnchorAdder | functions: setup | imports: docutils, sphinx, sphinx_design | [doc sphinxext dropdown_anchors.py]",
    "role": "docs",
    "loc": 37
  },
  {
    "id": "doc\\sphinxext\\github_link.py",
    "summary": "No description | functions: _get_git_revision, _linkcode_resolve, make_linkcode_resolve | imports: inspect, subprocess, functools, operator | [doc sphinxext github_link.py]",
    "role": "docs",
    "loc": 65
  },
  {
    "id": "doc\\sphinxext\\override_pst_pagetoc.py",
    "summary": "Overrides the `generate_toc_html` function of pydata-sphinx-theme for API. | functions: override_pst_pagetoc, generate_api_toc_html, setup | imports: functools, sphinx | [doc sphinxext override_pst_pagetoc.py]",
    "role": "docs",
    "loc": 53
  },
  {
    "id": "doc\\sphinxext\\sphinx_issues.py",
    "summary": "A Sphinx extension for linking to your project's issue tracker. | classes: IssueRole | functions: user_role, cve_role, format_commit_text, setup | imports: docutils, sphinx | [doc sphinxext sphinx_issues.py]",
    "role": "docs",
    "loc": 181
  },
  {
    "id": "examples\\applications\\plot_cyclical_feature_engineering.py",
    "summary": "Time-related feature engineering | functions: evaluate, sin_transformer, cos_transformer, periodic_spline_transformer | imports: sklearn, matplotlib, numpy, pandas | [examples applications plot_cyclical_feature_engineering.py]",
    "role": "examples",
    "loc": 337
  },
  {
    "id": "examples\\applications\\plot_digits_denoising.py",
    "summary": "Image denoising using kernel PCA | functions: plot_digits | imports: numpy, sklearn, matplotlib | [examples applications plot_digits_denoising.py]",
    "role": "examples",
    "loc": 70
  },
  {
    "id": "examples\\applications\\plot_face_recognition.py",
    "summary": "Faces recognition example using eigenfaces and SVMs | functions: plot_gallery, title | imports: matplotlib, scipy, sklearn | [examples applications plot_face_recognition.py]",
    "role": "examples",
    "loc": 91
  },
  {
    "id": "examples\\applications\\plot_model_complexity_influence.py",
    "summary": "Model Complexity Influence | functions: generate_data, benchmark_influence, _count_nonzero_coefficients, plot_influence | imports: matplotlib, numpy, sklearn | [examples applications plot_model_complexity_influence.py]",
    "role": "examples",
    "loc": 177
  },
  {
    "id": "examples\\applications\\plot_outlier_detection_wine.py",
    "summary": "Outlier detection on a real data set | imports: sklearn, matplotlib | [examples applications plot_outlier_detection_wine.py]",
    "role": "examples",
    "loc": 92
  },
  {
    "id": "examples\\applications\\plot_out_of_core_classification.py",
    "summary": "Out-of-core classification of text documents | classes: ReutersParser | functions: _not_in_sphinx, stream_reuters_documents, progress, get_minibatch, iter_minibatches, plot_accuracy | imports: tarfile, hashlib, html, urllib | [examples applications plot_out_of_core_classification.py]",
    "role": "examples",
    "loc": 298
  },
  {
    "id": "examples\\applications\\plot_prediction_latency.py",
    "summary": "Prediction Latency | functions: _not_in_sphinx, atomic_benchmark_estimator, bulk_benchmark_estimator, benchmark_estimator, generate_dataset, boxplot_runtimes | imports: gc, matplotlib, numpy, sklearn | [examples applications plot_prediction_latency.py]",
    "role": "examples",
    "loc": 272
  },
  {
    "id": "examples\\applications\\plot_species_distribution_modeling.py",
    "summary": "Species distribution modeling | functions: construct_grids, create_species_bunch, plot_species_distribution | imports: matplotlib, numpy, sklearn, mpl_toolkits | [examples applications plot_species_distribution_modeling.py]",
    "role": "examples",
    "loc": 172
  },
  {
    "id": "examples\\applications\\plot_stock_market.py",
    "summary": "Visualizing the stock market structure | imports: numpy, pandas, sklearn, matplotlib | [examples applications plot_stock_market.py]",
    "role": "examples",
    "loc": 164
  },
  {
    "id": "examples\\applications\\plot_time_series_lagged_features.py",
    "summary": "Lagged features for time series forecasting | functions: consolidate_scores, min_arg | imports: numpy, polars, sklearn, matplotlib | [examples applications plot_time_series_lagged_features.py]",
    "role": "examples",
    "loc": 224
  },
  {
    "id": "examples\\applications\\plot_tomography_l1_reconstruction.py",
    "summary": "Compressive sensing: tomography reconstruction with L1 prior (Lasso) | functions: _weights, _generate_center_coordinates, build_projection_operator, generate_synthetic_data | imports: matplotlib, numpy, scipy, sklearn | [examples applications plot_tomography_l1_reconstruction.py]",
    "role": "examples",
    "loc": 111
  },
  {
    "id": "examples\\applications\\plot_topics_extraction_with_nmf_lda.py",
    "summary": "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation | functions: plot_top_words | imports: matplotlib, sklearn | [examples applications plot_topics_extraction_with_nmf_lda.py]",
    "role": "examples",
    "loc": 182
  },
  {
    "id": "examples\\applications\\wikipedia_principal_eigenvector.py",
    "summary": "Wikipedia principal eigenvector | functions: index, short_name, get_redirects, get_adjacency_matrix, centrality_scores | imports: bz2, datetime, pprint, urllib | [examples applications wikipedia_principal_eigenvector.py]",
    "role": "examples",
    "loc": 161
  },
  {
    "id": "examples\\bicluster\\plot_bicluster_newsgroups.py",
    "summary": "Biclustering documents with the Spectral Co-clustering algorithm | classes: NumberNormalizingVectorizer | functions: number_normalizer, bicluster_ncut | imports: numpy, sklearn | [examples bicluster plot_bicluster_newsgroups.py]",
    "role": "examples",
    "loc": 124
  },
  {
    "id": "examples\\bicluster\\plot_spectral_biclustering.py",
    "summary": "A demo of the Spectral Biclustering algorithm | imports: matplotlib, sklearn, numpy | [examples bicluster plot_spectral_biclustering.py]",
    "role": "examples",
    "loc": 53
  },
  {
    "id": "examples\\bicluster\\plot_spectral_coclustering.py",
    "summary": "A demo of the Spectral Co-Clustering algorithm | imports: numpy, matplotlib, sklearn | [examples bicluster plot_spectral_coclustering.py]",
    "role": "examples",
    "loc": 38
  },
  {
    "id": "examples\\calibration\\plot_calibration.py",
    "summary": "Probability calibration of classifiers | imports: numpy, sklearn, matplotlib | [examples calibration plot_calibration.py]",
    "role": "examples",
    "loc": 99
  },
  {
    "id": "examples\\calibration\\plot_calibration_curve.py",
    "summary": "Probability Calibration curves | classes: NaivelyCalibratedLinearSVC | imports: sklearn, matplotlib, pandas, numpy | [examples calibration plot_calibration_curve.py]",
    "role": "examples",
    "loc": 167
  },
  {
    "id": "examples\\calibration\\plot_calibration_multiclass.py",
    "summary": "Probability Calibration for 3-class classification | imports: numpy, sklearn, matplotlib | [examples calibration plot_calibration_multiclass.py]",
    "role": "examples",
    "loc": 165
  },
  {
    "id": "examples\\calibration\\plot_compare_calibration.py",
    "summary": "Comparison of Calibration of Classifiers | classes: NaivelyCalibratedLinearSVC | imports: sklearn, numpy, matplotlib | [examples calibration plot_compare_calibration.py]",
    "role": "examples",
    "loc": 97
  },
  {
    "id": "examples\\classification\\plot_classification_probability.py",
    "summary": "Plot classification probability | imports: matplotlib, numpy, sklearn | [examples classification plot_classification_probability.py]",
    "role": "examples",
    "loc": 75
  },
  {
    "id": "examples\\classification\\plot_classifier_comparison.py",
    "summary": "Classifier comparison | imports: matplotlib, numpy, sklearn | [examples classification plot_classifier_comparison.py]",
    "role": "examples",
    "loc": 128
  },
  {
    "id": "examples\\classification\\plot_digits_classification.py",
    "summary": "Recognizing hand-written digits | imports: matplotlib, sklearn | [examples classification plot_digits_classification.py]",
    "role": "examples",
    "loc": 49
  },
  {
    "id": "examples\\classification\\plot_lda.py",
    "summary": "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification | functions: generate_data | imports: matplotlib, numpy, sklearn | [examples classification plot_lda.py]",
    "role": "examples",
    "loc": 84
  },
  {
    "id": "examples\\classification\\plot_lda_qda.py",
    "summary": "Linear and Quadratic Discriminant Analysis with covariance ellipsoid | functions: make_data, plot_ellipse, plot_result | imports: numpy, matplotlib, sklearn | [examples classification plot_lda_qda.py]",
    "role": "examples",
    "loc": 148
  },
  {
    "id": "examples\\cluster\\plot_adjusted_for_chance_measures.py",
    "summary": "Adjustment for chance in clustering performance evaluation | functions: random_labels, fixed_classes_uniform_labelings_scores, uniform_labelings_scores | imports: sklearn, numpy, matplotlib, seaborn | [examples cluster plot_adjusted_for_chance_measures.py]",
    "role": "examples",
    "loc": 105
  },
  {
    "id": "examples\\cluster\\plot_affinity_propagation.py",
    "summary": "Demo of affinity propagation clustering algorithm | imports: numpy, sklearn, matplotlib | [examples cluster plot_affinity_propagation.py]",
    "role": "examples",
    "loc": 53
  },
  {
    "id": "examples\\cluster\\plot_agglomerative_clustering.py",
    "summary": "Agglomerative clustering with and without structure | imports: matplotlib, numpy, sklearn | [examples cluster plot_agglomerative_clustering.py]",
    "role": "examples",
    "loc": 60
  },
  {
    "id": "examples\\cluster\\plot_agglomerative_clustering_metrics.py",
    "summary": "Agglomerative clustering with different metrics | functions: sqr | imports: matplotlib, numpy, sklearn | [examples cluster plot_agglomerative_clustering_metrics.py]",
    "role": "examples",
    "loc": 109
  },
  {
    "id": "examples\\cluster\\plot_agglomerative_dendrogram.py",
    "summary": "Plot Hierarchical Clustering Dendrogram | functions: plot_dendrogram | imports: numpy, matplotlib, scipy, sklearn | [examples cluster plot_agglomerative_dendrogram.py]",
    "role": "examples",
    "loc": 35
  },
  {
    "id": "examples\\cluster\\plot_birch_vs_minibatchkmeans.py",
    "summary": "Compare BIRCH and MiniBatchKMeans | imports: matplotlib, numpy, joblib, sklearn | [examples cluster plot_birch_vs_minibatchkmeans.py]",
    "role": "examples",
    "loc": 81
  },
  {
    "id": "examples\\cluster\\plot_bisect_kmeans.py",
    "summary": "Bisecting K-Means and Regular K-Means Performance Comparison | imports: matplotlib, sklearn | [examples cluster plot_bisect_kmeans.py]",
    "role": "examples",
    "loc": 41
  },
  {
    "id": "examples\\cluster\\plot_cluster_comparison.py",
    "summary": "Comparing different clustering algorithms on toy datasets | imports: matplotlib, numpy, sklearn | [examples cluster plot_cluster_comparison.py]",
    "role": "examples",
    "loc": 237
  },
  {
    "id": "examples\\cluster\\plot_coin_segmentation.py",
    "summary": "Segmenting the picture of greek coins in regions | imports: matplotlib, numpy, scipy, skimage | [examples cluster plot_coin_segmentation.py]",
    "role": "examples",
    "loc": 56
  },
  {
    "id": "examples\\cluster\\plot_coin_ward_segmentation.py",
    "summary": "A demo of structured Ward hierarchical clustering on an image of coins | imports: skimage, numpy, scipy, sklearn | [examples cluster plot_coin_ward_segmentation.py]",
    "role": "examples",
    "loc": 48
  },
  {
    "id": "examples\\cluster\\plot_dbscan.py",
    "summary": "Demo of DBSCAN clustering algorithm | imports: sklearn, matplotlib, numpy | [examples cluster plot_dbscan.py]",
    "role": "examples",
    "loc": 66
  },
  {
    "id": "examples\\cluster\\plot_dict_face_patches.py",
    "summary": "Online learning of a dictionary of parts of faces | imports: sklearn, numpy, matplotlib | [examples cluster plot_dict_face_patches.py]",
    "role": "examples",
    "loc": 60
  },
  {
    "id": "examples\\cluster\\plot_digits_agglomeration.py",
    "summary": "Feature agglomeration | imports: matplotlib, numpy, sklearn | [examples cluster plot_digits_agglomeration.py]",
    "role": "examples",
    "loc": 46
  },
  {
    "id": "examples\\cluster\\plot_digits_linkage.py",
    "summary": "Various Agglomerative Clustering on a 2D embedding of digits | functions: plot_clustering | imports: numpy, matplotlib, sklearn | [examples cluster plot_digits_linkage.py]",
    "role": "examples",
    "loc": 58
  },
  {
    "id": "examples\\cluster\\plot_face_compress.py",
    "summary": "Vector Quantization Example | imports: scipy, matplotlib, sklearn | [examples cluster plot_face_compress.py]",
    "role": "examples",
    "loc": 84
  },
  {
    "id": "examples\\cluster\\plot_feature_agglomeration_vs_univariate_selection.py",
    "summary": "Feature agglomeration vs. univariate selection | imports: shutil, tempfile, matplotlib, numpy | [examples cluster plot_feature_agglomeration_vs_univariate_selection.py]",
    "role": "examples",
    "loc": 73
  },
  {
    "id": "examples\\cluster\\plot_hdbscan.py",
    "summary": "Demo of HDBSCAN clustering algorithm | functions: plot | imports: matplotlib, numpy, sklearn | [examples cluster plot_hdbscan.py]",
    "role": "examples",
    "loc": 109
  },
  {
    "id": "examples\\cluster\\plot_inductive_clustering.py",
    "summary": "Inductive Clustering | classes: InductiveClusterer | functions: _classifier_has, plot_scatter | imports: matplotlib, sklearn | [examples cluster plot_inductive_clustering.py]",
    "role": "examples",
    "loc": 87
  },
  {
    "id": "examples\\cluster\\plot_kmeans_assumptions.py",
    "summary": "Demonstration of k-means assumptions | imports: numpy, sklearn, matplotlib | [examples cluster plot_kmeans_assumptions.py]",
    "role": "examples",
    "loc": 73
  },
  {
    "id": "examples\\cluster\\plot_kmeans_digits.py",
    "summary": "A demo of K-Means clustering on the handwritten digits data | functions: bench_k_means | imports: numpy, sklearn, matplotlib | [examples cluster plot_kmeans_digits.py]",
    "role": "examples",
    "loc": 122
  },
  {
    "id": "examples\\cluster\\plot_kmeans_plusplus.py",
    "summary": "An example of K-Means++ initialization | imports: matplotlib, sklearn | [examples cluster plot_kmeans_plusplus.py]",
    "role": "examples",
    "loc": 28
  },
  {
    "id": "examples\\cluster\\plot_kmeans_silhouette_analysis.py",
    "summary": "Selecting the number of clusters with silhouette analysis on KMeans clustering | imports: matplotlib, numpy, sklearn | [examples cluster plot_kmeans_silhouette_analysis.py]",
    "role": "examples",
    "loc": 107
  },
  {
    "id": "examples\\cluster\\plot_kmeans_stability_low_dim_dense.py",
    "summary": "Empirical evaluation of the impact of k-means initialization | functions: make_data | imports: matplotlib, numpy, sklearn | [examples cluster plot_kmeans_stability_low_dim_dense.py]",
    "role": "examples",
    "loc": 95
  },
  {
    "id": "examples\\cluster\\plot_linkage_comparison.py",
    "summary": "Comparing different hierarchical linkage methods on toy datasets | imports: matplotlib, numpy, sklearn | [examples cluster plot_linkage_comparison.py]",
    "role": "examples",
    "loc": 132
  },
  {
    "id": "examples\\cluster\\plot_mean_shift.py",
    "summary": "A demo of the mean-shift clustering algorithm | imports: numpy, sklearn, matplotlib | [examples cluster plot_mean_shift.py]",
    "role": "examples",
    "loc": 41
  },
  {
    "id": "examples\\cluster\\plot_mini_batch_kmeans.py",
    "summary": "Comparison of the K-Means and MiniBatchKMeans clustering algorithms | imports: numpy, sklearn, matplotlib | [examples cluster plot_mini_batch_kmeans.py]",
    "role": "examples",
    "loc": 92
  },
  {
    "id": "examples\\cluster\\plot_optics.py",
    "summary": "Demo of OPTICS clustering algorithm | imports: matplotlib, numpy, sklearn | [examples cluster plot_optics.py]",
    "role": "examples",
    "loc": 80
  },
  {
    "id": "examples\\cluster\\plot_segmentation_toy.py",
    "summary": "Spectral clustering for image segmentation | imports: numpy, sklearn, matplotlib | [examples cluster plot_segmentation_toy.py]",
    "role": "examples",
    "loc": 62
  },
  {
    "id": "examples\\cluster\\plot_ward_structured_vs_unstructured.py",
    "summary": "Hierarchical clustering: structured vs unstructured ward | imports: mpl_toolkits, numpy, sklearn, matplotlib | [examples cluster plot_ward_structured_vs_unstructured.py]",
    "role": "examples",
    "loc": 71
  },
  {
    "id": "examples\\compose\\plot_column_transformer.py",
    "summary": "Column Transformer with Heterogeneous Data Sources | functions: subject_body_extractor, text_stats | imports: numpy, sklearn | [examples compose plot_column_transformer.py]",
    "role": "examples",
    "loc": 107
  },
  {
    "id": "examples\\compose\\plot_column_transformer_mixed_types.py",
    "summary": "Column Transformer with Mixed Types | imports: numpy, sklearn, pandas | [examples compose plot_column_transformer_mixed_types.py]",
    "role": "examples",
    "loc": 100
  },
  {
    "id": "examples\\compose\\plot_compare_reduction.py",
    "summary": "Selecting dimensionality reduction with Pipeline and GridSearchCV | imports: matplotlib, numpy, sklearn, pandas | [examples compose plot_compare_reduction.py]",
    "role": "examples",
    "loc": 75
  },
  {
    "id": "examples\\compose\\plot_digits_pipe.py",
    "summary": "Pipelining: chaining a PCA and a logistic regression | imports: matplotlib, numpy, polars, sklearn | [examples compose plot_digits_pipe.py]",
    "role": "examples",
    "loc": 61
  },
  {
    "id": "examples\\compose\\plot_feature_union.py",
    "summary": "Concatenating multiple feature extraction methods | imports: sklearn | [examples compose plot_feature_union.py]",
    "role": "examples",
    "loc": 36
  },
  {
    "id": "examples\\compose\\plot_transformed_target.py",
    "summary": "Effect of transforming the targets in regression model | functions: compute_score | imports: numpy, sklearn, matplotlib | [examples compose plot_transformed_target.py]",
    "role": "examples",
    "loc": 138
  },
  {
    "id": "examples\\covariance\\plot_covariance_estimation.py",
    "summary": "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood | imports: numpy, scipy, sklearn, matplotlib | [examples covariance plot_covariance_estimation.py]",
    "role": "examples",
    "loc": 77
  },
  {
    "id": "examples\\covariance\\plot_lw_vs_oas.py",
    "summary": "Ledoit-Wolf vs OAS estimation | imports: matplotlib, numpy, scipy, sklearn | [examples covariance plot_lw_vs_oas.py]",
    "role": "examples",
    "loc": 87
  },
  {
    "id": "examples\\covariance\\plot_mahalanobis_distances.py",
    "summary": "Robust covariance estimation and Mahalanobis distances relevance | imports: numpy, matplotlib, sklearn | [examples covariance plot_mahalanobis_distances.py]",
    "role": "examples",
    "loc": 132
  },
  {
    "id": "examples\\covariance\\plot_robust_vs_empirical_covariance.py",
    "summary": "Robust vs Empirical covariance estimate | imports: matplotlib, numpy, sklearn | [examples covariance plot_robust_vs_empirical_covariance.py]",
    "role": "examples",
    "loc": 153
  },
  {
    "id": "examples\\covariance\\plot_sparse_cov.py",
    "summary": "Sparse inverse covariance estimation | imports: numpy, scipy, sklearn, matplotlib | [examples covariance plot_sparse_cov.py]",
    "role": "examples",
    "loc": 117
  },
  {
    "id": "examples\\cross_decomposition\\plot_compare_cross_decomposition.py",
    "summary": "Compare cross decomposition methods | imports: numpy, sklearn, matplotlib | [examples cross_decomposition plot_compare_cross_decomposition.py]",
    "role": "examples",
    "loc": 116
  },
  {
    "id": "examples\\cross_decomposition\\plot_pcr_vs_pls.py",
    "summary": "Principal Component Regression vs Partial Least Squares Regression | imports: matplotlib, numpy, sklearn | [examples cross_decomposition plot_pcr_vs_pls.py]",
    "role": "examples",
    "loc": 98
  },
  {
    "id": "examples\\datasets\\plot_random_multilabel_dataset.py",
    "summary": "Plot randomly generated multilabel dataset | functions: plot_2d | imports: matplotlib, numpy, sklearn | [examples datasets plot_random_multilabel_dataset.py]",
    "role": "examples",
    "loc": 84
  },
  {
    "id": "examples\\decomposition\\plot_faces_decomposition.py",
    "summary": "Faces dataset decompositions | functions: plot_gallery | imports: matplotlib, numpy, sklearn | [examples decomposition plot_faces_decomposition.py]",
    "role": "examples",
    "loc": 153
  },
  {
    "id": "examples\\decomposition\\plot_ica_blind_source_separation.py",
    "summary": "Blind source separation using FastICA | imports: numpy, scipy, sklearn, matplotlib | [examples decomposition plot_ica_blind_source_separation.py]",
    "role": "examples",
    "loc": 49
  },
  {
    "id": "examples\\decomposition\\plot_ica_vs_pca.py",
    "summary": "FastICA on 2D point clouds | functions: plot_samples | imports: numpy, sklearn, matplotlib | [examples decomposition plot_ica_vs_pca.py]",
    "role": "examples",
    "loc": 80
  },
  {
    "id": "examples\\decomposition\\plot_image_denoising.py",
    "summary": "Image denoising using dictionary learning | functions: show_with_diff | imports: numpy, scipy, matplotlib, sklearn | [examples decomposition plot_image_denoising.py]",
    "role": "examples",
    "loc": 132
  },
  {
    "id": "examples\\decomposition\\plot_incremental_pca.py",
    "summary": "Incremental PCA | imports: matplotlib, numpy, sklearn | [examples decomposition plot_incremental_pca.py]",
    "role": "examples",
    "loc": 47
  },
  {
    "id": "examples\\decomposition\\plot_kernel_pca.py",
    "summary": "Kernel PCA | imports: sklearn, matplotlib | [examples decomposition plot_kernel_pca.py]",
    "role": "examples",
    "loc": 66
  },
  {
    "id": "examples\\decomposition\\plot_pca_iris.py",
    "summary": "Principal Component Analysis (PCA) on Iris Dataset | imports: sklearn, seaborn, matplotlib, mpl_toolkits | [examples decomposition plot_pca_iris.py]",
    "role": "examples",
    "loc": 46
  },
  {
    "id": "examples\\decomposition\\plot_pca_vs_fa_model_selection.py",
    "summary": "Model selection with Probabilistic PCA and Factor Analysis (FA) | functions: compute_scores, shrunk_cov_score, lw_score | imports: numpy, scipy, matplotlib, sklearn | [examples decomposition plot_pca_vs_fa_model_selection.py]",
    "role": "examples",
    "loc": 102
  },
  {
    "id": "examples\\decomposition\\plot_pca_vs_lda.py",
    "summary": "Comparison of LDA and PCA 2D projection of Iris dataset | imports: matplotlib, sklearn | [examples decomposition plot_pca_vs_lda.py]",
    "role": "examples",
    "loc": 48
  },
  {
    "id": "examples\\decomposition\\plot_sparse_coding.py",
    "summary": "Sparse coding with a precomputed dictionary | functions: ricker_function, ricker_matrix | imports: matplotlib, numpy, sklearn | [examples decomposition plot_sparse_coding.py]",
    "role": "examples",
    "loc": 97
  },
  {
    "id": "examples\\decomposition\\plot_varimax_fa.py",
    "summary": "Factor Analysis (with rotation) to visualize patterns | imports: matplotlib, numpy, sklearn | [examples decomposition plot_varimax_fa.py]",
    "role": "examples",
    "loc": 55
  },
  {
    "id": "examples\\developing_estimators\\sklearn_is_fitted.py",
    "summary": "`__sklearn_is_fitted__` as Developer API | classes: CustomEstimator | imports: sklearn | [examples developing_estimators sklearn_is_fitted.py]",
    "role": "examples",
    "loc": 49
  },
  {
    "id": "examples\\ensemble\\plot_adaboost_multiclass.py",
    "summary": "Multi-class AdaBoosted Decision Trees | functions: misclassification_error | imports: sklearn, matplotlib, pandas | [examples ensemble plot_adaboost_multiclass.py]",
    "role": "examples",
    "loc": 105
  },
  {
    "id": "examples\\ensemble\\plot_adaboost_regression.py",
    "summary": "Decision Tree Regression with AdaBoost | imports: numpy, sklearn, matplotlib, seaborn | [examples ensemble plot_adaboost_regression.py]",
    "role": "examples",
    "loc": 41
  },
  {
    "id": "examples\\ensemble\\plot_adaboost_twoclass.py",
    "summary": "Two-class AdaBoost | imports: matplotlib, numpy, sklearn | [examples ensemble plot_adaboost_twoclass.py]",
    "role": "examples",
    "loc": 85
  },
  {
    "id": "examples\\ensemble\\plot_bias_variance.py",
    "summary": "Single estimator versus bagging: bias-variance decomposition | functions: f, generate | imports: matplotlib, numpy, sklearn | [examples ensemble plot_bias_variance.py]",
    "role": "examples",
    "loc": 134
  },
  {
    "id": "examples\\ensemble\\plot_ensemble_oob.py",
    "summary": "OOB Errors for Random Forests | imports: matplotlib, sklearn | [examples ensemble plot_ensemble_oob.py]",
    "role": "examples",
    "loc": 75
  },
  {
    "id": "examples\\ensemble\\plot_feature_transformation.py",
    "summary": "Feature transformations with ensembles of trees | functions: rf_apply, gbdt_apply | imports: sklearn, matplotlib | [examples ensemble plot_feature_transformation.py]",
    "role": "examples",
    "loc": 87
  },
  {
    "id": "examples\\ensemble\\plot_forest_hist_grad_boosting_comparison.py",
    "summary": "Comparing Random Forests and Histogram Gradient Boosting models | imports: sklearn, joblib, pandas, plotly | [examples ensemble plot_forest_hist_grad_boosting_comparison.py]",
    "role": "examples",
    "loc": 121
  },
  {
    "id": "examples\\ensemble\\plot_forest_importances.py",
    "summary": "Feature importances with a forest of trees | imports: matplotlib, sklearn, numpy, pandas | [examples ensemble plot_forest_importances.py]",
    "role": "examples",
    "loc": 57
  },
  {
    "id": "examples\\ensemble\\plot_forest_iris.py",
    "summary": "Plot the decision surfaces of ensembles of trees on the iris dataset | imports: matplotlib, numpy, sklearn | [examples ensemble plot_forest_iris.py]",
    "role": "examples",
    "loc": 121
  },
  {
    "id": "examples\\ensemble\\plot_gradient_boosting_categorical.py",
    "summary": "Categorical Feature Support in Gradient Boosting | functions: plot_results | imports: sklearn, numpy, matplotlib | [examples ensemble plot_gradient_boosting_categorical.py]",
    "role": "examples",
    "loc": 145
  },
  {
    "id": "examples\\ensemble\\plot_gradient_boosting_early_stopping.py",
    "summary": "Early stopping in Gradient Boosting | imports: matplotlib, sklearn | [examples ensemble plot_gradient_boosting_early_stopping.py]",
    "role": "examples",
    "loc": 100
  },
  {
    "id": "examples\\ensemble\\plot_gradient_boosting_oob.py",
    "summary": "Gradient Boosting Out-of-Bag estimates | functions: heldout_score, cv_estimate | imports: matplotlib, numpy, scipy, sklearn | [examples ensemble plot_gradient_boosting_oob.py]",
    "role": "examples",
    "loc": 102
  },
  {
    "id": "examples\\ensemble\\plot_gradient_boosting_quantile.py",
    "summary": "Prediction Intervals for Gradient Boosting Regression | functions: f, highlight_min, coverage_fraction | imports: numpy, sklearn, matplotlib, pandas | [examples ensemble plot_gradient_boosting_quantile.py]",
    "role": "examples",
    "loc": 144
  },
  {
    "id": "examples\\ensemble\\plot_gradient_boosting_regression.py",
    "summary": "Gradient Boosting regression | imports: matplotlib, numpy, sklearn | [examples ensemble plot_gradient_boosting_regression.py]",
    "role": "examples",
    "loc": 85
  },
  {
    "id": "examples\\ensemble\\plot_gradient_boosting_regularization.py",
    "summary": "Gradient Boosting regularization | imports: matplotlib, numpy, sklearn | [examples ensemble plot_gradient_boosting_regularization.py]",
    "role": "examples",
    "loc": 67
  },
  {
    "id": "examples\\ensemble\\plot_hgbt_regression.py",
    "summary": "Features in Histogram Gradient Boosting Trees | functions: generate_missing_values | imports: sklearn, matplotlib, seaborn, numpy | [examples ensemble plot_hgbt_regression.py]",
    "role": "examples",
    "loc": 222
  },
  {
    "id": "examples\\ensemble\\plot_isolation_forest.py",
    "summary": "IsolationForest example | imports: numpy, sklearn, matplotlib | [examples ensemble plot_isolation_forest.py]",
    "role": "examples",
    "loc": 61
  },
  {
    "id": "examples\\ensemble\\plot_monotonic_constraints.py",
    "summary": "Monotonic Constraints | imports: matplotlib, numpy, sklearn, pandas | [examples ensemble plot_monotonic_constraints.py]",
    "role": "examples",
    "loc": 66
  },
  {
    "id": "examples\\ensemble\\plot_random_forest_embedding.py",
    "summary": "Hashing feature transformation using Totally Random Trees | imports: matplotlib, numpy, sklearn | [examples ensemble plot_random_forest_embedding.py]",
    "role": "examples",
    "loc": 75
  },
  {
    "id": "examples\\ensemble\\plot_random_forest_regression_multioutput.py",
    "summary": "Comparing random forests and the multi-output meta estimator | imports: matplotlib, numpy, sklearn | [examples ensemble plot_random_forest_regression_multioutput.py]",
    "role": "examples",
    "loc": 77
  },
  {
    "id": "examples\\ensemble\\plot_stack_predictors.py",
    "summary": "Combine predictors using stacking | functions: load_ames_housing | imports: numpy, sklearn, matplotlib | [examples ensemble plot_stack_predictors.py]",
    "role": "examples",
    "loc": 135
  },
  {
    "id": "examples\\ensemble\\plot_voting_decision_regions.py",
    "summary": "Plot the decision boundaries of a VotingClassifier | imports: matplotlib, sklearn | [examples ensemble plot_voting_decision_regions.py]",
    "role": "examples",
    "loc": 54
  },
  {
    "id": "examples\\ensemble\\plot_voting_probas.py",
    "summary": "Plot class probabilities calculated by the VotingClassifier | imports: matplotlib, numpy, sklearn | [examples ensemble plot_voting_probas.py]",
    "role": "examples",
    "loc": 70
  },
  {
    "id": "examples\\ensemble\\plot_voting_regressor.py",
    "summary": "Plot individual and voting regression predictions | imports: matplotlib, sklearn | [examples ensemble plot_voting_regressor.py]",
    "role": "examples",
    "loc": 52
  },
  {
    "id": "examples\\feature_selection\\plot_feature_selection.py",
    "summary": "Univariate Feature Selection | imports: numpy, sklearn, matplotlib | [examples feature_selection plot_feature_selection.py]",
    "role": "examples",
    "loc": 72
  },
  {
    "id": "examples\\feature_selection\\plot_feature_selection_pipeline.py",
    "summary": "Pipeline ANOVA SVM | imports: sklearn | [examples feature_selection plot_feature_selection_pipeline.py]",
    "role": "examples",
    "loc": 31
  },
  {
    "id": "examples\\feature_selection\\plot_f_test_vs_mi.py",
    "summary": "Comparison of F-test and mutual information | imports: matplotlib, numpy, sklearn | [examples feature_selection plot_f_test_vs_mi.py]",
    "role": "examples",
    "loc": 37
  },
  {
    "id": "examples\\feature_selection\\plot_rfe_digits.py",
    "summary": "Recursive feature elimination | imports: matplotlib, sklearn | [examples feature_selection plot_rfe_digits.py]",
    "role": "examples",
    "loc": 39
  },
  {
    "id": "examples\\feature_selection\\plot_rfe_with_cross_validation.py",
    "summary": "Recursive feature elimination with cross-validation | imports: sklearn, matplotlib, pandas | [examples feature_selection plot_rfe_with_cross_validation.py]",
    "role": "examples",
    "loc": 48
  },
  {
    "id": "examples\\feature_selection\\plot_select_from_model_diabetes.py",
    "summary": "Model-based and sequential feature selection | imports: sklearn, matplotlib, numpy | [examples feature_selection plot_select_from_model_diabetes.py]",
    "role": "examples",
    "loc": 81
  },
  {
    "id": "examples\\frozen\\plot_frozen_examples.py",
    "summary": "Examples of Using `FrozenEstimator` | imports: sklearn | [examples frozen plot_frozen_examples.py]",
    "role": "examples",
    "loc": 47
  },
  {
    "id": "examples\\gaussian_process\\plot_compare_gpr_krr.py",
    "summary": "Comparison of kernel ridge and Gaussian process regression | imports: numpy, matplotlib, sklearn, scipy | [examples gaussian_process plot_compare_gpr_krr.py]",
    "role": "examples",
    "loc": 225
  },
  {
    "id": "examples\\gaussian_process\\plot_gpc.py",
    "summary": "Probabilistic predictions with Gaussian process classification (GPC) | imports: numpy, matplotlib, sklearn | [examples gaussian_process plot_gpc.py]",
    "role": "examples",
    "loc": 105
  },
  {
    "id": "examples\\gaussian_process\\plot_gpc_iris.py",
    "summary": "Gaussian process classification (GPC) on iris dataset | imports: matplotlib, numpy, sklearn | [examples gaussian_process plot_gpc_iris.py]",
    "role": "examples",
    "loc": 44
  },
  {
    "id": "examples\\gaussian_process\\plot_gpc_isoprobability.py",
    "summary": "Iso-probability lines for Gaussian Processes classification (GPC) | functions: g | imports: numpy, matplotlib, sklearn | [examples gaussian_process plot_gpc_isoprobability.py]",
    "role": "examples",
    "loc": 66
  },
  {
    "id": "examples\\gaussian_process\\plot_gpc_xor.py",
    "summary": "Illustration of Gaussian process classification (GPC) on the XOR dataset | imports: matplotlib, numpy, sklearn | [examples gaussian_process plot_gpc_xor.py]",
    "role": "examples",
    "loc": 46
  },
  {
    "id": "examples\\gaussian_process\\plot_gpr_co2.py",
    "summary": "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR) | imports: sklearn, polars, matplotlib, datetime | [examples gaussian_process plot_gpr_co2.py]",
    "role": "examples",
    "loc": 93
  },
  {
    "id": "examples\\gaussian_process\\plot_gpr_noisy.py",
    "summary": "Ability of Gaussian process regression (GPR) to estimate data noise-level | functions: target_generator | imports: numpy, matplotlib, sklearn | [examples gaussian_process plot_gpr_noisy.py]",
    "role": "examples",
    "loc": 123
  },
  {
    "id": "examples\\gaussian_process\\plot_gpr_noisy_targets.py",
    "summary": "Gaussian Processes regression: basic introductory example | imports: numpy, matplotlib, sklearn | [examples gaussian_process plot_gpr_noisy_targets.py]",
    "role": "examples",
    "loc": 79
  },
  {
    "id": "examples\\gaussian_process\\plot_gpr_on_structured_data.py",
    "summary": "Gaussian processes on discrete data structures | classes: SequenceKernel | imports: numpy, sklearn, matplotlib | [examples gaussian_process plot_gpr_on_structured_data.py]",
    "role": "examples",
    "loc": 138
  },
  {
    "id": "examples\\gaussian_process\\plot_gpr_prior_posterior.py",
    "summary": "Illustration of prior and posterior Gaussian process for different kernels | functions: plot_gpr_samples | imports: matplotlib, numpy, sklearn | [examples gaussian_process plot_gpr_prior_posterior.py]",
    "role": "examples",
    "loc": 154
  },
  {
    "id": "examples\\impute\\plot_iterative_imputer_variants_comparison.py",
    "summary": "Imputing missing values with variants of IterativeImputer | imports: matplotlib, numpy, pandas, sklearn | [examples impute plot_iterative_imputer_variants_comparison.py]",
    "role": "examples",
    "loc": 115
  },
  {
    "id": "examples\\impute\\plot_missing_values.py",
    "summary": "Imputing missing values before building an estimator | functions: add_missing_values, get_scores_for_imputer, get_full_score, get_impute_zero_score, get_impute_knn_score, get_impute_mean | imports: numpy, sklearn, matplotlib | [examples impute plot_missing_values.py]",
    "role": "examples",
    "loc": 163
  },
  {
    "id": "examples\\inspection\\plot_causal_interpretation.py",
    "summary": "Failure of Machine Learning to infer causal effects | imports: numpy, pandas, seaborn, sklearn | [examples inspection plot_causal_interpretation.py]",
    "role": "examples",
    "loc": 93
  },
  {
    "id": "examples\\inspection\\plot_linear_model_coefficient_interpretation.py",
    "summary": "Common pitfalls in the interpretation of coefficients of linear models | imports: matplotlib, numpy, pandas, scipy | [examples inspection plot_linear_model_coefficient_interpretation.py]",
    "role": "examples",
    "loc": 335
  },
  {
    "id": "examples\\inspection\\plot_partial_dependence.py",
    "summary": "Partial Dependence and Individual Conditional Expectation Plots | imports: sklearn, matplotlib, numpy, mpl_toolkits | [examples inspection plot_partial_dependence.py]",
    "role": "examples",
    "loc": 318
  },
  {
    "id": "examples\\inspection\\plot_permutation_importance.py",
    "summary": "Permutation Importance vs Random Forest Feature Importance (MDI) | imports: numpy, sklearn, pandas | [examples inspection plot_permutation_importance.py]",
    "role": "examples",
    "loc": 115
  },
  {
    "id": "examples\\inspection\\plot_permutation_importance_multicollinear.py",
    "summary": "Permutation Importance with Multicollinear or Correlated Features | functions: plot_permutation_importance | imports: matplotlib, sklearn, numpy, pandas | [examples inspection plot_permutation_importance_multicollinear.py]",
    "role": "examples",
    "loc": 100
  },
  {
    "id": "examples\\kernel_approximation\\plot_scalable_poly_kernels.py",
    "summary": "Scalable learning with polynomial kernel approximation | imports: sklearn, matplotlib | [examples kernel_approximation plot_scalable_poly_kernels.py]",
    "role": "examples",
    "loc": 130
  },
  {
    "id": "examples\\linear_model\\plot_ard.py",
    "summary": "Comparing Linear Bayesian Regressors | imports: sklearn, pandas, matplotlib, seaborn | [examples linear_model plot_ard.py]",
    "role": "examples",
    "loc": 108
  },
  {
    "id": "examples\\linear_model\\plot_bayesian_ridge_curvefit.py",
    "summary": "Curve Fitting with Bayesian Ridge Regression | functions: func | imports: numpy, sklearn, matplotlib | [examples linear_model plot_bayesian_ridge_curvefit.py]",
    "role": "examples",
    "loc": 61
  },
  {
    "id": "examples\\linear_model\\plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.py",
    "summary": "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples | imports: numpy, sklearn | [examples linear_model plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.py]",
    "role": "examples",
    "loc": 28
  },
  {
    "id": "examples\\linear_model\\plot_huber_vs_ridge.py",
    "summary": "HuberRegressor vs Ridge on dataset with strong outliers | imports: matplotlib, numpy, sklearn | [examples linear_model plot_huber_vs_ridge.py]",
    "role": "examples",
    "loc": 46
  },
  {
    "id": "examples\\linear_model\\plot_lasso_and_elasticnet.py",
    "summary": "L1-based models for Sparse Signals | imports: numpy, matplotlib, sklearn, pandas | [examples linear_model plot_lasso_and_elasticnet.py]",
    "role": "examples",
    "loc": 92
  },
  {
    "id": "examples\\linear_model\\plot_lasso_dense_vs_sparse_data.py",
    "summary": "Lasso on dense and sparse data | imports: scipy, sklearn | [examples linear_model plot_lasso_dense_vs_sparse_data.py]",
    "role": "examples",
    "loc": 40
  },
  {
    "id": "examples\\linear_model\\plot_lasso_lars_ic.py",
    "summary": "Lasso model selection via information criteria | functions: zou_et_al_criterion_rescaling | imports: sklearn, numpy, matplotlib | [examples linear_model plot_lasso_lars_ic.py]",
    "role": "examples",
    "loc": 66
  },
  {
    "id": "examples\\linear_model\\plot_lasso_lasso_lars_elasticnet_path.py",
    "summary": "Lasso, Lasso-LARS, and Elastic Net paths | imports: matplotlib, sklearn | [examples linear_model plot_lasso_lasso_lars_elasticnet_path.py]",
    "role": "examples",
    "loc": 99
  },
  {
    "id": "examples\\linear_model\\plot_lasso_model_selection.py",
    "summary": "Lasso model selection: AIC-BIC / cross-validation | functions: highlight_min | imports: sklearn, numpy, pandas, matplotlib | [examples linear_model plot_lasso_model_selection.py]",
    "role": "examples",
    "loc": 111
  },
  {
    "id": "examples\\linear_model\\plot_logistic.py",
    "summary": "Logistic function | imports: matplotlib, numpy, scipy, sklearn | [examples linear_model plot_logistic.py]",
    "role": "examples",
    "loc": 49
  },
  {
    "id": "examples\\linear_model\\plot_logistic_l1_l2_sparsity.py",
    "summary": "L1 Penalty and Sparsity in Logistic Regression | imports: matplotlib, numpy, sklearn | [examples linear_model plot_logistic_l1_l2_sparsity.py]",
    "role": "examples",
    "loc": 61
  },
  {
    "id": "examples\\linear_model\\plot_logistic_multinomial.py",
    "summary": "Decision Boundaries of Multinomial and One-vs-Rest Logistic Regression | functions: plot_hyperplanes | imports: matplotlib, numpy, sklearn | [examples linear_model plot_logistic_multinomial.py]",
    "role": "examples",
    "loc": 86
  },
  {
    "id": "examples\\linear_model\\plot_logistic_path.py",
    "summary": "Regularization path of L1- Logistic Regression | imports: sklearn, numpy, matplotlib | [examples linear_model plot_logistic_path.py]",
    "role": "examples",
    "loc": 61
  },
  {
    "id": "examples\\linear_model\\plot_multi_task_lasso_support.py",
    "summary": "Joint feature selection with multi-task Lasso | imports: numpy, sklearn, matplotlib | [examples linear_model plot_multi_task_lasso_support.py]",
    "role": "examples",
    "loc": 55
  },
  {
    "id": "examples\\linear_model\\plot_nnls.py",
    "summary": "Non-negative least squares | imports: matplotlib, numpy, sklearn | [examples linear_model plot_nnls.py]",
    "role": "examples",
    "loc": 38
  },
  {
    "id": "examples\\linear_model\\plot_ols_ridge.py",
    "summary": "Ordinary Least Squares and Ridge Regression | imports: sklearn, matplotlib, numpy | [examples linear_model plot_ols_ridge.py]",
    "role": "examples",
    "loc": 72
  },
  {
    "id": "examples\\linear_model\\plot_omp.py",
    "summary": "Orthogonal Matching Pursuit | imports: matplotlib, numpy, sklearn | [examples linear_model plot_omp.py]",
    "role": "examples",
    "loc": 54
  },
  {
    "id": "examples\\linear_model\\plot_poisson_regression_non_normal_loss.py",
    "summary": "Poisson regression and non-normal loss | functions: score_estimator, _mean_frequency_by_risk_group, lorenz_curve | imports: matplotlib, numpy, pandas, sklearn | [examples linear_model plot_poisson_regression_non_normal_loss.py]",
    "role": "examples",
    "loc": 287
  },
  {
    "id": "examples\\linear_model\\plot_polynomial_interpolation.py",
    "summary": "Polynomial and Spline interpolation | functions: f, g | imports: matplotlib, numpy, sklearn | [examples linear_model plot_polynomial_interpolation.py]",
    "role": "examples",
    "loc": 111
  },
  {
    "id": "examples\\linear_model\\plot_quantile_regression.py",
    "summary": "Quantile regression | imports: numpy, matplotlib, sklearn | [examples linear_model plot_quantile_regression.py]",
    "role": "examples",
    "loc": 157
  },
  {
    "id": "examples\\linear_model\\plot_ransac.py",
    "summary": "Robust linear model estimation using RANSAC | imports: numpy, matplotlib, sklearn | [examples linear_model plot_ransac.py]",
    "role": "examples",
    "loc": 57
  },
  {
    "id": "examples\\linear_model\\plot_ridge_coeffs.py",
    "summary": "Ridge coefficients as a function of the L2 Regularization | imports: sklearn, numpy, matplotlib, pandas | [examples linear_model plot_ridge_coeffs.py]",
    "role": "examples",
    "loc": 77
  },
  {
    "id": "examples\\linear_model\\plot_ridge_path.py",
    "summary": "Plot Ridge coefficients as a function of the regularization | imports: matplotlib, numpy, sklearn | [examples linear_model plot_ridge_path.py]",
    "role": "examples",
    "loc": 43
  },
  {
    "id": "examples\\linear_model\\plot_robust_fit.py",
    "summary": "Robust linear estimator fitting | imports: numpy, matplotlib, sklearn | [examples linear_model plot_robust_fit.py]",
    "role": "examples",
    "loc": 91
  },
  {
    "id": "examples\\linear_model\\plot_sgdocsvm_vs_ocsvm.py",
    "summary": "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent | imports: matplotlib, numpy, sklearn | [examples linear_model plot_sgdocsvm_vs_ocsvm.py]",
    "role": "examples",
    "loc": 166
  },
  {
    "id": "examples\\linear_model\\plot_sgd_comparison.py",
    "summary": "Comparing various online solvers | imports: matplotlib, numpy, sklearn | [examples linear_model plot_sgd_comparison.py]",
    "role": "examples",
    "loc": 59
  },
  {
    "id": "examples\\linear_model\\plot_sgd_early_stopping.py",
    "summary": "Early stopping of Stochastic Gradient Descent | functions: load_mnist, fit_and_score | imports: matplotlib, numpy, pandas, sklearn | [examples linear_model plot_sgd_early_stopping.py]",
    "role": "examples",
    "loc": 114
  },
  {
    "id": "examples\\linear_model\\plot_sgd_iris.py",
    "summary": "Plot multi-class SGD on the iris dataset | functions: plot_hyperplane, line | imports: matplotlib, numpy, sklearn | [examples linear_model plot_sgd_iris.py]",
    "role": "examples",
    "loc": 61
  },
  {
    "id": "examples\\linear_model\\plot_sgd_loss_functions.py",
    "summary": "SGD: convex loss functions | functions: modified_huber_loss | imports: matplotlib, numpy | [examples linear_model plot_sgd_loss_functions.py]",
    "role": "examples",
    "loc": 42
  },
  {
    "id": "examples\\linear_model\\plot_sgd_penalties.py",
    "summary": "SGD: Penalties | imports: matplotlib, numpy | [examples linear_model plot_sgd_penalties.py]",
    "role": "examples",
    "loc": 43
  },
  {
    "id": "examples\\linear_model\\plot_sgd_separating_hyperplane.py",
    "summary": "SGD: Maximum margin separating hyperplane | imports: matplotlib, numpy, sklearn | [examples linear_model plot_sgd_separating_hyperplane.py]",
    "role": "examples",
    "loc": 31
  },
  {
    "id": "examples\\linear_model\\plot_sgd_weighted_samples.py",
    "summary": "SGD: Weighted samples | imports: matplotlib, numpy, sklearn | [examples linear_model plot_sgd_weighted_samples.py]",
    "role": "examples",
    "loc": 45
  },
  {
    "id": "examples\\linear_model\\plot_sparse_logistic_regression_20newsgroups.py",
    "summary": "Multiclass sparse logistic regression on 20newgroups | imports: timeit, matplotlib, numpy, sklearn | [examples linear_model plot_sparse_logistic_regression_20newsgroups.py]",
    "role": "examples",
    "loc": 105
  },
  {
    "id": "examples\\linear_model\\plot_sparse_logistic_regression_mnist.py",
    "summary": "MNIST classification using multinomial logistic + L1 | imports: matplotlib, numpy, sklearn | [examples linear_model plot_sparse_logistic_regression_mnist.py]",
    "role": "examples",
    "loc": 62
  },
  {
    "id": "examples\\linear_model\\plot_theilsen.py",
    "summary": "Theil-Sen Regression | imports: matplotlib, numpy, sklearn | [examples linear_model plot_theilsen.py]",
    "role": "examples",
    "loc": 93
  },
  {
    "id": "examples\\linear_model\\plot_tweedie_regression_insurance_claims.py",
    "summary": "Tweedie regression on insurance claims | functions: load_mtpl2, plot_obs_pred, score_estimator, lorenz_curve | imports: functools, matplotlib, numpy, pandas | [examples linear_model plot_tweedie_regression_insurance_claims.py]",
    "role": "examples",
    "loc": 435
  },
  {
    "id": "examples\\manifold\\plot_compare_methods.py",
    "summary": "Comparison of Manifold Learning methods | functions: plot_3d, plot_2d, add_2d_scatter | imports: matplotlib, mpl_toolkits, sklearn | [examples manifold plot_compare_methods.py]",
    "role": "examples",
    "loc": 106
  },
  {
    "id": "examples\\manifold\\plot_lle_digits.py",
    "summary": "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap... | functions: plot_embedding | imports: sklearn, matplotlib, numpy | [examples manifold plot_lle_digits.py]",
    "role": "examples",
    "loc": 114
  },
  {
    "id": "examples\\manifold\\plot_manifold_sphere.py",
    "summary": "Manifold Learning methods on a severed sphere | imports: matplotlib, mpl_toolkits, numpy, sklearn | [examples manifold plot_manifold_sphere.py]",
    "role": "examples",
    "loc": 118
  },
  {
    "id": "examples\\manifold\\plot_mds.py",
    "summary": "Multi-dimensional scaling | imports: numpy, matplotlib, sklearn | [examples manifold plot_mds.py]",
    "role": "examples",
    "loc": 72
  },
  {
    "id": "examples\\manifold\\plot_swissroll.py",
    "summary": "Swiss Roll And Swiss-Hole Reduction | imports: matplotlib, sklearn | [examples manifold plot_swissroll.py]",
    "role": "examples",
    "loc": 56
  },
  {
    "id": "examples\\manifold\\plot_t_sne_perplexity.py",
    "summary": "t-SNE: The effect of various perplexity values on the shape | imports: matplotlib, numpy, sklearn | [examples manifold plot_t_sne_perplexity.py]",
    "role": "examples",
    "loc": 114
  },
  {
    "id": "examples\\miscellaneous\\plot_anomaly_comparison.py",
    "summary": "Comparing anomaly detection algorithms for outlier detection on toy datasets | imports: matplotlib, numpy, sklearn | [examples miscellaneous plot_anomaly_comparison.py]",
    "role": "examples",
    "loc": 150
  },
  {
    "id": "examples\\miscellaneous\\plot_display_object_visualization.py",
    "summary": "Visualizations with Display Objects | imports: sklearn, matplotlib | [examples miscellaneous plot_display_object_visualization.py]",
    "role": "examples",
    "loc": 38
  },
  {
    "id": "examples\\miscellaneous\\plot_estimator_representation.py",
    "summary": "Displaying estimators and complex pipelines | imports: sklearn | [examples miscellaneous plot_estimator_representation.py]",
    "role": "examples",
    "loc": 24
  },
  {
    "id": "examples\\miscellaneous\\plot_isotonic_regression.py",
    "summary": "Isotonic Regression | imports: matplotlib, numpy, sklearn | [examples miscellaneous plot_isotonic_regression.py]",
    "role": "examples",
    "loc": 46
  },
  {
    "id": "examples\\miscellaneous\\plot_johnson_lindenstrauss_bound.py",
    "summary": "The Johnson-Lindenstrauss bound for embedding with random projections | imports: matplotlib, numpy, sklearn | [examples miscellaneous plot_johnson_lindenstrauss_bound.py]",
    "role": "examples",
    "loc": 93
  },
  {
    "id": "examples\\miscellaneous\\plot_kernel_approximation.py",
    "summary": "Explicit feature map approximation for RBF kernels | imports: matplotlib, numpy, sklearn | [examples miscellaneous plot_kernel_approximation.py]",
    "role": "examples",
    "loc": 163
  },
  {
    "id": "examples\\miscellaneous\\plot_kernel_ridge_regression.py",
    "summary": "Comparison of kernel ridge regression and SVR | imports: numpy, sklearn, matplotlib | [examples miscellaneous plot_kernel_ridge_regression.py]",
    "role": "examples",
    "loc": 135
  },
  {
    "id": "examples\\miscellaneous\\plot_metadata_routing.py",
    "summary": "Metadata Routing | classes: ExampleClassifier, MetaClassifier, RouterConsumerClassifier, SimplePipeline, ExampleTransformer, MetaRegressor | functions: check_metadata, print_routing | imports: pprint, numpy, sklearn | [examples miscellaneous plot_metadata_routing.py]",
    "role": "examples",
    "loc": 313
  },
  {
    "id": "examples\\miscellaneous\\plot_multilabel.py",
    "summary": "Multilabel classification | functions: plot_hyperplane, plot_subfigure | imports: matplotlib, numpy, sklearn | [examples miscellaneous plot_multilabel.py]",
    "role": "examples",
    "loc": 100
  },
  {
    "id": "examples\\miscellaneous\\plot_multioutput_face_completion.py",
    "summary": "Face completion with a multi-output estimators | imports: matplotlib, numpy, sklearn | [examples miscellaneous plot_multioutput_face_completion.py]",
    "role": "examples",
    "loc": 68
  },
  {
    "id": "examples\\miscellaneous\\plot_outlier_detection_bench.py",
    "summary": "Evaluation of outlier detection estimators | functions: make_estimator, fit_predict | imports: sklearn, numpy, matplotlib | [examples miscellaneous plot_outlier_detection_bench.py]",
    "role": "examples",
    "loc": 242
  },
  {
    "id": "examples\\miscellaneous\\plot_partial_dependence_visualization_api.py",
    "summary": "Advanced Plotting With Partial Dependence | imports: matplotlib, pandas, sklearn | [examples miscellaneous plot_partial_dependence_visualization_api.py]",
    "role": "examples",
    "loc": 61
  },
  {
    "id": "examples\\miscellaneous\\plot_pipeline_display.py",
    "summary": "Displaying Pipelines | imports: sklearn, numpy | [examples miscellaneous plot_pipeline_display.py]",
    "role": "examples",
    "loc": 108
  },
  {
    "id": "examples\\miscellaneous\\plot_roc_curve_visualization_api.py",
    "summary": "ROC Curve with Visualization API | imports: matplotlib, sklearn | [examples miscellaneous plot_roc_curve_visualization_api.py]",
    "role": "examples",
    "loc": 28
  },
  {
    "id": "examples\\miscellaneous\\plot_set_output.py",
    "summary": "Introducing the `set_output` API | imports: sklearn, pandas | [examples miscellaneous plot_set_output.py]",
    "role": "examples",
    "loc": 83
  },
  {
    "id": "examples\\mixture\\plot_concentration_prior.py",
    "summary": "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture | functions: plot_ellipses, plot_results | imports: matplotlib, numpy, sklearn | [examples mixture plot_concentration_prior.py]",
    "role": "examples",
    "loc": 134
  },
  {
    "id": "examples\\mixture\\plot_gmm.py",
    "summary": "Gaussian Mixture Model Ellipsoids | functions: plot_results | imports: matplotlib, numpy, scipy, sklearn | [examples mixture plot_gmm.py]",
    "role": "examples",
    "loc": 67
  },
  {
    "id": "examples\\mixture\\plot_gmm_covariances.py",
    "summary": "GMM covariances | functions: make_ellipses | imports: matplotlib, numpy, sklearn | [examples mixture plot_gmm_covariances.py]",
    "role": "examples",
    "loc": 96
  },
  {
    "id": "examples\\mixture\\plot_gmm_init.py",
    "summary": "GMM Initialization Methods | functions: get_initial_means | imports: timeit, matplotlib, numpy, sklearn | [examples mixture plot_gmm_init.py]",
    "role": "examples",
    "loc": 79
  },
  {
    "id": "examples\\mixture\\plot_gmm_pdf.py",
    "summary": "Density Estimation for a Gaussian mixture | imports: matplotlib, numpy, sklearn | [examples mixture plot_gmm_pdf.py]",
    "role": "examples",
    "loc": 34
  },
  {
    "id": "examples\\mixture\\plot_gmm_selection.py",
    "summary": "Gaussian Mixture Model Selection | functions: gmm_bic_score | imports: numpy, matplotlib, sklearn, pandas | [examples mixture plot_gmm_selection.py]",
    "role": "examples",
    "loc": 89
  },
  {
    "id": "examples\\mixture\\plot_gmm_sin.py",
    "summary": "Gaussian Mixture Model Sine Curve | functions: plot_results, plot_samples | imports: matplotlib, numpy, scipy, sklearn | [examples mixture plot_gmm_sin.py]",
    "role": "examples",
    "loc": 148
  },
  {
    "id": "examples\\model_selection\\plot_confusion_matrix.py",
    "summary": "Confusion matrix | imports: matplotlib, numpy, sklearn | [examples model_selection plot_confusion_matrix.py]",
    "role": "examples",
    "loc": 50
  },
  {
    "id": "examples\\model_selection\\plot_cost_sensitive_learning.py",
    "summary": "Post-tuning the decision threshold for cost-sensitive learning | functions: fpr_score, credit_gain_score, plot_roc_pr_curves, business_metric | imports: sklearn, numpy, matplotlib | [examples model_selection plot_cost_sensitive_learning.py]",
    "role": "examples",
    "loc": 276
  },
  {
    "id": "examples\\model_selection\\plot_cv_indices.py",
    "summary": "Visualizing cross-validation behavior in scikit-learn | functions: visualize_groups, plot_cv_indices | imports: matplotlib, numpy, sklearn | [examples model_selection plot_cv_indices.py]",
    "role": "examples",
    "loc": 129
  },
  {
    "id": "examples\\model_selection\\plot_cv_predict.py",
    "summary": "Plotting Cross-Validated Predictions | imports: sklearn, matplotlib | [examples model_selection plot_cv_predict.py]",
    "role": "examples",
    "loc": 39
  },
  {
    "id": "examples\\model_selection\\plot_det.py",
    "summary": "Detection error tradeoff (DET) curve | imports: sklearn, matplotlib | [examples model_selection plot_det.py]",
    "role": "examples",
    "loc": 59
  },
  {
    "id": "examples\\model_selection\\plot_grid_search_digits.py",
    "summary": "Custom refit strategy of a grid search with cross-validation | functions: print_dataframe, refit_strategy | imports: sklearn, pandas | [examples model_selection plot_grid_search_digits.py]",
    "role": "examples",
    "loc": 111
  },
  {
    "id": "examples\\model_selection\\plot_grid_search_refit_callable.py",
    "summary": "Balance model complexity and cross-validated score | functions: lower_bound, best_low_complexity | imports: matplotlib, numpy, sklearn | [examples model_selection plot_grid_search_refit_callable.py]",
    "role": "examples",
    "loc": 99
  },
  {
    "id": "examples\\model_selection\\plot_grid_search_stats.py",
    "summary": "Statistical comparison of models using grid search | functions: corrected_std, compute_corrected_ttest | imports: matplotlib, seaborn, sklearn, pandas | [examples model_selection plot_grid_search_stats.py]",
    "role": "examples",
    "loc": 189
  },
  {
    "id": "examples\\model_selection\\plot_grid_search_text_feature_extraction.py",
    "summary": "Sample pipeline for text feature extraction and evaluation | functions: shorten_param | imports: sklearn, numpy, pprint, pandas | [examples model_selection plot_grid_search_text_feature_extraction.py]",
    "role": "examples",
    "loc": 135
  },
  {
    "id": "examples\\model_selection\\plot_learning_curve.py",
    "summary": "Plotting Learning Curves and Checking Models' Scalability | imports: sklearn, matplotlib, numpy | [examples model_selection plot_learning_curve.py]",
    "role": "examples",
    "loc": 102
  },
  {
    "id": "examples\\model_selection\\plot_likelihood_ratios.py",
    "summary": "Class Likelihood Ratios to measure classification performance | functions: scoring, extract_score, scoring_on_bootstrap | imports: sklearn, pandas, matplotlib, numpy | [examples model_selection plot_likelihood_ratios.py]",
    "role": "examples",
    "loc": 178
  },
  {
    "id": "examples\\model_selection\\plot_multi_metric_evaluation.py",
    "summary": "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV | imports: numpy, matplotlib, sklearn | [examples model_selection plot_multi_metric_evaluation.py]",
    "role": "examples",
    "loc": 76
  },
  {
    "id": "examples\\model_selection\\plot_nested_cross_validation_iris.py",
    "summary": "Nested versus non-nested cross-validation | imports: numpy, matplotlib, sklearn | [examples model_selection plot_nested_cross_validation_iris.py]",
    "role": "examples",
    "loc": 90
  },
  {
    "id": "examples\\model_selection\\plot_permutation_tests_for_classification.py",
    "summary": "Test with permutations the significance of a classification score | imports: sklearn, numpy, matplotlib | [examples model_selection plot_permutation_tests_for_classification.py]",
    "role": "examples",
    "loc": 47
  },
  {
    "id": "examples\\model_selection\\plot_precision_recall.py",
    "summary": "Precision-Recall | imports: numpy, sklearn, matplotlib | [examples model_selection plot_precision_recall.py]",
    "role": "examples",
    "loc": 164
  },
  {
    "id": "examples\\model_selection\\plot_randomized_search.py",
    "summary": "Comparing randomized search and grid search for hyperparameter estimation | functions: report | imports: numpy, scipy, sklearn | [examples model_selection plot_randomized_search.py]",
    "role": "examples",
    "loc": 66
  },
  {
    "id": "examples\\model_selection\\plot_roc.py",
    "summary": "Multiclass Receiver Operating Characteristic (ROC) | imports: numpy, sklearn, matplotlib | [examples model_selection plot_roc.py]",
    "role": "examples",
    "loc": 234
  },
  {
    "id": "examples\\model_selection\\plot_roc_crossval.py",
    "summary": "Receiver Operating Characteristic (ROC) with cross validation | imports: numpy, sklearn, matplotlib | [examples model_selection plot_roc_crossval.py]",
    "role": "examples",
    "loc": 89
  },
  {
    "id": "examples\\model_selection\\plot_successive_halving_heatmap.py",
    "summary": "Comparison between grid search and successive halving | functions: make_heatmap | imports: matplotlib, numpy, pandas, sklearn | [examples model_selection plot_successive_halving_heatmap.py]",
    "role": "examples",
    "loc": 83
  },
  {
    "id": "examples\\model_selection\\plot_successive_halving_iterations.py",
    "summary": "Successive Halving Iterations | imports: matplotlib, numpy, pandas, scipy | [examples model_selection plot_successive_halving_iterations.py]",
    "role": "examples",
    "loc": 49
  },
  {
    "id": "examples\\model_selection\\plot_train_error_vs_test_error.py",
    "summary": "Effect of model regularization on training and test error | imports: sklearn, numpy, matplotlib | [examples model_selection plot_train_error_vs_test_error.py]",
    "role": "examples",
    "loc": 79
  },
  {
    "id": "examples\\model_selection\\plot_tuned_decision_threshold.py",
    "summary": "Post-hoc tuning the cut-off point of decision function | imports: sklearn, pandas, matplotlib | [examples model_selection plot_tuned_decision_threshold.py]",
    "role": "examples",
    "loc": 90
  },
  {
    "id": "examples\\model_selection\\plot_underfitting_overfitting.py",
    "summary": "Underfitting vs. Overfitting | functions: true_fun | imports: matplotlib, numpy, sklearn | [examples model_selection plot_underfitting_overfitting.py]",
    "role": "examples",
    "loc": 64
  },
  {
    "id": "examples\\multiclass\\plot_multiclass_overview.py",
    "summary": "Overview of multiclass training meta-estimators | imports: sklearn, pandas, matplotlib | [examples multiclass plot_multiclass_overview.py]",
    "role": "examples",
    "loc": 78
  },
  {
    "id": "examples\\multioutput\\plot_classifier_chain_yeast.py",
    "summary": "Multilabel classification using a classifier chain | imports: matplotlib, numpy, sklearn | [examples multioutput plot_classifier_chain_yeast.py]",
    "role": "examples",
    "loc": 73
  },
  {
    "id": "examples\\neighbors\\approximate_nearest_neighbors.py",
    "summary": "Approximate nearest neighbors in TSNE | classes: NMSlibTransformer | functions: load_mnist | imports: nmslib, pynndescent, joblib, numpy | [examples neighbors approximate_nearest_neighbors.py]",
    "role": "examples",
    "loc": 183
  },
  {
    "id": "examples\\neighbors\\plot_caching_nearest_neighbors.py",
    "summary": "Caching nearest neighbors | imports: tempfile, matplotlib, sklearn | [examples neighbors plot_caching_nearest_neighbors.py]",
    "role": "examples",
    "loc": 49
  },
  {
    "id": "examples\\neighbors\\plot_classification.py",
    "summary": "Nearest Neighbors Classification | imports: sklearn, matplotlib | [examples neighbors plot_classification.py]",
    "role": "examples",
    "loc": 47
  },
  {
    "id": "examples\\neighbors\\plot_digits_kde_sampling.py",
    "summary": "Kernel Density Estimation | imports: matplotlib, numpy, sklearn | [examples neighbors plot_digits_kde_sampling.py]",
    "role": "examples",
    "loc": 43
  },
  {
    "id": "examples\\neighbors\\plot_kde_1d.py",
    "summary": "Simple 1D Kernel Density Estimation | functions: format_func | imports: matplotlib, numpy, scipy, sklearn | [examples neighbors plot_kde_1d.py]",
    "role": "examples",
    "loc": 113
  },
  {
    "id": "examples\\neighbors\\plot_lof_novelty_detection.py",
    "summary": "Novelty detection with Local Outlier Factor (LOF) | imports: matplotlib, numpy, sklearn | [examples neighbors plot_lof_novelty_detection.py]",
    "role": "examples",
    "loc": 71
  },
  {
    "id": "examples\\neighbors\\plot_lof_outlier_detection.py",
    "summary": "Outlier detection with Local Outlier Factor (LOF) | functions: update_legend_marker_size | imports: numpy, sklearn, matplotlib | [examples neighbors plot_lof_outlier_detection.py]",
    "role": "examples",
    "loc": 59
  },
  {
    "id": "examples\\neighbors\\plot_nca_classification.py",
    "summary": "Comparing Nearest Neighbors with and without Neighborhood Components Analysis | imports: matplotlib, sklearn | [examples neighbors plot_nca_classification.py]",
    "role": "examples",
    "loc": 73
  },
  {
    "id": "examples\\neighbors\\plot_nca_dim_reduction.py",
    "summary": "Dimensionality Reduction with Neighborhood Components Analysis | imports: matplotlib, numpy, sklearn | [examples neighbors plot_nca_dim_reduction.py]",
    "role": "examples",
    "loc": 58
  },
  {
    "id": "examples\\neighbors\\plot_nca_illustration.py",
    "summary": "Neighborhood Components Analysis Illustration | functions: link_thickness_i, relate_point | imports: matplotlib, numpy, scipy, sklearn | [examples neighbors plot_nca_illustration.py]",
    "role": "examples",
    "loc": 64
  },
  {
    "id": "examples\\neighbors\\plot_nearest_centroid.py",
    "summary": "Nearest Centroid Classification | imports: matplotlib, numpy, sklearn | [examples neighbors plot_nearest_centroid.py]",
    "role": "examples",
    "loc": 31
  },
  {
    "id": "examples\\neighbors\\plot_regression.py",
    "summary": "Nearest Neighbors regression | imports: matplotlib, numpy, sklearn | [examples neighbors plot_regression.py]",
    "role": "examples",
    "loc": 28
  },
  {
    "id": "examples\\neighbors\\plot_species_kde.py",
    "summary": "Kernel Density Estimate of Species Distributions | functions: construct_grids | imports: matplotlib, numpy, sklearn, mpl_toolkits | [examples neighbors plot_species_kde.py]",
    "role": "examples",
    "loc": 107
  },
  {
    "id": "examples\\neural_networks\\plot_mlp_alpha.py",
    "summary": "Varying regularization in Multi-layer Perceptron | imports: numpy, matplotlib, sklearn | [examples neural_networks plot_mlp_alpha.py]",
    "role": "examples",
    "loc": 114
  },
  {
    "id": "examples\\neural_networks\\plot_mlp_training_curves.py",
    "summary": "Compare Stochastic learning strategies for MLPClassifier | functions: plot_on_dataset | imports: matplotlib, sklearn | [examples neural_networks plot_mlp_training_curves.py]",
    "role": "examples",
    "loc": 116
  },
  {
    "id": "examples\\neural_networks\\plot_mnist_filters.py",
    "summary": "Visualization of MLP weights on MNIST | imports: matplotlib, sklearn | [examples neural_networks plot_mnist_filters.py]",
    "role": "examples",
    "loc": 51
  },
  {
    "id": "examples\\neural_networks\\plot_rbm_logistic_classification.py",
    "summary": "Restricted Boltzmann Machine features for digit classification | functions: nudge_dataset, shift | imports: numpy, scipy, sklearn, matplotlib | [examples neural_networks plot_rbm_logistic_classification.py]",
    "role": "examples",
    "loc": 74
  },
  {
    "id": "examples\\preprocessing\\plot_all_scaling.py",
    "summary": "Compare the effect of different scalers on data with outliers | functions: create_axes, plot_distribution, make_plot | imports: matplotlib, numpy, sklearn | [examples preprocessing plot_all_scaling.py]",
    "role": "examples",
    "loc": 196
  },
  {
    "id": "examples\\preprocessing\\plot_discretization.py",
    "summary": "Using KBinsDiscretizer to discretize continuous features | imports: matplotlib, numpy, sklearn | [examples preprocessing plot_discretization.py]",
    "role": "examples",
    "loc": 74
  },
  {
    "id": "examples\\preprocessing\\plot_discretization_classification.py",
    "summary": "Feature discretization | functions: get_name | imports: matplotlib, numpy, sklearn | [examples preprocessing plot_discretization_classification.py]",
    "role": "examples",
    "loc": 184
  },
  {
    "id": "examples\\preprocessing\\plot_discretization_strategies.py",
    "summary": "Demonstrating the different strategies of KBinsDiscretizer | imports: matplotlib, numpy, sklearn | [examples preprocessing plot_discretization_strategies.py]",
    "role": "examples",
    "loc": 83
  },
  {
    "id": "examples\\preprocessing\\plot_map_data_to_normal.py",
    "summary": "Map data to a normal distribution | imports: matplotlib, numpy, sklearn | [examples preprocessing plot_map_data_to_normal.py]",
    "role": "examples",
    "loc": 99
  },
  {
    "id": "examples\\preprocessing\\plot_scaling_importance.py",
    "summary": "Importance of Feature Scaling | functions: fit_and_plot_model | imports: sklearn, matplotlib, pandas, numpy | [examples preprocessing plot_scaling_importance.py]",
    "role": "examples",
    "loc": 123
  },
  {
    "id": "examples\\preprocessing\\plot_target_encoder.py",
    "summary": "Comparing Target Encoder with Other Encoders | functions: evaluate_model_and_store | imports: sklearn, matplotlib, pandas | [examples preprocessing plot_target_encoder.py]",
    "role": "examples",
    "loc": 136
  },
  {
    "id": "examples\\preprocessing\\plot_target_encoder_cross_val.py",
    "summary": "Target Encoder's Internal Cross fitting | imports: numpy, sklearn, pandas, matplotlib | [examples preprocessing plot_target_encoder_cross_val.py]",
    "role": "examples",
    "loc": 96
  },
  {
    "id": "examples\\release_highlights\\plot_release_highlights_0_22_0.py",
    "summary": "Release Highlights for scikit-learn 0.22 | functions: test_sklearn_compatible_estimator | imports: matplotlib, sklearn, numpy, tempfile | [examples release_highlights plot_release_highlights_0_22_0.py]",
    "role": "examples",
    "loc": 120
  },
  {
    "id": "examples\\release_highlights\\plot_release_highlights_0_23_0.py",
    "summary": "Release Highlights for scikit-learn 0.23 | imports: numpy, sklearn, scipy, matplotlib | [examples release_highlights plot_release_highlights_0_23_0.py]",
    "role": "examples",
    "loc": 105
  },
  {
    "id": "examples\\release_highlights\\plot_release_highlights_0_24_0.py",
    "summary": "Release Highlights for scikit-learn 0.24 | imports: numpy, scipy, sklearn | [examples release_highlights plot_release_highlights_0_24_0.py]",
    "role": "examples",
    "loc": 108
  },
  {
    "id": "examples\\release_highlights\\plot_release_highlights_1_0_0.py",
    "summary": "Release Highlights for scikit-learn 1.0 | imports: numpy, sklearn, pandas | [examples release_highlights plot_release_highlights_1_0_0.py]",
    "role": "examples",
    "loc": 47
  },
  {
    "id": "examples\\release_highlights\\plot_release_highlights_1_1_0.py",
    "summary": "Release Highlights for scikit-learn 1.1 | imports: sklearn, numpy, matplotlib, pandas | [examples release_highlights plot_release_highlights_1_1_0.py]",
    "role": "examples",
    "loc": 105
  },
  {
    "id": "examples\\release_highlights\\plot_release_highlights_1_2_0.py",
    "summary": "Release Highlights for scikit-learn 1.2 | imports: numpy, sklearn, matplotlib | [examples release_highlights plot_release_highlights_1_2_0.py]",
    "role": "examples",
    "loc": 82
  },
  {
    "id": "examples\\release_highlights\\plot_release_highlights_1_3_0.py",
    "summary": "Release Highlights for scikit-learn 1.3 | imports: numpy, sklearn | [examples release_highlights plot_release_highlights_1_3_0.py]",
    "role": "examples",
    "loc": 68
  },
  {
    "id": "examples\\release_highlights\\plot_release_highlights_1_4_0.py",
    "summary": "Release Highlights for scikit-learn 1.4 | imports: sklearn, polars, numpy, matplotlib | [examples release_highlights plot_release_highlights_1_4_0.py]",
    "role": "examples",
    "loc": 134
  },
  {
    "id": "examples\\release_highlights\\plot_release_highlights_1_5_0.py",
    "summary": "Release Highlights for scikit-learn 1.5 | functions: custom_score, smallest_abs, levenshtein_distance | imports: sklearn, scipy, numpy | [examples release_highlights plot_release_highlights_1_5_0.py]",
    "role": "examples",
    "loc": 94
  },
  {
    "id": "examples\\release_highlights\\plot_release_highlights_1_6_0.py",
    "summary": "Release Highlights for scikit-learn 1.6 | imports: sklearn, numpy | [examples release_highlights plot_release_highlights_1_6_0.py]",
    "role": "examples",
    "loc": 37
  },
  {
    "id": "examples\\semi_supervised\\plot_label_propagation_digits.py",
    "summary": "Label Propagation digits: Demonstrating performance | imports: numpy, sklearn, scipy, matplotlib | [examples semi_supervised plot_label_propagation_digits.py]",
    "role": "examples",
    "loc": 59
  },
  {
    "id": "examples\\semi_supervised\\plot_label_propagation_digits_active_learning.py",
    "summary": "Label Propagation digits active learning | imports: matplotlib, numpy, scipy, sklearn | [examples semi_supervised plot_label_propagation_digits_active_learning.py]",
    "role": "examples",
    "loc": 91
  },
  {
    "id": "examples\\semi_supervised\\plot_label_propagation_structure.py",
    "summary": "Label Propagation learning a complex structure | imports: numpy, sklearn, matplotlib | [examples semi_supervised plot_label_propagation_structure.py]",
    "role": "examples",
    "loc": 76
  },
  {
    "id": "examples\\semi_supervised\\plot_self_training_varying_threshold.py",
    "summary": "Effect of varying threshold for self-training | imports: matplotlib, numpy, sklearn | [examples semi_supervised plot_self_training_varying_threshold.py]",
    "role": "examples",
    "loc": 90
  },
  {
    "id": "examples\\semi_supervised\\plot_semi_supervised_newsgroups.py",
    "summary": "Semi-supervised Classification on a Text Dataset | functions: eval_and_print_metrics | imports: numpy, sklearn | [examples semi_supervised plot_semi_supervised_newsgroups.py]",
    "role": "examples",
    "loc": 82
  },
  {
    "id": "examples\\semi_supervised\\plot_semi_supervised_versus_svm_iris.py",
    "summary": "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset | imports: matplotlib, numpy, sklearn | [examples semi_supervised plot_semi_supervised_versus_svm_iris.py]",
    "role": "examples",
    "loc": 57
  },
  {
    "id": "examples\\svm\\plot_custom_kernel.py",
    "summary": "SVM with custom kernel | functions: my_kernel | imports: matplotlib, numpy, sklearn | [examples svm plot_custom_kernel.py]",
    "role": "examples",
    "loc": 40
  },
  {
    "id": "examples\\svm\\plot_iris_svc.py",
    "summary": "Plot different SVM classifiers in the iris dataset | imports: matplotlib, sklearn | [examples svm plot_iris_svc.py]",
    "role": "examples",
    "loc": 65
  },
  {
    "id": "examples\\svm\\plot_linearsvc_support_vectors.py",
    "summary": "Plot the support vectors in LinearSVC | imports: matplotlib, numpy, sklearn | [examples svm plot_linearsvc_support_vectors.py]",
    "role": "examples",
    "loc": 45
  },
  {
    "id": "examples\\svm\\plot_oneclass.py",
    "summary": "One-class SVM with non-linear kernel (RBF) | imports: numpy, sklearn, matplotlib | [examples svm plot_oneclass.py]",
    "role": "examples",
    "loc": 83
  },
  {
    "id": "examples\\svm\\plot_rbf_parameters.py",
    "summary": "RBF SVM parameters | classes: MidpointNormalize | imports: numpy, matplotlib, sklearn | [examples svm plot_rbf_parameters.py]",
    "role": "examples",
    "loc": 133
  },
  {
    "id": "examples\\svm\\plot_separating_hyperplane.py",
    "summary": "SVM: Maximum margin separating hyperplane | imports: matplotlib, sklearn | [examples svm plot_separating_hyperplane.py]",
    "role": "examples",
    "loc": 36
  },
  {
    "id": "examples\\svm\\plot_separating_hyperplane_unbalanced.py",
    "summary": "SVM: Separating hyperplane for unbalanced classes | imports: matplotlib, sklearn | [examples svm plot_separating_hyperplane_unbalanced.py]",
    "role": "examples",
    "loc": 69
  },
  {
    "id": "examples\\svm\\plot_svm_anova.py",
    "summary": "SVM-Anova: SVM with univariate feature selection | imports: numpy, sklearn, matplotlib | [examples svm plot_svm_anova.py]",
    "role": "examples",
    "loc": 42
  },
  {
    "id": "examples\\svm\\plot_svm_kernels.py",
    "summary": "Plot classification boundaries with different SVM Kernels | functions: plot_training_data_with_decision_boundary | imports: matplotlib, numpy, sklearn | [examples svm plot_svm_kernels.py]",
    "role": "examples",
    "loc": 119
  },
  {
    "id": "examples\\svm\\plot_svm_margin.py",
    "summary": "SVM Margins Example | imports: matplotlib, numpy, sklearn | [examples svm plot_svm_margin.py]",
    "role": "examples",
    "loc": 60
  },
  {
    "id": "examples\\svm\\plot_svm_regression.py",
    "summary": "Support Vector Regression (SVR) using linear and non-linear kernels | imports: matplotlib, numpy, sklearn | [examples svm plot_svm_regression.py]",
    "role": "examples",
    "loc": 55
  },
  {
    "id": "examples\\svm\\plot_svm_scale_c.py",
    "summary": "Scaling the regularization parameter for SVCs | imports: sklearn, numpy, pandas, matplotlib | [examples svm plot_svm_scale_c.py]",
    "role": "examples",
    "loc": 110
  },
  {
    "id": "examples\\svm\\plot_svm_tie_breaking.py",
    "summary": "SVM Tie Breaking Example | imports: matplotlib, numpy, sklearn | [examples svm plot_svm_tie_breaking.py]",
    "role": "examples",
    "loc": 49
  },
  {
    "id": "examples\\svm\\plot_weighted_samples.py",
    "summary": "SVM: Weighted samples | functions: plot_decision_function | imports: matplotlib, numpy, sklearn | [examples svm plot_weighted_samples.py]",
    "role": "examples",
    "loc": 66
  },
  {
    "id": "examples\\text\\plot_document_classification_20newsgroups.py",
    "summary": "Classification of text documents using sparse features | functions: size_mb, load_dataset, plot_feature_effects, benchmark | imports: sklearn, matplotlib, numpy, pandas | [examples text plot_document_classification_20newsgroups.py]",
    "role": "examples",
    "loc": 225
  },
  {
    "id": "examples\\text\\plot_document_clustering.py",
    "summary": "Clustering text documents using k-means | functions: fit_and_evaluate | imports: numpy, sklearn, matplotlib, pandas | [examples text plot_document_clustering.py]",
    "role": "examples",
    "loc": 175
  },
  {
    "id": "examples\\text\\plot_hashing_vs_dict_vectorizer.py",
    "summary": "FeatureHasher and DictVectorizer Comparison | functions: tokenize, token_freqs, n_nonzero_columns | imports: sklearn, numpy, matplotlib | [examples text plot_hashing_vs_dict_vectorizer.py]",
    "role": "examples",
    "loc": 144
  },
  {
    "id": "examples\\tree\\plot_cost_complexity_pruning.py",
    "summary": "Post pruning decision trees with cost complexity pruning | imports: matplotlib, sklearn | [examples tree plot_cost_complexity_pruning.py]",
    "role": "examples",
    "loc": 63
  },
  {
    "id": "examples\\tree\\plot_iris_dtc.py",
    "summary": "Plot the decision surface of decision trees trained on the iris dataset | imports: sklearn, matplotlib, numpy | [examples tree plot_iris_dtc.py]",
    "role": "examples",
    "loc": 56
  },
  {
    "id": "examples\\tree\\plot_tree_regression.py",
    "summary": "Decision Tree Regression | imports: numpy, sklearn, matplotlib | [examples tree plot_tree_regression.py]",
    "role": "examples",
    "loc": 65
  },
  {
    "id": "examples\\tree\\plot_unveil_tree_structure.py",
    "summary": "Understanding the decision tree structure | imports: numpy, matplotlib, sklearn | [examples tree plot_unveil_tree_structure.py]",
    "role": "examples",
    "loc": 105
  },
  {
    "id": "maint_tools\\check_xfailed_checks.py",
    "summary": "No description | imports: io, sklearn | [maint_tools check_xfailed_checks.py]",
    "role": "src",
    "loc": 26
  },
  {
    "id": "maint_tools\\sort_whats_new.py",
    "summary": "No description | functions: entry_sort_key | [maint_tools sort_whats_new.py]",
    "role": "src",
    "loc": 30
  },
  {
    "id": "maint_tools\\update_tracking_issue.py",
    "summary": "Creates or updates an issue if the CI fails. This is useful to keep track of | functions: get_issue, create_or_update_issue, close_issue_if_opened | imports: argparse, datetime, defusedxml, github | [maint_tools update_tracking_issue.py]",
    "role": "src",
    "loc": 124
  },
  {
    "id": "sklearn\\base.py",
    "summary": "Base classes for all estimators and various utility functions. | classes: BaseEstimator, ClassifierMixin, RegressorMixin, ClusterMixin, BiclusterMixin, TransformerMixin | functions: clone, _clone_parametrized, is_classifier, is_regressor, is_clusterer, is_outlier_detector | imports: copy, functools,",
    "role": "src",
    "loc": 1076
  },
  {
    "id": "sklearn\\calibration.py",
    "summary": "Methods for calibrating predicted probabilities. | classes: CalibratedClassifierCV, _CalibratedClassifier, _SigmoidCalibration, CalibrationDisplay | functions: _fit_classifier_calibrator_pair, _fit_calibrator, _sigmoid_calibration, loss_grad, calibration_curve | imports: inspect, numbers, numpy, sci",
    "role": "src",
    "loc": 1135
  },
  {
    "id": "sklearn\\conftest.py",
    "summary": "No description | functions: raccoon_face_or_skip, global_dtype, _fetch_fixture, wrapped, pytest_collection_modifyitems, pyplot | imports: builtins, platform, functools, unittest | [sklearn conftest.py]",
    "role": "src",
    "loc": 266
  },
  {
    "id": "sklearn\\discriminant_analysis.py",
    "summary": "Linear and quadratic discriminant analysis. | classes: DiscriminantAnalysisPredictionMixin, LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis | functions: _cov, _class_means, _class_cov | imports: numbers, numpy, scipy, base | [sklearn discriminant_analysis.py]",
    "role": "src",
    "loc": 900
  },
  {
    "id": "sklearn\\dummy.py",
    "summary": "Dummy estimators that implement simple rules of thumb. | classes: DummyClassifier, DummyRegressor | imports: numbers, numpy, scipy, base | [sklearn dummy.py]",
    "role": "src",
    "loc": 559
  },
  {
    "id": "sklearn\\exceptions.py",
    "summary": "Custom warnings and errors used across scikit-learn. | classes: UnsetMetadataPassedError, NotFittedError, ConvergenceWarning, DataConversionWarning, DataDimensionalityWarning, EfficiencyWarning | [sklearn exceptions.py]",
    "role": "src",
    "loc": 185
  },
  {
    "id": "sklearn\\isotonic.py",
    "summary": "Isotonic regression for obtaining monotonic fit to data. | classes: IsotonicRegression | functions: check_increasing, isotonic_regression | imports: numbers, numpy, scipy, sklearn | [sklearn isotonic.py]",
    "role": "src",
    "loc": 379
  },
  {
    "id": "sklearn\\kernel_approximation.py",
    "summary": "Approximate kernel feature maps based on Fourier transforms and count sketches. | classes: PolynomialCountSketch, RBFSampler, SkewedChi2Sampler, AdditiveChi2Sampler, Nystroem | imports: numbers, numpy, scipy, base | [sklearn kernel_approximation.py]",
    "role": "src",
    "loc": 873
  },
  {
    "id": "sklearn\\kernel_ridge.py",
    "summary": "Kernel ridge regression. | classes: KernelRidge | imports: numbers, numpy, base, linear_model | [sklearn kernel_ridge.py]",
    "role": "src",
    "loc": 195
  },
  {
    "id": "sklearn\\multiclass.py",
    "summary": "Multiclass learning algorithms. | classes: _ConstantPredictor, OneVsRestClassifier, OneVsOneClassifier, OutputCodeClassifier | functions: _fit_binary, _partial_fit_binary, _predict_binary, _threshold_for_binary_predict, _estimators_has, check | imports: array, numbers, numpy, scipy | [sklearn multic",
    "role": "src",
    "loc": 1029
  },
  {
    "id": "sklearn\\multioutput.py",
    "summary": "Multioutput regression and classification. | classes: _MultiOutputEstimator, MultiOutputRegressor, MultiOutputClassifier, _BaseChain, ClassifierChain, RegressorChain | functions: _fit_estimator, _partial_fit_estimator, _available_if_estimator_has, _check, _available_if_base_estimator_has | imports: ",
    "role": "src",
    "loc": 1036
  },
  {
    "id": "sklearn\\naive_bayes.py",
    "summary": "Naive Bayes algorithms. | classes: _BaseNB, GaussianNB, _BaseDiscreteNB, MultinomialNB, ComplementNB, BernoulliNB | imports: abc, numbers, numpy, scipy | [sklearn naive_bayes.py]",
    "role": "src",
    "loc": 1193
  },
  {
    "id": "sklearn\\pipeline.py",
    "summary": "Utilities to build a composite estimator as a chain of transforms and estimators. | classes: Pipeline, FeatureUnion | functions: _raise_or_warn_if_not_fitted, _final_estimator_has, check, _cached_transform, _name_estimators, make_pipeline | imports: copy, numpy, scipy, base | [sklearn pipeline.py]",
    "role": "src",
    "loc": 1712
  },
  {
    "id": "sklearn\\random_projection.py",
    "summary": "Random projection transformers. | classes: BaseRandomProjection, GaussianRandomProjection, SparseRandomProjection | functions: johnson_lindenstrauss_min_dim, _check_density, _check_input_size, _gaussian_random_matrix, _sparse_random_matrix | imports: abc, numbers, numpy, scipy | [sklearn random_proj",
    "role": "src",
    "loc": 634
  },
  {
    "id": "sklearn\\_config.py",
    "summary": "Global configuration state and functions for management | functions: _get_threadlocal_config, get_config, set_config, config_context | imports: threading, utils | [sklearn _config.py]",
    "role": "src",
    "loc": 294
  },
  {
    "id": "sklearn\\_distributor_init.py",
    "summary": "Distributor init file | [sklearn _distributor_init.py]",
    "role": "src",
    "loc": 7
  },
  {
    "id": "sklearn\\_min_dependencies.py",
    "summary": "All minimum dependencies for scikit-learn. | imports: argparse | [sklearn _min_dependencies.py]",
    "role": "src",
    "loc": 55
  },
  {
    "id": "sklearn\\__init__.py",
    "summary": "Configure global settings and get information about the working environment. | functions: __dir__, __getattr__, setup_module | imports: importlib, random, _config, base | [sklearn __init__.py]",
    "role": "src",
    "loc": 89
  },
  {
    "id": "sklearn\\cluster\\_affinity_propagation.py",
    "summary": "Affinity Propagation clustering algorithm. | classes: AffinityPropagation | functions: _equal_similarities_and_preferences, all_equal_preferences, all_equal_similarities, _affinity_propagation, affinity_propagation | imports: numbers, numpy, _config, base | [sklearn cluster _affinity_propagation.py]",
    "role": "src",
    "loc": 483
  },
  {
    "id": "sklearn\\cluster\\_agglomerative.py",
    "summary": "Hierarchical Agglomerative Clustering | classes: AgglomerativeClustering, FeatureAgglomeration | functions: _fix_connectivity, _single_linkage_tree, ward_tree, linkage_tree, _complete_linkage, _average_linkage | imports: heapq, numbers, numpy, scipy | [sklearn cluster _agglomerative.py]",
    "role": "src",
    "loc": 1020
  },
  {
    "id": "sklearn\\cluster\\_bicluster.py",
    "summary": "Spectral biclustering algorithms. | classes: BaseSpectral, SpectralCoclustering, SpectralBiclustering | functions: _scale_normalize, _bistochastic_normalize, _log_normalize | imports: abc, numbers, numpy, scipy | [sklearn cluster _bicluster.py]",
    "role": "src",
    "loc": 503
  },
  {
    "id": "sklearn\\cluster\\_birch.py",
    "summary": "Each node in a CFTree is called a CFNode. | classes: _CFNode, _CFSubcluster, Birch | functions: _iterate_sparse_X, _split_node | imports: numbers, numpy, scipy, _config | [sklearn cluster _birch.py]",
    "role": "src",
    "loc": 577
  },
  {
    "id": "sklearn\\cluster\\_bisect_k_means.py",
    "summary": "Bisecting K-means clustering. | classes: _BisectingTree, BisectingKMeans | imports: numpy, scipy, base, utils | [sklearn cluster _bisect_k_means.py]",
    "role": "src",
    "loc": 414
  },
  {
    "id": "sklearn\\cluster\\_dbscan.py",
    "summary": "DBSCAN: Density-Based Spatial Clustering of Applications with Noise | classes: DBSCAN | functions: dbscan | imports: numbers, numpy, scipy, base | [sklearn cluster _dbscan.py]",
    "role": "src",
    "loc": 384
  },
  {
    "id": "sklearn\\cluster\\_feature_agglomeration.py",
    "summary": "Feature agglomeration. Base classes and functions for performing feature | classes: AgglomerationTransform | imports: numpy, scipy, base, utils | [sklearn cluster _feature_agglomeration.py]",
    "role": "src",
    "loc": 65
  },
  {
    "id": "sklearn\\cluster\\_kmeans.py",
    "summary": "K-means clustering. | classes: _BaseKMeans, KMeans, MiniBatchKMeans | functions: kmeans_plusplus, _kmeans_plusplus, _tolerance, k_means, _kmeans_single_elkan, _kmeans_single_lloyd | imports: abc, numbers, numpy, scipy | [sklearn cluster _kmeans.py]",
    "role": "src",
    "loc": 1794
  },
  {
    "id": "sklearn\\cluster\\_mean_shift.py",
    "summary": "Mean shift clustering algorithm. | classes: MeanShift | functions: estimate_bandwidth, _mean_shift_single_seed, mean_shift, get_bin_seeds | imports: numbers, numpy, _config, base | [sklearn cluster _mean_shift.py]",
    "role": "src",
    "loc": 453
  },
  {
    "id": "sklearn\\cluster\\_optics.py",
    "summary": "Ordering Points To Identify the Clustering Structure (OPTICS) | classes: OPTICS | functions: _validate_size, _compute_core_distances_, compute_optics_graph, _set_reach_dist, cluster_optics_dbscan, cluster_optics_xi | imports: numbers, numpy, scipy, base | [sklearn cluster _optics.py]",
    "role": "src",
    "loc": 963
  },
  {
    "id": "sklearn\\cluster\\_spectral.py",
    "summary": "Algorithms for spectral clustering | classes: SpectralClustering | functions: cluster_qr, discretize, spectral_clustering | imports: numbers, numpy, scipy, base | [sklearn cluster _spectral.py]",
    "role": "src",
    "loc": 636
  },
  {
    "id": "sklearn\\cluster\\__init__.py",
    "summary": "Popular unsupervised clustering algorithms. | imports: _affinity_propagation, _agglomerative, _bicluster, _birch | [sklearn cluster __init__.py]",
    "role": "src",
    "loc": 51
  },
  {
    "id": "sklearn\\cluster\\tests\\common.py",
    "summary": "Common utilities for testing clustering. | functions: generate_clustered_data | imports: numpy | [sklearn cluster tests common.py]",
    "role": "tests",
    "loc": 26
  },
  {
    "id": "sklearn\\cluster\\tests\\test_affinity_propagation.py",
    "summary": "Testing for Clustering methods | functions: test_affinity_propagation, test_affinity_propagation_precomputed, test_affinity_propagation_no_copy, test_affinity_propagation_affinity_shape, test_affinity_propagation_precomputed_with_sparse_input, test_affinity_propagation_predict | imports: numpy, pyte",
    "role": "tests",
    "loc": 212
  },
  {
    "id": "sklearn\\cluster\\tests\\test_bicluster.py",
    "summary": "Testing for Spectral Biclustering methods | classes: MockBiclustering | functions: test_get_submatrix, _test_shape_indices, test_spectral_coclustering, test_spectral_biclustering, _do_scale_test, _do_bistochastic_test | imports: numpy, pytest, scipy, sklearn | [sklearn cluster tests test_bicluster.p",
    "role": "tests",
    "loc": 210
  },
  {
    "id": "sklearn\\cluster\\tests\\test_birch.py",
    "summary": "Tests for the birch clustering algorithm. | functions: test_n_samples_leaves_roots, test_partial_fit, test_birch_predict, test_n_clusters, test_sparse_X, test_partial_fit_second_call_error_checks | imports: numpy, pytest, sklearn | [sklearn cluster tests test_birch.py]",
    "role": "tests",
    "loc": 178
  },
  {
    "id": "sklearn\\cluster\\tests\\test_bisect_k_means.py",
    "summary": "Tries to perform bisect k-means for three clusters to check | functions: test_three_clusters, test_sparse, test_n_clusters, test_one_cluster, test_fit_predict, test_dtype_preserved | imports: numpy, pytest, sklearn | [sklearn cluster tests test_bisect_k_means.py]",
    "role": "tests",
    "loc": 103
  },
  {
    "id": "sklearn\\cluster\\tests\\test_dbscan.py",
    "summary": "Tests for DBSCAN clustering algorithm | functions: test_dbscan_similarity, test_dbscan_feature, test_dbscan_sparse, test_dbscan_sparse_precomputed, test_dbscan_sparse_precomputed_different_eps, test_dbscan_input_not_modified | imports: pickle, numpy, pytest, scipy | [sklearn cluster tests test_dbsca",
    "role": "tests",
    "loc": 295
  },
  {
    "id": "sklearn\\cluster\\tests\\test_feature_agglomeration.py",
    "summary": "Tests for sklearn.cluster._feature_agglomeration | functions: test_feature_agglomeration, test_feature_agglomeration_feature_names_out, test_inverse_transform_Xt_deprecation | imports: numpy, pytest, sklearn | [sklearn cluster tests test_feature_agglomeration.py]",
    "role": "tests",
    "loc": 57
  },
  {
    "id": "sklearn\\cluster\\tests\\test_hdbscan.py",
    "summary": "Tests for HDBSCAN clustering algorithm | functions: check_label_quality, test_outlier_data, test_hdbscan_distance_matrix, test_hdbscan_sparse_distance_matrix, test_hdbscan_feature_array, test_hdbscan_algorithms | imports: numpy, pytest, scipy, sklearn | [sklearn cluster tests test_hdbscan.py]",
    "role": "tests",
    "loc": 462
  },
  {
    "id": "sklearn\\cluster\\tests\\test_hierarchical.py",
    "summary": "Several basic tests for hierarchical clustering procedures | classes: FakeAffinity | functions: test_linkage_misc, test_structured_linkage_tree, test_unstructured_linkage_tree, test_height_linkage_tree, test_zero_cosine_linkage_tree, test_agglomerative_clustering_distances | imports: shutil, functoo",
    "role": "tests",
    "loc": 653
  },
  {
    "id": "sklearn\\cluster\\tests\\test_k_means.py",
    "summary": "Testing for K-means | functions: test_kmeans_results, test_kmeans_relocated_clusters, test_relocate_empty_clusters, test_kmeans_elkan_results, test_kmeans_convergence, test_minibatch_update_consistency | imports: io, numpy, pytest, scipy | [sklearn cluster tests test_k_means.py]",
    "role": "tests",
    "loc": 962
  },
  {
    "id": "sklearn\\cluster\\tests\\test_mean_shift.py",
    "summary": "Testing for mean shift clustering methods | functions: test_convergence_of_1d_constant_data, test_estimate_bandwidth, test_estimate_bandwidth_1sample, test_mean_shift, test_parallel, test_meanshift_predict | imports: numpy, pytest, sklearn | [sklearn cluster tests test_mean_shift.py]",
    "role": "tests",
    "loc": 144
  },
  {
    "id": "sklearn\\cluster\\tests\\test_optics.py",
    "summary": "No description | functions: test_extend_downward, test_extend_upward, test_the_extract_xi_labels, test_extract_xi, test_cluster_hierarchy_, test_correct_number_of_clusters | imports: numpy, pytest, sklearn | [sklearn cluster tests test_optics.py]",
    "role": "tests",
    "loc": 699
  },
  {
    "id": "sklearn\\cluster\\tests\\test_spectral.py",
    "summary": "Testing for Spectral Clustering methods | functions: test_spectral_clustering, test_spectral_clustering_sparse, test_precomputed_nearest_neighbors_filtering, test_affinities, histogram, test_cluster_qr | imports: pickle, numpy, pytest, scipy | [sklearn cluster tests test_spectral.py]",
    "role": "tests",
    "loc": 228
  },
  {
    "id": "sklearn\\cluster\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn cluster tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\cluster\\_hdbscan\\hdbscan.py",
    "summary": "HDBSCAN: Hierarchical Density-Based Spatial Clustering | classes: HDBSCAN | functions: _brute_mst, _process_mst, _hdbscan_brute, _hdbscan_prims, remap_single_linkage_tree, _get_finite_row_indices | imports: numbers, numpy, scipy, base | [sklearn cluster _hdbscan hdbscan.py]",
    "role": "src",
    "loc": 779
  },
  {
    "id": "sklearn\\cluster\\_hdbscan\\__init__.py",
    "summary": "Package initializer | [sklearn cluster _hdbscan __init__.py]",
    "role": "src",
    "loc": 0
  },
  {
    "id": "sklearn\\cluster\\_hdbscan\\tests\\test_reachibility.py",
    "summary": "Check that we raise an error if the sparse format is not CSR. | functions: test_mutual_reachability_graph_error_sparse_format, test_mutual_reachability_graph_inplace, test_mutual_reachability_graph_equivalence_dense_sparse, test_mutual_reachability_graph_preserves_dtype | imports: numpy, pytest, skl",
    "role": "tests",
    "loc": 48
  },
  {
    "id": "sklearn\\cluster\\_hdbscan\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn cluster _hdbscan tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\compose\\_column_transformer.py",
    "summary": "The :mod:`sklearn.compose._column_transformer` module implements utilities | classes: ColumnTransformer, make_column_selector, _RemainderColsList | functions: _check_X, _is_empty_column_selection, _get_transformer_list, make_column_transformer, _with_dtype_warning_enabled_set_to, _feature_names_out_",
    "role": "src",
    "loc": 1391
  },
  {
    "id": "sklearn\\compose\\_target.py",
    "summary": "Meta-estimator to regress on a transformed target. | classes: TransformedTargetRegressor | imports: numpy, base, exceptions, linear_model | [sklearn compose _target.py]",
    "role": "src",
    "loc": 308
  },
  {
    "id": "sklearn\\compose\\__init__.py",
    "summary": "Meta-estimators for building composite models with transformers. | imports: _column_transformer, _target | [sklearn compose __init__.py]",
    "role": "src",
    "loc": 17
  },
  {
    "id": "sklearn\\compose\\tests\\test_column_transformer.py",
    "summary": "Test the ColumnTransformer. | classes: Trans, DoubleTrans, SparseMatrixTrans, TransNo2D, TransRaise, TransAssert | functions: test_column_transformer, test_column_transformer_tuple_transformers_parameter, test_column_transformer_dataframe, test_column_transformer_empty_columns, test_column_transform",
    "role": "tests",
    "loc": 2286
  },
  {
    "id": "sklearn\\compose\\tests\\test_target.py",
    "summary": "No description | classes: DummyCheckerArrayTransformer, DummyCheckerListRegressor, DummyTransformer, DummyRegressorWithExtraFitParams, DummyRegressorWithExtraPredictParams | functions: test_transform_target_regressor_error, test_transform_target_regressor_invertible, _check_standard_scaled, _check_s",
    "role": "tests",
    "loc": 302
  },
  {
    "id": "sklearn\\compose\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn compose tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\covariance\\_elliptic_envelope.py",
    "summary": "An object for detecting outliers in a Gaussian distributed dataset. | classes: EllipticEnvelope | imports: numbers, numpy, base, metrics | [sklearn covariance _elliptic_envelope.py]",
    "role": "src",
    "loc": 213
  },
  {
    "id": "sklearn\\covariance\\_empirical_covariance.py",
    "summary": "Maximum likelihood covariance estimator. | classes: EmpiricalCovariance | functions: log_likelihood, empirical_covariance | imports: numpy, scipy, sklearn, base | [sklearn covariance _empirical_covariance.py]",
    "role": "src",
    "loc": 287
  },
  {
    "id": "sklearn\\covariance\\_graph_lasso.py",
    "summary": "GraphicalLasso: sparse inverse covariance estimation with an l1-penalized | classes: BaseGraphicalLasso, GraphicalLasso, GraphicalLassoCV | functions: _objective, _dual_gap, _graphical_lasso, alpha_max, graphical_lasso, graphical_lasso_path | imports: operator, numbers, numpy, scipy | [sklearn covar",
    "role": "src",
    "loc": 918
  },
  {
    "id": "sklearn\\covariance\\_robust_covariance.py",
    "summary": "Robust location and covariance estimators. | classes: MinCovDet | functions: c_step, _c_step, select_candidates, fast_mcd | imports: numbers, numpy, scipy, base | [sklearn covariance _robust_covariance.py]",
    "role": "src",
    "loc": 695
  },
  {
    "id": "sklearn\\covariance\\_shrunk_covariance.py",
    "summary": "Covariance estimators using shrinkage. | classes: ShrunkCovariance, LedoitWolf, OAS | functions: _ledoit_wolf, _oas, shrunk_covariance, ledoit_wolf_shrinkage, ledoit_wolf, oas | imports: numbers, numpy, base, utils | [sklearn covariance _shrunk_covariance.py]",
    "role": "src",
    "loc": 620
  },
  {
    "id": "sklearn\\covariance\\__init__.py",
    "summary": "Methods and algorithms to robustly estimate covariance. | imports: _elliptic_envelope, _empirical_covariance, _graph_lasso, _robust_covariance | [sklearn covariance __init__.py]",
    "role": "src",
    "loc": 40
  },
  {
    "id": "sklearn\\covariance\\tests\\test_covariance.py",
    "summary": "No description | functions: test_covariance, test_shrunk_covariance_func, test_shrunk_covariance, test_ledoit_wolf, _naive_ledoit_wolf_shrinkage, test_ledoit_wolf_small | imports: numpy, pytest, sklearn, _shrunk_covariance | [sklearn covariance tests test_covariance.py]",
    "role": "tests",
    "loc": 259
  },
  {
    "id": "sklearn\\covariance\\tests\\test_elliptic_envelope.py",
    "summary": "Testing for Elliptic Envelope algorithm (sklearn.covariance.elliptic_envelope). | functions: test_elliptic_envelope, test_score_samples | imports: numpy, pytest, sklearn | [sklearn covariance tests test_elliptic_envelope.py]",
    "role": "tests",
    "loc": 45
  },
  {
    "id": "sklearn\\covariance\\tests\\test_graphical_lasso.py",
    "summary": "Test the graphical_lasso module. | functions: test_graphical_lassos, test_graphical_lasso_when_alpha_equals_0, test_graphical_lasso_n_iter, test_graphical_lasso_iris, test_graph_lasso_2D, test_graphical_lasso_iris_singular | imports: io, numpy, pytest, scipy | [sklearn covariance tests test_graphica",
    "role": "tests",
    "loc": 256
  },
  {
    "id": "sklearn\\covariance\\tests\\test_robust_covariance.py",
    "summary": "No description | functions: test_mcd, test_fast_mcd_on_invalid_input, test_mcd_class_on_invalid_input, launch_mcd_on_dataset, test_mcd_issue1127, test_mcd_issue3367 | imports: numpy, pytest, sklearn | [sklearn covariance tests test_robust_covariance.py]",
    "role": "tests",
    "loc": 98
  },
  {
    "id": "sklearn\\covariance\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn covariance tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\cross_decomposition\\_pls.py",
    "summary": "The :mod:`sklearn.pls` module implements Partial Least Squares (PLS). | classes: _PLS, PLSRegression, PLSCanonical, CCA, PLSSVD | functions: _pinv2_old, _get_first_singular_vectors_power_method, _get_first_singular_vectors_svd, _center_scale_xy, _svd_flip_1d, _deprecate_Y_when_optional | imports: ab",
    "role": "src",
    "loc": 885
  },
  {
    "id": "sklearn\\cross_decomposition\\__init__.py",
    "summary": "Algorithms for cross decomposition. | imports: _pls | [sklearn cross_decomposition __init__.py]",
    "role": "src",
    "loc": 3
  },
  {
    "id": "sklearn\\cross_decomposition\\tests\\test_pls.py",
    "summary": "No description | functions: assert_matrix_orthogonal, test_pls_canonical_basics, test_sanity_check_pls_regression, test_sanity_check_pls_regression_constant_column_Y, test_sanity_check_pls_canonical, test_sanity_check_pls_canonical_random | imports: numpy, pytest, sklearn | [sklearn cross_decomposit",
    "role": "tests",
    "loc": 549
  },
  {
    "id": "sklearn\\cross_decomposition\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn cross_decomposition tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\datasets\\_arff_parser.py",
    "summary": "Implementation of ARFF parsers: via LIAC-ARFF and pandas. | functions: _split_sparse_columns, _sparse_data_to_array, _post_process_frame, _liac_arff_parser, _io_to_generator, _pandas_arff_parser | imports: numpy, scipy, externals, utils | [sklearn datasets _arff_parser.py]",
    "role": "src",
    "loc": 415
  },
  {
    "id": "sklearn\\datasets\\_base.py",
    "summary": "Base IO code for all datasets | functions: get_data_home, clear_data_home, _convert_data_dataframe, load_files, load_csv_data, load_gzip_compressed_csv_data | imports: csv, gzip, hashlib, shutil | [sklearn datasets _base.py]",
    "role": "src",
    "loc": 1319
  },
  {
    "id": "sklearn\\datasets\\_california_housing.py",
    "summary": "California housing dataset. | functions: fetch_california_housing | imports: tarfile, numbers, joblib, numpy | [sklearn datasets _california_housing.py]",
    "role": "src",
    "loc": 186
  },
  {
    "id": "sklearn\\datasets\\_covtype.py",
    "summary": "Forest covertype dataset. | functions: fetch_covtype | imports: gzip, numbers, tempfile, joblib | [sklearn datasets _covtype.py]",
    "role": "src",
    "loc": 200
  },
  {
    "id": "sklearn\\datasets\\_kddcup99.py",
    "summary": "KDDCUP 99 dataset. | functions: fetch_kddcup99, _fetch_brute_kddcup99, _mkdirp | imports: errno, gzip, numbers, joblib | [sklearn datasets _kddcup99.py]",
    "role": "src",
    "loc": 345
  },
  {
    "id": "sklearn\\datasets\\_lfw.py",
    "summary": "Labeled Faces in the Wild (LFW) dataset | functions: _check_fetch_lfw, _load_imgs, _fetch_lfw_people, fetch_lfw_people, _fetch_lfw_pairs, fetch_lfw_pairs | imports: numbers, numpy, joblib, utils | [sklearn datasets _lfw.py]",
    "role": "src",
    "loc": 490
  },
  {
    "id": "sklearn\\datasets\\_olivetti_faces.py",
    "summary": "Modified Olivetti faces dataset. | functions: fetch_olivetti_faces | imports: numbers, joblib, numpy, scipy | [sklearn datasets _olivetti_faces.py]",
    "role": "src",
    "loc": 141
  },
  {
    "id": "sklearn\\datasets\\_openml.py",
    "summary": "HTTP 412 is a specific OpenML error code, indicating a generic error | classes: OpenMLError | functions: _get_local_path, _retry_with_clean_cache, decorator, wrapper, _retry_on_network_error, _open_openml_url | imports: gzip, hashlib, json, shutil | [sklearn datasets _openml.py]",
    "role": "src",
    "loc": 927
  },
  {
    "id": "sklearn\\datasets\\_rcv1.py",
    "summary": "RCV1 dataset. | functions: fetch_rcv1, _inverse_permutation, _find_permutation | imports: gzip, numbers, joblib, numpy | [sklearn datasets _rcv1.py]",
    "role": "src",
    "loc": 255
  },
  {
    "id": "sklearn\\datasets\\_samples_generator.py",
    "summary": "Generate samples of synthetic data sets. | functions: _generate_hypercube, make_classification, make_multilabel_classification, sample_example, make_hastie_10_2, make_regression | imports: array, numbers, numpy, scipy | [sklearn datasets _samples_generator.py]",
    "role": "src",
    "loc": 1885
  },
  {
    "id": "sklearn\\datasets\\_species_distributions.py",
    "summary": "Species distribution dataset | functions: _load_coverage, _load_csv, construct_grids, fetch_species_distributions | imports: io, numbers, joblib, numpy | [sklearn datasets _species_distributions.py]",
    "role": "src",
    "loc": 220
  },
  {
    "id": "sklearn\\datasets\\_svmlight_format_io.py",
    "summary": "This module implements a loader and dumper for the svmlight format | functions: load_svmlight_file, _gen_open, _open_and_load, load_svmlight_files, _dump_svmlight, dump_svmlight_file | imports: numbers, numpy, scipy, utils | [sklearn datasets _svmlight_format_io.py]",
    "role": "src",
    "loc": 480
  },
  {
    "id": "sklearn\\datasets\\_twenty_newsgroups.py",
    "summary": "Caching loader for the 20 newsgroups text classification dataset. | functions: _download_20newsgroups, strip_newsgroup_header, strip_newsgroup_quoting, strip_newsgroup_footer, fetch_20newsgroups, fetch_20newsgroups_vectorized | imports: codecs, pickle, shutil, tarfile | [sklearn datasets _twenty_new",
    "role": "src",
    "loc": 503
  },
  {
    "id": "sklearn\\datasets\\__init__.py",
    "summary": "Utilities to load popular datasets and artificial data generators. | functions: __getattr__ | imports: textwrap, _base, _california_housing, _covtype | [sklearn datasets __init__.py]",
    "role": "src",
    "loc": 145
  },
  {
    "id": "sklearn\\datasets\\data\\__init__.py",
    "summary": "Package initializer | [sklearn datasets data __init__.py]",
    "role": "src",
    "loc": 0
  },
  {
    "id": "sklearn\\datasets\\descr\\__init__.py",
    "summary": "Package initializer | [sklearn datasets descr __init__.py]",
    "role": "src",
    "loc": 0
  },
  {
    "id": "sklearn\\datasets\\images\\__init__.py",
    "summary": "Package initializer | [sklearn datasets images __init__.py]",
    "role": "src",
    "loc": 0
  },
  {
    "id": "sklearn\\datasets\\tests\\test_20news.py",
    "summary": "Test the 20news downloader, if the data is available, | functions: test_20news, test_20news_length_consistency, test_20news_vectorized, test_20news_normalization, test_20news_as_frame, test_as_frame_no_pandas | imports: functools, unittest, numpy, pytest | [sklearn datasets tests test_20news.py]",
    "role": "tests",
    "loc": 98
  },
  {
    "id": "sklearn\\datasets\\tests\\test_arff_parser.py",
    "summary": "Check the behaviour of the post-processing function for splitting a dataframe. | functions: test_post_process_frame, test_load_arff_from_gzip_file_error_parser, test_pandas_arff_parser_strip_single_quotes, test_pandas_arff_parser_strip_double_quotes, test_pandas_arff_parser_strip_no_quotes | imports",
    "role": "tests",
    "loc": 247
  },
  {
    "id": "sklearn\\datasets\\tests\\test_base.py",
    "summary": "Minimal class that implements the os.PathLike interface. | classes: _DummyPath | functions: _remove_dir, data_home, load_files_root, test_category_dir_1, test_category_dir_2, test_data_home | imports: hashlib, io, shutil, tempfile | [sklearn datasets tests test_base.py]",
    "role": "tests",
    "loc": 513
  },
  {
    "id": "sklearn\\datasets\\tests\\test_california_housing.py",
    "summary": "Test the california_housing loader, if the data is available, | functions: test_fetch, test_fetch_asframe, test_pandas_dependency_message | imports: functools, pytest, sklearn | [sklearn datasets tests test_california_housing.py]",
    "role": "tests",
    "loc": 25
  },
  {
    "id": "sklearn\\datasets\\tests\\test_common.py",
    "summary": "Test loaders for common functionality. | functions: is_pillow_installed, check_pandas_dependency_message, check_return_X_y, check_as_frame, _skip_network_tests, _generate_func_supporting_param | imports: inspect, numpy, pytest, sklearn | [sklearn datasets tests test_common.py]",
    "role": "tests",
    "loc": 104
  },
  {
    "id": "sklearn\\datasets\\tests\\test_covtype.py",
    "summary": "Test the covtype loader, if the data is available, | functions: test_fetch, test_fetch_asframe, test_pandas_dependency_message | imports: functools, pytest, sklearn | [sklearn datasets tests test_covtype.py]",
    "role": "tests",
    "loc": 36
  },
  {
    "id": "sklearn\\datasets\\tests\\test_kddcup99.py",
    "summary": "Test  kddcup99 loader, if the data is available, | functions: test_fetch_kddcup99_percent10, test_fetch_kddcup99_return_X_y, test_fetch_kddcup99_as_frame, test_fetch_kddcup99_shuffle, test_pandas_dependency_message, test_corrupted_file_error_message | imports: functools, pytest, sklearn | [sklearn d",
    "role": "tests",
    "loc": 70
  },
  {
    "id": "sklearn\\datasets\\tests\\test_lfw.py",
    "summary": "This test for the LFW require medium-size data downloading and processing | functions: mock_empty_data_home, mock_data_home, test_load_empty_lfw_people, test_load_fake_lfw_people, test_load_fake_lfw_people_too_restrictive, test_load_empty_lfw_pairs | imports: random, functools, numpy, pytest | [skle",
    "role": "tests",
    "loc": 163
  },
  {
    "id": "sklearn\\datasets\\tests\\test_olivetti_faces.py",
    "summary": "Test Olivetti faces fetcher, if the data is available, | functions: test_olivetti_faces | imports: numpy, sklearn | [sklearn datasets tests test_olivetti_faces.py]",
    "role": "tests",
    "loc": 18
  },
  {
    "id": "sklearn\\datasets\\tests\\test_openml.py",
    "summary": "Test the openml loader. | classes: _MockHTTPResponse | functions: _monkey_patch_webbased_functions, _file_name, _mock_urlopen_shared, _mock_urlopen_data_description, _mock_urlopen_data_features, _mock_urlopen_download_data | imports: gzip, json, functools, importlib | [sklearn datasets tests test_op",
    "role": "tests",
    "loc": 1345
  },
  {
    "id": "sklearn\\datasets\\tests\\test_rcv1.py",
    "summary": "Test the rcv1 loader, if the data is available, | functions: test_fetch_rcv1 | imports: functools, numpy, scipy, sklearn | [sklearn datasets tests test_rcv1.py]",
    "role": "tests",
    "loc": 46
  },
  {
    "id": "sklearn\\datasets\\tests\\test_samples_generator.py",
    "summary": "No description | functions: test_make_classification, test_make_classification_informative_features, test_make_classification_return_x_y, count, test_make_classification_weights_type, test_make_classification_weights_array_or_list_ok | imports: functools, numpy, pytest, scipy | [sklearn datasets tes",
    "role": "tests",
    "loc": 597
  },
  {
    "id": "sklearn\\datasets\\tests\\test_svmlight_format.py",
    "summary": "No description | functions: _svmlight_local_test_file_path, _load_svmlight_local_test_file, test_load_svmlight_file, test_load_svmlight_file_fd, test_load_svmlight_pathlib, test_load_svmlight_file_multilabel | imports: gzip, shutil, bz2, importlib | [sklearn datasets tests test_svmlight_format.py]",
    "role": "tests",
    "loc": 443
  },
  {
    "id": "sklearn\\datasets\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn datasets tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\datasets\\tests\\data\\__init__.py",
    "summary": "Package initializer | [sklearn datasets tests data __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\datasets\\tests\\data\\openml\\__init__.py",
    "summary": "Package initializer | [sklearn datasets tests data openml __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\datasets\\tests\\data\\openml\\id_1\\__init__.py",
    "summary": "Package initializer | [sklearn datasets tests data openml id_1 __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\datasets\\tests\\data\\openml\\id_1119\\__init__.py",
    "summary": "Package initializer | [sklearn datasets tests data openml id_1119 __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\datasets\\tests\\data\\openml\\id_1590\\__init__.py",
    "summary": "Package initializer | [sklearn datasets tests data openml id_1590 __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\datasets\\tests\\data\\openml\\id_2\\__init__.py",
    "summary": "Package initializer | [sklearn datasets tests data openml id_2 __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\datasets\\tests\\data\\openml\\id_292\\__init__.py",
    "summary": "Package initializer | [sklearn datasets tests data openml id_292 __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\datasets\\tests\\data\\openml\\id_3\\__init__.py",
    "summary": "Package initializer | [sklearn datasets tests data openml id_3 __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\datasets\\tests\\data\\openml\\id_40589\\__init__.py",
    "summary": "Package initializer | [sklearn datasets tests data openml id_40589 __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\datasets\\tests\\data\\openml\\id_40675\\__init__.py",
    "summary": "Package initializer | [sklearn datasets tests data openml id_40675 __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\datasets\\tests\\data\\openml\\id_40945\\__init__.py",
    "summary": "Package initializer | [sklearn datasets tests data openml id_40945 __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\datasets\\tests\\data\\openml\\id_40966\\__init__.py",
    "summary": "Package initializer | [sklearn datasets tests data openml id_40966 __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\datasets\\tests\\data\\openml\\id_42074\\__init__.py",
    "summary": "Package initializer | [sklearn datasets tests data openml id_42074 __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\datasets\\tests\\data\\openml\\id_42585\\__init__.py",
    "summary": "Package initializer | [sklearn datasets tests data openml id_42585 __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\datasets\\tests\\data\\openml\\id_561\\__init__.py",
    "summary": "Package initializer | [sklearn datasets tests data openml id_561 __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\datasets\\tests\\data\\openml\\id_61\\__init__.py",
    "summary": "Package initializer | [sklearn datasets tests data openml id_61 __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\datasets\\tests\\data\\openml\\id_62\\__init__.py",
    "summary": "Package initializer | [sklearn datasets tests data openml id_62 __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\decomposition\\_base.py",
    "summary": "Principal Component Analysis Base Classes | classes: _BasePCA | imports: abc, numpy, scipy, base | [sklearn decomposition _base.py]",
    "role": "src",
    "loc": 152
  },
  {
    "id": "sklearn\\decomposition\\_dict_learning.py",
    "summary": "Dictionary learning. | classes: _BaseSparseCoding, SparseCoder, DictionaryLearning, MiniBatchDictionaryLearning | functions: _check_positive_coding, _sparse_encode_precomputed, sparse_encode, _sparse_encode, _update_dict, _dict_learning | imports: numbers, numpy, joblib, scipy | [sklearn decompositi",
    "role": "src",
    "loc": 1853
  },
  {
    "id": "sklearn\\decomposition\\_factor_analysis.py",
    "summary": "Factor Analysis. | classes: FactorAnalysis | functions: _ortho_rotation | imports: numbers, numpy, scipy, base | [sklearn decomposition _factor_analysis.py]",
    "role": "src",
    "loc": 358
  },
  {
    "id": "sklearn\\decomposition\\_fastica.py",
    "summary": "Python implementation of the fast ICA algorithms. | classes: FastICA | functions: _gs_decorrelation, _sym_decorrelation, _ica_def, _ica_par, _logcosh, _exp | imports: numbers, numpy, scipy, base | [sklearn decomposition _fastica.py]",
    "role": "src",
    "loc": 629
  },
  {
    "id": "sklearn\\decomposition\\_incremental_pca.py",
    "summary": "Incremental Principal Components Analysis. | classes: IncrementalPCA | imports: numbers, numpy, scipy, sklearn | [sklearn decomposition _incremental_pca.py]",
    "role": "src",
    "loc": 346
  },
  {
    "id": "sklearn\\decomposition\\_kernel_pca.py",
    "summary": "Kernel Principal Components Analysis. | classes: KernelPCA | imports: numbers, numpy, scipy, base | [sklearn decomposition _kernel_pca.py]",
    "role": "src",
    "loc": 446
  },
  {
    "id": "sklearn\\decomposition\\_lda.py",
    "summary": "Online Latent Dirichlet Allocation with variational inference | classes: LatentDirichletAllocation | functions: _update_doc_distribution | imports: numbers, numpy, scipy, joblib | [sklearn decomposition _lda.py]",
    "role": "src",
    "loc": 739
  },
  {
    "id": "sklearn\\decomposition\\_nmf.py",
    "summary": "Non-negative matrix factorization. | classes: _BaseNMF, NMF, MiniBatchNMF | functions: norm, trace_dot, _check_init, _beta_divergence, _special_sparse_dot, _beta_loss_to_float | imports: abc, numbers, numpy, scipy | [sklearn decomposition _nmf.py]",
    "role": "src",
    "loc": 1827
  },
  {
    "id": "sklearn\\decomposition\\_pca.py",
    "summary": "Principal Component Analysis. | classes: PCA | functions: _assess_dimension, _infer_dimension | imports: numbers, numpy, scipy, base | [sklearn decomposition _pca.py]",
    "role": "src",
    "loc": 619
  },
  {
    "id": "sklearn\\decomposition\\_sparse_pca.py",
    "summary": "Matrix factorization with Sparse PCA. | classes: _BaseSparsePCA, SparsePCA, MiniBatchSparsePCA | imports: numbers, numpy, base, linear_model | [sklearn decomposition _sparse_pca.py]",
    "role": "src",
    "loc": 441
  },
  {
    "id": "sklearn\\decomposition\\_truncated_svd.py",
    "summary": "Truncated SVD for sparse matrices, aka latent semantic analysis (LSA). | classes: TruncatedSVD | imports: numbers, numpy, scipy, base | [sklearn decomposition _truncated_svd.py]",
    "role": "src",
    "loc": 257
  },
  {
    "id": "sklearn\\decomposition\\__init__.py",
    "summary": "Matrix decomposition algorithms. | imports: utils, _dict_learning, _factor_analysis, _fastica | [sklearn decomposition __init__.py]",
    "role": "src",
    "loc": 48
  },
  {
    "id": "sklearn\\decomposition\\tests\\test_dict_learning.py",
    "summary": "No description | functions: test_sparse_encode_shapes_omp, test_dict_learning_shapes, test_dict_learning_overcomplete, test_max_iter, ricker_function, ricker_matrix | imports: functools, numpy, pytest, sklearn | [sklearn decomposition tests test_dict_learning.py]",
    "role": "tests",
    "loc": 793
  },
  {
    "id": "sklearn\\decomposition\\tests\\test_factor_analysis.py",
    "summary": "No description | functions: test_factor_analysis, f | imports: numpy, pytest, sklearn | [sklearn decomposition tests test_factor_analysis.py]",
    "role": "tests",
    "loc": 71
  },
  {
    "id": "sklearn\\decomposition\\tests\\test_fastica.py",
    "summary": "Test the fastica algorithm. | functions: center_and_norm, test_gs, test_fastica_attributes_dtypes, test_fastica_return_dtypes, test_fastica_simple, g_test | imports: numpy, pytest, scipy, sklearn | [sklearn decomposition tests test_fastica.py]",
    "role": "tests",
    "loc": 324
  },
  {
    "id": "sklearn\\decomposition\\tests\\test_incremental_pca.py",
    "summary": "Tests for Incremental PCA. | functions: test_incremental_pca, test_incremental_pca_sparse, test_incremental_pca_check_projection, test_incremental_pca_inverse, test_incremental_pca_validation, test_n_samples_equal_n_components | imports: numpy, pytest, sklearn | [sklearn decomposition tests test_inc",
    "role": "tests",
    "loc": 337
  },
  {
    "id": "sklearn\\decomposition\\tests\\test_kernel_pca.py",
    "summary": "Nominal test for all solvers and all known kernels + a custom one | functions: test_kernel_pca, histogram, test_kernel_pca_invalid_parameters, test_kernel_pca_consistent_transform, test_kernel_pca_deterministic_output, test_kernel_pca_sparse | imports: numpy, pytest, sklearn | [sklearn decomposition",
    "role": "tests",
    "loc": 391
  },
  {
    "id": "sklearn\\decomposition\\tests\\test_nmf.py",
    "summary": "No description | functions: test_convergence_warning, test_initialize_nn_output, test_parameter_checking, test_initialize_close, test_initialize_variants, test_nmf_fit_nn_output | imports: io, numpy, pytest, scipy | [sklearn decomposition tests test_nmf.py]",
    "role": "tests",
    "loc": 802
  },
  {
    "id": "sklearn\\decomposition\\tests\\test_online_lda.py",
    "summary": "No description | functions: _build_sparse_array, test_lda_default_prior_params, test_lda_fit_batch, test_lda_fit_online, test_lda_partial_fit, test_lda_dense_input | imports: io, numpy, pytest, scipy | [sklearn decomposition tests test_online_lda.py]",
    "role": "tests",
    "loc": 376
  },
  {
    "id": "sklearn\\decomposition\\tests\\test_pca.py",
    "summary": "No description | functions: _check_fitted_pca_close, test_pca, test_pca_sparse, test_pca_sparse_fit_transform, test_sparse_pca_solver_error, test_sparse_pca_auto_arpack_singluar_values_consistency | imports: numpy, pytest, scipy, sklearn | [sklearn decomposition tests test_pca.py]",
    "role": "tests",
    "loc": 846
  },
  {
    "id": "sklearn\\decomposition\\tests\\test_sparse_pca.py",
    "summary": "No description | functions: generate_toy_data, test_correct_shapes, test_fit_transform, test_fit_transform_parallel, test_transform_nan, test_fit_transform_tall | imports: numpy, pytest, sklearn, joblib | [sklearn decomposition tests test_sparse_pca.py]",
    "role": "tests",
    "loc": 276
  },
  {
    "id": "sklearn\\decomposition\\tests\\test_truncated_svd.py",
    "summary": "Test truncated SVD transformer. | functions: X_sparse, test_solvers, test_attributes, test_too_many_components, test_sparse_formats, test_inverse_transform | imports: numpy, pytest, scipy, sklearn | [sklearn decomposition tests test_truncated_svd.py]",
    "role": "tests",
    "loc": 148
  },
  {
    "id": "sklearn\\decomposition\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn decomposition tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\ensemble\\_bagging.py",
    "summary": "Bagging meta-estimator. | classes: BaseBagging, BaggingClassifier, BaggingRegressor | functions: _generate_indices, _generate_bagging_indices, _parallel_build_estimators, _parallel_predict_proba, _parallel_predict_log_proba, _parallel_decision_function | imports: numbers, abc, functools, numpy | [sk",
    "role": "src",
    "loc": 1024
  },
  {
    "id": "sklearn\\ensemble\\_base.py",
    "summary": "Base class for ensemble-based estimators. | classes: BaseEnsemble, _BaseHeterogeneousEnsemble | functions: _fit_single_estimator, _set_random_states, _partition_estimators | imports: abc, numpy, joblib, base | [sklearn ensemble _base.py]",
    "role": "src",
    "loc": 234
  },
  {
    "id": "sklearn\\ensemble\\_forest.py",
    "summary": "Forest of trees-based ensemble methods. | classes: BaseForest, ForestClassifier, ForestRegressor, RandomForestClassifier, RandomForestRegressor, ExtraTreesClassifier | functions: _get_n_samples_bootstrap, _generate_sample_indices, _generate_unsampled_indices, _parallel_build_trees, _accumulate_predi",
    "role": "src",
    "loc": 2409
  },
  {
    "id": "sklearn\\ensemble\\_gb.py",
    "summary": "Gradient Boosted Regression Trees. | classes: VerboseReporter, BaseGradientBoosting, GradientBoostingClassifier, GradientBoostingRegressor | functions: _safe_divide, _init_raw_predictions, _update_terminal_regions, compute_update, set_huber_delta | imports: abc, numbers, numpy, scipy | [sklearn ense",
    "role": "src",
    "loc": 1753
  },
  {
    "id": "sklearn\\ensemble\\_iforest.py",
    "summary": "Isolation Forest Algorithm. | classes: IsolationForest | functions: _parallel_compute_tree_depths, _average_path_length | imports: numbers, threading, numpy, scipy | [sklearn ensemble _iforest.py]",
    "role": "src",
    "loc": 500
  },
  {
    "id": "sklearn\\ensemble\\_stacking.py",
    "summary": "Stacking classifier and regressor. | classes: _BaseStacking, StackingClassifier, StackingRegressor | imports: abc, copy, numbers, numpy | [sklearn ensemble _stacking.py]",
    "role": "src",
    "loc": 939
  },
  {
    "id": "sklearn\\ensemble\\_voting.py",
    "summary": "Soft Voting/Majority Rule classifier and Voting regressor. | classes: _BaseVoting, VotingClassifier, VotingRegressor | imports: abc, numbers, numpy, base | [sklearn ensemble _voting.py]",
    "role": "src",
    "loc": 597
  },
  {
    "id": "sklearn\\ensemble\\_weight_boosting.py",
    "summary": "Weight Boosting. | classes: BaseWeightBoosting, AdaBoostClassifier, AdaBoostRegressor | functions: _samme_proba | imports: abc, numbers, numpy, base | [sklearn ensemble _weight_boosting.py]",
    "role": "src",
    "loc": 890
  },
  {
    "id": "sklearn\\ensemble\\__init__.py",
    "summary": "Ensemble-based methods for classification, regression and anomaly detection. | imports: _bagging, _base, _forest, _gb | [sklearn ensemble __init__.py]",
    "role": "src",
    "loc": 40
  },
  {
    "id": "sklearn\\ensemble\\tests\\test_bagging.py",
    "summary": "Testing for the bagging ensemble module (sklearn.ensemble.bagging). | classes: CustomSVC, CustomSVR, DummySizeEstimator, DummyZeroEstimator, MyEstimator | functions: test_classification, test_sparse_classification, test_regression, test_sparse_regression, test_bootstrap_samples, test_bootstrap_featu",
    "role": "tests",
    "loc": 713
  },
  {
    "id": "sklearn\\ensemble\\tests\\test_base.py",
    "summary": "Testing for the base module (sklearn.ensemble.base). | classes: AlphaParamPipeline, RevParamPipeline | functions: test_base, test_set_random_states, make_steps | imports: numpy, sklearn | [sklearn ensemble tests test_base.py]",
    "role": "tests",
    "loc": 78
  },
  {
    "id": "sklearn\\ensemble\\tests\\test_common.py",
    "summary": "No description | functions: test_ensemble_heterogeneous_estimators_behavior, test_ensemble_heterogeneous_estimators_type, test_ensemble_heterogeneous_estimators_name_validation, test_ensemble_heterogeneous_estimators_all_dropped, test_heterogeneous_ensemble_support_missing_values | imports: numpy, p",
    "role": "tests",
    "loc": 217
  },
  {
    "id": "sklearn\\ensemble\\tests\\test_forest.py",
    "summary": "Testing for the forest module (sklearn.ensemble.forest). | classes: MyBackend | functions: test_classification_toy, test_iris_criterion, test_regression_criterion, test_poisson_vs_mse, test_balance_property_random_forest, test_regressor_attributes | imports: pickle, functools, unittest, joblib | [sk",
    "role": "tests",
    "loc": 1389
  },
  {
    "id": "sklearn\\ensemble\\tests\\test_gradient_boosting.py",
    "summary": "Testing for the gradient boosting module (sklearn.ensemble.gradient_boosting). | functions: test_exponential_n_classes_gt_2, test_raise_if_init_has_no_predict_proba, test_classification_toy, test_classification_synthetic, test_regression_dataset, test_iris | imports: numpy, pytest, sklearn, cPickle ",
    "role": "tests",
    "loc": 1258
  },
  {
    "id": "sklearn\\ensemble\\tests\\test_iforest.py",
    "summary": "Testing for Isolation Forest algorithm (sklearn.ensemble.iforest). | functions: test_iforest, test_iforest_sparse, test_iforest_error, test_recalculate_max_depth, test_max_samples_attribute, test_iforest_parallel_regression | imports: unittest, numpy, pytest, joblib | [sklearn ensemble tests test_if",
    "role": "tests",
    "loc": 270
  },
  {
    "id": "sklearn\\ensemble\\tests\\test_stacking.py",
    "summary": "Test the stacking classifier and regressor. | classes: NoWeightRegressor, NoWeightClassifier, MyEstimator | functions: test_stacking_classifier_iris, test_stacking_classifier_drop_column_binary_classification, test_stacking_classifier_drop_estimator, test_stacking_regressor_drop_estimator, test_stac",
    "role": "tests",
    "loc": 828
  },
  {
    "id": "sklearn\\ensemble\\tests\\test_voting.py",
    "summary": "Testing for the VotingClassifier and VotingRegressor | classes: ClassifierErrorFit, MockClassifier | functions: test_voting_classifier_estimator_init, test_predictproba_hardvoting, test_notfitted, test_majority_label_iris, test_tie_situation, test_weights_iris | imports: numpy, pytest, sklearn | [sk",
    "role": "tests",
    "loc": 646
  },
  {
    "id": "sklearn\\ensemble\\tests\\test_weight_boosting.py",
    "summary": "Testing for the boost module (sklearn.ensemble.boost). | classes: MockEstimator, CustomSVC, CustomSVR, DummyEstimator | functions: test_samme_proba, test_oneclass_adaboost_proba, test_classification_toy, test_regression_toy, test_iris, test_diabetes | imports: numpy, pytest, sklearn, pickle | [sklea",
    "role": "tests",
    "loc": 430
  },
  {
    "id": "sklearn\\ensemble\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn ensemble tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\ensemble\\_hist_gradient_boosting\\binning.py",
    "summary": "This module contains the BinMapper class. | classes: _BinMapper | functions: _find_binning_thresholds | imports: numpy, base, utils, _binning | [sklearn ensemble _hist_gradient_boosting binning.py]",
    "role": "src",
    "loc": 266
  },
  {
    "id": "sklearn\\ensemble\\_hist_gradient_boosting\\gradient_boosting.py",
    "summary": "Fast Gradient Boosting decision trees for classification and regression. | classes: BaseHistGradientBoosting, HistGradientBoostingRegressor, HistGradientBoostingClassifier | functions: _update_leaves_values, _patch_raw_predict, _patched_raw_predicts | imports: abc, functools, numbers, numpy | [sklea",
    "role": "src",
    "loc": 1854
  },
  {
    "id": "sklearn\\ensemble\\_hist_gradient_boosting\\grower.py",
    "summary": "This module contains the TreeGrower class. | classes: TreeNode, TreeGrower | functions: _fill_predictor_arrays | imports: numbers, heapq, timeit, numpy | [sklearn ensemble _hist_gradient_boosting grower.py]",
    "role": "src",
    "loc": 678
  },
  {
    "id": "sklearn\\ensemble\\_hist_gradient_boosting\\predictor.py",
    "summary": "This module contains the TreePredictor class which is used for prediction. | classes: TreePredictor | imports: numpy, _predictor, common | [sklearn ensemble _hist_gradient_boosting predictor.py]",
    "role": "src",
    "loc": 111
  },
  {
    "id": "sklearn\\ensemble\\_hist_gradient_boosting\\utils.py",
    "summary": "This module contains utility routines. | functions: get_equivalent_estimator | imports: base, binning, lightgbm, xgboost | [sklearn ensemble _hist_gradient_boosting utils.py]",
    "role": "src",
    "loc": 109
  },
  {
    "id": "sklearn\\ensemble\\_hist_gradient_boosting\\__init__.py",
    "summary": "This module implements histogram-based gradient boosting estimators. | [sklearn ensemble _hist_gradient_boosting __init__.py]",
    "role": "src",
    "loc": 4
  },
  {
    "id": "sklearn\\ensemble\\_hist_gradient_boosting\\tests\\test_binning.py",
    "summary": "No description | functions: test_find_binning_thresholds_regular_data, test_find_binning_thresholds_small_regular_data, test_find_binning_thresholds_random_data, test_find_binning_thresholds_low_n_bins, test_invalid_n_bins, test_bin_mapper_n_features_transform | imports: numpy, pytest, sklearn | [sk",
    "role": "tests",
    "loc": 361
  },
  {
    "id": "sklearn\\ensemble\\_hist_gradient_boosting\\tests\\test_bitset.py",
    "summary": "No description | functions: test_set_get_bitset, test_raw_bitset_from_binned_bitset | imports: numpy, pytest, sklearn | [sklearn ensemble _hist_gradient_boosting tests test_bitset.py]",
    "role": "tests",
    "loc": 56
  },
  {
    "id": "sklearn\\ensemble\\_hist_gradient_boosting\\tests\\test_compare_lightgbm.py",
    "summary": "No description | functions: test_same_predictions_regression, test_same_predictions_classification, test_same_predictions_multiclass_classification | imports: numpy, pytest, sklearn | [sklearn ensemble _hist_gradient_boosting tests test_compare_lightgbm.py]",
    "role": "tests",
    "loc": 202
  },
  {
    "id": "sklearn\\ensemble\\_hist_gradient_boosting\\tests\\test_gradient_boosting.py",
    "summary": "Make a dumb dataset to test early stopping. | classes: MinMaxImputer | functions: _make_dumb_dataset, test_init_parameters_validation, test_early_stopping_regression, test_early_stopping_classification, test_early_stopping_default, test_should_stop | imports: copyreg, io, pickle, unittest | [sklearn",
    "role": "tests",
    "loc": 1174
  },
  {
    "id": "sklearn\\ensemble\\_hist_gradient_boosting\\tests\\test_grower.py",
    "summary": "No description | functions: _make_training_data, true_decision_function, _check_children_consistency, test_grow_tree, test_predictor_from_grower, test_min_samples_leaf | imports: numpy, pytest, sklearn | [sklearn ensemble _hist_gradient_boosting tests test_grower.py]",
    "role": "tests",
    "loc": 463
  },
  {
    "id": "sklearn\\ensemble\\_hist_gradient_boosting\\tests\\test_histogram.py",
    "summary": "No description | functions: test_build_histogram, test_histogram_sample_order_independence, test_unrolled_equivalent_to_naive, test_hist_subtraction | imports: numpy, pytest, sklearn | [sklearn ensemble _hist_gradient_boosting tests test_histogram.py]",
    "role": "tests",
    "loc": 202
  },
  {
    "id": "sklearn\\ensemble\\_hist_gradient_boosting\\tests\\test_monotonic_constraints.py",
    "summary": "No description | functions: is_increasing, is_decreasing, assert_leaves_values_monotonic, get_leaves_values, depth_first_collect_leaf_values, assert_children_values_monotonic | imports: numpy, pytest, sklearn | [sklearn ensemble _hist_gradient_boosting tests test_monotonic_constraints.py]",
    "role": "tests",
    "loc": 296
  },
  {
    "id": "sklearn\\ensemble\\_hist_gradient_boosting\\tests\\test_predictor.py",
    "summary": "No description | functions: test_regression_dataset, test_infinite_values_and_thresholds, test_categorical_predictor | imports: numpy, pytest, sklearn | [sklearn ensemble _hist_gradient_boosting tests test_predictor.py]",
    "role": "tests",
    "loc": 133
  },
  {
    "id": "sklearn\\ensemble\\_hist_gradient_boosting\\tests\\test_splitting.py",
    "summary": "No description | functions: test_histogram_split, test_gradient_and_hessian_sanity, test_split_indices, test_min_gain_to_split, test_splitting_missing_values, test_splitting_categorical_cat_smooth | imports: numpy, pytest, sklearn | [sklearn ensemble _hist_gradient_boosting tests test_splitting.py]",
    "role": "tests",
    "loc": 872
  },
  {
    "id": "sklearn\\ensemble\\_hist_gradient_boosting\\tests\\test_warm_start.py",
    "summary": "Assert that two HistGBM instances are identical. | functions: _assert_predictor_equal, test_max_iter_with_warm_start_validation, test_warm_start_yields_identical_results, test_warm_start_max_depth, test_warm_start_early_stopping, test_warm_start_equal_n_estimators | imports: numpy, pytest, sklearn |",
    "role": "tests",
    "loc": 168
  },
  {
    "id": "sklearn\\ensemble\\_hist_gradient_boosting\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn ensemble _hist_gradient_boosting tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\experimental\\enable_halving_search_cv.py",
    "summary": "Enables Successive Halving search-estimators | imports: model_selection | [sklearn experimental enable_halving_search_cv.py]",
    "role": "src",
    "loc": 23
  },
  {
    "id": "sklearn\\experimental\\enable_hist_gradient_boosting.py",
    "summary": "This is now a no-op and can be safely removed from your code. | [sklearn experimental enable_hist_gradient_boosting.py]",
    "role": "src",
    "loc": 14
  },
  {
    "id": "sklearn\\experimental\\enable_iterative_imputer.py",
    "summary": "Enables IterativeImputer | imports: impute | [sklearn experimental enable_iterative_imputer.py]",
    "role": "src",
    "loc": 14
  },
  {
    "id": "sklearn\\experimental\\__init__.py",
    "summary": "Importable modules that enable the use of experimental features or estimators. | [sklearn experimental __init__.py]",
    "role": "src",
    "loc": 5
  },
  {
    "id": "sklearn\\experimental\\tests\\test_enable_hist_gradient_boosting.py",
    "summary": "Tests for making sure experimental imports work as expected. | functions: test_import_raises_warning | imports: textwrap, pytest, sklearn | [sklearn experimental tests test_enable_hist_gradient_boosting.py]",
    "role": "tests",
    "loc": 14
  },
  {
    "id": "sklearn\\experimental\\tests\\test_enable_iterative_imputer.py",
    "summary": "Tests for making sure experimental imports work as expected. | functions: test_imports_strategies | imports: textwrap, pytest, sklearn | [sklearn experimental tests test_enable_iterative_imputer.py]",
    "role": "tests",
    "loc": 36
  },
  {
    "id": "sklearn\\experimental\\tests\\test_enable_successive_halving.py",
    "summary": "Tests for making sure experimental imports work as expected. | functions: test_imports_strategies | imports: textwrap, pytest, sklearn | [sklearn experimental tests test_enable_successive_halving.py]",
    "role": "tests",
    "loc": 38
  },
  {
    "id": "sklearn\\experimental\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn experimental tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\externals\\conftest.py",
    "summary": "No description | functions: pytest_ignore_collect | [sklearn externals conftest.py]",
    "role": "src",
    "loc": 2
  },
  {
    "id": "sklearn\\externals\\_arff.py",
    "summary": "The liac-arff module implements functions to read and write ARFF files in | classes: ArffContainerType, ArffException, BadRelationFormat, BadAttributeFormat, BadDataFormat, BadAttributeType | functions: _build_re_values, _escape_sub_callback, _unquote, _parse_values, _unescape_sub_callback, encode_s",
    "role": "src",
    "loc": 800
  },
  {
    "id": "sklearn\\externals\\__init__.py",
    "summary": "External, bundled dependencies. | [sklearn externals __init__.py]",
    "role": "src",
    "loc": 3
  },
  {
    "id": "sklearn\\externals\\_packaging\\version.py",
    "summary": "Vendoered from | classes: InvalidVersion, _BaseVersion, LegacyVersion, Version | functions: parse, _parse_version_parts, _legacy_cmpkey, _parse_letter_version, _parse_local_version, _cmpkey | imports: _structures | [sklearn externals _packaging version.py]",
    "role": "src",
    "loc": 343
  },
  {
    "id": "sklearn\\externals\\_packaging\\_structures.py",
    "summary": "Vendoered from | classes: InfinityType, NegativeInfinityType | [sklearn externals _packaging _structures.py]",
    "role": "src",
    "loc": 43
  },
  {
    "id": "sklearn\\externals\\_packaging\\__init__.py",
    "summary": "Package initializer | [sklearn externals _packaging __init__.py]",
    "role": "src",
    "loc": 0
  },
  {
    "id": "sklearn\\externals\\_scipy\\__init__.py",
    "summary": "Package initializer | [sklearn externals _scipy __init__.py]",
    "role": "src",
    "loc": 0
  },
  {
    "id": "sklearn\\externals\\_scipy\\sparse\\__init__.py",
    "summary": "Package initializer | [sklearn externals _scipy sparse __init__.py]",
    "role": "src",
    "loc": 0
  },
  {
    "id": "sklearn\\externals\\_scipy\\sparse\\csgraph\\_laplacian.py",
    "summary": "This file is a copy of the scipy.sparse.csgraph._laplacian module from SciPy 1.12 | functions: laplacian, _setdiag_dense, _laplace, _laplace_normed, _laplace_sym, _laplace_normed_sym | imports: numpy, scipy | [sklearn externals _scipy sparse csgraph _laplacian.py]",
    "role": "src",
    "loc": 450
  },
  {
    "id": "sklearn\\externals\\_scipy\\sparse\\csgraph\\__init__.py",
    "summary": "Package initializer | imports: _laplacian | [sklearn externals _scipy sparse csgraph __init__.py]",
    "role": "src",
    "loc": 1
  },
  {
    "id": "sklearn\\feature_extraction\\image.py",
    "summary": "Utilities to extract features from images. | classes: PatchExtractor | functions: _make_edges_3d, _compute_gradient_3d, _mask_edges_weights, _to_graph, img_to_graph, grid_to_graph | imports: numbers, numpy, scipy, base | [sklearn feature_extraction image.py]",
    "role": "src",
    "loc": 566
  },
  {
    "id": "sklearn\\feature_extraction\\text.py",
    "summary": "Utilities to build feature vectors from text documents. | classes: _VectorizerMixin, HashingVectorizer, CountVectorizer, TfidfTransformer, TfidfVectorizer | functions: _preprocess, _analyze, strip_accents_unicode, strip_accents_ascii, strip_tags, _check_stop_list | imports: array, unicodedata, funct",
    "role": "src",
    "loc": 1725
  },
  {
    "id": "sklearn\\feature_extraction\\_dict_vectorizer.py",
    "summary": "Transforms lists of feature-value mappings to vectors. | classes: DictVectorizer | imports: array, numbers, operator, numpy | [sklearn feature_extraction _dict_vectorizer.py]",
    "role": "src",
    "loc": 364
  },
  {
    "id": "sklearn\\feature_extraction\\_hash.py",
    "summary": "Implements feature hashing, aka the hashing trick. | classes: FeatureHasher | functions: _iteritems | imports: numbers, numpy, scipy, sklearn | [sklearn feature_extraction _hash.py]",
    "role": "src",
    "loc": 168
  },
  {
    "id": "sklearn\\feature_extraction\\_stop_words.py",
    "summary": "No description | [sklearn feature_extraction _stop_words.py]",
    "role": "src",
    "loc": 322
  },
  {
    "id": "sklearn\\feature_extraction\\__init__.py",
    "summary": "Feature extraction from raw data. | imports: _dict_vectorizer, _hash, image | [sklearn feature_extraction __init__.py]",
    "role": "src",
    "loc": 13
  },
  {
    "id": "sklearn\\feature_extraction\\tests\\test_dict_vectorizer.py",
    "summary": "No description | classes: A | functions: test_dictvectorizer, test_feature_selection, test_one_of_k, test_iterable_value, test_iterable_not_string_error, test_mapping_error | imports: random, numpy, pytest, scipy | [sklearn feature_extraction tests test_dict_vectorizer.py]",
    "role": "tests",
    "loc": 193
  },
  {
    "id": "sklearn\\feature_extraction\\tests\\test_feature_hasher.py",
    "summary": "No description | functions: test_feature_hasher_dicts, test_feature_hasher_strings, test_feature_hasher_single_string, test_hashing_transform_seed, test_feature_hasher_pairs, test_feature_hasher_pairs_with_string_values | imports: numpy, pytest, sklearn | [sklearn feature_extraction tests test_featu",
    "role": "tests",
    "loc": 115
  },
  {
    "id": "sklearn\\feature_extraction\\tests\\test_image.py",
    "summary": "No description | functions: test_img_to_graph, test_img_to_graph_sparse, test_grid_to_graph, test_connect_regions, test_connect_regions_with_grid, downsampled_face | imports: numpy, pytest, scipy, sklearn | [sklearn feature_extraction tests test_image.py]",
    "role": "tests",
    "loc": 256
  },
  {
    "id": "sklearn\\feature_extraction\\tests\\test_text.py",
    "summary": "No description | classes: CustomEstimator | functions: uppercase, strip_eacute, split_tokenize, lazy_analyze, test_strip_accents, test_to_ascii | imports: pickle, uuid, functools, io | [sklearn feature_extraction tests test_text.py]",
    "role": "tests",
    "loc": 1210
  },
  {
    "id": "sklearn\\feature_extraction\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn feature_extraction tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\feature_selection\\_base.py",
    "summary": "Generic feature selection mixin | classes: SelectorMixin | functions: _get_feature_importances | imports: abc, operator, numpy, scipy | [sklearn feature_selection _base.py]",
    "role": "src",
    "loc": 221
  },
  {
    "id": "sklearn\\feature_selection\\_from_model.py",
    "summary": "Meta-transformer for selecting features based on importance weights. | classes: SelectFromModel | functions: _calculate_threshold | imports: copy, numbers, numpy, base | [sklearn feature_selection _from_model.py]",
    "role": "src",
    "loc": 408
  },
  {
    "id": "sklearn\\feature_selection\\_mutual_info.py",
    "summary": "Compute mutual information between two continuous variables. | functions: _compute_mi_cc, _compute_mi_cd, _compute_mi, _iterate_columns, _estimate_mi, mutual_info_regression | imports: numbers, numpy, scipy, metrics | [sklearn feature_selection _mutual_info.py]",
    "role": "src",
    "loc": 478
  },
  {
    "id": "sklearn\\feature_selection\\_rfe.py",
    "summary": "Recursive feature elimination for feature ranking | classes: RFE, RFECV | functions: _rfe_single_fit | imports: copy, numbers, numpy, joblib | [sklearn feature_selection _rfe.py]",
    "role": "src",
    "loc": 779
  },
  {
    "id": "sklearn\\feature_selection\\_sequential.py",
    "summary": "Sequential feature selection | classes: SequentialFeatureSelector | imports: numbers, numpy, base, metrics | [sklearn feature_selection _sequential.py]",
    "role": "src",
    "loc": 285
  },
  {
    "id": "sklearn\\feature_selection\\_univariate_selection.py",
    "summary": "Univariate features selection. | classes: _BaseFilter, SelectPercentile, SelectKBest, SelectFpr, SelectFdr, SelectFwe | functions: _clean_nans, f_oneway, f_classif, _chisquare, chi2, r_regression | imports: numbers, numpy, scipy, base | [sklearn feature_selection _univariate_selection.py]",
    "role": "src",
    "loc": 883
  },
  {
    "id": "sklearn\\feature_selection\\_variance_threshold.py",
    "summary": "Feature selector that removes all low-variance features. | classes: VarianceThreshold | imports: numbers, numpy, base, utils | [sklearn feature_selection _variance_threshold.py]",
    "role": "src",
    "loc": 107
  },
  {
    "id": "sklearn\\feature_selection\\__init__.py",
    "summary": "Feature selection algorithms. | imports: _base, _from_model, _mutual_info, _rfe | [sklearn feature_selection __init__.py]",
    "role": "src",
    "loc": 44
  },
  {
    "id": "sklearn\\feature_selection\\tests\\test_base.py",
    "summary": "Retain every `step` features (beginning with 0). | classes: StepSelector | functions: test_transform_dense, test_transform_sparse, test_inverse_transform_dense, test_inverse_transform_sparse, test_get_support, test_output_dataframe | imports: numpy, pytest, sklearn | [sklearn feature_selection tests",
    "role": "tests",
    "loc": 106
  },
  {
    "id": "sklearn\\feature_selection\\tests\\test_chi2.py",
    "summary": "Tests for chi2, currently the only feature selection function designed | functions: mkchi2, test_chi2, test_chi2_coo, test_chi2_negative, test_chi2_unused_feature, test_chisquare | imports: numpy, pytest, scipy, sklearn | [sklearn feature_selection tests test_chi2.py]",
    "role": "tests",
    "loc": 59
  },
  {
    "id": "sklearn\\feature_selection\\tests\\test_feature_select.py",
    "summary": "Todo: cross-check the F-value with stats model | functions: test_f_oneway_vs_scipy_stats, test_f_oneway_ints, test_f_classif, test_r_regression, test_f_regression, test_f_regression_input_dtype | imports: numpy, pytest, scipy, sklearn | [sklearn feature_selection tests test_feature_select.py]",
    "role": "tests",
    "loc": 781
  },
  {
    "id": "sklearn\\feature_selection\\tests\\test_from_model.py",
    "summary": "No description | classes: NaNTag, NoNaNTag, NaNTagRandomForest, FixedImportanceEstimator | functions: test_invalid_input, test_input_estimator_unchanged, test_max_features_error, test_inferred_max_features_integer, test_inferred_max_features_callable, test_max_features_array_like | imports: unittest",
    "role": "tests",
    "loc": 534
  },
  {
    "id": "sklearn\\feature_selection\\tests\\test_mutual_info.py",
    "summary": "No description | functions: test_compute_mi_dd, test_compute_mi_cc, test_compute_mi_cd, test_compute_mi_cd_unique_label, test_mutual_info_classif_discrete, test_mutual_info_regression | imports: numpy, pytest, sklearn | [sklearn feature_selection tests test_mutual_info.py]",
    "role": "tests",
    "loc": 174
  },
  {
    "id": "sklearn\\feature_selection\\tests\\test_rfe.py",
    "summary": "Testing Recursive feature elimination | classes: MockClassifier, TestEstimator | functions: test_rfe_features_importance, test_rfe, test_RFE_fit_score_params, test_rfe_percent_n_features, test_rfe_mockclassifier, test_rfecv | imports: operator, numpy, pytest, joblib | [sklearn feature_selection test",
    "role": "tests",
    "loc": 503
  },
  {
    "id": "sklearn\\feature_selection\\tests\\test_sequential.py",
    "summary": "No description | functions: test_bad_n_features_to_select, test_n_features_to_select, test_n_features_to_select_auto, test_n_features_to_select_stopping_criterion, test_n_features_to_select_float, test_sanity | imports: numpy, pytest, sklearn | [sklearn feature_selection tests test_sequential.py]",
    "role": "tests",
    "loc": 248
  },
  {
    "id": "sklearn\\feature_selection\\tests\\test_variance_threshold.py",
    "summary": "No description | functions: test_zero_variance, test_zero_variance_value_error, test_variance_threshold, test_zero_variance_floating_point_error, test_variance_nan | imports: numpy, pytest, sklearn | [sklearn feature_selection tests test_variance_threshold.py]",
    "role": "tests",
    "loc": 49
  },
  {
    "id": "sklearn\\feature_selection\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn feature_selection tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\frozen\\_frozen.py",
    "summary": "Estimator that wraps a fitted estimator to prevent re-fitting. | classes: FrozenEstimator | functions: _estimator_has, check | imports: copy, base, exceptions, utils | [sklearn frozen _frozen.py]",
    "role": "src",
    "loc": 126
  },
  {
    "id": "sklearn\\frozen\\__init__.py",
    "summary": "Package initializer | imports: _frozen | [sklearn frozen __init__.py]",
    "role": "src",
    "loc": 2
  },
  {
    "id": "sklearn\\frozen\\tests\\test_frozen.py",
    "summary": "No description | classes: ConsumesMetadata, Estimator | functions: regression_dataset, classification_dataset, test_frozen_methods, test_frozen_metadata_routing, test_composite_fit, test_clone_frozen | imports: numpy, pytest, sklearn | [sklearn frozen tests test_frozen.py]",
    "role": "tests",
    "loc": 173
  },
  {
    "id": "sklearn\\frozen\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn frozen tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\gaussian_process\\kernels.py",
    "summary": "A set of kernels that can be combined by operators and used in Gaussian processes. | classes: Hyperparameter, Kernel, NormalizedKernelMixin, StationaryKernelMixin, GenericKernelMixin, CompoundKernel | functions: _check_length_scale, _approx_fprime | imports: abc, inspect, numpy, scipy | [sklearn gau",
    "role": "src",
    "loc": 1940
  },
  {
    "id": "sklearn\\gaussian_process\\_gpc.py",
    "summary": "Gaussian processes classification. | classes: _BinaryGaussianProcessClassifierLaplace, GaussianProcessClassifier | imports: numbers, operator, numpy, scipy | [sklearn gaussian_process _gpc.py]",
    "role": "src",
    "loc": 691
  },
  {
    "id": "sklearn\\gaussian_process\\_gpr.py",
    "summary": "Gaussian processes regression. | classes: GaussianProcessRegressor | imports: numbers, operator, numpy, scipy | [sklearn gaussian_process _gpr.py]",
    "role": "src",
    "loc": 496
  },
  {
    "id": "sklearn\\gaussian_process\\__init__.py",
    "summary": "Gaussian process based regression and classification. | imports: _gpc, _gpr | [sklearn gaussian_process __init__.py]",
    "role": "src",
    "loc": 5
  },
  {
    "id": "sklearn\\gaussian_process\\tests\\test_gpc.py",
    "summary": "Testing for Gaussian process classification | functions: f, test_predict_consistent, test_predict_consistent_structured, test_lml_improving, test_lml_precomputed, test_lml_without_cloning_kernel | imports: numpy, pytest, scipy, sklearn | [sklearn gaussian_process tests test_gpc.py]",
    "role": "tests",
    "loc": 212
  },
  {
    "id": "sklearn\\gaussian_process\\tests\\test_gpr.py",
    "summary": "Testing for Gaussian process regression | classes: CustomKernel | functions: f, test_gpr_interpolation, test_gpr_interpolation_structured, test_lml_improving, test_lml_precomputed, test_lml_without_cloning_kernel | imports: numpy, pytest, scipy, sklearn | [sklearn gaussian_process tests test_gpr.py]",
    "role": "tests",
    "loc": 606
  },
  {
    "id": "sklearn\\gaussian_process\\tests\\test_kernels.py",
    "summary": "Testing for kernels for Gaussian processes. | functions: test_kernel_gradient, eval_kernel_for_theta, test_kernel_theta, test_auto_vs_cross, test_kernel_diag, test_kernel_operator_commutative | imports: inspect, numpy, pytest, sklearn | [sklearn gaussian_process tests test_kernels.py]",
    "role": "tests",
    "loc": 286
  },
  {
    "id": "sklearn\\gaussian_process\\tests\\_mini_sequence_kernel.py",
    "summary": "A minimal (but valid) convolutional kernel for sequences of variable | classes: MiniSeqKernel | imports: numpy, sklearn | [sklearn gaussian_process tests _mini_sequence_kernel.py]",
    "role": "tests",
    "loc": 43
  },
  {
    "id": "sklearn\\gaussian_process\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn gaussian_process tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\impute\\_base.py",
    "summary": "Base class for all imputers. | classes: _BaseImputer, SimpleImputer, MissingIndicator | functions: _check_inputs_dtype, _most_frequent | imports: numbers, functools, numpy, scipy | [sklearn impute _base.py]",
    "role": "src",
    "loc": 886
  },
  {
    "id": "sklearn\\impute\\_iterative.py",
    "summary": "Multivariate imputer that estimates each feature from all the others. | classes: IterativeImputer | functions: _assign_where | imports: numbers, numpy, scipy, base | [sklearn impute _iterative.py]",
    "role": "src",
    "loc": 827
  },
  {
    "id": "sklearn\\impute\\_knn.py",
    "summary": "Imputation for completing missing values using k-Nearest Neighbors. | classes: KNNImputer | imports: numbers, numpy, base, metrics | [sklearn impute _knn.py]",
    "role": "src",
    "loc": 310
  },
  {
    "id": "sklearn\\impute\\__init__.py",
    "summary": "Transformers for missing value imputation. | functions: __getattr__ | imports: _base, _knn, _iterative | [sklearn impute __init__.py]",
    "role": "src",
    "loc": 16
  },
  {
    "id": "sklearn\\impute\\tests\\test_base.py",
    "summary": "No description | classes: NoFitIndicatorImputer, NoTransformIndicatorImputer, NoPrecomputedMaskFit, NoPrecomputedMaskTransform | functions: data, test_base_imputer_not_fit, test_base_imputer_not_transform, test_base_no_precomputed_mask_fit, test_base_no_precomputed_mask_transform, test_assign_where ",
    "role": "tests",
    "loc": 79
  },
  {
    "id": "sklearn\\impute\\tests\\test_common.py",
    "summary": "No description | functions: imputers, sparse_imputers, test_imputation_missing_value_in_test_array, test_imputers_add_indicator, test_imputers_add_indicator_sparse, test_imputers_pandas_na_integer_array_support | imports: numpy, pytest, sklearn | [sklearn impute tests test_common.py]",
    "role": "tests",
    "loc": 171
  },
  {
    "id": "sklearn\\impute\\tests\\test_impute.py",
    "summary": "No description | classes: ZeroEstimator | functions: _assert_array_equal_and_same_dtype, _assert_allclose_and_same_dtype, _check_statistics, test_imputation_shape, test_imputation_deletion_warning, test_imputation_deletion_warning_feature_names | imports: io, numpy, pytest, scipy | [sklearn impute t",
    "role": "tests",
    "loc": 1457
  },
  {
    "id": "sklearn\\impute\\tests\\test_knn.py",
    "summary": "No description | functions: test_knn_imputer_shape, test_knn_imputer_default_with_invalid_input, test_knn_imputer_removes_all_na_features, test_knn_imputer_zero_nan_imputes_the_same, test_knn_imputer_verify, test_knn_imputer_one_n_neighbors | imports: numpy, pytest, sklearn | [sklearn impute tests t",
    "role": "tests",
    "loc": 433
  },
  {
    "id": "sklearn\\impute\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn impute tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\inspection\\_partial_dependence.py",
    "summary": "Partial dependence plots for regression and classification models. | functions: _grid_from_X, _convert_custom_values, _partial_dependence_recursion, _partial_dependence_brute, partial_dependence | imports: numpy, scipy, base, ensemble | [sklearn inspection _partial_dependence.py]",
    "role": "src",
    "loc": 603
  },
  {
    "id": "sklearn\\inspection\\_pd_utils.py",
    "summary": "Check feature names. | functions: _check_feature_names, _get_feature_index | [sklearn inspection _pd_utils.py]",
    "role": "src",
    "loc": 52
  },
  {
    "id": "sklearn\\inspection\\_permutation_importance.py",
    "summary": "Permutation importance for estimators. | functions: _weights_scorer, _calculate_permutation_scores, _create_importances_bunch, permutation_importance | imports: numbers, numpy, ensemble, metrics | [sklearn inspection _permutation_importance.py]",
    "role": "src",
    "loc": 252
  },
  {
    "id": "sklearn\\inspection\\__init__.py",
    "summary": "Tools for model inspection. | imports: _partial_dependence, _permutation_importance, _plot | [sklearn inspection __init__.py]",
    "role": "src",
    "loc": 11
  },
  {
    "id": "sklearn\\inspection\\tests\\test_partial_dependence.py",
    "summary": "Testing for the partial dependence module. | classes: NoPredictProbaNoDecisionFunction | functions: test_output_shape, test_grid_from_X, test_grid_from_X_with_categorical, test_grid_from_X_heterogeneous_type, test_grid_from_X_error, test_partial_dependence_helpers | imports: numpy, pytest, sklearn |",
    "role": "tests",
    "loc": 948
  },
  {
    "id": "sklearn\\inspection\\tests\\test_pd_utils.py",
    "summary": "No description | functions: test_check_feature_names, test_check_feature_names_error, test_get_feature_index, test_get_feature_names_error | imports: numpy, pytest, sklearn | [sklearn inspection tests test_pd_utils.py]",
    "role": "tests",
    "loc": 38
  },
  {
    "id": "sklearn\\inspection\\tests\\test_permutation_importance.py",
    "summary": "No description | functions: test_permutation_importance_correlated_feature_regression, test_permutation_importance_correlated_feature_regression_pandas, test_robustness_to_high_cardinality_noisy_feature, test_permutation_importance_mixed_types, test_permutation_importance_mixed_types_pandas, test_pe",
    "role": "tests",
    "loc": 347
  },
  {
    "id": "sklearn\\inspection\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn inspection tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\inspection\\_plot\\decision_boundary.py",
    "summary": "Decisions boundary visualization. | classes: DecisionBoundaryDisplay | functions: _check_boundary_response_method | imports: numpy, base, preprocessing, utils | [sklearn inspection _plot decision_boundary.py]",
    "role": "src",
    "loc": 336
  },
  {
    "id": "sklearn\\inspection\\_plot\\partial_dependence.py",
    "summary": "Partial Dependence Plot (PDP). | classes: PartialDependenceDisplay | imports: numbers, numpy, scipy, base | [sklearn inspection _plot partial_dependence.py]",
    "role": "src",
    "loc": 1245
  },
  {
    "id": "sklearn\\inspection\\_plot\\__init__.py",
    "summary": "Package initializer | [sklearn inspection _plot __init__.py]",
    "role": "src",
    "loc": 0
  },
  {
    "id": "sklearn\\inspection\\_plot\\tests\\test_boundary_decision_display.py",
    "summary": "No description | classes: MultiLabelClassifier, MulticlassClassifier, MyClassifier, SubclassOfDisplay | functions: load_iris_2d_scaled, fitted_clf, test_input_data_dimension, test_check_boundary_response_method_error, test_check_boundary_response_method, test_multiclass_error | imports: numpy, pytes",
    "role": "tests",
    "loc": 483
  },
  {
    "id": "sklearn\\inspection\\_plot\\tests\\test_plot_partial_dependence.py",
    "summary": "No description | classes: SubclassOfDisplay | functions: diabetes, clf_diabetes, custom_values_helper, test_plot_partial_dependence, test_plot_partial_dependence_kind, test_plot_partial_dependence_str_features | imports: numpy, pytest, scipy, sklearn | [sklearn inspection _plot tests test_plot_parti",
    "role": "tests",
    "loc": 1112
  },
  {
    "id": "sklearn\\inspection\\_plot\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn inspection _plot tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\linear_model\\_base.py",
    "summary": "Generalized Linear Models. | classes: LinearModel, LinearClassifierMixin, SparseCoefMixin, LinearRegression | functions: make_dataset, _preprocess_data, _rescale_data, _check_precomputed_gram_matrix, _pre_fit | imports: numbers, abc, numpy, scipy | [sklearn linear_model _base.py]",
    "role": "src",
    "loc": 662
  },
  {
    "id": "sklearn\\linear_model\\_bayes.py",
    "summary": "Various bayesian regression | classes: BayesianRidge, ARDRegression | imports: numbers, numpy, scipy, base | [sklearn linear_model _bayes.py]",
    "role": "src",
    "loc": 622
  },
  {
    "id": "sklearn\\linear_model\\_coordinate_descent.py",
    "summary": "Linear regression with combined L1 and L2 priors as regularizer. | classes: ElasticNet, Lasso, LinearModelCV, LassoCV, ElasticNetCV, MultiTaskElasticNet | functions: _set_order, _alpha_grid, lasso_path, enet_path, _path_residuals | imports: numbers, abc, functools, numpy | [sklearn linear_model _coo",
    "role": "src",
    "loc": 2576
  },
  {
    "id": "sklearn\\linear_model\\_huber.py",
    "summary": "L2-regularized linear regression model that is robust to outliers. | classes: HuberRegressor | functions: _huber_loss_and_gradient | imports: numbers, numpy, scipy, base | [sklearn linear_model _huber.py]",
    "role": "src",
    "loc": 273
  },
  {
    "id": "sklearn\\linear_model\\_least_angle.py",
    "summary": "Least Angle Regression algorithm. See the documentation on the | classes: Lars, LassoLars, LarsCV, LassoLarsCV, LassoLarsIC | functions: lars_path, lars_path_gram, _lars_path_solver, _check_copy_and_writeable, _lars_path_residues | imports: numbers, numpy, scipy, base | [sklearn linear_model _least_",
    "role": "src",
    "loc": 1850
  },
  {
    "id": "sklearn\\linear_model\\_linear_loss.py",
    "summary": "Loss functions for linear models with raw_prediction = X @ coef | classes: LinearModelLoss | functions: sandwich_dot | imports: numpy, scipy, utils | [sklearn linear_model _linear_loss.py]",
    "role": "src",
    "loc": 620
  },
  {
    "id": "sklearn\\linear_model\\_logistic.py",
    "summary": "Logistic Regression | classes: LogisticRegression, LogisticRegressionCV | functions: _check_solver, _check_multi_class, _logistic_regression_path, _log_reg_scoring_path | imports: numbers, numpy, joblib, scipy | [sklearn linear_model _logistic.py]",
    "role": "src",
    "loc": 1868
  },
  {
    "id": "sklearn\\linear_model\\_omp.py",
    "summary": "Orthogonal matching pursuit algorithms | classes: OrthogonalMatchingPursuit, OrthogonalMatchingPursuitCV | functions: _cholesky_omp, _gram_omp, orthogonal_mp, orthogonal_mp_gram, _omp_path_residues | imports: numbers, numpy, scipy, base | [sklearn linear_model _omp.py]",
    "role": "src",
    "loc": 922
  },
  {
    "id": "sklearn\\linear_model\\_passive_aggressive.py",
    "summary": "Passive Aggressive Classifier. | classes: PassiveAggressiveClassifier, PassiveAggressiveRegressor | imports: numbers, base, utils, _stochastic_gradient | [sklearn linear_model _passive_aggressive.py]",
    "role": "src",
    "loc": 461
  },
  {
    "id": "sklearn\\linear_model\\_perceptron.py",
    "summary": "Linear perceptron classifier. | classes: Perceptron | imports: numbers, utils, _stochastic_gradient | [sklearn linear_model _perceptron.py]",
    "role": "src",
    "loc": 176
  },
  {
    "id": "sklearn\\linear_model\\_quantile.py",
    "summary": "Linear regression model that predicts conditional quantiles. | classes: QuantileRegressor | imports: numbers, numpy, scipy, base | [sklearn linear_model _quantile.py]",
    "role": "src",
    "loc": 221
  },
  {
    "id": "sklearn\\linear_model\\_ransac.py",
    "summary": "RANSAC (RANdom SAmple Consensus) algorithm. | classes: RANSACRegressor | functions: _dynamic_max_trials | imports: numbers, numpy, base, exceptions | [sklearn linear_model _ransac.py]",
    "role": "src",
    "loc": 579
  },
  {
    "id": "sklearn\\linear_model\\_ridge.py",
    "summary": "Ridge regression | classes: _BaseRidge, Ridge, _RidgeClassifierMixin, RidgeClassifier, _X_CenterStackOp, _XT_CenterStackOp | functions: _get_rescaled_operator, matvec, rmatvec, _solve_sparse_cg, create_mv, _mv | imports: numbers, abc, functools, numpy | [sklearn linear_model _ridge.py]",
    "role": "src",
    "loc": 2324
  },
  {
    "id": "sklearn\\linear_model\\_sag.py",
    "summary": "Solvers for Ridge and LogisticRegression using SAG algorithm | functions: get_auto_step_size, sag_solver | imports: numpy, exceptions, utils, _base | [sklearn linear_model _sag.py]",
    "role": "src",
    "loc": 291
  },
  {
    "id": "sklearn\\linear_model\\_stochastic_gradient.py",
    "summary": "Classification, regression and One-Class SVM using Stochastic Gradient | classes: _ValidationScoreCallback, BaseSGD, BaseSGDClassifier, SGDClassifier, BaseSGDRegressor, SGDRegressor | functions: _prepare_fit_binary, fit_binary, _get_plain_sgd_function | imports: abc, numbers, numpy, _loss | [sklearn",
    "role": "src",
    "loc": 2200
  },
  {
    "id": "sklearn\\linear_model\\_theil_sen.py",
    "summary": "A Theil-Sen Estimator for Multiple Linear Regression Model | classes: TheilSenRegressor | functions: _modified_weiszfeld_step, _spatial_median, _breakdown_point, _lstsq | imports: numbers, numpy, joblib, scipy | [sklearn linear_model _theil_sen.py]",
    "role": "src",
    "loc": 378
  },
  {
    "id": "sklearn\\linear_model\\__init__.py",
    "summary": "A variety of linear models. | imports: _base, _bayes, _coordinate_descent, _glm | [sklearn linear_model __init__.py]",
    "role": "src",
    "loc": 86
  },
  {
    "id": "sklearn\\linear_model\\tests\\test_base.py",
    "summary": "No description | functions: test_linear_regression, test_linear_regression_sample_weights, test_raises_value_error_if_positive_and_sparse, test_raises_value_error_if_sample_weights_greater_than_1d, test_fit_intercept, test_linear_regression_sparse | imports: numpy, pytest, scipy, sklearn | [sklearn ",
    "role": "tests",
    "loc": 577
  },
  {
    "id": "sklearn\\linear_model\\tests\\test_bayes.py",
    "summary": "Check scores attribute shape | functions: test_bayesian_ridge_scores, test_bayesian_ridge_score_values, test_bayesian_ridge_parameter, test_bayesian_sample_weights, test_toy_bayesian_ridge_object, test_bayesian_initial_params | imports: numpy, pytest, sklearn | [sklearn linear_model tests test_bayes",
    "role": "tests",
    "loc": 188
  },
  {
    "id": "sklearn\\linear_model\\tests\\test_common.py",
    "summary": "No description | functions: test_balance_property, test_linear_model_regressor_coef_shape, test_linear_model_classifier_coef_shape | imports: inspect, numpy, pytest, sklearn | [sklearn linear_model tests test_common.py]",
    "role": "tests",
    "loc": 198
  },
  {
    "id": "sklearn\\linear_model\\tests\\test_coordinate_descent.py",
    "summary": "Check that _set_order returns arrays with promised order. | classes: LassoMock, CVSplitter, CVSplitterSampleWeight | functions: test_set_order_dense, test_set_order_sparse, test_lasso_zero, test_enet_nonfinite_params, test_lasso_toy, test_enet_toy | imports: copy, joblib, numpy, pytest | [sklearn li",
    "role": "tests",
    "loc": 1239
  },
  {
    "id": "sklearn\\linear_model\\tests\\test_huber.py",
    "summary": "No description | functions: make_regression_with_outliers, test_huber_equals_lr_for_high_epsilon, test_huber_max_iter, test_huber_gradient, loss_func, grad_func | imports: numpy, pytest, scipy, sklearn | [sklearn linear_model tests test_huber.py]",
    "role": "tests",
    "loc": 145
  },
  {
    "id": "sklearn\\linear_model\\tests\\test_least_angle.py",
    "summary": "No description | functions: test_simple, test_simple_precomputed, _assert_same_lars_path_result, test_lars_path_gram_equivalent, test_x_none_gram_none_raises_value_error, test_all_precomputed | imports: numpy, pytest, scipy, sklearn | [sklearn linear_model tests test_least_angle.py]",
    "role": "tests",
    "loc": 600
  },
  {
    "id": "sklearn\\linear_model\\tests\\test_linear_loss.py",
    "summary": "Tests for LinearModelLoss | functions: random_X_y_coef, choice_vectorized, test_init_zero_coef, test_loss_grad_hess_are_the_same, test_loss_gradients_hessp_intercept, test_gradients_hessians_numerically | imports: numpy, pytest, scipy, sklearn | [sklearn linear_model tests test_linear_loss.py]",
    "role": "tests",
    "loc": 437
  },
  {
    "id": "sklearn\\linear_model\\tests\\test_logistic.py",
    "summary": "Check that the model is able to fit the classification data | classes: MockScorer | functions: check_predictions, test_predict_2_classes, test_logistic_cv_mock_scorer, test_lr_liblinear_warning, test_predict_3_classes, test_predict_iris | imports: functools, numpy, pytest, scipy | [sklearn linear_mo",
    "role": "tests",
    "loc": 1792
  },
  {
    "id": "sklearn\\linear_model\\tests\\test_omp.py",
    "summary": "No description | functions: test_correct_shapes, test_correct_shapes_gram, test_n_nonzero_coefs, test_tol, test_with_without_gram, test_with_without_gram_tol | imports: numpy, pytest, sklearn | [sklearn linear_model tests test_omp.py]",
    "role": "tests",
    "loc": 209
  },
  {
    "id": "sklearn\\linear_model\\tests\\test_passive_aggressive.py",
    "summary": "No description | classes: MyPassiveAggressive | functions: test_classifier_accuracy, test_classifier_partial_fit, test_classifier_refit, test_classifier_correctness, test_classifier_undefined_methods, test_class_weights | imports: numpy, pytest, sklearn | [sklearn linear_model tests test_passive_agg",
    "role": "tests",
    "loc": 213
  },
  {
    "id": "sklearn\\linear_model\\tests\\test_perceptron.py",
    "summary": "No description | classes: MyPerceptron | functions: test_perceptron_accuracy, test_perceptron_correctness, test_undefined_methods, test_perceptron_l1_ratio | imports: numpy, pytest, sklearn | [sklearn linear_model tests test_perceptron.py]",
    "role": "tests",
    "loc": 63
  },
  {
    "id": "sklearn\\linear_model\\tests\\test_quantile.py",
    "summary": "No description | functions: X_y_data, test_incompatible_solver_for_sparse_input, test_quantile_toy_example, test_quantile_equals_huber_for_low_epsilon, test_quantile_estimates_calibration, test_quantile_sample_weight | imports: numpy, pytest, scipy, sklearn | [sklearn linear_model tests test_quantil",
    "role": "tests",
    "loc": 219
  },
  {
    "id": "sklearn\\linear_model\\tests\\test_ransac.py",
    "summary": "No description | functions: test_ransac_inliers_outliers, test_ransac_is_data_valid, is_data_valid, test_ransac_is_model_valid, is_model_valid, test_ransac_max_trials | imports: numpy, pytest, sklearn | [sklearn linear_model tests test_ransac.py]",
    "role": "tests",
    "loc": 402
  },
  {
    "id": "sklearn\\linear_model\\tests\\test_ridge.py",
    "summary": "No description | functions: _accuracy_callable, _mean_squared_error_callable, ols_ridge_dataset, test_ridge_regression, test_ridge_regression_hstacked_X, test_ridge_regression_vstacked_X | imports: numpy, pytest, scipy, sklearn | [sklearn linear_model tests test_ridge.py]",
    "role": "tests",
    "loc": 1850
  },
  {
    "id": "sklearn\\linear_model\\tests\\test_sag.py",
    "summary": "No description | functions: log_dloss, log_loss, squared_dloss, squared_loss, get_pobj, sag | imports: numpy, pytest, sklearn | [sklearn linear_model tests test_sag.py]",
    "role": "tests",
    "loc": 709
  },
  {
    "id": "sklearn\\linear_model\\tests\\test_sgd.py",
    "summary": "No description | classes: _SparseSGDClassifier, _SparseSGDRegressor, _SparseSGDOneClassSVM | functions: _update_kwargs, SGDClassifier, SGDRegressor, SGDOneClassSVM, SparseSGDClassifier, SparseSGDRegressor | imports: pickle, unittest, joblib, numpy | [sklearn linear_model tests test_sgd.py]",
    "role": "tests",
    "loc": 1566
  },
  {
    "id": "sklearn\\linear_model\\tests\\test_sparse_coordinate_descent.py",
    "summary": "No description | functions: test_sparse_coef, test_lasso_zero, test_enet_toy_list_input, test_enet_toy_explicit_sparse_input, make_sparse_data, test_sparse_enet_not_as_toy_dataset | imports: numpy, pytest, scipy, sklearn | [sklearn linear_model tests test_sparse_coordinate_descent.py]",
    "role": "tests",
    "loc": 300
  },
  {
    "id": "sklearn\\linear_model\\tests\\test_theil_sen.py",
    "summary": "Testing for Theil-Sen module (sklearn.linear_model.theil_sen) | functions: no_stdout_stderr, gen_toy_problem_1d, gen_toy_problem_2d, gen_toy_problem_4d, test_modweiszfeld_step_1d, test_modweiszfeld_step_2d | imports: numpy, pytest, scipy, sklearn | [sklearn linear_model tests test_theil_sen.py]",
    "role": "tests",
    "loc": 224
  },
  {
    "id": "sklearn\\linear_model\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn linear_model tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\linear_model\\_glm\\glm.py",
    "summary": "Generalized Linear Models with Exponential Dispersion Family | classes: _GeneralizedLinearRegressor, PoissonRegressor, GammaRegressor, TweedieRegressor | imports: numbers, numpy, scipy, _loss | [sklearn linear_model _glm glm.py]",
    "role": "src",
    "loc": 699
  },
  {
    "id": "sklearn\\linear_model\\_glm\\_newton_solver.py",
    "summary": "Newton solver for Generalized Linear Models | classes: NewtonSolver, NewtonCholeskySolver | imports: abc, numpy, scipy, _loss | [sklearn linear_model _glm _newton_solver.py]",
    "role": "src",
    "loc": 437
  },
  {
    "id": "sklearn\\linear_model\\_glm\\__init__.py",
    "summary": "Package initializer | imports: glm | [sklearn linear_model _glm __init__.py]",
    "role": "src",
    "loc": 12
  },
  {
    "id": "sklearn\\linear_model\\_glm\\tests\\test_glm.py",
    "summary": "No description | classes: BinomialRegressor | functions: _special_minimize, regression_data, glm_dataset, test_glm_regression, test_glm_regression_hstacked_X, test_glm_regression_vstacked_X | imports: functools, numpy, pytest, scipy | [sklearn linear_model _glm tests test_glm.py]",
    "role": "tests",
    "loc": 846
  },
  {
    "id": "sklearn\\linear_model\\_glm\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn linear_model _glm tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\manifold\\_isomap.py",
    "summary": "Isomap for manifold learning | classes: Isomap | imports: numbers, numpy, scipy, base | [sklearn manifold _isomap.py]",
    "role": "src",
    "loc": 351
  },
  {
    "id": "sklearn\\manifold\\_locally_linear.py",
    "summary": "Locally Linear Embedding | classes: LocallyLinearEmbedding | functions: barycenter_weights, barycenter_kneighbors_graph, null_space, _locally_linear_embedding, locally_linear_embedding | imports: numbers, numpy, scipy, base | [sklearn manifold _locally_linear.py]",
    "role": "src",
    "loc": 691
  },
  {
    "id": "sklearn\\manifold\\_mds.py",
    "summary": "Multi-dimensional Scaling (MDS). | classes: MDS | functions: _smacof_single, smacof | imports: numbers, numpy, joblib, base | [sklearn manifold _mds.py]",
    "role": "src",
    "loc": 536
  },
  {
    "id": "sklearn\\manifold\\_spectral_embedding.py",
    "summary": "Spectral Embedding. | classes: SpectralEmbedding | functions: _graph_connected_component, _graph_is_connected, _set_diag, spectral_embedding, _spectral_embedding | imports: numbers, numpy, scipy, base | [sklearn manifold _spectral_embedding.py]",
    "role": "src",
    "loc": 601
  },
  {
    "id": "sklearn\\manifold\\_t_sne.py",
    "summary": "T-distributed Stochastic Neighbor Embedding. | classes: TSNE | functions: _joint_probabilities, _joint_probabilities_nn, _kl_divergence, _kl_divergence_bh, _gradient_descent, trustworthiness | imports: numbers, numpy, scipy, base | [sklearn manifold _t_sne.py]",
    "role": "src",
    "loc": 953
  },
  {
    "id": "sklearn\\manifold\\__init__.py",
    "summary": "Data embedding techniques. | imports: _isomap, _locally_linear, _mds, _spectral_embedding | [sklearn manifold __init__.py]",
    "role": "src",
    "loc": 17
  },
  {
    "id": "sklearn\\manifold\\tests\\test_isomap.py",
    "summary": "No description | functions: create_sample_data, test_isomap_simple_grid, test_isomap_reconstruction_error, test_transform, test_pipeline, test_pipeline_with_nearest_neighbors_transformer | imports: numpy, pytest, scipy, sklearn | [sklearn manifold tests test_isomap.py]",
    "role": "tests",
    "loc": 246
  },
  {
    "id": "sklearn\\manifold\\tests\\test_locally_linear.py",
    "summary": "No description | functions: test_barycenter_kneighbors_graph, test_lle_simple_grid, test_lle_manifold, test_pipeline, test_singular_matrix, test_integer_input | imports: numpy, pytest, scipy, sklearn | [sklearn manifold tests test_locally_linear.py]",
    "role": "tests",
    "loc": 118
  },
  {
    "id": "sklearn\\manifold\\tests\\test_mds.py",
    "summary": "No description | functions: test_smacof, test_smacof_error, test_MDS, test_normed_stress, test_normalize_metric_warning, test_normalized_stress_auto | imports: unittest, numpy, pytest, sklearn | [sklearn manifold tests test_mds.py]",
    "role": "tests",
    "loc": 58
  },
  {
    "id": "sklearn\\manifold\\tests\\test_spectral_embedding.py",
    "summary": "Check array A and B are equal with possible sign flipping on | functions: _assert_equal_with_sign_flipping, test_sparse_graph_connected_component, test_spectral_embedding_two_components, test_spectral_embedding_precomputed_affinity, test_precomputed_nearest_neighbors_filtering, test_spectral_embeddi",
    "role": "tests",
    "loc": 397
  },
  {
    "id": "sklearn\\manifold\\tests\\test_t_sne.py",
    "summary": "No description | classes: ObjectiveSmallGradient | functions: test_gradient_descent_stops, flat_function, test_binary_search, test_binary_search_underflow, test_binary_search_neighbors, test_binary_perplexity_stability | imports: io, numpy, pytest, scipy | [sklearn manifold tests test_t_sne.py]",
    "role": "tests",
    "loc": 940
  },
  {
    "id": "sklearn\\manifold\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn manifold tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\metrics\\pairwise.py",
    "summary": "Metrics for pairwise distances and affinity of sets of samples. | functions: _return_float_dtype, check_pairwise_arrays, check_paired_arrays, euclidean_distances, _euclidean_distances, nan_euclidean_distances | imports: functools, numbers, numpy, joblib | [sklearn metrics pairwise.py]",
    "role": "src",
    "loc": 2081
  },
  {
    "id": "sklearn\\metrics\\_base.py",
    "summary": "Common code for all metrics. | functions: _average_binary_score, _average_multiclass_ovo_score | imports: numpy, utils | [sklearn metrics _base.py]",
    "role": "src",
    "loc": 143
  },
  {
    "id": "sklearn\\metrics\\_classification.py",
    "summary": "Metrics to assess performance on classification task given class prediction. | functions: _check_zero_division, _check_targets, accuracy_score, confusion_matrix, multilabel_confusion_matrix, cohen_kappa_score | imports: numbers, numpy, scipy, exceptions | [sklearn metrics _classification.py]",
    "role": "src",
    "loc": 2933
  },
  {
    "id": "sklearn\\metrics\\_ranking.py",
    "summary": "Metrics to assess performance on classification task given scores. | functions: auc, average_precision_score, _binary_uninterpolated_average_precision, det_curve, _binary_roc_auc_score, roc_auc_score | imports: functools, numbers, numpy, scipy | [sklearn metrics _ranking.py]",
    "role": "src",
    "loc": 1660
  },
  {
    "id": "sklearn\\metrics\\_regression.py",
    "summary": "Metrics to assess performance on regression task. | functions: _check_reg_targets, _check_reg_targets_with_floating_dtype, mean_absolute_error, mean_pinball_loss, mean_absolute_percentage_error, mean_squared_error | imports: numbers, numpy, scipy, exceptions | [sklearn metrics _regression.py]",
    "role": "src",
    "loc": 1537
  },
  {
    "id": "sklearn\\metrics\\_scorer.py",
    "summary": "The :mod:`sklearn.metrics.scorer` submodule implements a flexible | classes: _MultimetricScorer, _BaseScorer, _Scorer, _PassthroughScorer, _CurveScorer | functions: _cached_call, get_scorer, _check_multimetric_scoring, _get_response_method_name, make_scorer, positive_likelihood_ratio | imports: copy",
    "role": "src",
    "loc": 939
  },
  {
    "id": "sklearn\\metrics\\__init__.py",
    "summary": "Score functions, performance metrics, pairwise metrics and distance computations. | imports: _classification, _dist_metrics, _plot, _ranking | [sklearn metrics __init__.py]",
    "role": "src",
    "loc": 176
  },
  {
    "id": "sklearn\\metrics\\cluster\\_bicluster.py",
    "summary": "Unpacks the row and column arrays and checks their shape. | functions: _check_rows_and_columns, _jaccard, _pairwise_similarity, consensus_score | imports: numpy, scipy, utils | [sklearn metrics cluster _bicluster.py]",
    "role": "src",
    "loc": 88
  },
  {
    "id": "sklearn\\metrics\\cluster\\_supervised.py",
    "summary": "Utilities to evaluate the clustering performance of models. | functions: check_clusterings, _generalized_average, contingency_matrix, pair_confusion_matrix, rand_score, adjusted_rand_score | imports: numbers, numpy, scipy, utils | [sklearn metrics cluster _supervised.py]",
    "role": "src",
    "loc": 973
  },
  {
    "id": "sklearn\\metrics\\cluster\\_unsupervised.py",
    "summary": "Unsupervised evaluation metrics. | functions: check_number_of_labels, silhouette_score, _silhouette_reduce, silhouette_samples, calinski_harabasz_score, davies_bouldin_score | imports: functools, numbers, numpy, scipy | [sklearn metrics cluster _unsupervised.py]",
    "role": "src",
    "loc": 374
  },
  {
    "id": "sklearn\\metrics\\cluster\\__init__.py",
    "summary": "Evaluation metrics for cluster analysis results. | imports: _bicluster, _supervised, _unsupervised | [sklearn metrics cluster __init__.py]",
    "role": "src",
    "loc": 49
  },
  {
    "id": "sklearn\\metrics\\cluster\\tests\\test_bicluster.py",
    "summary": "Testing for bicluster metrics module | functions: test_jaccard, test_consensus_score, test_consensus_score_issue2445 | imports: numpy, sklearn | [sklearn metrics cluster tests test_bicluster.py]",
    "role": "tests",
    "loc": 44
  },
  {
    "id": "sklearn\\metrics\\cluster\\tests\\test_common.py",
    "summary": "No description | functions: test_symmetric_non_symmetric_union, test_symmetry, test_non_symmetry, test_normalized_output, test_permute_labels, test_format_invariance | imports: functools, numpy, pytest, sklearn | [sklearn metrics cluster tests test_common.py]",
    "role": "tests",
    "loc": 173
  },
  {
    "id": "sklearn\\metrics\\cluster\\tests\\test_supervised.py",
    "summary": "No description | functions: test_error_messages_on_wrong_input, test_generalized_average, test_perfect_matches, test_homogeneous_but_not_complete_labeling, test_complete_but_not_homogeneous_labeling, test_not_complete_and_not_homogeneous_labeling | imports: numpy, pytest, sklearn | [sklearn metrics ",
    "role": "tests",
    "loc": 371
  },
  {
    "id": "sklearn\\metrics\\cluster\\tests\\test_unsupervised.py",
    "summary": "No description | functions: test_silhouette, test_cluster_size_1, test_silhouette_paper_example, test_correct_labelsize, test_non_encoded_labels, test_non_numpy_labels | imports: numpy, pytest, scipy, sklearn | [sklearn metrics cluster tests test_unsupervised.py]",
    "role": "tests",
    "loc": 322
  },
  {
    "id": "sklearn\\metrics\\cluster\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn metrics cluster tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\metrics\\tests\\test_classification.py",
    "summary": "Make some classification predictions on a toy dataset using a SVC | functions: make_prediction, test_classification_report_dictionary_output, test_classification_report_output_dict_empty_input, test_classification_report_zero_division_warning, test_classification_report_labels_subset_superset, test_",
    "role": "tests",
    "loc": 2454
  },
  {
    "id": "sklearn\\metrics\\tests\\test_common.py",
    "summary": "The dimensions of precision-recall pairs and the threshold array as | functions: precision_recall_curve_padded_thresholds, _require_positive_targets, _require_log1p_targets, test_symmetry_consistency, test_symmetric_metric, test_not_symmetric_metric | imports: functools, inspect, numpy, pytest | [sk",
    "role": "tests",
    "loc": 1811
  },
  {
    "id": "sklearn\\metrics\\tests\\test_dist_metrics.py",
    "summary": "No description | functions: dist_func, test_cdist, test_cdist_bool_metric, test_pdist, test_distance_metrics_dtype_consistency, test_pdist_bool_metrics | imports: copy, pickle, numpy, pytest | [sklearn metrics tests test_dist_metrics.py]",
    "role": "tests",
    "loc": 309
  },
  {
    "id": "sklearn\\metrics\\tests\\test_pairwise.py",
    "summary": "No description | functions: test_pairwise_distances_for_dense_data, test_pairwise_distances_for_sparse_data, test_pairwise_boolean_distance, test_no_data_conversion_warning, test_pairwise_precomputed, test_pairwise_precomputed_non_negative | imports: types, numpy, pytest, scipy | [sklearn metrics te",
    "role": "tests",
    "loc": 1199
  },
  {
    "id": "sklearn\\metrics\\tests\\test_pairwise_distances_reduction.py",
    "summary": "Return list of dummy DistanceMetric kwargs for tests. | functions: _get_metric_params_list, assert_same_distances_for_common_neighbors, assert_no_missing_neighbors, assert_compatible_argkmin_results, _non_trivial_radius, assert_compatible_radius_results | imports: functools, numpy, pytest, scipy | [",
    "role": "tests",
    "loc": 1336
  },
  {
    "id": "sklearn\\metrics\\tests\\test_ranking.py",
    "summary": "Make some classification predictions on a toy dataset using a SVC | functions: make_prediction, _auc, _average_precision, _average_precision_slow, _partial_roc_auc_score, _partial_roc | imports: numpy, pytest, scipy, sklearn | [sklearn metrics tests test_ranking.py]",
    "role": "tests",
    "loc": 1779
  },
  {
    "id": "sklearn\\metrics\\tests\\test_regression.py",
    "summary": "No description | functions: test_regression_metrics, test_root_mean_squared_error_multioutput_raw_value, test_multioutput_regression, test_regression_metrics_at_limits, test__check_reg_targets, test__check_reg_targets_exception | imports: numpy, pytest, scipy, sklearn | [sklearn metrics tests test_r",
    "role": "tests",
    "loc": 498
  },
  {
    "id": "sklearn\\metrics\\tests\\test_score_objects.py",
    "summary": "Dummy estimator to test scoring validators | classes: EstimatorWithFit, EstimatorWithFitAndScore, EstimatorWithFitAndPredict, DummyScorer, MyClassifier, MockKNeighborsClassifier | functions: _require_positive_y, _make_estimators, memmap_data_and_estimators, test_all_scorers_repr, check_scoring_valid",
    "role": "tests",
    "loc": 1237
  },
  {
    "id": "sklearn\\metrics\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn metrics tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\metrics\\_pairwise_distances_reduction\\_dispatcher.py",
    "summary": "Abstract base dispatcher for pairwise distance computation & reduction. | classes: BaseDistancesReductionDispatcher, ArgKmin, RadiusNeighbors, ArgKminClassMode, RadiusNeighborsClassMode | functions: sqeuclidean_row_norms | imports: abc, numpy, scipy, _dist_metrics | [sklearn metrics _pairwise_distan",
    "role": "src",
    "loc": 629
  },
  {
    "id": "sklearn\\metrics\\_pairwise_distances_reduction\\__init__.py",
    "summary": "Package initializer | imports: _dispatcher | [sklearn metrics _pairwise_distances_reduction __init__.py]",
    "role": "src",
    "loc": 16
  },
  {
    "id": "sklearn\\metrics\\_plot\\confusion_matrix.py",
    "summary": "Confusion Matrix visualization. | classes: ConfusionMatrixDisplay | imports: numpy, base, utils, matplotlib | [sklearn metrics _plot confusion_matrix.py]",
    "role": "src",
    "loc": 393
  },
  {
    "id": "sklearn\\metrics\\_plot\\det_curve.py",
    "summary": "DET curve visualization. | classes: DetCurveDisplay | imports: scipy, utils, _ranking | [sklearn metrics _plot det_curve.py]",
    "role": "src",
    "loc": 273
  },
  {
    "id": "sklearn\\metrics\\_plot\\precision_recall_curve.py",
    "summary": "Precision Recall visualization. | classes: PrecisionRecallDisplay | imports: utils, _ranking | [sklearn metrics _plot precision_recall_curve.py]",
    "role": "src",
    "loc": 440
  },
  {
    "id": "sklearn\\metrics\\_plot\\regression.py",
    "summary": "Visualization of the prediction error of a regression model. | classes: PredictionErrorDisplay | imports: numbers, numpy, utils, matplotlib | [sklearn metrics _plot regression.py]",
    "role": "src",
    "loc": 330
  },
  {
    "id": "sklearn\\metrics\\_plot\\roc_curve.py",
    "summary": "ROC Curve visualization. | classes: RocCurveDisplay | imports: utils, _ranking | [sklearn metrics _plot roc_curve.py]",
    "role": "src",
    "loc": 366
  },
  {
    "id": "sklearn\\metrics\\_plot\\__init__.py",
    "summary": "Package initializer | [sklearn metrics _plot __init__.py]",
    "role": "src",
    "loc": 0
  },
  {
    "id": "sklearn\\metrics\\_plot\\tests\\test_common_curve_display.py",
    "summary": "No description | classes: MyClassifier, SubclassOfDisplay | functions: data, data_binary, test_display_curve_error_classifier, test_display_curve_error_regression, test_display_curve_error_no_response, test_display_curve_estimator_name_multiple_calls | imports: numpy, pytest, sklearn | [sklearn metr",
    "role": "tests",
    "loc": 218
  },
  {
    "id": "sklearn\\metrics\\_plot\\tests\\test_confusion_matrix_display.py",
    "summary": "Check that we raise the proper error when validating parameters. | functions: test_confusion_matrix_display_validation, test_confusion_matrix_display_custom_labels, test_confusion_matrix_display_plotting, test_confusion_matrix_display, test_confusion_matrix_contrast, test_confusion_matrix_pipeline |",
    "role": "tests",
    "loc": 284
  },
  {
    "id": "sklearn\\metrics\\_plot\\tests\\test_det_curve_display.py",
    "summary": "No description | functions: test_det_curve_display, test_det_curve_display_default_name | imports: numpy, pytest, sklearn, matplotlib | [sklearn metrics _plot tests test_det_curve_display.py]",
    "role": "tests",
    "loc": 82
  },
  {
    "id": "sklearn\\metrics\\_plot\\tests\\test_precision_recall_display.py",
    "summary": "Check the overall plotting rendering. | functions: test_precision_recall_display_plotting, test_precision_recall_chance_level_line, test_precision_recall_display_name, test_precision_recall_display_pipeline, test_precision_recall_display_string_labels, test_default_labels | imports: numpy, pytest, s",
    "role": "tests",
    "loc": 287
  },
  {
    "id": "sklearn\\metrics\\_plot\\tests\\test_predict_error_display.py",
    "summary": "No description | functions: regressor_fitted, test_prediction_error_display_raise_error, test_from_estimator_not_fitted, test_prediction_error_display, test_plot_prediction_error_subsample, test_plot_prediction_error_ax | imports: pytest, numpy, sklearn | [sklearn metrics _plot tests test_predict_er",
    "role": "tests",
    "loc": 148
  },
  {
    "id": "sklearn\\metrics\\_plot\\tests\\test_roc_curve_display.py",
    "summary": "No description | functions: data, data_binary, test_roc_curve_display_plotting, test_roc_curve_chance_level_line, test_roc_curve_display_complex_pipeline, test_roc_curve_display_default_labels | imports: numpy, pytest, scipy, sklearn | [sklearn metrics _plot tests test_roc_curve_display.py]",
    "role": "tests",
    "loc": 309
  },
  {
    "id": "sklearn\\metrics\\_plot\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn metrics _plot tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\mixture\\_base.py",
    "summary": "Base class for mixture models. | classes: BaseMixture | functions: _check_shape | imports: abc, numbers, numpy, scipy | [sklearn mixture _base.py]",
    "role": "src",
    "loc": 455
  },
  {
    "id": "sklearn\\mixture\\_bayesian_mixture.py",
    "summary": "Bayesian Gaussian Mixture Model. | classes: BayesianGaussianMixture | functions: _log_dirichlet_norm, _log_wishart_norm | imports: numbers, numpy, scipy, utils | [sklearn mixture _bayesian_mixture.py]",
    "role": "src",
    "loc": 695
  },
  {
    "id": "sklearn\\mixture\\_gaussian_mixture.py",
    "summary": "Gaussian Mixture Model. | classes: GaussianMixture | functions: _check_weights, _check_means, _check_precision_positivity, _check_precision_matrix, _check_precisions_full, _check_precisions | imports: numpy, scipy, utils, _base | [sklearn mixture _gaussian_mixture.py]",
    "role": "src",
    "loc": 720
  },
  {
    "id": "sklearn\\mixture\\__init__.py",
    "summary": "Mixture modeling algorithms. | imports: _bayesian_mixture, _gaussian_mixture | [sklearn mixture __init__.py]",
    "role": "src",
    "loc": 4
  },
  {
    "id": "sklearn\\mixture\\tests\\test_bayesian_mixture.py",
    "summary": "No description | functions: test_log_dirichlet_norm, test_log_wishart_norm, test_bayesian_mixture_weights_prior_initialisation, test_bayesian_mixture_mean_prior_initialisation, test_bayesian_mixture_precisions_prior_initialisation, test_bayesian_mixture_check_is_fitted | imports: copy, numpy, pytest",
    "role": "tests",
    "loc": 355
  },
  {
    "id": "sklearn\\mixture\\tests\\test_gaussian_mixture.py",
    "summary": "No description | classes: RandomData | functions: generate_data, test_gaussian_mixture_attributes, test_check_weights, test_check_means, test_check_precisions, test_suffstat_sk_full | imports: copy, io, unittest, numpy | [sklearn mixture tests test_gaussian_mixture.py]",
    "role": "tests",
    "loc": 1169
  },
  {
    "id": "sklearn\\mixture\\tests\\test_mixture.py",
    "summary": "No description | functions: test_gaussian_mixture_n_iter, test_mixture_n_components_greater_than_n_samples_error | imports: numpy, pytest, sklearn | [sklearn mixture tests test_mixture.py]",
    "role": "tests",
    "loc": 20
  },
  {
    "id": "sklearn\\mixture\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn mixture tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\model_selection\\_classification_threshold.py",
    "summary": "Base class for binary classifiers that set a non-default decision threshold. | classes: BaseThresholdClassifier, FixedThresholdClassifier, TunedThresholdClassifierCV | functions: _check_is_fitted, _fit_and_score_over_thresholds, _mean_interpolated_score | imports: numbers, numpy, base, exceptions | ",
    "role": "src",
    "loc": 738
  },
  {
    "id": "sklearn\\model_selection\\_plot.py",
    "summary": "No description | classes: _BaseCurveDisplay, LearningCurveDisplay, ValidationCurveDisplay | imports: numpy, utils, _validation, matplotlib | [sklearn model_selection _plot.py]",
    "role": "src",
    "loc": 738
  },
  {
    "id": "sklearn\\model_selection\\_search.py",
    "summary": "The :mod:`sklearn.model_selection._search` includes utilities to fine-tune the | classes: ParameterGrid, ParameterSampler, BaseSearchCV, GridSearchCV, RandomizedSearchCV | functions: _check_refit, _search_estimator_has, check, _yield_masked_array_for_each_param | imports: numbers, operator, abc, cop",
    "role": "src",
    "loc": 1550
  },
  {
    "id": "sklearn\\model_selection\\_search_successive_halving.py",
    "summary": "Splitter that subsamples a given fraction of the dataset | classes: _SubsampleMetaSplitter, BaseSuccessiveHalving, HalvingGridSearchCV, HalvingRandomSearchCV | functions: _top_k | imports: abc, numbers, numpy, base | [sklearn model_selection _search_successive_halving.py]",
    "role": "src",
    "loc": 843
  },
  {
    "id": "sklearn\\model_selection\\_split.py",
    "summary": "The :mod:`sklearn.model_selection._split` module includes classes and | classes: _UnsupportedGroupCVMixin, GroupsConsumerMixin, BaseCrossValidator, LeaveOneOut, LeavePOut, _BaseKFold | functions: _validate_shuffle_split, check_cv, train_test_split, _pprint, _build_repr, _yields_constant_splits | imp",
    "role": "src",
    "loc": 2442
  },
  {
    "id": "sklearn\\model_selection\\_validation.py",
    "summary": "The :mod:`sklearn.model_selection._validation` module includes classes and | functions: _check_params_groups_deprecation, _check_groups_routing_disabled, cross_validate, _insert_error_scores, _normalize_score_results, _warn_or_raise_about_fit_failures | imports: numbers, functools, traceback, numpy ",
    "role": "src",
    "loc": 2101
  },
  {
    "id": "sklearn\\model_selection\\__init__.py",
    "summary": "Tools for model selection, such as cross validation and hyper-parameter tuning. | functions: __getattr__ | imports: _classification_threshold, _plot, _search, _split | [sklearn model_selection __init__.py]",
    "role": "src",
    "loc": 86
  },
  {
    "id": "sklearn\\model_selection\\tests\\common.py",
    "summary": "Common utilities for testing model selection. | classes: OneTimeSplitter | imports: numpy, sklearn | [sklearn model_selection tests common.py]",
    "role": "tests",
    "loc": 17
  },
  {
    "id": "sklearn\\model_selection\\tests\\test_classification_threshold.py",
    "summary": "Check that `_fit_and_score_over_thresholds` returns thresholds in ascending order | functions: test_fit_and_score_over_thresholds_curve_scorers, test_fit_and_score_over_thresholds_prefit, test_fit_and_score_over_thresholds_sample_weight, test_fit_and_score_over_thresholds_fit_params, test_tuned_thre",
    "role": "tests",
    "loc": 506
  },
  {
    "id": "sklearn\\model_selection\\tests\\test_plot.py",
    "summary": "No description | classes: SubclassOfDisplay | functions: data, test_curve_display_parameters_validation, test_learning_curve_display_default_usage, test_validation_curve_display_default_usage, test_curve_display_negate_score, test_curve_display_score_name | imports: numpy, pytest, sklearn, matplotli",
    "role": "tests",
    "loc": 474
  },
  {
    "id": "sklearn\\model_selection\\tests\\test_search.py",
    "summary": "Test the search module | classes: MockClassifier, LinearSVCNoScore, BrokenClassifier, FailingClassifier, CustomSearchCV, NoRunSearchSearchCV | functions: assert_grid_iter_equals_getitem, test_validate_parameter_input, test_parameter_grid, test_grid_search, test_grid_search_pipeline_steps, test_Searc",
    "role": "tests",
    "loc": 2161
  },
  {
    "id": "sklearn\\model_selection\\tests\\test_split.py",
    "summary": "Test the split module | classes: MockSplitter | functions: _split, test_cross_validator_with_default_params, test_2d_y, check_valid_split, check_cv_coverage, test_kfold_valueerrors | imports: numpy, pytest, scipy, sklearn | [sklearn model_selection tests test_split.py]",
    "role": "tests",
    "loc": 1508
  },
  {
    "id": "sklearn\\model_selection\\tests\\test_successive_halving.py",
    "summary": "Dummy classifier that accepts parameters a, b, ... z. | classes: FastClassifier, SometimesFailClassifier, FastClassifierBookKeeping | functions: test_nan_handling, test_aggressive_elimination, test_min_max_resources, test_n_iterations, test_resource_parameter, test_random_search | imports: numpy, py",
    "role": "tests",
    "loc": 640
  },
  {
    "id": "sklearn\\model_selection\\tests\\test_validation.py",
    "summary": "Test the validation module | classes: MockImprovingEstimator, MockIncrementalImprovingEstimator, MockEstimatorWithParameter, MockEstimatorWithSingleFitCallAllowed, MockClassifier, BadCV | functions: test_cross_val_score, test_cross_validate_many_jobs, test_cross_validate_invalid_scoring_param, test_",
    "role": "tests",
    "loc": 2158
  },
  {
    "id": "sklearn\\model_selection\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn model_selection tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\neighbors\\_base.py",
    "summary": "Base and mixin classes for nearest neighbors. | classes: NeighborsBase, KNeighborsMixin, RadiusNeighborsMixin | functions: _get_weights, _is_sorted_by_data, _check_precomputed, sort_graph_by_row_values, _kneighbors_from_graph, extract | imports: numbers, abc, functools, numpy | [sklearn neighbors _b",
    "role": "src",
    "loc": 1135
  },
  {
    "id": "sklearn\\neighbors\\_classification.py",
    "summary": "Nearest Neighbor Classification | classes: KNeighborsClassifier, RadiusNeighborsClassifier | functions: _adjusted_metric | imports: numbers, numpy, sklearn, base | [sklearn neighbors _classification.py]",
    "role": "src",
    "loc": 723
  },
  {
    "id": "sklearn\\neighbors\\_graph.py",
    "summary": "Nearest Neighbors graph functions | classes: KNeighborsTransformer, RadiusNeighborsTransformer | functions: _check_params, _query_include_self, kneighbors_graph, radius_neighbors_graph | imports: base, utils, _base, _unsupervised | [sklearn neighbors _graph.py]",
    "role": "src",
    "loc": 579
  },
  {
    "id": "sklearn\\neighbors\\_kde.py",
    "summary": "Kernel Density Estimation | classes: KernelDensity | imports: numbers, numpy, scipy, base | [sklearn neighbors _kde.py]",
    "role": "src",
    "loc": 288
  },
  {
    "id": "sklearn\\neighbors\\_lof.py",
    "summary": "Unsupervised Outlier Detection using the Local Outlier Factor (LOF). | classes: LocalOutlierFactor | imports: numbers, numpy, base, utils | [sklearn neighbors _lof.py]",
    "role": "src",
    "loc": 411
  },
  {
    "id": "sklearn\\neighbors\\_nca.py",
    "summary": "Neighborhood Component Analysis | classes: NeighborhoodComponentsAnalysis | imports: numbers, numpy, scipy, base | [sklearn neighbors _nca.py]",
    "role": "src",
    "loc": 422
  },
  {
    "id": "sklearn\\neighbors\\_nearest_centroid.py",
    "summary": "Nearest Centroid Classification | classes: NearestCentroid | imports: numbers, numpy, scipy, base | [sklearn neighbors _nearest_centroid.py]",
    "role": "src",
    "loc": 281
  },
  {
    "id": "sklearn\\neighbors\\_regression.py",
    "summary": "Nearest Neighbor Regression. | classes: KNeighborsRegressor, RadiusNeighborsRegressor | imports: numpy, base, metrics, utils | [sklearn neighbors _regression.py]",
    "role": "src",
    "loc": 405
  },
  {
    "id": "sklearn\\neighbors\\_unsupervised.py",
    "summary": "Unsupervised nearest neighbors learner | classes: NearestNeighbors | imports: base, _base | [sklearn neighbors _unsupervised.py]",
    "role": "src",
    "loc": 142
  },
  {
    "id": "sklearn\\neighbors\\__init__.py",
    "summary": "The k-nearest neighbors algorithms. | imports: _ball_tree, _base, _classification, _graph | [sklearn neighbors __init__.py]",
    "role": "src",
    "loc": 37
  },
  {
    "id": "sklearn\\neighbors\\tests\\test_ball_tree.py",
    "summary": "No description | functions: brute_force_neighbors, test_BallTree_is_BallTree64_subclass, test_ball_tree_query_metrics, test_query_haversine, test_array_object_type, test_bad_pyfunc_metric | imports: numpy, pytest, sklearn | [sklearn neighbors tests test_ball_tree.py]",
    "role": "tests",
    "loc": 145
  },
  {
    "id": "sklearn\\neighbors\\tests\\test_graph.py",
    "summary": "No description | functions: test_transformer_result, _has_explicit_diagonal, test_explicit_diagonal, test_graph_feature_names_out | imports: numpy, pytest, sklearn | [sklearn neighbors tests test_graph.py]",
    "role": "tests",
    "loc": 76
  },
  {
    "id": "sklearn\\neighbors\\tests\\test_kde.py",
    "summary": "No description | functions: compute_kernel_slow, check_results, test_kernel_density, test_kernel_density_sampling, test_kde_algorithm_metric_choice, test_kde_score | imports: joblib, numpy, pytest, sklearn | [sklearn neighbors tests test_kde.py]",
    "role": "tests",
    "loc": 181
  },
  {
    "id": "sklearn\\neighbors\\tests\\test_kd_tree.py",
    "summary": "No description | functions: test_KDTree_is_KDTree64_subclass, test_array_object_type, test_kdtree_picklable_with_joblib, test_kd_tree_numerical_consistency, test_kernel_density_numerical_consistency | imports: numpy, pytest, sklearn | [sklearn neighbors tests test_kd_tree.py]",
    "role": "tests",
    "loc": 68
  },
  {
    "id": "sklearn\\neighbors\\tests\\test_lof.py",
    "summary": "No description | functions: test_lof, test_lof_performance, test_lof_values, test_lof_precomputed, test_n_neighbors_attribute, test_score_samples | imports: numpy, pytest, sklearn | [sklearn neighbors tests test_lof.py]",
    "role": "tests",
    "loc": 270
  },
  {
    "id": "sklearn\\neighbors\\tests\\test_nca.py",
    "summary": "Testing for Neighborhood Component Analysis module (sklearn.neighbors.nca) | classes: LossStorer, TransformationStorer | functions: test_simple_example, test_toy_example_collapse_points, test_finite_differences, fun, grad, test_params_validation | imports: numpy, pytest, scipy, sklearn | [sklearn ne",
    "role": "tests",
    "loc": 412
  },
  {
    "id": "sklearn\\neighbors\\tests\\test_nearest_centroid.py",
    "summary": "Testing for the nearest centroid module. | functions: test_classification_toy, test_iris, test_iris_shrinkage, test_pickle, test_shrinkage_correct, test_shrinkage_threshold_decoded_y | imports: numpy, pytest, sklearn, pickle | [sklearn neighbors tests test_nearest_centroid.py]",
    "role": "tests",
    "loc": 167
  },
  {
    "id": "sklearn\\neighbors\\tests\\test_neighbors.py",
    "summary": "Helper function for properly building a type-specialized DistanceMetric instances. | functions: _parse_metric, _generate_test_params_for, _weight_func, test_unsupervised_kneighbors, test_neigh_predictions_algorithm_agnosticity, test_unsupervised_inputs | imports: joblib, numpy, pytest, scipy | [skle",
    "role": "tests",
    "loc": 1852
  },
  {
    "id": "sklearn\\neighbors\\tests\\test_neighbors_pipeline.py",
    "summary": "This is testing the equivalence between some estimators with internal nearest | functions: test_spectral_clustering, test_spectral_embedding, test_dbscan, test_isomap, test_tsne, test_lof_novelty_false | imports: numpy, sklearn | [sklearn neighbors tests test_neighbors_pipeline.py]",
    "role": "tests",
    "loc": 193
  },
  {
    "id": "sklearn\\neighbors\\tests\\test_neighbors_tree.py",
    "summary": "No description | functions: dist_func, compute_kernel_slow, brute_force_neighbors, test_kernel_density, test_neighbor_tree_query_radius, test_neighbor_tree_query_radius_distance | imports: pickle, numpy, pytest, sklearn | [sklearn neighbors tests test_neighbors_tree.py]",
    "role": "tests",
    "loc": 220
  },
  {
    "id": "sklearn\\neighbors\\tests\\test_quad_tree.py",
    "summary": "No description | functions: test_quadtree_boundary_computation, test_quadtree_similar_point, test_quad_tree_pickle, test_qt_insert_duplicate, test_summarize | imports: pickle, numpy, pytest, sklearn | [sklearn neighbors tests test_quad_tree.py]",
    "role": "tests",
    "loc": 85
  },
  {
    "id": "sklearn\\neighbors\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn neighbors tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\neural_network\\_base.py",
    "summary": "Utilities for the neural network modules | functions: inplace_identity, inplace_logistic, inplace_tanh, inplace_relu, inplace_softmax, inplace_identity_derivative | imports: numpy, scipy | [sklearn neural_network _base.py]",
    "role": "src",
    "loc": 180
  },
  {
    "id": "sklearn\\neural_network\\_multilayer_perceptron.py",
    "summary": "Multi-layer Perceptron | classes: BaseMultilayerPerceptron, MLPClassifier, MLPRegressor | functions: _pack | imports: abc, numbers, numpy, scipy | [sklearn neural_network _multilayer_perceptron.py]",
    "role": "src",
    "loc": 1388
  },
  {
    "id": "sklearn\\neural_network\\_rbm.py",
    "summary": "Restricted Boltzmann Machine | classes: BernoulliRBM | imports: numbers, numpy, scipy, base | [sklearn neural_network _rbm.py]",
    "role": "src",
    "loc": 356
  },
  {
    "id": "sklearn\\neural_network\\_stochastic_optimizers.py",
    "summary": "Stochastic optimization methods for MLP | classes: BaseOptimizer, SGDOptimizer, AdamOptimizer | imports: numpy | [sklearn neural_network _stochastic_optimizers.py]",
    "role": "src",
    "loc": 227
  },
  {
    "id": "sklearn\\neural_network\\__init__.py",
    "summary": "Models based on neural networks. | imports: _multilayer_perceptron, _rbm | [sklearn neural_network __init__.py]",
    "role": "src",
    "loc": 4
  },
  {
    "id": "sklearn\\neural_network\\tests\\test_base.py",
    "summary": "No description | functions: test_binary_log_loss_1_prob_finite, test_log_loss_1_prob_finite | imports: numpy, pytest, sklearn | [sklearn neural_network tests test_base.py]",
    "role": "tests",
    "loc": 21
  },
  {
    "id": "sklearn\\neural_network\\tests\\test_mlp.py",
    "summary": "Testing for Multi-layer Perceptron module (sklearn.neural_network) | functions: test_alpha, test_fit, test_gradient, loss_grad_fun, test_lbfgs_classification, test_lbfgs_regression | imports: io, joblib, numpy, pytest | [sklearn neural_network tests test_mlp.py]",
    "role": "tests",
    "loc": 744
  },
  {
    "id": "sklearn\\neural_network\\tests\\test_rbm.py",
    "summary": "No description | functions: test_fit, test_partial_fit, test_transform, test_small_sparse, test_small_sparse_partial_fit, test_sample_hiddens | imports: io, numpy, pytest, sklearn | [sklearn neural_network tests test_rbm.py]",
    "role": "tests",
    "loc": 176
  },
  {
    "id": "sklearn\\neural_network\\tests\\test_stochastic_optimizers.py",
    "summary": "No description | functions: test_base_optimizer, test_sgd_optimizer_no_momentum, test_sgd_optimizer_momentum, test_sgd_optimizer_trigger_stopping, test_sgd_optimizer_nesterovs_momentum, test_adam_optimizer | imports: numpy, sklearn | [sklearn neural_network tests test_stochastic_optimizers.py]",
    "role": "tests",
    "loc": 89
  },
  {
    "id": "sklearn\\neural_network\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn neural_network tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\preprocessing\\_data.py",
    "summary": "Transform features by scaling each feature to a given range. | classes: MinMaxScaler, StandardScaler, MaxAbsScaler, RobustScaler, Normalizer, Binarizer | functions: _is_constant_feature, _handle_zeros_in_scale, scale, minmax_scale, maxabs_scale, robust_scale | imports: numbers, numpy, scipy, sklearn",
    "role": "src",
    "loc": 2914
  },
  {
    "id": "sklearn\\preprocessing\\_discretization.py",
    "summary": "Bin continuous data into intervals. | classes: KBinsDiscretizer | imports: numbers, numpy, base, utils | [sklearn preprocessing _discretization.py]",
    "role": "src",
    "loc": 434
  },
  {
    "id": "sklearn\\preprocessing\\_encoders.py",
    "summary": "Base class for encoders that includes the code to categorize and | classes: _BaseEncoder, OneHotEncoder, OrdinalEncoder | imports: numbers, numpy, scipy, base | [sklearn preprocessing _encoders.py]",
    "role": "src",
    "loc": 1338
  },
  {
    "id": "sklearn\\preprocessing\\_function_transformer.py",
    "summary": "Constructs a transformer from an arbitrary callable. | classes: FunctionTransformer | functions: _identity | imports: functools, numpy, base, utils | [sklearn preprocessing _function_transformer.py]",
    "role": "src",
    "loc": 359
  },
  {
    "id": "sklearn\\preprocessing\\_label.py",
    "summary": "Encode target labels with value between 0 and n_classes-1. | classes: LabelEncoder, LabelBinarizer, MultiLabelBinarizer | functions: label_binarize, _inverse_binarize_multiclass, _inverse_binarize_thresholding | imports: array, numbers, numpy, scipy | [sklearn preprocessing _label.py]",
    "role": "src",
    "loc": 765
  },
  {
    "id": "sklearn\\preprocessing\\_polynomial.py",
    "summary": "This file contains preprocessing tools based on polynomials. | classes: PolynomialFeatures, SplineTransformer | functions: _create_expansion | imports: numbers, numpy, scipy, base | [sklearn preprocessing _polynomial.py]",
    "role": "src",
    "loc": 917
  },
  {
    "id": "sklearn\\preprocessing\\_target_encoder.py",
    "summary": "Target Encoder for regression and classification targets. | classes: TargetEncoder | imports: numbers, numpy, base, utils | [sklearn preprocessing _target_encoder.py]",
    "role": "src",
    "loc": 448
  },
  {
    "id": "sklearn\\preprocessing\\__init__.py",
    "summary": "Methods for scaling, centering, normalization, binarization, and more. | imports: _data, _discretization, _encoders, _function_transformer | [sklearn preprocessing __init__.py]",
    "role": "src",
    "loc": 58
  },
  {
    "id": "sklearn\\preprocessing\\tests\\test_common.py",
    "summary": "Get non NaN samples in column of X | functions: _get_valid_samples_by_column, test_missing_value_handling, test_missing_value_pandas_na_support | imports: numpy, pytest, sklearn | [sklearn preprocessing tests test_common.py]",
    "role": "tests",
    "loc": 148
  },
  {
    "id": "sklearn\\preprocessing\\tests\\test_data.py",
    "summary": "No description | functions: toarray, _check_dim_1axis, assert_correct_incr, test_raises_value_error_if_sample_weights_greater_than_1d, test_standard_scaler_sample_weight, test_standard_scaler_1d | imports: numpy, pytest, scipy, sklearn | [sklearn preprocessing tests test_data.py]",
    "role": "tests",
    "loc": 1865
  },
  {
    "id": "sklearn\\preprocessing\\tests\\test_discretization.py",
    "summary": "No description | functions: test_fit_transform, test_valid_n_bins, test_invalid_n_bins_array, test_fit_transform_n_bins_array, test_kbinsdiscretizer_effect_sample_weight, test_kbinsdiscretizer_no_mutating_sample_weight | imports: numpy, pytest, scipy, sklearn | [sklearn preprocessing tests test_disc",
    "role": "tests",
    "loc": 592
  },
  {
    "id": "sklearn\\preprocessing\\tests\\test_encoders.py",
    "summary": "No description | functions: test_one_hot_encoder_sparse_dense, test_one_hot_encoder_handle_unknown, test_one_hot_encoder_handle_unknown_strings, test_one_hot_encoder_dtype, test_one_hot_encoder_dtype_pandas, test_one_hot_encoder_feature_names | imports: numpy, pytest, scipy, sklearn | [sklearn prepr",
    "role": "tests",
    "loc": 1811
  },
  {
    "id": "sklearn\\preprocessing\\tests\\test_function_transformer.py",
    "summary": "No description | functions: _make_func, _func, test_delegate_to_func, test_np_log, test_kw_arg, test_kw_arg_update | imports: numpy, pytest, sklearn | [sklearn preprocessing tests test_function_transformer.py]",
    "role": "tests",
    "loc": 434
  },
  {
    "id": "sklearn\\preprocessing\\tests\\test_label.py",
    "summary": "No description | functions: toarray, test_label_binarizer, test_label_binarizer_unseen_labels, test_label_binarizer_set_label_encoding, test_label_binarizer_pandas_nullable, test_label_binarizer_errors | imports: numpy, pytest, scipy, sklearn | [sklearn preprocessing tests test_label.py]",
    "role": "tests",
    "loc": 573
  },
  {
    "id": "sklearn\\preprocessing\\tests\\test_polynomial.py",
    "summary": "Test that output array has the given order. | functions: test_polynomial_and_spline_array_order, is_c_contiguous, test_spline_transformer_input_validation, test_spline_transformer_integer_knots, test_spline_transformer_feature_names, test_split_transform_feature_names_extrapolation_degree | imports:",
    "role": "tests",
    "loc": 1053
  },
  {
    "id": "sklearn\\preprocessing\\tests\\test_target_encoder.py",
    "summary": "Simple Python implementation of target encoding. | functions: _encode_target, test_encoding, test_encoding_multiclass, test_custom_categories, test_errors, test_use_regression_target | imports: numpy, pytest, sklearn | [sklearn preprocessing tests test_target_encoder.py]",
    "role": "tests",
    "loc": 504
  },
  {
    "id": "sklearn\\preprocessing\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn preprocessing tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\semi_supervised\\_label_propagation.py",
    "summary": "Label propagation in the context of this module refers to a set of | classes: BaseLabelPropagation, LabelPropagation, LabelSpreading | imports: abc, numbers, numpy, scipy | [sklearn semi_supervised _label_propagation.py]",
    "role": "src",
    "loc": 501
  },
  {
    "id": "sklearn\\semi_supervised\\_self_training.py",
    "summary": "Self-training classifier. | classes: SelfTrainingClassifier | imports: numbers, numpy, base, utils | [sklearn semi_supervised _self_training.py]",
    "role": "src",
    "loc": 499
  },
  {
    "id": "sklearn\\semi_supervised\\__init__.py",
    "summary": "Semi-supervised learning algorithms. | imports: _label_propagation, _self_training | [sklearn semi_supervised __init__.py]",
    "role": "src",
    "loc": 7
  },
  {
    "id": "sklearn\\semi_supervised\\tests\\test_label_propagation.py",
    "summary": "test the label propagation module | functions: test_fit_transduction, test_distribution, test_predict, test_predict_proba, test_label_spreading_closed_form, test_label_propagation_closed_form | imports: numpy, pytest, scipy, sklearn | [sklearn semi_supervised tests test_label_propagation.py]",
    "role": "tests",
    "loc": 183
  },
  {
    "id": "sklearn\\semi_supervised\\tests\\test_self_training.py",
    "summary": "No description | functions: test_warns_k_best, test_classification, test_k_best, test_sanity_classification, test_none_iter, test_zero_iterations | imports: numpy, pytest, sklearn | [sklearn semi_supervised tests test_self_training.py]",
    "role": "tests",
    "loc": 260
  },
  {
    "id": "sklearn\\semi_supervised\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn semi_supervised tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\svm\\_base.py",
    "summary": "Base class for estimators that use libsvm as backing library. | classes: BaseLibSVM, BaseSVC | functions: _one_vs_one_coef, _get_liblinear_solver_type, _fit_liblinear | imports: abc, numbers, numpy, scipy | [sklearn svm _base.py]",
    "role": "src",
    "loc": 1018
  },
  {
    "id": "sklearn\\svm\\_bounds.py",
    "summary": "Determination of parameter bounds | functions: l1_min_c | imports: numbers, numpy, preprocessing, utils | [sklearn svm _bounds.py]",
    "role": "src",
    "loc": 76
  },
  {
    "id": "sklearn\\svm\\_classes.py",
    "summary": "Linear Support Vector Classification. | classes: LinearSVC, LinearSVR, SVC, NuSVC, SVR, NuSVR | functions: _validate_dual_parameter | imports: numbers, numpy, base, linear_model | [sklearn svm _classes.py]",
    "role": "src",
    "loc": 1431
  },
  {
    "id": "sklearn\\svm\\__init__.py",
    "summary": "Support vector machine algorithms. | imports: _bounds, _classes | [sklearn svm __init__.py]",
    "role": "src",
    "loc": 13
  },
  {
    "id": "sklearn\\svm\\tests\\test_bounds.py",
    "summary": "No description | functions: test_l1_min_c, check_l1_min_c, test_ill_posed_min_c, test_newrand_default, test_newrand_set_seed, test_newrand_set_seed_overflow | imports: numpy, pytest, scipy, sklearn | [sklearn svm tests test_bounds.py]",
    "role": "tests",
    "loc": 100
  },
  {
    "id": "sklearn\\svm\\tests\\test_sparse.py",
    "summary": "No description | functions: check_svm_model_equal, test_svc, test_unsorted_indices, scramble_indices, test_svc_with_custom_kernel, kfunc | imports: numpy, pytest, scipy, sklearn | [sklearn svm tests test_sparse.py]",
    "role": "tests",
    "loc": 379
  },
  {
    "id": "sklearn\\svm\\tests\\test_svm.py",
    "summary": "Testing for Support Vector Machine module (sklearn.svm) | functions: test_libsvm_parameters, test_libsvm_iris, test_precomputed, kfunc, test_svr, test_linearsvr | imports: numpy, pytest, sklearn | [sklearn svm tests test_svm.py]",
    "role": "tests",
    "loc": 1004
  },
  {
    "id": "sklearn\\svm\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn svm tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\tests\\metadata_routing_common.py",
    "summary": "Utility function to store passed metadata to a method of obj. | classes: _Registry, ConsumingRegressor, NonConsumingClassifier, NonConsumingRegressor, ConsumingClassifier, ConsumingTransformer | functions: record_metadata, check_recorded_metadata, assert_request_is_empty, assert_request_equal | impo",
    "role": "tests",
    "loc": 417
  },
  {
    "id": "sklearn\\tests\\test_base.py",
    "summary": "No description | classes: MyEstimator, K, T, NaNTag, NoNaNTag, OverrideTag | functions: test_clone, test_clone_2, test_clone_buggy, test_clone_empty_array, test_clone_nan, test_clone_dict | imports: pickle, numpy, pytest, scipy | [sklearn tests test_base.py]",
    "role": "tests",
    "loc": 673
  },
  {
    "id": "sklearn\\tests\\test_build.py",
    "summary": "No description | functions: test_openmp_parallelism_enabled | imports: textwrap, pytest, sklearn | [sklearn tests test_build.py]",
    "role": "tests",
    "loc": 22
  },
  {
    "id": "sklearn\\tests\\test_calibration.py",
    "summary": "No description | classes: ZeroCalibrator, MockTensorClassifier, ClfWithoutSampleWeight, TestClassifier, DummyClassifer32 | functions: data, test_calibration, test_calibration_default_estimator, test_calibration_cv_splitter, test_calibration_cv_nfold, test_sample_weight | imports: numpy, pytest, skle",
    "role": "tests",
    "loc": 786
  },
  {
    "id": "sklearn\\tests\\test_check_build.py",
    "summary": "Smoke Test the check_build module | functions: test_raise_build_error | imports: pytest, sklearn | [sklearn tests test_check_build.py]",
    "role": "tests",
    "loc": 8
  },
  {
    "id": "sklearn\\tests\\test_common.py",
    "summary": "General tests for all estimators in sklearn. | classes: CallableEstimator, OldEstimator | functions: test_all_estimator_no_base_class, _sample_func, test_get_check_estimator_ids, test_estimators, test_check_estimator_generate_only_deprecation, test_import_all_consistency | imports: pkgutil, functool",
    "role": "tests",
    "loc": 348
  },
  {
    "id": "sklearn\\tests\\test_config.py",
    "summary": "No description | functions: test_config_context, test_config_context_exception, test_set_config, set_assume_finite, test_config_threadsafe_joblib, test_config_threadsafe | imports: builtins, concurrent, pytest, sklearn | [sklearn tests test_config.py]",
    "role": "tests",
    "loc": 146
  },
  {
    "id": "sklearn\\tests\\test_discriminant_analysis.py",
    "summary": "No description | classes: StandardizedLedoitWolf | functions: test_lda_predict, test_lda_predict_proba, generate_dataset, discriminant_func, test_lda_priors, test_lda_coefs | imports: numpy, pytest, scipy, sklearn | [sklearn tests test_discriminant_analysis.py]",
    "role": "tests",
    "loc": 468
  },
  {
    "id": "sklearn\\tests\\test_docstrings.py",
    "summary": "No description | functions: get_all_methods, get_all_functions_names, filter_errors, repr_errors, test_function_docstring, test_docstring | imports: inspect, pytest, sklearn, argparse | [sklearn tests test_docstrings.py]",
    "role": "tests",
    "loc": 133
  },
  {
    "id": "sklearn\\tests\\test_docstring_parameters.py",
    "summary": "No description | functions: test_docstring_parameters, _construct_searchcv_instance, _construct_compose_pipeline_instance, _construct_sparse_coder, test_fit_docstring_attributes, _get_all_fitted_attributes | imports: importlib, inspect, pkgutil, numpy | [sklearn tests test_docstring_parameters.py]",
    "role": "tests",
    "loc": 239
  },
  {
    "id": "sklearn\\tests\\test_docstring_parameters_consistency.py",
    "summary": "Check docstrings parameters consistency between related classes. | functions: test_class_docstring_consistency, test_function_docstring_consistency | imports: pytest, sklearn | [sklearn tests test_docstring_parameters_consistency.py]",
    "role": "tests",
    "loc": 86
  },
  {
    "id": "sklearn\\tests\\test_dummy.py",
    "summary": "No description | functions: _check_predict_proba, _check_behavior_2d, _check_behavior_2d_for_constant, _check_equality_regressor, test_feature_names_in_and_n_features_in_, test_most_frequent_and_prior_strategy | imports: numpy, pytest, scipy, sklearn | [sklearn tests test_dummy.py]",
    "role": "tests",
    "loc": 519
  },
  {
    "id": "sklearn\\tests\\test_init.py",
    "summary": "No description | functions: test_import_skl | imports: sklearn | [sklearn tests test_init.py]",
    "role": "tests",
    "loc": 9
  },
  {
    "id": "sklearn\\tests\\test_isotonic.py",
    "summary": "No description | functions: test_permutation_invariance, test_check_increasing_small_number_of_samples, test_check_increasing_up, test_check_increasing_up_extreme, test_check_increasing_down, test_check_increasing_down_extreme | imports: copy, pickle, numpy, pytest | [sklearn tests test_isotonic.py]",
    "role": "tests",
    "loc": 477
  },
  {
    "id": "sklearn\\tests\\test_kernel_approximation.py",
    "summary": "No description | functions: test_polynomial_count_sketch, test_polynomial_count_sketch_dense_sparse, _linear_kernel, test_additive_chi2_sampler, test_additive_chi2_sampler_sample_steps, test_additive_chi2_sampler_wrong_sample_steps | imports: numpy, pytest, sklearn | [sklearn tests test_kernel_appro",
    "role": "tests",
    "loc": 348
  },
  {
    "id": "sklearn\\tests\\test_kernel_ridge.py",
    "summary": "No description | functions: test_kernel_ridge, test_kernel_ridge_sparse, test_kernel_ridge_singular_kernel, test_kernel_ridge_precomputed, test_kernel_ridge_precomputed_kernel_unchanged, test_kernel_ridge_sample_weights | imports: numpy, pytest, sklearn | [sklearn tests test_kernel_ridge.py]",
    "role": "tests",
    "loc": 60
  },
  {
    "id": "sklearn\\tests\\test_metadata_routing.py",
    "summary": "Metadata Routing Utility Tests | classes: SimplePipeline, OddEstimator, Base, class_1, Class_1, InvalidObject | functions: test_assert_request_is_empty, test_estimator_puts_self_in_registry, test_request_type_is_alias, test_request_type_is_valid, test_default_requests, test_default_request_override ",
    "role": "tests",
    "loc": 875
  },
  {
    "id": "sklearn\\tests\\test_metaestimators.py",
    "summary": "Common tests for metaestimators | classes: DelegatorData, SubEstimator | functions: test_metaestimator_delegation, hides, wrapper, _get_instance_with_pipeline, _generate_meta_estimator_instances_with_pipeline, _get_meta_estimator_id | imports: functools, inspect, numpy, pytest | [sklearn tests test_",
    "role": "tests",
    "loc": 270
  },
  {
    "id": "sklearn\\tests\\test_metaestimators_metadata_routing.py",
    "summary": "Get the init args for a metaestimator | functions: get_init_args, set_requests, test_unsupported_estimators_get_metadata_routing, test_unsupported_estimators_fit_with_metadata, test_registry_copy, test_default_request | imports: copy, numpy, pytest, sklearn | [sklearn tests test_metaestimators_metad",
    "role": "tests",
    "loc": 812
  },
  {
    "id": "sklearn\\tests\\test_min_dependencies_readme.py",
    "summary": "Tests for the minimum dependencies in README.rst and pyproject.toml | functions: test_min_dependencies_readme, check_pyproject_section, test_min_dependencies_pyproject_toml | imports: pytest, sklearn | [sklearn tests test_min_dependencies_readme.py]",
    "role": "tests",
    "loc": 93
  },
  {
    "id": "sklearn\\tests\\test_multiclass.py",
    "summary": "No description | functions: test_ovr_exceptions, test_check_classification_targets, test_ovr_fit_predict, test_ovr_partial_fit, test_ovr_partial_fit_exceptions, test_ovr_ovo_regressor | imports: numpy, pytest, scipy, sklearn | [sklearn tests test_multiclass.py]",
    "role": "tests",
    "loc": 656
  },
  {
    "id": "sklearn\\tests\\test_multioutput.py",
    "summary": "No description | classes: DummyRegressorWithFitParams, DummyClassifierWithFitParams, MySGD | functions: test_multi_target_regression, test_multi_target_regression_partial_fit, test_multi_target_regression_one_target, test_multi_target_sparse_regression, test_multi_target_sample_weights_api, test_mul",
    "role": "tests",
    "loc": 632
  },
  {
    "id": "sklearn\\tests\\test_naive_bayes.py",
    "summary": "No description | functions: get_random_normal_x_binary_y, get_random_integer_x_three_classes_y, test_gnb, test_gnb_prior, test_gnb_sample_weight, test_gnb_neg_priors | imports: numpy, pytest, scipy, sklearn | [sklearn tests test_naive_bayes.py]",
    "role": "tests",
    "loc": 647
  },
  {
    "id": "sklearn\\tests\\test_pipeline.py",
    "summary": "Test the pipeline module. | classes: NoFit, NoTrans, NoInvTransf, Transf, TransfFitParams, Mult | functions: test_pipeline_invalid_parameters, test_pipeline_init_tuple, test_pipeline_methods_anova, test_pipeline_fit_params, test_pipeline_sample_weight_supported, test_pipeline_sample_weight_unsupport",
    "role": "tests",
    "loc": 1778
  },
  {
    "id": "sklearn\\tests\\test_public_functions.py",
    "summary": "No description | functions: _get_func_info, _check_function_param_validation, test_function_param_validation, test_class_wrapper_param_validation | imports: importlib, inspect, numbers, pytest | [sklearn tests test_public_functions.py]",
    "role": "tests",
    "loc": 358
  },
  {
    "id": "sklearn\\tests\\test_random_projection.py",
    "summary": "Make some random data with uniformly located non zero entries with | functions: make_sparse_random_data, densify, test_invalid_jl_domain, test_input_size_jl_min_dim, check_input_size_random_matrix, check_size_generated | imports: functools, numpy, pytest, scipy | [sklearn tests test_random_projectio",
    "role": "tests",
    "loc": 434
  },
  {
    "id": "sklearn\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\tree\\_classes.py",
    "summary": "This module gathers tree-based methods, including decision, regression and | classes: BaseDecisionTree, DecisionTreeClassifier, DecisionTreeRegressor, ExtraTreeClassifier, ExtraTreeRegressor | imports: copy, numbers, abc, numpy | [sklearn tree _classes.py]",
    "role": "src",
    "loc": 1570
  },
  {
    "id": "sklearn\\tree\\_export.py",
    "summary": "This module defines export functions for decision trees. | classes: Sentinel, _BaseTreeExporter, _DOTTreeExporter, _MPLTreeExporter | functions: _color_brew, plot_tree, export_graphviz, _compute_depth, compute_depth_, export_text | imports: io, numbers, numpy, base | [sklearn tree _export.py]",
    "role": "src",
    "loc": 919
  },
  {
    "id": "sklearn\\tree\\_reingold_tilford.py",
    "summary": "No description | classes: DrawTree, Tree | functions: buchheim, third_walk, first_walk, apportion, move_subtree, execute_shifts | imports: numpy | [sklearn tree _reingold_tilford.py]",
    "role": "src",
    "loc": 140
  },
  {
    "id": "sklearn\\tree\\__init__.py",
    "summary": "Decision tree based models for classification and regression. | imports: _classes, _export | [sklearn tree __init__.py]",
    "role": "src",
    "loc": 19
  },
  {
    "id": "sklearn\\tree\\tests\\test_export.py",
    "summary": "Testing for export functions of decision trees (sklearn.tree.export). | functions: test_graphviz_toy, test_graphviz_feature_class_names_array_support, test_graphviz_errors, test_friedman_mse_in_graphviz, test_precision, test_export_text_errors | imports: io, textwrap, numpy, pytest | [sklearn tree t",
    "role": "tests",
    "loc": 509
  },
  {
    "id": "sklearn\\tree\\tests\\test_monotonic_tree.py",
    "summary": "No description | functions: test_monotonic_constraints_classifications, test_monotonic_constraints_regressions, test_multiclass_raises, test_multiple_output_raises, test_missing_values_raises, test_bad_monotonic_cst_raises | imports: numpy, pytest, sklearn | [sklearn tree tests test_monotonic_tree.p",
    "role": "tests",
    "loc": 360
  },
  {
    "id": "sklearn\\tree\\tests\\test_reingold_tilford.py",
    "summary": "No description | functions: test_buchheim, walk_tree | imports: numpy, pytest, sklearn | [sklearn tree tests test_reingold_tilford.py]",
    "role": "tests",
    "loc": 37
  },
  {
    "id": "sklearn\\tree\\tests\\test_tree.py",
    "summary": "Testing for the tree module (sklearn.tree). | classes: NonNativeEndiannessNumpyPickler | functions: assert_tree_equal, test_classification_toy, test_weighted_classification_toy, test_regression_toy, test_xor, test_iris | imports: copy, copyreg, io, pickle | [sklearn tree tests test_tree.py]",
    "role": "tests",
    "loc": 2072
  },
  {
    "id": "sklearn\\tree\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn tree tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\utils\\class_weight.py",
    "summary": "Utilities for handling weights based on class labels. | functions: compute_class_weight, compute_sample_weight | imports: numpy, scipy, _param_validation, validation | [sklearn utils class_weight.py]",
    "role": "src",
    "loc": 181
  },
  {
    "id": "sklearn\\utils\\deprecation.py",
    "summary": "Decorator to mark a function or class as deprecated. | classes: deprecated | functions: _is_deprecated, _deprecate_Xt_in_inverse_transform, _deprecate_force_all_finite | imports: functools, inspect | [sklearn utils deprecation.py]",
    "role": "src",
    "loc": 111
  },
  {
    "id": "sklearn\\utils\\discovery.py",
    "summary": "Utilities to discover scikit-learn objects. | functions: all_estimators, is_abstract, all_displays, _is_checked_function, all_functions | imports: inspect, pkgutil, importlib, operator | [sklearn utils discovery.py]",
    "role": "src",
    "loc": 203
  },
  {
    "id": "sklearn\\utils\\estimator_checks.py",
    "summary": "Various utilities to check the compatibility of estimators with scikit-learn API. | classes: _NotAnArray | functions: _raise_for_missing_tags, _yield_api_checks, _yield_checks, _yield_classifier_checks, _yield_regressor_checks, _yield_transformer_checks | imports: pickle, textwrap, copy, functools |",
    "role": "src",
    "loc": 4102
  },
  {
    "id": "sklearn\\utils\\extmath.py",
    "summary": "Utilities to perform optimal mathematical operations in scikit-learn. | functions: squared_norm, row_norms, fast_logdet, density, safe_sparse_dot, randomized_range_finder | imports: functools, numbers, numpy, scipy | [sklearn utils extmath.py]",
    "role": "src",
    "loc": 1055
  },
  {
    "id": "sklearn\\utils\\fixes.py",
    "summary": "Compatibility fixes for older version of python, numpy and scipy | functions: _object_dtype_isnan, _percentile, _mode, _sparse_linalg_cg, _sparse_min_max, _sparse_nan_min_max | imports: platform, struct, numpy, scipy | [sklearn utils fixes.py]",
    "role": "src",
    "loc": 303
  },
  {
    "id": "sklearn\\utils\\graph.py",
    "summary": "Graph utilities and algorithms. | functions: single_source_shortest_path_length, _fix_connected_components | imports: numpy, scipy, metrics, _param_validation | [sklearn utils graph.py]",
    "role": "src",
    "loc": 132
  },
  {
    "id": "sklearn\\utils\\metadata_routing.py",
    "summary": "Utilities to route metadata within scikit-learn estimators. | imports: _metadata_requests | [sklearn utils metadata_routing.py]",
    "role": "src",
    "loc": 12
  },
  {
    "id": "sklearn\\utils\\metaestimators.py",
    "summary": "Utilities for meta-estimators. | classes: _BaseComposition | functions: _safe_split | imports: abc, numpy, base, utils | [sklearn utils metaestimators.py]",
    "role": "src",
    "loc": 116
  },
  {
    "id": "sklearn\\utils\\multiclass.py",
    "summary": "Utilities to handle multiclass/multioutput target in classifiers. | functions: _unique_multiclass, _unique_indicator, unique_labels, _is_integral_float, is_multilabel, check_classification_targets | imports: numpy, scipy, utils, _unique | [sklearn utils multiclass.py]",
    "role": "src",
    "loc": 438
  },
  {
    "id": "sklearn\\utils\\optimize.py",
    "summary": "Our own implementation of the Newton algorithm | classes: _LineSearchError | functions: _line_search_wolfe12, _cg, _newton_cg, _check_optimize_result | imports: numpy, scipy, exceptions, fixes | [sklearn utils optimize.py]",
    "role": "src",
    "loc": 293
  },
  {
    "id": "sklearn\\utils\\parallel.py",
    "summary": "Customizations of :mod:`joblib` and :mod:`threadpoolctl` tools for scikit-learn | classes: Parallel, _FuncWrapper | functions: _with_config_and_warning_filters, delayed, delayed_function, _get_threadpool_controller, _threadpool_controller_decorator, decorator | imports: functools, joblib, threadpool",
    "role": "src",
    "loc": 127
  },
  {
    "id": "sklearn\\utils\\random.py",
    "summary": "Utilities for random sampling. | functions: _random_choice_csc | imports: array, numpy, scipy, _random | [sklearn utils random.py]",
    "role": "src",
    "loc": 74
  },
  {
    "id": "sklearn\\utils\\sparsefuncs.py",
    "summary": "A collection of utilities to work with sparse matrices and arrays. | functions: _raise_typeerror, _raise_error_wrong_axis, inplace_csr_column_scale, inplace_csr_row_scale, mean_variance_axis, incr_mean_variance_axis | imports: numpy, scipy, utils, sparsefuncs_fast | [sklearn utils sparsefuncs.py]",
    "role": "src",
    "loc": 595
  },
  {
    "id": "sklearn\\utils\\stats.py",
    "summary": "Compute weighted percentile | functions: _weighted_percentile, _averaged_weighted_percentile | imports: numpy, extmath | [sklearn utils stats.py]",
    "role": "src",
    "loc": 57
  },
  {
    "id": "sklearn\\utils\\validation.py",
    "summary": "Functions to validate input and parameters within scikit-learn estimators. | functions: _deprecate_positional_args, _inner_deprecate_positional_args, inner_f, _assert_all_finite, _assert_all_finite_element_wise, assert_all_finite | imports: numbers, operator, functools, inspect | [sklearn utils vali",
    "role": "src",
    "loc": 2297
  },
  {
    "id": "sklearn\\utils\\_arpack.py",
    "summary": "Initialize the starting vector for iteration in ARPACK functions. | functions: _init_arpack_v0 | imports: validation | [sklearn utils _arpack.py]",
    "role": "src",
    "loc": 24
  },
  {
    "id": "sklearn\\utils\\_array_api.py",
    "summary": "Tools to support array_api. | classes: _NumPyAPIWrapper | functions: yield_namespaces, yield_namespace_device_dtype_combinations, _check_array_api_dispatch, _single_array_device, device, size | imports: functools, numpy, scipy, _config | [sklearn utils _array_api.py]",
    "role": "src",
    "loc": 795
  },
  {
    "id": "sklearn\\utils\\_available_if.py",
    "summary": "Implements a conditional property using the descriptor protocol. | classes: _AvailableIfDescriptor | functions: available_if | imports: functools, types | [sklearn utils _available_if.py]",
    "role": "src",
    "loc": 72
  },
  {
    "id": "sklearn\\utils\\_bunch.py",
    "summary": "Container object exposing keys as attributes. | classes: Bunch | [sklearn utils _bunch.py]",
    "role": "src",
    "loc": 46
  },
  {
    "id": "sklearn\\utils\\_chunking.py",
    "summary": "Chunk generator, ``gen`` into lists of length ``chunksize``. The last | functions: chunk_generator, gen_batches, gen_even_slices, get_chunk_n_rows | imports: numbers, numpy, _config, _param_validation | [sklearn utils _chunking.py]",
    "role": "src",
    "loc": 150
  },
  {
    "id": "sklearn\\utils\\_encode.py",
    "summary": "Data class for missing data information | classes: MissingValues, _nandict, _NaNCounter | functions: _unique, _unique_np, _extract_missing, _map_to_integer, _unique_python, _encode | imports: numpy, _array_api, _missing | [sklearn utils _encode.py]",
    "role": "src",
    "loc": 288
  },
  {
    "id": "sklearn\\utils\\_estimator_html_repr.py",
    "summary": "Generate sequential ids with a prefix. | classes: _IDCounter, _VisualBlock, _HTMLDocumentationLinkMixin | functions: _get_css_style, _write_label_html, _get_visual_block, _write_estimator_html, estimator_html_repr | imports: html, inspect, io, string | [sklearn utils _estimator_html_repr.py]",
    "role": "src",
    "loc": 462
  },
  {
    "id": "sklearn\\utils\\_indexing.py",
    "summary": "Index an array or scipy.sparse consistently across NumPy version. | functions: _array_indexing, _pandas_indexing, _list_indexing, _polars_indexing, _determine_key_type, _safe_indexing | imports: numbers, numpy, scipy, _array_api | [sklearn utils _indexing.py]",
    "role": "src",
    "loc": 525
  },
  {
    "id": "sklearn\\utils\\_joblib.py",
    "summary": "No description | imports: joblib | [sklearn utils _joblib.py]",
    "role": "src",
    "loc": 33
  },
  {
    "id": "sklearn\\utils\\_mask.py",
    "summary": "No description | functions: _get_dense_mask, _get_mask, safe_mask, axis0_safe_slice, indices_to_mask | imports: numpy, scipy, _missing, _param_validation | [sklearn utils _mask.py]",
    "role": "src",
    "loc": 134
  },
  {
    "id": "sklearn\\utils\\_metadata_requests.py",
    "summary": "Metadata Routing Utility | classes: _RoutingNotSupportedMixin, MethodMetadataRequest, MetadataRequest, MethodMapping, MetadataRouter, RequestMethod | functions: _routing_enabled, _raise_for_params, _raise_for_unsupported_routing, request_is_alias, request_is_valid, get_routing_for_object | imports: ",
    "role": "src",
    "loc": 1175
  },
  {
    "id": "sklearn\\utils\\_missing.py",
    "summary": "Test if x is NaN. | functions: is_scalar_nan, is_pandas_na | imports: numbers, pandas | [sklearn utils _missing.py]",
    "role": "src",
    "loc": 52
  },
  {
    "id": "sklearn\\utils\\_mocking.py",
    "summary": "Parameters | classes: ArraySlicingWrapper, MockDataFrame, CheckingClassifier, NoSampleWeightWrapper, _MockEstimatorOnOffPrediction | functions: _check_response, check | imports: numpy, base, utils, metaestimators | [sklearn utils _mocking.py]",
    "role": "src",
    "loc": 328
  },
  {
    "id": "sklearn\\utils\\_optional_dependencies.py",
    "summary": "Raise ImportError with detailed error message if mpl is not installed. | functions: check_matplotlib_support, check_pandas_support | imports: matplotlib, pandas | [sklearn utils _optional_dependencies.py]",
    "role": "src",
    "loc": 34
  },
  {
    "id": "sklearn\\utils\\_param_validation.py",
    "summary": "Custom exception to be raised when the parameter of a class/method/function | classes: InvalidParameterError, RealNotInt, _Constraint, _InstancesOf, _NoneConstraint, _NanConstraint | functions: validate_parameter_constraints, make_constraint, validate_params, decorator, wrapper, _type_name | imports",
    "role": "src",
    "loc": 672
  },
  {
    "id": "sklearn\\utils\\_plotting.py",
    "summary": "Mixin class to be used in Displays requiring a binary classifier. | classes: _BinaryClassifierCurveDisplayMixin | functions: _validate_score_name, _interval_max_min_ratio, _validate_style_kwargs, _despine | imports: numpy, _optional_dependencies, _response, multiclass | [sklearn utils _plotting.py]",
    "role": "src",
    "loc": 143
  },
  {
    "id": "sklearn\\utils\\_pprint.py",
    "summary": "This module contains the _EstimatorPrettyPrinter class used in | classes: KeyValTuple, KeyValTupleParam, _EstimatorPrettyPrinter | functions: _changed_params, has_changed, _safe_repr | imports: inspect, pprint, _config, base | [sklearn utils _pprint.py]",
    "role": "src",
    "loc": 348
  },
  {
    "id": "sklearn\\utils\\_response.py",
    "summary": "Utilities to get the response values of a classifier or a regressor. | functions: _process_predict_proba, _process_decision_function, _get_response_values, _get_response_values_binary | imports: numpy, base, multiclass, validation | [sklearn utils _response.py]",
    "role": "src",
    "loc": 246
  },
  {
    "id": "sklearn\\utils\\_set_output.py",
    "summary": "Check library is installed. | classes: ContainerAdapterProtocol, PandasAdapter, PolarsAdapter, ContainerAdaptersManager, _SetOutputMixin | functions: check_library_installed, get_columns, _get_adapter_from_container, _get_container_adapter, _get_output_config, _wrap_data_with_container | imports: im",
    "role": "src",
    "loc": 337
  },
  {
    "id": "sklearn\\utils\\_show_versions.py",
    "summary": "Utility methods to print system info for debugging | functions: _get_sys_info, _get_deps_info, show_versions | imports: platform, threadpoolctl, _openmp_helpers, importlib | [sklearn utils _show_versions.py]",
    "role": "src",
    "loc": 83
  },
  {
    "id": "sklearn\\utils\\_tags.py",
    "summary": "Tags for the input data. | classes: InputTags, TargetTags, TransformerTags, ClassifierTags, RegressorTags, Tags | functions: default_tags, _find_tags_provider, get_tags, _safe_tags, _to_new_tags, _to_old_tags | imports: dataclasses, fixes | [sklearn utils _tags.py]",
    "role": "src",
    "loc": 488
  },
  {
    "id": "sklearn\\utils\\_testing.py",
    "summary": "Testing utilities. | classes: _IgnoreWarnings, TempMemmap, _Raises, MinimalClassifier, MinimalRegressor, MinimalTransformer | functions: ignore_warnings, assert_allclose, assert_allclose_dense_sparse, set_random_state, _is_numpydoc, check_skip_network | imports: atexit, functools, importlib, inspect",
    "role": "src",
    "loc": 1119
  },
  {
    "id": "sklearn\\utils\\_unique.py",
    "summary": "Attach unique values of y to y and return the result. | functions: _attach_unique, attach_unique, _cached_unique, cached_unique | imports: numpy, sklearn | [sklearn utils _unique.py]",
    "role": "src",
    "loc": 75
  },
  {
    "id": "sklearn\\utils\\_user_interface.py",
    "summary": "Create one line message for logging purposes. | functions: _message_with_time, _print_elapsed_time | imports: timeit | [sklearn utils _user_interface.py]",
    "role": "src",
    "loc": 41
  },
  {
    "id": "sklearn\\utils\\__init__.py",
    "summary": "Various utilities to help with development. | classes: parallel_backend | functions: __getattr__, tosequence | imports: platform, numpy, exceptions, _bunch | [sklearn utils __init__.py]",
    "role": "src",
    "loc": 111
  },
  {
    "id": "sklearn\\utils\\tests\\test_arpack.py",
    "summary": "No description | functions: test_init_arpack_v0 | imports: pytest, numpy, sklearn | [sklearn utils tests test_arpack.py]",
    "role": "tests",
    "loc": 10
  },
  {
    "id": "sklearn\\utils\\tests\\test_arrayfuncs.py",
    "summary": "No description | functions: test_min_pos, test_min_pos_no_positive, test_all_with_any_reduction_axis_1 | imports: numpy, pytest, sklearn | [sklearn utils tests test_arrayfuncs.py]",
    "role": "tests",
    "loc": 23
  },
  {
    "id": "sklearn\\utils\\tests\\test_array_api.py",
    "summary": "Check that get_namespace returns NumPy wrapper | classes: Device, Array, SimpleEstimator | functions: test_get_namespace_ndarray_default, test_get_namespace_ndarray_creation_device, test_get_namespace_ndarray_with_dispatch, test_get_namespace_array_api, mock_getenv, test_asarray_with_order | imports",
    "role": "tests",
    "loc": 489
  },
  {
    "id": "sklearn\\utils\\tests\\test_bunch.py",
    "summary": "Check that bunch raises deprecation message with `__getattr__`. | functions: test_bunch_attribute_deprecation | imports: numpy, pytest, sklearn | [sklearn utils tests test_bunch.py]",
    "role": "tests",
    "loc": 22
  },
  {
    "id": "sklearn\\utils\\tests\\test_chunking.py",
    "summary": "No description | functions: test_gen_even_slices, test_get_chunk_n_rows, test_get_chunk_n_rows_warns | imports: pytest, sklearn | [sklearn utils tests test_chunking.py]",
    "role": "tests",
    "loc": 60
  },
  {
    "id": "sklearn\\utils\\tests\\test_class_weight.py",
    "summary": "No description | functions: test_compute_class_weight, test_compute_class_weight_not_present, test_compute_class_weight_dict, test_compute_class_weight_invariance, test_compute_class_weight_balanced_negative, test_compute_class_weight_balanced_sample_weight_equivalence | imports: numpy, pytest, skle",
    "role": "tests",
    "loc": 223
  },
  {
    "id": "sklearn\\utils\\tests\\test_cython_blas.py",
    "summary": "No description | functions: _numpy_to_cython, _no_op, test_dot, test_asum, test_axpy, test_nrm2 | imports: numpy, pytest, sklearn | [sklearn utils tests test_cython_blas.py]",
    "role": "tests",
    "loc": 170
  },
  {
    "id": "sklearn\\utils\\tests\\test_deprecation.py",
    "summary": "No description | classes: MockClass1, MockClass2, MockClass3, MockClass4, MockClass5, MockClass6 | functions: mock_function, test_deprecated, test_is_deprecated, test_pickle, test_deprecated_class_signature | imports: pickle, inspect, pytest, sklearn | [sklearn utils tests test_deprecation.py]",
    "role": "tests",
    "loc": 64
  },
  {
    "id": "sklearn\\utils\\tests\\test_encode.py",
    "summary": "No description | functions: test_encode_util, test_encode_with_check_unknown, _assert_check_unknown, test_check_unknown, test_check_unknown_missing_values, test_unique_util_missing_values_objects | imports: pickle, numpy, pytest, sklearn | [sklearn utils tests test_encode.py]",
    "role": "tests",
    "loc": 216
  },
  {
    "id": "sklearn\\utils\\tests\\test_estimator_checks.py",
    "summary": "Exception class to raise if estimator is used before fitting. | classes: CorrectNotFittedError, BaseBadClassifier, ChangesDict, SetsWrongAttribute, ChangesWrongAttribute, ChangesUnderscoreAttribute | functions: test_check_array_api_input, test_not_an_array_array_function, test_check_fit_score_takes_",
    "role": "tests",
    "loc": 1245
  },
  {
    "id": "sklearn\\utils\\tests\\test_estimator_html_repr.py",
    "summary": "No description | classes: MyEstimator, FooBar | functions: dummy_function, test_write_label_html, test_get_visual_block_single_str_none, test_get_visual_block_single_estimator, test_get_visual_block_pipeline, test_get_visual_block_feature_union | imports: html, locale, types, functools | [sklearn ut",
    "role": "tests",
    "loc": 458
  },
  {
    "id": "sklearn\\utils\\tests\\test_extmath.py",
    "summary": "No description | functions: test_density, test_uniform_weights, test_random_weights, test_randomized_svd_low_rank_all_dtypes, test_randomized_eigsh, test_randomized_eigsh_compared_to_others | imports: numpy, pytest, scipy, sklearn | [sklearn utils tests test_extmath.py]",
    "role": "tests",
    "loc": 755
  },
  {
    "id": "sklearn\\utils\\tests\\test_fast_dict.py",
    "summary": "Test fast_dict. | functions: test_int_float_dict, test_int_float_dict_argmin, test_to_arrays | imports: numpy, sklearn | [sklearn utils tests test_fast_dict.py]",
    "role": "tests",
    "loc": 32
  },
  {
    "id": "sklearn\\utils\\tests\\test_fixes.py",
    "summary": "No description | functions: test_object_dtype_isnan, test_smallest_admissible_index_dtype_max_val, test_smallest_admissible_index_dtype_without_checking_contents, test_smallest_admissible_index_dtype_by_checking_contents, test_smallest_admissible_index_dtype_error | imports: numpy, pytest, sklearn |",
    "role": "tests",
    "loc": 126
  },
  {
    "id": "sklearn\\utils\\tests\\test_graph.py",
    "summary": "No description | functions: test_fix_connected_components, test_fix_connected_components_precomputed, test_fix_connected_components_wrong_mode, test_fix_connected_components_connectivity_mode, test_fix_connected_components_distance_mode | imports: numpy, pytest, scipy, sklearn | [sklearn utils tests",
    "role": "tests",
    "loc": 54
  },
  {
    "id": "sklearn\\utils\\tests\\test_indexing.py",
    "summary": "Check _safe_indexing for polars as expected. | classes: MockDataFrame | functions: test_polars_indexing, test_determine_key_type, test_determine_key_type_error, test_determine_key_type_slice_error, test_determine_key_type_array_api, test_safe_indexing_2d_container_axis_0 | imports: copy, unittest, n",
    "role": "tests",
    "loc": 496
  },
  {
    "id": "sklearn\\utils\\tests\\test_mask.py",
    "summary": "No description | functions: test_safe_mask | imports: pytest, sklearn | [sklearn utils tests test_mask.py]",
    "role": "tests",
    "loc": 14
  },
  {
    "id": "sklearn\\utils\\tests\\test_metaestimators.py",
    "summary": "This estimator's `available` parameter toggles the presence of a method | classes: AvailableParameterEstimator | functions: test_available_if_docstring, test_available_if, test_available_if_unbound_method, test_available_if_methods_can_be_pickled | imports: pickle, pytest, sklearn | [sklearn utils t",
    "role": "tests",
    "loc": 43
  },
  {
    "id": "sklearn\\utils\\tests\\test_missing.py",
    "summary": "No description | functions: test_is_scalar_nan | imports: numpy, pytest, sklearn | [sklearn utils tests test_missing.py]",
    "role": "tests",
    "loc": 23
  },
  {
    "id": "sklearn\\utils\\tests\\test_mocking.py",
    "summary": "No description | functions: iris, _success, _fail, test_check_on_fit_success, test_check_on_fit_fail, test_check_X_on_predict_success | imports: numpy, pytest, scipy, sklearn | [sklearn utils tests test_mocking.py]",
    "role": "tests",
    "loc": 159
  },
  {
    "id": "sklearn\\utils\\tests\\test_multiclass.py",
    "summary": "No description | functions: _generate_sparse, test_unique_labels, test_unique_labels_non_specific, test_unique_labels_mixed_types, test_is_multilabel, test_is_multilabel_array_api_compliance | imports: numpy, pytest, scipy, sklearn | [sklearn utils tests test_multiclass.py]",
    "role": "tests",
    "loc": 488
  },
  {
    "id": "sklearn\\utils\\tests\\test_murmurhash.py",
    "summary": "No description | functions: test_mmhash3_int, test_mmhash3_int_array, test_mmhash3_bytes, test_mmhash3_unicode, test_no_collision_on_byte_range, test_uniform_distribution | imports: numpy, sklearn | [sklearn utils tests test_murmurhash.py]",
    "role": "tests",
    "loc": 48
  },
  {
    "id": "sklearn\\utils\\tests\\test_optimize.py",
    "summary": "No description | functions: test_newton_cg, func, grad, hess, grad_hess, test_newton_cg_verbosity | imports: numpy, pytest, scipy, sklearn | [sklearn utils tests test_optimize.py]",
    "role": "tests",
    "loc": 129
  },
  {
    "id": "sklearn\\utils\\tests\\test_parallel.py",
    "summary": "No description | classes: TransformerRequiredDataFrame | functions: get_working_memory, test_configuration_passes_through_to_joblib, test_parallel_delayed_warnings, test_dispatch_config_parallel, raise_warning, test_filter_warning_propagates | imports: joblib, numpy, pytest, sklearn | [sklearn utils",
    "role": "tests",
    "loc": 109
  },
  {
    "id": "sklearn\\utils\\tests\\test_param_validation.py",
    "summary": "A class to test the _InstancesOf constraint and the validation of methods. | classes: _Class, _Estimator, _Good, _Bad, SomeType, ThirdPartyEstimator | functions: _func, test_interval_range, test_interval_large_integers, test_interval_inf_in_bounds, test_nan_not_in_interval, test_interval_errors | im",
    "role": "tests",
    "loc": 629
  },
  {
    "id": "sklearn\\utils\\tests\\test_plotting.py",
    "summary": "No description | functions: metric, neg_metric, test_validate_score_name, test_inverval_max_min_ratio, test_validate_style_kwargs, test_validate_style_kwargs_error | imports: numpy, pytest, sklearn | [sklearn utils tests test_plotting.py]",
    "role": "tests",
    "loc": 115
  },
  {
    "id": "sklearn\\utils\\tests\\test_pprint.py",
    "summary": "No description | classes: LogisticRegression, StandardScaler, RFE, GridSearchCV, CountVectorizer, Pipeline | functions: test_basic, test_changed_only, test_pipeline, test_deeply_nested, test_print_estimator_max_depth, test_gridsearch | imports: pprint, numpy, pytest, sklearn | [sklearn utils tests t",
    "role": "tests",
    "loc": 554
  },
  {
    "id": "sklearn\\utils\\tests\\test_random.py",
    "summary": "No description | functions: test_invalid_sample_without_replacement_algorithm, test_sample_without_replacement_algorithms, sample_without_replacement_method, check_edge_case_of_sample_int, check_sample_int, check_sample_int_distribution | imports: numpy, pytest, scipy, sklearn | [sklearn utils tests",
    "role": "tests",
    "loc": 119
  },
  {
    "id": "sklearn\\utils\\tests\\test_response.py",
    "summary": "Check the error message with regressor an not supported response | functions: test_get_response_values_regressor_error, test_get_response_values_regressor, test_get_response_values_outlier_detection, test_get_response_values_classifier_unknown_pos_label, test_get_response_values_classifier_inconsist",
    "role": "tests",
    "loc": 320
  },
  {
    "id": "sklearn\\utils\\tests\\test_seq_dataset.py",
    "summary": "No description | functions: assert_csr_equal_values, _make_dense_dataset, _make_sparse_dataset, _make_dense_datasets, _make_sparse_datasets, _make_fused_types_datasets | imports: numpy, pytest, sklearn | [sklearn utils tests test_seq_dataset.py]",
    "role": "tests",
    "loc": 138
  },
  {
    "id": "sklearn\\utils\\tests\\test_set_output.py",
    "summary": "Check pandas adapter has expected behavior. | classes: EstimatorWithoutSetOutputAndWithoutTransform, EstimatorNoSetOutputWithTransform, EstimatorWithSetOutput, EstimatorNoSetOutputWithTransformNoFeatureNamesOut, EstimatorWithSetOutputNoAutoWrap, BadEstimator | functions: test_pandas_adapter, test_po",
    "role": "tests",
    "loc": 314
  },
  {
    "id": "sklearn\\utils\\tests\\test_shortest_path.py",
    "summary": "No description | functions: floyd_warshall_slow, generate_graph, test_shortest_path | imports: numpy, sklearn | [sklearn utils tests test_shortest_path.py]",
    "role": "tests",
    "loc": 36
  },
  {
    "id": "sklearn\\utils\\tests\\test_show_versions.py",
    "summary": "No description | functions: test_get_sys_info, test_get_deps_info, test_show_versions | imports: threadpoolctl, sklearn | [sklearn utils tests test_show_versions.py]",
    "role": "tests",
    "loc": 29
  },
  {
    "id": "sklearn\\utils\\tests\\test_sparsefuncs.py",
    "summary": "No description | functions: test_mean_variance_axis0, test_mean_variance_axis0_precision, test_mean_variance_axis1, test_incr_mean_variance_axis_weighted_axis1, test_incr_mean_variance_axis_weighted_axis0, test_incr_mean_variance_axis | imports: numpy, pytest, scipy, sklearn | [sklearn utils tests t",
    "role": "tests",
    "loc": 826
  },
  {
    "id": "sklearn\\utils\\tests\\test_stats.py",
    "summary": "No description | functions: test_averaged_weighted_median, test_averaged_weighted_percentile, test_averaged_and_weighted_percentile, test_weighted_percentile, test_weighted_percentile_equal, test_weighted_percentile_zero_weight | imports: numpy, pytest, sklearn | [sklearn utils tests test_stats.py]",
    "role": "tests",
    "loc": 92
  },
  {
    "id": "sklearn\\utils\\tests\\test_tags.py",
    "summary": "No description | classes: NoTagsEstimator, ClassifierEstimator, EmptyTransformer, EmptyRegressor, MoreTagsEstimator, MyTags | functions: test_requires_y, test_no___sklearn_tags__with_more_tags, test_tag_test_passes_with_inheritance, test_get_tags_backward_compatibility, test_safe_tags_backward_compa",
    "role": "tests",
    "loc": 544
  },
  {
    "id": "sklearn\\utils\\tests\\test_testing.py",
    "summary": "No description | classes: Klass, MockEst, MockMetaEstimator, RegistrationCounter | functions: test_set_random_state, test_assert_allclose_dense_sparse, test_ignore_warning, _warning_function, _multiple_warning_function, decorator_no_warning | imports: atexit, numpy, pytest, scipy | [sklearn utils te",
    "role": "tests",
    "loc": 923
  },
  {
    "id": "sklearn\\utils\\tests\\test_typedefs.py",
    "summary": "Check that the types defined in _typedefs correspond to the expected | functions: test_types | imports: numpy, pytest, sklearn | [sklearn utils tests test_typedefs.py]",
    "role": "tests",
    "loc": 22
  },
  {
    "id": "sklearn\\utils\\tests\\test_unique.py",
    "summary": "No description | functions: test_attach_unique_attaches_unique_to_array, test_cached_unique_returns_cached_unique, test_attach_unique_not_ndarray, test_attach_unique_returns_view, test_attach_unique_return_tuple, test_check_array_keeps_unique | imports: numpy, sklearn | [sklearn utils tests test_uni",
    "role": "tests",
    "loc": 40
  },
  {
    "id": "sklearn\\utils\\tests\\test_user_interface.py",
    "summary": "No description | functions: test_message_with_time, test_print_elapsed_time | imports: string, timeit, pytest, sklearn | [sklearn utils tests test_user_interface.py]",
    "role": "tests",
    "loc": 56
  },
  {
    "id": "sklearn\\utils\\tests\\test_utils.py",
    "summary": "No description | functions: test_is_pypy_deprecated, test_tosequence_deprecated, test_parallel_backend_deprecated | imports: joblib, pytest, sklearn | [sklearn utils tests test_utils.py]",
    "role": "tests",
    "loc": 15
  },
  {
    "id": "sklearn\\utils\\tests\\test_validation.py",
    "summary": "Tests for input validation functions | classes: TestClassWithDeprecatedFitMethod, Estimator, StatelessEstimator, MyEstimator, DummyMemory, WrongDummyMemory | functions: test_make_rng, test_as_float_array, test_as_float_array_nan, test_np_matrix, test_memmap, test_ordering | imports: numbers, operato",
    "role": "tests",
    "loc": 1832
  },
  {
    "id": "sklearn\\utils\\tests\\test_weight_vector.py",
    "summary": "Check the `dtype` consistency of `WeightVector`. | functions: test_type_invariance | imports: numpy, pytest, sklearn | [sklearn utils tests test_weight_vector.py]",
    "role": "tests",
    "loc": 20
  },
  {
    "id": "sklearn\\utils\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn utils tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\utils\\_test_common\\instance_generator.py",
    "summary": "No description | functions: _tested_estimators, _construct_instances, _get_check_estimator_ids, _yield_instances_for_check, _get_expected_failed_checks | imports: functools, inspect, sklearn | [sklearn utils _test_common instance_generator.py]",
    "role": "src",
    "loc": 1170
  },
  {
    "id": "sklearn\\utils\\_test_common\\__init__.py",
    "summary": "Package initializer | [sklearn utils _test_common __init__.py]",
    "role": "src",
    "loc": 0
  },
  {
    "id": "sklearn\\_build_utils\\tempita.py",
    "summary": "Process tempita templated file and write out the result. | functions: process_tempita, main | imports: argparse, Cython | [sklearn _build_utils tempita.py]",
    "role": "src",
    "loc": 39
  },
  {
    "id": "sklearn\\_build_utils\\version.py",
    "summary": "Extract version number from __init__.py | [sklearn _build_utils version.py]",
    "role": "src",
    "loc": 7
  },
  {
    "id": "sklearn\\_build_utils\\__init__.py",
    "summary": "Package initializer | [sklearn _build_utils __init__.py]",
    "role": "src",
    "loc": 0
  },
  {
    "id": "sklearn\\_loss\\link.py",
    "summary": "Module contains classes for invertible (and differentiable) link functions. | classes: Interval, BaseLink, IdentityLink, LogLink, LogitLink, HalfLogitLink | functions: _inclusive_low_high | imports: abc, dataclasses, numpy, scipy | [sklearn _loss link.py]",
    "role": "src",
    "loc": 201
  },
  {
    "id": "sklearn\\_loss\\loss.py",
    "summary": "This module contains loss classes suitable for fitting. | classes: BaseLoss, HalfSquaredError, AbsoluteError, PinballLoss, HuberLoss, HalfPoissonLoss | imports: numbers, numpy, scipy, utils | [sklearn _loss loss.py]",
    "role": "src",
    "loc": 916
  },
  {
    "id": "sklearn\\_loss\\__init__.py",
    "summary": "The :mod:`sklearn._loss` module includes loss function classes suitable for | imports: loss | [sklearn _loss __init__.py]",
    "role": "src",
    "loc": 28
  },
  {
    "id": "sklearn\\_loss\\tests\\test_link.py",
    "summary": "Test that interval with low > high raises ValueError. | functions: test_interval_raises, test_is_in_range, test_link_inverse_identity, test_link_out_argument | imports: numpy, pytest, sklearn | [sklearn _loss tests test_link.py]",
    "role": "tests",
    "loc": 83
  },
  {
    "id": "sklearn\\_loss\\tests\\test_loss.py",
    "summary": "No description | functions: loss_instance_name, random_y_true_raw_prediction, numerical_derivative, test_loss_boundary, test_loss_boundary_y_true, test_loss_boundary_y_pred | imports: pickle, numpy, pytest, scipy | [sklearn _loss tests test_loss.py]",
    "role": "tests",
    "loc": 1138
  },
  {
    "id": "sklearn\\_loss\\tests\\__init__.py",
    "summary": "Package initializer | [sklearn _loss tests __init__.py]",
    "role": "tests",
    "loc": 0
  },
  {
    "id": "sklearn\\__check_build\\__init__.py",
    "summary": "Module to give helpful messages to the user that did not | functions: raise_build_error | imports: _check_build | [sklearn __check_build __init__.py]",
    "role": "src",
    "loc": 39
  }
]